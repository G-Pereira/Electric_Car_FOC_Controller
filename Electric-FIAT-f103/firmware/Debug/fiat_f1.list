
fiat_f1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000999c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  08009ab0  08009ab0  00019ab0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f10  08009f10  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  08009f10  08009f10  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009f10  08009f10  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f10  08009f10  00019f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f14  08009f14  00019f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08009f18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cd4  200001f4  0800a10c  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ec8  0800a10c  00020ec8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f7e  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002fa5  00000000  00000000  0003419b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001228  00000000  00000000  00037140  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010a0  00000000  00000000  00038368  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000045f8  00000000  00000000  00039408  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f2c5  00000000  00000000  0003da00  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007c563  00000000  00000000  0004ccc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c9228  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005958  00000000  00000000  000c92a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	08009a94 	.word	0x08009a94

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	08009a94 	.word	0x08009a94

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <motorSpeed>:

#include "main.h"
#include "encoderMode.h"


float motorSpeed (uint32_t *cnt1, uint32_t *tick, TIM_HandleTypeDef htim3){
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b086      	sub	sp, #24
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
 8000cae:	6039      	str	r1, [r7, #0]
 8000cb0:	f107 0120 	add.w	r1, r7, #32
 8000cb4:	e881 000c 	stmia.w	r1, {r2, r3}

	uint32_t cnt2 = __HAL_TIM_GET_COUNTER(&htim3);
 8000cb8:	6a3b      	ldr	r3, [r7, #32]
 8000cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cbc:	613b      	str	r3, [r7, #16]
	int diff = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]

	printf("cnt1 = %lu counter2 = %lu\n",*cnt1,cnt2);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	482c      	ldr	r0, [pc, #176]	; (8000d7c <motorSpeed+0xd8>)
 8000ccc:	f006 ffaa 	bl	8007c24 <iprintf>

	if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)){
 8000cd0:	6a3b      	ldr	r3, [r7, #32]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f003 0310 	and.w	r3, r3, #16
 8000cd8:	2b10      	cmp	r3, #16
 8000cda:	d113      	bne.n	8000d04 <motorSpeed+0x60>
		if(cnt2 < *cnt1)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d205      	bcs.n	8000cf2 <motorSpeed+0x4e>
			diff = *cnt1 - cnt2;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	e01b      	b.n	8000d2a <motorSpeed+0x86>
		else
			diff = (65535 - cnt2) + *cnt1;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000cfe:	33ff      	adds	r3, #255	; 0xff
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	e012      	b.n	8000d2a <motorSpeed+0x86>
	} else {
		if(cnt2 > *cnt1)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d905      	bls.n	8000d1a <motorSpeed+0x76>
			diff = cnt2 - *cnt1;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	e007      	b.n	8000d2a <motorSpeed+0x86>
		else
			diff = (65535 - *cnt1) + cnt2;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000d26:	33ff      	adds	r3, #255	; 0xff
 8000d28:	617b      	str	r3, [r7, #20]
	}



	printf("diff = %d\n", diff);
 8000d2a:	6979      	ldr	r1, [r7, #20]
 8000d2c:	4814      	ldr	r0, [pc, #80]	; (8000d80 <motorSpeed+0xdc>)
 8000d2e:	f006 ff79 	bl	8007c24 <iprintf>
	float speed = ((diff/4)*60);  // change when sysTimer configured
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	da00      	bge.n	8000d3a <motorSpeed+0x96>
 8000d38:	3303      	adds	r3, #3
 8000d3a:	109b      	asrs	r3, r3, #2
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4613      	mov	r3, r2
 8000d40:	011b      	lsls	r3, r3, #4
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff ff58 	bl	8000bfc <__aeabi_i2f>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	60fb      	str	r3, [r7, #12]

	*tick = HAL_GetTick();
 8000d50:	f001 fb3e 	bl	80023d0 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	601a      	str	r2, [r3, #0]
	*cnt1 = cnt2;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	601a      	str	r2, [r3, #0]
	//printf("aqui %f\n",speed);
	return speed*2;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4619      	mov	r1, r3
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fe95 	bl	8000a94 <__addsf3>
 8000d6a:	4603      	mov	r3, r0
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d76:	b002      	add	sp, #8
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	08009ab0 	.word	0x08009ab0
 8000d80:	08009acc 	.word	0x08009acc

08000d84 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d8e:	4802      	ldr	r0, [pc, #8]	; (8000d98 <SELECT+0x14>)
 8000d90:	f002 f88e 	bl	8002eb0 <HAL_GPIO_WritePin>
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40010c00 	.word	0x40010c00

08000d9c <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000da0:	2201      	movs	r2, #1
 8000da2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000da6:	4802      	ldr	r0, [pc, #8]	; (8000db0 <DESELECT+0x14>)
 8000da8:	f002 f882 	bl	8002eb0 <HAL_GPIO_WritePin>
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40010c00 	.word	0x40010c00

08000db4 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8000dbe:	bf00      	nop
 8000dc0:	4808      	ldr	r0, [pc, #32]	; (8000de4 <SPI_TxByte+0x30>)
 8000dc2:	f003 f8b4 	bl	8003f2e <HAL_SPI_GetState>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d1f9      	bne.n	8000dc0 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 8000dcc:	1df9      	adds	r1, r7, #7
 8000dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	4803      	ldr	r0, [pc, #12]	; (8000de4 <SPI_TxByte+0x30>)
 8000dd6:	f002 fdd4 	bl	8003982 <HAL_SPI_Transmit>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000250 	.word	0x20000250

08000de8 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000dee:	23ff      	movs	r3, #255	; 0xff
 8000df0:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 8000df6:	bf00      	nop
 8000df8:	4809      	ldr	r0, [pc, #36]	; (8000e20 <SPI_RxByte+0x38>)
 8000dfa:	f003 f898 	bl	8003f2e <HAL_SPI_GetState>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d1f9      	bne.n	8000df8 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 8000e04:	1dba      	adds	r2, r7, #6
 8000e06:	1df9      	adds	r1, r7, #7
 8000e08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	2301      	movs	r3, #1
 8000e10:	4803      	ldr	r0, [pc, #12]	; (8000e20 <SPI_RxByte+0x38>)
 8000e12:	f002 feea 	bl	8003bea <HAL_SPI_TransmitReceive>
  
  return data;
 8000e16:	79bb      	ldrb	r3, [r7, #6]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000250 	.word	0x20000250

08000e24 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000e2c:	f7ff ffdc 	bl	8000de8 <SPI_RxByte>
 8000e30:	4603      	mov	r3, r0
 8000e32:	461a      	mov	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	701a      	strb	r2, [r3, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <SD_ReadyWait+0x34>)
 8000e48:	2232      	movs	r2, #50	; 0x32
 8000e4a:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8000e4c:	f7ff ffcc 	bl	8000de8 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8000e50:	f7ff ffca 	bl	8000de8 <SPI_RxByte>
 8000e54:	4603      	mov	r3, r0
 8000e56:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	2bff      	cmp	r3, #255	; 0xff
 8000e5c:	d004      	beq.n	8000e68 <SD_ReadyWait+0x28>
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <SD_ReadyWait+0x34>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1f3      	bne.n	8000e50 <SD_ReadyWait+0x10>
  
  return res;
 8000e68:	79fb      	ldrb	r3, [r7, #7]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000a58 	.word	0x20000a58

08000e78 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000e7e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000e82:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8000e84:	f7ff ff8a 	bl	8000d9c <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8000e88:	2300      	movs	r3, #0
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	e005      	b.n	8000e9a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000e8e:	20ff      	movs	r0, #255	; 0xff
 8000e90:	f7ff ff90 	bl	8000db4 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	3301      	adds	r3, #1
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	2b09      	cmp	r3, #9
 8000e9e:	ddf6      	ble.n	8000e8e <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8000ea0:	f7ff ff70 	bl	8000d84 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8000ea4:	2340      	movs	r3, #64	; 0x40
 8000ea6:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000eb8:	2395      	movs	r3, #149	; 0x95
 8000eba:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	e009      	b.n	8000ed6 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000ec2:	1d3a      	adds	r2, r7, #4
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ff72 	bl	8000db4 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	2b05      	cmp	r3, #5
 8000eda:	ddf2      	ble.n	8000ec2 <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8000edc:	e002      	b.n	8000ee4 <SD_PowerOn+0x6c>
  {
    Count--;
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000ee4:	f7ff ff80 	bl	8000de8 <SPI_RxByte>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d002      	beq.n	8000ef4 <SD_PowerOn+0x7c>
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d1f4      	bne.n	8000ede <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8000ef4:	f7ff ff52 	bl	8000d9c <DESELECT>
  SPI_TxByte(0XFF);
 8000ef8:	20ff      	movs	r0, #255	; 0xff
 8000efa:	f7ff ff5b 	bl	8000db4 <SPI_TxByte>
  
  PowerFlag = 1;
 8000efe:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <SD_PowerOn+0x94>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	701a      	strb	r2, [r3, #0]
}
 8000f04:	bf00      	nop
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000211 	.word	0x20000211

08000f10 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <SD_PowerOff+0x14>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000211 	.word	0x20000211

08000f28 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000f2c:	4b02      	ldr	r3, [pc, #8]	; (8000f38 <SD_CheckPower+0x10>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr
 8000f38:	20000211 	.word	0x20000211

08000f3c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8000f46:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <SD_RxDataBlock+0x68>)
 8000f48:	220a      	movs	r2, #10
 8000f4a:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8000f4c:	f7ff ff4c 	bl	8000de8 <SPI_RxByte>
 8000f50:	4603      	mov	r3, r0
 8000f52:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	2bff      	cmp	r3, #255	; 0xff
 8000f58:	d104      	bne.n	8000f64 <SD_RxDataBlock+0x28>
 8000f5a:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <SD_RxDataBlock+0x68>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d1f3      	bne.n	8000f4c <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	2bfe      	cmp	r3, #254	; 0xfe
 8000f68:	d001      	beq.n	8000f6e <SD_RxDataBlock+0x32>
    return FALSE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e016      	b.n	8000f9c <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	1c5a      	adds	r2, r3, #1
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ff55 	bl	8000e24 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	1c5a      	adds	r2, r3, #1
 8000f7e:	607a      	str	r2, [r7, #4]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ff4f 	bl	8000e24 <SPI_RxBytePtr>
  } while(btr -= 2);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d1ed      	bne.n	8000f6e <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8000f92:	f7ff ff29 	bl	8000de8 <SPI_RxByte>
  SPI_RxByte();
 8000f96:	f7ff ff27 	bl	8000de8 <SPI_RxByte>
  
  return TRUE;
 8000f9a:	2301      	movs	r3, #1
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000a59 	.word	0x20000a59

08000fa8 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000fb8:	f7ff ff42 	bl	8000e40 <SD_ReadyWait>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2bff      	cmp	r3, #255	; 0xff
 8000fc0:	d001      	beq.n	8000fc6 <SD_TxDataBlock+0x1e>
    return FALSE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e040      	b.n	8001048 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8000fc6:	78fb      	ldrb	r3, [r7, #3]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fef3 	bl	8000db4 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 8000fce:	78fb      	ldrb	r3, [r7, #3]
 8000fd0:	2bfd      	cmp	r3, #253	; 0xfd
 8000fd2:	d031      	beq.n	8001038 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	1c5a      	adds	r2, r3, #1
 8000fdc:	607a      	str	r2, [r7, #4]
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fee7 	bl	8000db4 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	1c5a      	adds	r2, r3, #1
 8000fea:	607a      	str	r2, [r7, #4]
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fee0 	bl	8000db4 <SPI_TxByte>
    } while (--wc);
 8000ff4:	7bbb      	ldrb	r3, [r7, #14]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	73bb      	strb	r3, [r7, #14]
 8000ffa:	7bbb      	ldrb	r3, [r7, #14]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1eb      	bne.n	8000fd8 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8001000:	f7ff fef2 	bl	8000de8 <SPI_RxByte>
    SPI_RxByte();
 8001004:	f7ff fef0 	bl	8000de8 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8001008:	e00b      	b.n	8001022 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 800100a:	f7ff feed 	bl	8000de8 <SPI_RxByte>
 800100e:	4603      	mov	r3, r0
 8001010:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	f003 031f 	and.w	r3, r3, #31
 8001018:	2b05      	cmp	r3, #5
 800101a:	d006      	beq.n	800102a <SD_TxDataBlock+0x82>
        break;
      
      i++;
 800101c:	7b7b      	ldrb	r3, [r7, #13]
 800101e:	3301      	adds	r3, #1
 8001020:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8001022:	7b7b      	ldrb	r3, [r7, #13]
 8001024:	2b40      	cmp	r3, #64	; 0x40
 8001026:	d9f0      	bls.n	800100a <SD_TxDataBlock+0x62>
 8001028:	e000      	b.n	800102c <SD_TxDataBlock+0x84>
        break;
 800102a:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 800102c:	bf00      	nop
 800102e:	f7ff fedb 	bl	8000de8 <SPI_RxByte>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d0fa      	beq.n	800102e <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	f003 031f 	and.w	r3, r3, #31
 800103e:	2b05      	cmp	r3, #5
 8001040:	d101      	bne.n	8001046 <SD_TxDataBlock+0x9e>
    return TRUE;
 8001042:	2301      	movs	r3, #1
 8001044:	e000      	b.n	8001048 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 800105c:	f7ff fef0 	bl	8000e40 <SD_ReadyWait>
 8001060:	4603      	mov	r3, r0
 8001062:	2bff      	cmp	r3, #255	; 0xff
 8001064:	d001      	beq.n	800106a <SD_SendCmd+0x1a>
    return 0xFF;
 8001066:	23ff      	movs	r3, #255	; 0xff
 8001068:	e040      	b.n	80010ec <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fea1 	bl	8000db4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	0e1b      	lsrs	r3, r3, #24
 8001076:	b2db      	uxtb	r3, r3
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fe9b 	bl	8000db4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	0c1b      	lsrs	r3, r3, #16
 8001082:	b2db      	uxtb	r3, r3
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fe95 	bl	8000db4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	0a1b      	lsrs	r3, r3, #8
 800108e:	b2db      	uxtb	r3, r3
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fe8f 	bl	8000db4 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	b2db      	uxtb	r3, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fe8a 	bl	8000db4 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 80010a0:	2300      	movs	r3, #0
 80010a2:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	2b40      	cmp	r3, #64	; 0x40
 80010a8:	d101      	bne.n	80010ae <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80010aa:	2395      	movs	r3, #149	; 0x95
 80010ac:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	2b48      	cmp	r3, #72	; 0x48
 80010b2:	d101      	bne.n	80010b8 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80010b4:	2387      	movs	r3, #135	; 0x87
 80010b6:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fe7a 	bl	8000db4 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	2b4c      	cmp	r3, #76	; 0x4c
 80010c4:	d101      	bne.n	80010ca <SD_SendCmd+0x7a>
    SPI_RxByte();
 80010c6:	f7ff fe8f 	bl	8000de8 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 80010ca:	230a      	movs	r3, #10
 80010cc:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80010ce:	f7ff fe8b 	bl	8000de8 <SPI_RxByte>
 80010d2:	4603      	mov	r3, r0
 80010d4:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80010d6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	da05      	bge.n	80010ea <SD_SendCmd+0x9a>
 80010de:	7bbb      	ldrb	r3, [r7, #14]
 80010e0:	3b01      	subs	r3, #1
 80010e2:	73bb      	strb	r3, [r7, #14]
 80010e4:	7bbb      	ldrb	r3, [r7, #14]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1f1      	bne.n	80010ce <SD_SendCmd+0x7e>
  
  return res;
 80010ea:	7b7b      	ldrb	r3, [r7, #13]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8001104:	2301      	movs	r3, #1
 8001106:	e0d5      	b.n	80012b4 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001108:	4b6c      	ldr	r3, [pc, #432]	; (80012bc <SD_disk_initialize+0x1c8>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <SD_disk_initialize+0x2a>
    return Stat;        
 8001116:	4b69      	ldr	r3, [pc, #420]	; (80012bc <SD_disk_initialize+0x1c8>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	b2db      	uxtb	r3, r3
 800111c:	e0ca      	b.n	80012b4 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 800111e:	f7ff feab 	bl	8000e78 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8001122:	f7ff fe2f 	bl	8000d84 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 800112a:	2100      	movs	r1, #0
 800112c:	2040      	movs	r0, #64	; 0x40
 800112e:	f7ff ff8f 	bl	8001050 <SD_SendCmd>
 8001132:	4603      	mov	r3, r0
 8001134:	2b01      	cmp	r3, #1
 8001136:	f040 80a5 	bne.w	8001284 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800113a:	4b61      	ldr	r3, [pc, #388]	; (80012c0 <SD_disk_initialize+0x1cc>)
 800113c:	2264      	movs	r2, #100	; 0x64
 800113e:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8001140:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001144:	2048      	movs	r0, #72	; 0x48
 8001146:	f7ff ff83 	bl	8001050 <SD_SendCmd>
 800114a:	4603      	mov	r3, r0
 800114c:	2b01      	cmp	r3, #1
 800114e:	d158      	bne.n	8001202 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001150:	2300      	movs	r3, #0
 8001152:	73fb      	strb	r3, [r7, #15]
 8001154:	e00c      	b.n	8001170 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001156:	7bfc      	ldrb	r4, [r7, #15]
 8001158:	f7ff fe46 	bl	8000de8 <SPI_RxByte>
 800115c:	4603      	mov	r3, r0
 800115e:	461a      	mov	r2, r3
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	4423      	add	r3, r4
 8001166:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	3301      	adds	r3, #1
 800116e:	73fb      	strb	r3, [r7, #15]
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	2b03      	cmp	r3, #3
 8001174:	d9ef      	bls.n	8001156 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8001176:	7abb      	ldrb	r3, [r7, #10]
 8001178:	2b01      	cmp	r3, #1
 800117a:	f040 8083 	bne.w	8001284 <SD_disk_initialize+0x190>
 800117e:	7afb      	ldrb	r3, [r7, #11]
 8001180:	2baa      	cmp	r3, #170	; 0xaa
 8001182:	d17f      	bne.n	8001284 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001184:	2100      	movs	r1, #0
 8001186:	2077      	movs	r0, #119	; 0x77
 8001188:	f7ff ff62 	bl	8001050 <SD_SendCmd>
 800118c:	4603      	mov	r3, r0
 800118e:	2b01      	cmp	r3, #1
 8001190:	d807      	bhi.n	80011a2 <SD_disk_initialize+0xae>
 8001192:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001196:	2069      	movs	r0, #105	; 0x69
 8001198:	f7ff ff5a 	bl	8001050 <SD_SendCmd>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d005      	beq.n	80011ae <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80011a2:	4b47      	ldr	r3, [pc, #284]	; (80012c0 <SD_disk_initialize+0x1cc>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1eb      	bne.n	8001184 <SD_disk_initialize+0x90>
 80011ac:	e000      	b.n	80011b0 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80011ae:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 80011b0:	4b43      	ldr	r3, [pc, #268]	; (80012c0 <SD_disk_initialize+0x1cc>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d064      	beq.n	8001284 <SD_disk_initialize+0x190>
 80011ba:	2100      	movs	r1, #0
 80011bc:	207a      	movs	r0, #122	; 0x7a
 80011be:	f7ff ff47 	bl	8001050 <SD_SendCmd>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d15d      	bne.n	8001284 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80011c8:	2300      	movs	r3, #0
 80011ca:	73fb      	strb	r3, [r7, #15]
 80011cc:	e00c      	b.n	80011e8 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80011ce:	7bfc      	ldrb	r4, [r7, #15]
 80011d0:	f7ff fe0a 	bl	8000de8 <SPI_RxByte>
 80011d4:	4603      	mov	r3, r0
 80011d6:	461a      	mov	r2, r3
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	4423      	add	r3, r4
 80011de:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	3301      	adds	r3, #1
 80011e6:	73fb      	strb	r3, [r7, #15]
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	d9ef      	bls.n	80011ce <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 80011ee:	7a3b      	ldrb	r3, [r7, #8]
 80011f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <SD_disk_initialize+0x108>
 80011f8:	2306      	movs	r3, #6
 80011fa:	e000      	b.n	80011fe <SD_disk_initialize+0x10a>
 80011fc:	2302      	movs	r3, #2
 80011fe:	73bb      	strb	r3, [r7, #14]
 8001200:	e040      	b.n	8001284 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001202:	2100      	movs	r1, #0
 8001204:	2077      	movs	r0, #119	; 0x77
 8001206:	f7ff ff23 	bl	8001050 <SD_SendCmd>
 800120a:	4603      	mov	r3, r0
 800120c:	2b01      	cmp	r3, #1
 800120e:	d808      	bhi.n	8001222 <SD_disk_initialize+0x12e>
 8001210:	2100      	movs	r1, #0
 8001212:	2069      	movs	r0, #105	; 0x69
 8001214:	f7ff ff1c 	bl	8001050 <SD_SendCmd>
 8001218:	4603      	mov	r3, r0
 800121a:	2b01      	cmp	r3, #1
 800121c:	d801      	bhi.n	8001222 <SD_disk_initialize+0x12e>
 800121e:	2302      	movs	r3, #2
 8001220:	e000      	b.n	8001224 <SD_disk_initialize+0x130>
 8001222:	2301      	movs	r3, #1
 8001224:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8001226:	7bbb      	ldrb	r3, [r7, #14]
 8001228:	2b02      	cmp	r3, #2
 800122a:	d10e      	bne.n	800124a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 800122c:	2100      	movs	r1, #0
 800122e:	2077      	movs	r0, #119	; 0x77
 8001230:	f7ff ff0e 	bl	8001050 <SD_SendCmd>
 8001234:	4603      	mov	r3, r0
 8001236:	2b01      	cmp	r3, #1
 8001238:	d80e      	bhi.n	8001258 <SD_disk_initialize+0x164>
 800123a:	2100      	movs	r1, #0
 800123c:	2069      	movs	r0, #105	; 0x69
 800123e:	f7ff ff07 	bl	8001050 <SD_SendCmd>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d107      	bne.n	8001258 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001248:	e00d      	b.n	8001266 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800124a:	2100      	movs	r1, #0
 800124c:	2041      	movs	r0, #65	; 0x41
 800124e:	f7ff feff 	bl	8001050 <SD_SendCmd>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d005      	beq.n	8001264 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001258:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <SD_disk_initialize+0x1cc>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1e1      	bne.n	8001226 <SD_disk_initialize+0x132>
 8001262:	e000      	b.n	8001266 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001264:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <SD_disk_initialize+0x1cc>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b00      	cmp	r3, #0
 800126e:	d007      	beq.n	8001280 <SD_disk_initialize+0x18c>
 8001270:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001274:	2050      	movs	r0, #80	; 0x50
 8001276:	f7ff feeb 	bl	8001050 <SD_SendCmd>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8001284:	4a0f      	ldr	r2, [pc, #60]	; (80012c4 <SD_disk_initialize+0x1d0>)
 8001286:	7bbb      	ldrb	r3, [r7, #14]
 8001288:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 800128a:	f7ff fd87 	bl	8000d9c <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 800128e:	f7ff fdab 	bl	8000de8 <SPI_RxByte>
  
  if (type) 
 8001292:	7bbb      	ldrb	r3, [r7, #14]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d008      	beq.n	80012aa <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <SD_disk_initialize+0x1c8>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	f023 0301 	bic.w	r3, r3, #1
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <SD_disk_initialize+0x1c8>)
 80012a6:	701a      	strb	r2, [r3, #0]
 80012a8:	e001      	b.n	80012ae <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80012aa:	f7ff fe31 	bl	8000f10 <SD_PowerOff>
  }
  
  return Stat;
 80012ae:	4b03      	ldr	r3, [pc, #12]	; (80012bc <SD_disk_initialize+0x1c8>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	b2db      	uxtb	r3, r3
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd90      	pop	{r4, r7, pc}
 80012bc:	20000000 	.word	0x20000000
 80012c0:	20000a59 	.word	0x20000a59
 80012c4:	20000210 	.word	0x20000210

080012c8 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <SD_disk_status+0x14>
    return STA_NOINIT; 
 80012d8:	2301      	movs	r3, #1
 80012da:	e002      	b.n	80012e2 <SD_disk_status+0x1a>
  
  return Stat;
 80012dc:	4b03      	ldr	r3, [pc, #12]	; (80012ec <SD_disk_status+0x24>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	b2db      	uxtb	r3, r3
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr
 80012ec:	20000000 	.word	0x20000000

080012f0 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	4603      	mov	r3, r0
 80012fe:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d102      	bne.n	800130c <SD_disk_read+0x1c>
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d101      	bne.n	8001310 <SD_disk_read+0x20>
    return RES_PARERR;
 800130c:	2304      	movs	r3, #4
 800130e:	e051      	b.n	80013b4 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8001310:	4b2a      	ldr	r3, [pc, #168]	; (80013bc <SD_disk_read+0xcc>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800131e:	2303      	movs	r3, #3
 8001320:	e048      	b.n	80013b4 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8001322:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <SD_disk_read+0xd0>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	2b00      	cmp	r3, #0
 800132c:	d102      	bne.n	8001334 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	025b      	lsls	r3, r3, #9
 8001332:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001334:	f7ff fd26 	bl	8000d84 <SELECT>
  
  if (count == 1) 
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d111      	bne.n	8001362 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	2051      	movs	r0, #81	; 0x51
 8001342:	f7ff fe85 	bl	8001050 <SD_SendCmd>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d129      	bne.n	80013a0 <SD_disk_read+0xb0>
 800134c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001350:	68b8      	ldr	r0, [r7, #8]
 8001352:	f7ff fdf3 	bl	8000f3c <SD_RxDataBlock>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d021      	beq.n	80013a0 <SD_disk_read+0xb0>
      count = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	e01e      	b.n	80013a0 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	2052      	movs	r0, #82	; 0x52
 8001366:	f7ff fe73 	bl	8001050 <SD_SendCmd>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d117      	bne.n	80013a0 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001370:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001374:	68b8      	ldr	r0, [r7, #8]
 8001376:	f7ff fde1 	bl	8000f3c <SD_RxDataBlock>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d00a      	beq.n	8001396 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001386:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	3b01      	subs	r3, #1
 800138c:	603b      	str	r3, [r7, #0]
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1ed      	bne.n	8001370 <SD_disk_read+0x80>
 8001394:	e000      	b.n	8001398 <SD_disk_read+0xa8>
          break;
 8001396:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8001398:	2100      	movs	r1, #0
 800139a:	204c      	movs	r0, #76	; 0x4c
 800139c:	f7ff fe58 	bl	8001050 <SD_SendCmd>
    }
  }
  
  DESELECT();
 80013a0:	f7ff fcfc 	bl	8000d9c <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80013a4:	f7ff fd20 	bl	8000de8 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	bf14      	ite	ne
 80013ae:	2301      	movne	r3, #1
 80013b0:	2300      	moveq	r3, #0
 80013b2:	b2db      	uxtb	r3, r3
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000000 	.word	0x20000000
 80013c0:	20000210 	.word	0x20000210

080013c4 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	4603      	mov	r3, r0
 80013d2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d102      	bne.n	80013e0 <SD_disk_write+0x1c>
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d101      	bne.n	80013e4 <SD_disk_write+0x20>
    return RES_PARERR;
 80013e0:	2304      	movs	r3, #4
 80013e2:	e06b      	b.n	80014bc <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 80013e4:	4b37      	ldr	r3, [pc, #220]	; (80014c4 <SD_disk_write+0x100>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <SD_disk_write+0x32>
    return RES_NOTRDY;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e062      	b.n	80014bc <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 80013f6:	4b33      	ldr	r3, [pc, #204]	; (80014c4 <SD_disk_write+0x100>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001404:	2302      	movs	r3, #2
 8001406:	e059      	b.n	80014bc <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8001408:	4b2f      	ldr	r3, [pc, #188]	; (80014c8 <SD_disk_write+0x104>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	2b00      	cmp	r3, #0
 8001412:	d102      	bne.n	800141a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	025b      	lsls	r3, r3, #9
 8001418:	607b      	str	r3, [r7, #4]
  
  SELECT();
 800141a:	f7ff fcb3 	bl	8000d84 <SELECT>
  
  if (count == 1) 
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d110      	bne.n	8001446 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	2058      	movs	r0, #88	; 0x58
 8001428:	f7ff fe12 	bl	8001050 <SD_SendCmd>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d13a      	bne.n	80014a8 <SD_disk_write+0xe4>
 8001432:	21fe      	movs	r1, #254	; 0xfe
 8001434:	68b8      	ldr	r0, [r7, #8]
 8001436:	f7ff fdb7 	bl	8000fa8 <SD_TxDataBlock>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d033      	beq.n	80014a8 <SD_disk_write+0xe4>
      count = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	e030      	b.n	80014a8 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8001446:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <SD_disk_write+0x104>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d007      	beq.n	8001462 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001452:	2100      	movs	r1, #0
 8001454:	2077      	movs	r0, #119	; 0x77
 8001456:	f7ff fdfb 	bl	8001050 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800145a:	6839      	ldr	r1, [r7, #0]
 800145c:	2057      	movs	r0, #87	; 0x57
 800145e:	f7ff fdf7 	bl	8001050 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	2059      	movs	r0, #89	; 0x59
 8001466:	f7ff fdf3 	bl	8001050 <SD_SendCmd>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d11b      	bne.n	80014a8 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001470:	21fc      	movs	r1, #252	; 0xfc
 8001472:	68b8      	ldr	r0, [r7, #8]
 8001474:	f7ff fd98 	bl	8000fa8 <SD_TxDataBlock>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00a      	beq.n	8001494 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001484:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	3b01      	subs	r3, #1
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1ee      	bne.n	8001470 <SD_disk_write+0xac>
 8001492:	e000      	b.n	8001496 <SD_disk_write+0xd2>
          break;
 8001494:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8001496:	21fd      	movs	r1, #253	; 0xfd
 8001498:	2000      	movs	r0, #0
 800149a:	f7ff fd85 	bl	8000fa8 <SD_TxDataBlock>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d101      	bne.n	80014a8 <SD_disk_write+0xe4>
      {        
        count = 1;
 80014a4:	2301      	movs	r3, #1
 80014a6:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 80014a8:	f7ff fc78 	bl	8000d9c <DESELECT>
  SPI_RxByte();
 80014ac:	f7ff fc9c 	bl	8000de8 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	bf14      	ite	ne
 80014b6:	2301      	movne	r3, #1
 80014b8:	2300      	moveq	r3, #0
 80014ba:	b2db      	uxtb	r3, r3
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000000 	.word	0x20000000
 80014c8:	20000210 	.word	0x20000210

080014cc <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b08b      	sub	sp, #44	; 0x2c
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	603a      	str	r2, [r7, #0]
 80014d6:	71fb      	strb	r3, [r7, #7]
 80014d8:	460b      	mov	r3, r1
 80014da:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80014e6:	2304      	movs	r3, #4
 80014e8:	e117      	b.n	800171a <SD_disk_ioctl+0x24e>
  
  res = RES_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 80014f0:	79bb      	ldrb	r3, [r7, #6]
 80014f2:	2b05      	cmp	r3, #5
 80014f4:	d126      	bne.n	8001544 <SD_disk_ioctl+0x78>
  {
    switch (*ptr) 
 80014f6:	6a3b      	ldr	r3, [r7, #32]
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d00e      	beq.n	800151c <SD_disk_ioctl+0x50>
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d012      	beq.n	8001528 <SD_disk_ioctl+0x5c>
 8001502:	2b00      	cmp	r3, #0
 8001504:	d11a      	bne.n	800153c <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 8001506:	f7ff fd0f 	bl	8000f28 <SD_CheckPower>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 8001510:	f7ff fcfe 	bl	8000f10 <SD_PowerOff>
      res = RES_OK;
 8001514:	2300      	movs	r3, #0
 8001516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800151a:	e0fc      	b.n	8001716 <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 800151c:	f7ff fcac 	bl	8000e78 <SD_PowerOn>
      res = RES_OK;
 8001520:	2300      	movs	r3, #0
 8001522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001526:	e0f6      	b.n	8001716 <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001528:	6a3b      	ldr	r3, [r7, #32]
 800152a:	1c5c      	adds	r4, r3, #1
 800152c:	f7ff fcfc 	bl	8000f28 <SD_CheckPower>
 8001530:	4603      	mov	r3, r0
 8001532:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001534:	2300      	movs	r3, #0
 8001536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800153a:	e0ec      	b.n	8001716 <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 800153c:	2304      	movs	r3, #4
 800153e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001542:	e0e8      	b.n	8001716 <SD_disk_ioctl+0x24a>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8001544:	4b77      	ldr	r3, [pc, #476]	; (8001724 <SD_disk_ioctl+0x258>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 8001552:	2303      	movs	r3, #3
 8001554:	e0e1      	b.n	800171a <SD_disk_ioctl+0x24e>
    
    SELECT();
 8001556:	f7ff fc15 	bl	8000d84 <SELECT>
    
    switch (ctrl) 
 800155a:	79bb      	ldrb	r3, [r7, #6]
 800155c:	2b0d      	cmp	r3, #13
 800155e:	f200 80cb 	bhi.w	80016f8 <SD_disk_ioctl+0x22c>
 8001562:	a201      	add	r2, pc, #4	; (adr r2, 8001568 <SD_disk_ioctl+0x9c>)
 8001564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001568:	08001663 	.word	0x08001663
 800156c:	080015a1 	.word	0x080015a1
 8001570:	08001653 	.word	0x08001653
 8001574:	080016f9 	.word	0x080016f9
 8001578:	080016f9 	.word	0x080016f9
 800157c:	080016f9 	.word	0x080016f9
 8001580:	080016f9 	.word	0x080016f9
 8001584:	080016f9 	.word	0x080016f9
 8001588:	080016f9 	.word	0x080016f9
 800158c:	080016f9 	.word	0x080016f9
 8001590:	080016f9 	.word	0x080016f9
 8001594:	08001675 	.word	0x08001675
 8001598:	08001699 	.word	0x08001699
 800159c:	080016bd 	.word	0x080016bd
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 80015a0:	2100      	movs	r1, #0
 80015a2:	2049      	movs	r0, #73	; 0x49
 80015a4:	f7ff fd54 	bl	8001050 <SD_SendCmd>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f040 80a8 	bne.w	8001700 <SD_disk_ioctl+0x234>
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	2110      	movs	r1, #16
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff fcc0 	bl	8000f3c <SD_RxDataBlock>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 809e 	beq.w	8001700 <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1) 
 80015c4:	7b3b      	ldrb	r3, [r7, #12]
 80015c6:	099b      	lsrs	r3, r3, #6
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d10e      	bne.n	80015ec <SD_disk_ioctl+0x120>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80015ce:	7d7b      	ldrb	r3, [r7, #21]
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	7d3b      	ldrb	r3, [r7, #20]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	021b      	lsls	r3, r3, #8
 80015d8:	b29b      	uxth	r3, r3
 80015da:	4413      	add	r3, r2
 80015dc:	b29b      	uxth	r3, r3
 80015de:	3301      	adds	r3, #1
 80015e0:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80015e2:	8bfb      	ldrh	r3, [r7, #30]
 80015e4:	029a      	lsls	r2, r3, #10
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	e02e      	b.n	800164a <SD_disk_ioctl+0x17e>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80015ec:	7c7b      	ldrb	r3, [r7, #17]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	7dbb      	ldrb	r3, [r7, #22]
 80015f6:	09db      	lsrs	r3, r3, #7
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	4413      	add	r3, r2
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	7d7b      	ldrb	r3, [r7, #21]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	b2db      	uxtb	r3, r3
 8001604:	f003 0306 	and.w	r3, r3, #6
 8001608:	b2db      	uxtb	r3, r3
 800160a:	4413      	add	r3, r2
 800160c:	b2db      	uxtb	r3, r3
 800160e:	3302      	adds	r3, #2
 8001610:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001614:	7d3b      	ldrb	r3, [r7, #20]
 8001616:	099b      	lsrs	r3, r3, #6
 8001618:	b2db      	uxtb	r3, r3
 800161a:	b29a      	uxth	r2, r3
 800161c:	7cfb      	ldrb	r3, [r7, #19]
 800161e:	b29b      	uxth	r3, r3
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	b29b      	uxth	r3, r3
 8001624:	4413      	add	r3, r2
 8001626:	b29a      	uxth	r2, r3
 8001628:	7cbb      	ldrb	r3, [r7, #18]
 800162a:	029b      	lsls	r3, r3, #10
 800162c:	b29b      	uxth	r3, r3
 800162e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001632:	b29b      	uxth	r3, r3
 8001634:	4413      	add	r3, r2
 8001636:	b29b      	uxth	r3, r3
 8001638:	3301      	adds	r3, #1
 800163a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800163c:	8bfa      	ldrh	r2, [r7, #30]
 800163e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001642:	3b09      	subs	r3, #9
 8001644:	409a      	lsls	r2, r3
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 800164a:	2300      	movs	r3, #0
 800164c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001650:	e056      	b.n	8001700 <SD_disk_ioctl+0x234>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001658:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800165a:	2300      	movs	r3, #0
 800165c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001660:	e055      	b.n	800170e <SD_disk_ioctl+0x242>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001662:	f7ff fbed 	bl	8000e40 <SD_ReadyWait>
 8001666:	4603      	mov	r3, r0
 8001668:	2bff      	cmp	r3, #255	; 0xff
 800166a:	d14b      	bne.n	8001704 <SD_disk_ioctl+0x238>
        res = RES_OK;
 800166c:	2300      	movs	r3, #0
 800166e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001672:	e047      	b.n	8001704 <SD_disk_ioctl+0x238>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001674:	2100      	movs	r1, #0
 8001676:	2049      	movs	r0, #73	; 0x49
 8001678:	f7ff fcea 	bl	8001050 <SD_SendCmd>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d142      	bne.n	8001708 <SD_disk_ioctl+0x23c>
 8001682:	2110      	movs	r1, #16
 8001684:	6a38      	ldr	r0, [r7, #32]
 8001686:	f7ff fc59 	bl	8000f3c <SD_RxDataBlock>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d03b      	beq.n	8001708 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001696:	e037      	b.n	8001708 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001698:	2100      	movs	r1, #0
 800169a:	204a      	movs	r0, #74	; 0x4a
 800169c:	f7ff fcd8 	bl	8001050 <SD_SendCmd>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d132      	bne.n	800170c <SD_disk_ioctl+0x240>
 80016a6:	2110      	movs	r1, #16
 80016a8:	6a38      	ldr	r0, [r7, #32]
 80016aa:	f7ff fc47 	bl	8000f3c <SD_RxDataBlock>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d02b      	beq.n	800170c <SD_disk_ioctl+0x240>
        res = RES_OK;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80016ba:	e027      	b.n	800170c <SD_disk_ioctl+0x240>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 80016bc:	2100      	movs	r1, #0
 80016be:	207a      	movs	r0, #122	; 0x7a
 80016c0:	f7ff fcc6 	bl	8001050 <SD_SendCmd>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d116      	bne.n	80016f8 <SD_disk_ioctl+0x22c>
      {         
        for (n = 0; n < 4; n++)
 80016ca:	2300      	movs	r3, #0
 80016cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80016d0:	e00b      	b.n	80016ea <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 80016d2:	6a3c      	ldr	r4, [r7, #32]
 80016d4:	1c63      	adds	r3, r4, #1
 80016d6:	623b      	str	r3, [r7, #32]
 80016d8:	f7ff fb86 	bl	8000de8 <SPI_RxByte>
 80016dc:	4603      	mov	r3, r0
 80016de:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80016e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016e4:	3301      	adds	r3, #1
 80016e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80016ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d9ef      	bls.n	80016d2 <SD_disk_ioctl+0x206>
        }
        
        res = RES_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 80016f8:	2304      	movs	r3, #4
 80016fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016fe:	e006      	b.n	800170e <SD_disk_ioctl+0x242>
      break;
 8001700:	bf00      	nop
 8001702:	e004      	b.n	800170e <SD_disk_ioctl+0x242>
      break;
 8001704:	bf00      	nop
 8001706:	e002      	b.n	800170e <SD_disk_ioctl+0x242>
      break;
 8001708:	bf00      	nop
 800170a:	e000      	b.n	800170e <SD_disk_ioctl+0x242>
      break;
 800170c:	bf00      	nop
    }
    
    DESELECT();
 800170e:	f7ff fb45 	bl	8000d9c <DESELECT>
    SPI_RxByte();
 8001712:	f7ff fb69 	bl	8000de8 <SPI_RxByte>
  }
  
  return res;
 8001716:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800171a:	4618      	mov	r0, r3
 800171c:	372c      	adds	r7, #44	; 0x2c
 800171e:	46bd      	mov	sp, r7
 8001720:	bd90      	pop	{r4, r7, pc}
 8001722:	bf00      	nop
 8001724:	20000000 	.word	0x20000000

08001728 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001730:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001734:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b00      	cmp	r3, #0
 800173e:	d013      	beq.n	8001768 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001740:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001744:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001748:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800174c:	2b00      	cmp	r3, #0
 800174e:	d00b      	beq.n	8001768 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001750:	e000      	b.n	8001754 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001752:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001754:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0f9      	beq.n	8001752 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800175e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001768:	687b      	ldr	r3, [r7, #4]
}
 800176a:	4618      	mov	r0, r3
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001776:	b093      	sub	sp, #76	; 0x4c
 8001778:	af0e      	add	r7, sp, #56	; 0x38
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800177a:	f000 fdd1 	bl	8002320 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800177e:	f000 f8a9 	bl	80018d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001782:	f000 fa13 	bl	8001bac <MX_GPIO_Init>
  MX_ADC1_Init();
 8001786:	f000 f905 	bl	8001994 <MX_ADC1_Init>
  MX_CAN_Init();
 800178a:	f000 f951 	bl	8001a30 <MX_CAN_Init>
  MX_FATFS_Init();
 800178e:	f002 fdf3 	bl	8004378 <MX_FATFS_Init>
  MX_SPI2_Init();
 8001792:	f000 f981 	bl	8001a98 <MX_SPI2_Init>
  MX_TIM3_Init();
 8001796:	f000 f9b5 	bl	8001b04 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello!\n");
 800179a:	483e      	ldr	r0, [pc, #248]	; (8001894 <main+0x120>)
 800179c:	f006 fab6 	bl	8007d0c <puts>
  fresult=mount_card (&fs);
 80017a0:	483d      	ldr	r0, [pc, #244]	; (8001898 <main+0x124>)
 80017a2:	f000 fad3 	bl	8001d4c <mount_card>
 80017a6:	4603      	mov	r3, r0
 80017a8:	461a      	mov	r2, r3
 80017aa:	4b3c      	ldr	r3, [pc, #240]	; (800189c <main+0x128>)
 80017ac:	701a      	strb	r2, [r3, #0]
  card_capacity(&free_space, &total);
 80017ae:	493c      	ldr	r1, [pc, #240]	; (80018a0 <main+0x12c>)
 80017b0:	483c      	ldr	r0, [pc, #240]	; (80018a4 <main+0x130>)
 80017b2:	f000 fadb 	bl	8001d6c <card_capacity>
  printf("Hello!\nFree Space: %lu", free_space);
 80017b6:	4b3b      	ldr	r3, [pc, #236]	; (80018a4 <main+0x130>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4619      	mov	r1, r3
 80017bc:	483a      	ldr	r0, [pc, #232]	; (80018a8 <main+0x134>)
 80017be:	f006 fa31 	bl	8007c24 <iprintf>
//  fresult=create_file ("teste.txt", "OLE OLE OLE", &fil, &bw);
  fresult=update_file("teste.txt", "BLA2 BLA2 BLA2", &fil, &bw);
 80017c2:	4b3a      	ldr	r3, [pc, #232]	; (80018ac <main+0x138>)
 80017c4:	4a3a      	ldr	r2, [pc, #232]	; (80018b0 <main+0x13c>)
 80017c6:	493b      	ldr	r1, [pc, #236]	; (80018b4 <main+0x140>)
 80017c8:	483b      	ldr	r0, [pc, #236]	; (80018b8 <main+0x144>)
 80017ca:	f000 faf7 	bl	8001dbc <update_file>
 80017ce:	4603      	mov	r3, r0
 80017d0:	461a      	mov	r2, r3
 80017d2:	4b32      	ldr	r3, [pc, #200]	; (800189c <main+0x128>)
 80017d4:	701a      	strb	r2, [r3, #0]

  MX_CAN_Init();
 80017d6:	f000 f92b 	bl	8001a30 <MX_CAN_Init>


  //IMU_config(&hspi2);

  uint32_t counter = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	60bb      	str	r3, [r7, #8]
  char *str;
  float speed = 0;
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80017e4:	213c      	movs	r1, #60	; 0x3c
 80017e6:	4835      	ldr	r0, [pc, #212]	; (80018bc <main+0x148>)
 80017e8:	f002 fcc4 	bl	8004174 <HAL_TIM_Encoder_Start>
 // HAL_TIM_Encoder_Init(&htim3, sConfig)
  uint32_t tick = HAL_GetTick();
 80017ec:	f000 fdf0 	bl	80023d0 <HAL_GetTick>
 80017f0:	4603      	mov	r3, r0
 80017f2:	607b      	str	r3, [r7, #4]
  counter = __HAL_TIM_GET_COUNTER(&htim3);
 80017f4:	4b31      	ldr	r3, [pc, #196]	; (80018bc <main+0x148>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fa:	60bb      	str	r3, [r7, #8]
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  printf("counter encoder mode: %lu \n", counter);
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	4619      	mov	r1, r3
 8001800:	482f      	ldr	r0, [pc, #188]	; (80018c0 <main+0x14c>)
 8001802:	f006 fa0f 	bl	8007c24 <iprintf>
	  //HAL_Delay(500);
	  if (HAL_GetTick() - tick > 20L ){
 8001806:	f000 fde3 	bl	80023d0 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b14      	cmp	r3, #20
 8001812:	d920      	bls.n	8001856 <main+0xe2>
		  printf("hal = %lu , tick = %lu, Aquii \n", HAL_GetTick(), tick);
 8001814:	f000 fddc 	bl	80023d0 <HAL_GetTick>
 8001818:	4601      	mov	r1, r0
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	461a      	mov	r2, r3
 800181e:	4829      	ldr	r0, [pc, #164]	; (80018c4 <main+0x150>)
 8001820:	f006 fa00 	bl	8007c24 <iprintf>
		  speed = motorSpeed(&counter, &tick, htim3);
 8001824:	4e25      	ldr	r6, [pc, #148]	; (80018bc <main+0x148>)
 8001826:	f107 0e04 	add.w	lr, r7, #4
 800182a:	f107 0c08 	add.w	ip, r7, #8
 800182e:	466d      	mov	r5, sp
 8001830:	f106 0408 	add.w	r4, r6, #8
 8001834:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001836:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001838:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800183a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800183c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800183e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001840:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001844:	e885 0003 	stmia.w	r5, {r0, r1}
 8001848:	e896 000c 	ldmia.w	r6, {r2, r3}
 800184c:	4671      	mov	r1, lr
 800184e:	4660      	mov	r0, ip
 8001850:	f7ff fa28 	bl	8000ca4 <motorSpeed>
 8001854:	60f8      	str	r0, [r7, #12]
	  }


	 // speed = motorSpeed(counter, htim3);
	  printf("rpm = %f\n",speed);
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f7fe fde6 	bl	8000428 <__aeabi_f2d>
 800185c:	4603      	mov	r3, r0
 800185e:	460c      	mov	r4, r1
 8001860:	461a      	mov	r2, r3
 8001862:	4623      	mov	r3, r4
 8001864:	4818      	ldr	r0, [pc, #96]	; (80018c8 <main+0x154>)
 8001866:	f006 f9dd 	bl	8007c24 <iprintf>

	  /*sprintf(str, "%d", (int)speed);
	  printf("str = %s", str);
	  fresult=update_file("teste.txt", str, &fil, &bw);*/

	  fresult=update_file("teste.txt", "aquiiii", &fil, &bw);
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <main+0x138>)
 800186c:	4a10      	ldr	r2, [pc, #64]	; (80018b0 <main+0x13c>)
 800186e:	4917      	ldr	r1, [pc, #92]	; (80018cc <main+0x158>)
 8001870:	4811      	ldr	r0, [pc, #68]	; (80018b8 <main+0x144>)
 8001872:	f000 faa3 	bl	8001dbc <update_file>
 8001876:	4603      	mov	r3, r0
 8001878:	461a      	mov	r2, r3
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <main+0x128>)
 800187c:	701a      	strb	r2, [r3, #0]

	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800187e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001882:	4813      	ldr	r0, [pc, #76]	; (80018d0 <main+0x15c>)
 8001884:	f001 fb2c 	bl	8002ee0 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8001888:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800188c:	f000 fdaa 	bl	80023e4 <HAL_Delay>
	  printf("counter encoder mode: %lu \n", counter);
 8001890:	e7b4      	b.n	80017fc <main+0x88>
 8001892:	bf00      	nop
 8001894:	08009ad8 	.word	0x08009ad8
 8001898:	200002a8 	.word	0x200002a8
 800189c:	200007d0 	.word	0x200007d0
 80018a0:	200007e0 	.word	0x200007e0
 80018a4:	200005a0 	.word	0x200005a0
 80018a8:	08009ae0 	.word	0x08009ae0
 80018ac:	200007c8 	.word	0x200007c8
 80018b0:	20000818 	.word	0x20000818
 80018b4:	08009af8 	.word	0x08009af8
 80018b8:	08009b08 	.word	0x08009b08
 80018bc:	20000530 	.word	0x20000530
 80018c0:	08009b14 	.word	0x08009b14
 80018c4:	08009b30 	.word	0x08009b30
 80018c8:	08009b50 	.word	0x08009b50
 80018cc:	08009b5c 	.word	0x08009b5c
 80018d0:	40011000 	.word	0x40011000

080018d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b094      	sub	sp, #80	; 0x50
 80018d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018de:	2228      	movs	r2, #40	; 0x28
 80018e0:	2100      	movs	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f005 fd46 	bl	8007374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001904:	2301      	movs	r3, #1
 8001906:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001908:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800190c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800190e:	2300      	movs	r3, #0
 8001910:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001912:	2301      	movs	r3, #1
 8001914:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001916:	2302      	movs	r3, #2
 8001918:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800191a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800191e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8001920:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001924:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001926:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800192a:	4618      	mov	r0, r3
 800192c:	f001 faf0 	bl	8002f10 <HAL_RCC_OscConfig>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001936:	f000 fa02 	bl	8001d3e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800193a:	230f      	movs	r3, #15
 800193c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800193e:	2302      	movs	r3, #2
 8001940:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001946:	2300      	movs	r3, #0
 8001948:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800194a:	2300      	movs	r3, #0
 800194c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f001 fd5b 	bl	8003410 <HAL_RCC_ClockConfig>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001960:	f000 f9ed 	bl	8001d3e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001964:	2302      	movs	r3, #2
 8001966:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	4618      	mov	r0, r3
 8001970:	f001 fef0 	bl	8003754 <HAL_RCCEx_PeriphCLKConfig>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800197a:	f000 f9e0 	bl	8001d3e <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1);
 800197e:	2200      	movs	r2, #0
 8001980:	f04f 61e0 	mov.w	r1, #117440512	; 0x7000000
 8001984:	2000      	movs	r0, #0
 8001986:	f001 fe2d 	bl	80035e4 <HAL_RCC_MCOConfig>
}
 800198a:	bf00      	nop
 800198c:	3750      	adds	r7, #80	; 0x50
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80019a4:	4b20      	ldr	r3, [pc, #128]	; (8001a28 <MX_ADC1_Init+0x94>)
 80019a6:	4a21      	ldr	r2, [pc, #132]	; (8001a2c <MX_ADC1_Init+0x98>)
 80019a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80019aa:	4b1f      	ldr	r3, [pc, #124]	; (8001a28 <MX_ADC1_Init+0x94>)
 80019ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80019b2:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <MX_ADC1_Init+0x94>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019b8:	4b1b      	ldr	r3, [pc, #108]	; (8001a28 <MX_ADC1_Init+0x94>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019be:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <MX_ADC1_Init+0x94>)
 80019c0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80019c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019c6:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <MX_ADC1_Init+0x94>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80019cc:	4b16      	ldr	r3, [pc, #88]	; (8001a28 <MX_ADC1_Init+0x94>)
 80019ce:	2202      	movs	r2, #2
 80019d0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019d2:	4815      	ldr	r0, [pc, #84]	; (8001a28 <MX_ADC1_Init+0x94>)
 80019d4:	f000 fd28 	bl	8002428 <HAL_ADC_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80019de:	f000 f9ae 	bl	8001d3e <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019e6:	2301      	movs	r3, #1
 80019e8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	4619      	mov	r1, r3
 80019f2:	480d      	ldr	r0, [pc, #52]	; (8001a28 <MX_ADC1_Init+0x94>)
 80019f4:	f000 fdf0 	bl	80025d8 <HAL_ADC_ConfigChannel>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80019fe:	f000 f99e 	bl	8001d3e <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a02:	2301      	movs	r3, #1
 8001a04:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001a06:	2302      	movs	r3, #2
 8001a08:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4806      	ldr	r0, [pc, #24]	; (8001a28 <MX_ADC1_Init+0x94>)
 8001a10:	f000 fde2 	bl	80025d8 <HAL_ADC_ConfigChannel>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001a1a:	f000 f990 	bl	8001d3e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a1e:	bf00      	nop
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000570 	.word	0x20000570
 8001a2c:	40012400 	.word	0x40012400

08001a30 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001a34:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <MX_CAN_Init+0x60>)
 8001a36:	4a17      	ldr	r2, [pc, #92]	; (8001a94 <MX_CAN_Init+0x64>)
 8001a38:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8001a3a:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <MX_CAN_Init+0x60>)
 8001a3c:	2210      	movs	r2, #16
 8001a3e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001a40:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <MX_CAN_Init+0x60>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a46:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <MX_CAN_Init+0x60>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001a4c:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <MX_CAN_Init+0x60>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001a52:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <MX_CAN_Init+0x60>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001a58:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <MX_CAN_Init+0x60>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <MX_CAN_Init+0x60>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001a64:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <MX_CAN_Init+0x60>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <MX_CAN_Init+0x60>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001a70:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <MX_CAN_Init+0x60>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <MX_CAN_Init+0x60>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001a7c:	4804      	ldr	r0, [pc, #16]	; (8001a90 <MX_CAN_Init+0x60>)
 8001a7e:	f000 fedd 	bl	800283c <HAL_CAN_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8001a88:	f000 f959 	bl	8001d3e <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001a8c:	bf00      	nop
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000504 	.word	0x20000504
 8001a94:	40006400 	.word	0x40006400

08001a98 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a9c:	4b17      	ldr	r3, [pc, #92]	; (8001afc <MX_SPI2_Init+0x64>)
 8001a9e:	4a18      	ldr	r2, [pc, #96]	; (8001b00 <MX_SPI2_Init+0x68>)
 8001aa0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001aa2:	4b16      	ldr	r3, [pc, #88]	; (8001afc <MX_SPI2_Init+0x64>)
 8001aa4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001aa8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001aaa:	4b14      	ldr	r3, [pc, #80]	; (8001afc <MX_SPI2_Init+0x64>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ab0:	4b12      	ldr	r3, [pc, #72]	; (8001afc <MX_SPI2_Init+0x64>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ab6:	4b11      	ldr	r3, [pc, #68]	; (8001afc <MX_SPI2_Init+0x64>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001abc:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <MX_SPI2_Init+0x64>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <MX_SPI2_Init+0x64>)
 8001ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ac8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001aca:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <MX_SPI2_Init+0x64>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ad0:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <MX_SPI2_Init+0x64>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <MX_SPI2_Init+0x64>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001adc:	4b07      	ldr	r3, [pc, #28]	; (8001afc <MX_SPI2_Init+0x64>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <MX_SPI2_Init+0x64>)
 8001ae4:	220a      	movs	r2, #10
 8001ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ae8:	4804      	ldr	r0, [pc, #16]	; (8001afc <MX_SPI2_Init+0x64>)
 8001aea:	f001 fee9 	bl	80038c0 <HAL_SPI_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001af4:	f000 f923 	bl	8001d3e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000250 	.word	0x20000250
 8001b00:	40003800 	.word	0x40003800

08001b04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08c      	sub	sp, #48	; 0x30
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b0a:	f107 030c 	add.w	r3, r7, #12
 8001b0e:	2224      	movs	r2, #36	; 0x24
 8001b10:	2100      	movs	r1, #0
 8001b12:	4618      	mov	r0, r3
 8001b14:	f005 fc2e 	bl	8007374 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b20:	4b20      	ldr	r3, [pc, #128]	; (8001ba4 <MX_TIM3_Init+0xa0>)
 8001b22:	4a21      	ldr	r2, [pc, #132]	; (8001ba8 <MX_TIM3_Init+0xa4>)
 8001b24:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b26:	4b1f      	ldr	r3, [pc, #124]	; (8001ba4 <MX_TIM3_Init+0xa0>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ba4 <MX_TIM3_Init+0xa0>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b32:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <MX_TIM3_Init+0xa0>)
 8001b34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b38:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b3a:	4b1a      	ldr	r3, [pc, #104]	; (8001ba4 <MX_TIM3_Init+0xa0>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b40:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <MX_TIM3_Init+0xa0>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b46:	2303      	movs	r3, #3
 8001b48:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001b56:	230a      	movs	r3, #10
 8001b58:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b62:	2300      	movs	r3, #0
 8001b64:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001b6a:	f107 030c 	add.w	r3, r7, #12
 8001b6e:	4619      	mov	r1, r3
 8001b70:	480c      	ldr	r0, [pc, #48]	; (8001ba4 <MX_TIM3_Init+0xa0>)
 8001b72:	f002 fa71 	bl	8004058 <HAL_TIM_Encoder_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001b7c:	f000 f8df 	bl	8001d3e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b80:	2300      	movs	r3, #0
 8001b82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <MX_TIM3_Init+0xa0>)
 8001b8e:	f002 fbaf 	bl	80042f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001b98:	f000 f8d1 	bl	8001d3e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b9c:	bf00      	nop
 8001b9e:	3730      	adds	r7, #48	; 0x30
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000530 	.word	0x20000530
 8001ba8:	40000400 	.word	0x40000400

08001bac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb2:	f107 0310 	add.w	r3, r7, #16
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bc0:	4b46      	ldr	r3, [pc, #280]	; (8001cdc <MX_GPIO_Init+0x130>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	4a45      	ldr	r2, [pc, #276]	; (8001cdc <MX_GPIO_Init+0x130>)
 8001bc6:	f043 0310 	orr.w	r3, r3, #16
 8001bca:	6193      	str	r3, [r2, #24]
 8001bcc:	4b43      	ldr	r3, [pc, #268]	; (8001cdc <MX_GPIO_Init+0x130>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	f003 0310 	and.w	r3, r3, #16
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bd8:	4b40      	ldr	r3, [pc, #256]	; (8001cdc <MX_GPIO_Init+0x130>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	4a3f      	ldr	r2, [pc, #252]	; (8001cdc <MX_GPIO_Init+0x130>)
 8001bde:	f043 0320 	orr.w	r3, r3, #32
 8001be2:	6193      	str	r3, [r2, #24]
 8001be4:	4b3d      	ldr	r3, [pc, #244]	; (8001cdc <MX_GPIO_Init+0x130>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	f003 0320 	and.w	r3, r3, #32
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf0:	4b3a      	ldr	r3, [pc, #232]	; (8001cdc <MX_GPIO_Init+0x130>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	4a39      	ldr	r2, [pc, #228]	; (8001cdc <MX_GPIO_Init+0x130>)
 8001bf6:	f043 0304 	orr.w	r3, r3, #4
 8001bfa:	6193      	str	r3, [r2, #24]
 8001bfc:	4b37      	ldr	r3, [pc, #220]	; (8001cdc <MX_GPIO_Init+0x130>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c08:	4b34      	ldr	r3, [pc, #208]	; (8001cdc <MX_GPIO_Init+0x130>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	4a33      	ldr	r2, [pc, #204]	; (8001cdc <MX_GPIO_Init+0x130>)
 8001c0e:	f043 0308 	orr.w	r3, r3, #8
 8001c12:	6193      	str	r3, [r2, #24]
 8001c14:	4b31      	ldr	r3, [pc, #196]	; (8001cdc <MX_GPIO_Init+0x130>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	f003 0308 	and.w	r3, r3, #8
 8001c1c:	603b      	str	r3, [r7, #0]
 8001c1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001c20:	2200      	movs	r2, #0
 8001c22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c26:	482e      	ldr	r0, [pc, #184]	; (8001ce0 <MX_GPIO_Init+0x134>)
 8001c28:	f001 f942 	bl	8002eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDCard_CS_GPIO_Port, SDCard_CS_Pin, GPIO_PIN_RESET);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c32:	482c      	ldr	r0, [pc, #176]	; (8001ce4 <MX_GPIO_Init+0x138>)
 8001c34:	f001 f93c 	bl	8002eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FOC_CS_Pin|CS_magnet_Pin|CS_gyro_Pin|CS_accel_Pin 
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f44f 411e 	mov.w	r1, #40448	; 0x9e00
 8001c3e:	482a      	ldr	r0, [pc, #168]	; (8001ce8 <MX_GPIO_Init+0x13c>)
 8001c40:	f001 f936 	bl	8002eb0 <HAL_GPIO_WritePin>
                          |CAN_Stand_By_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001c44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c52:	2302      	movs	r3, #2
 8001c54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001c56:	f107 0310 	add.w	r3, r7, #16
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4820      	ldr	r0, [pc, #128]	; (8001ce0 <MX_GPIO_Init+0x134>)
 8001c5e:	f000 ffcd 	bl	8002bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : SDCard_CS_Pin */
  GPIO_InitStruct.Pin = SDCard_CS_Pin;
 8001c62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c70:	2302      	movs	r3, #2
 8001c72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDCard_CS_GPIO_Port, &GPIO_InitStruct);
 8001c74:	f107 0310 	add.w	r3, r7, #16
 8001c78:	4619      	mov	r1, r3
 8001c7a:	481a      	ldr	r0, [pc, #104]	; (8001ce4 <MX_GPIO_Init+0x138>)
 8001c7c:	f000 ffbe 	bl	8002bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : SDCard_Detect_Pin */
  GPIO_InitStruct.Pin = SDCard_Detect_Pin;
 8001c80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SDCard_Detect_GPIO_Port, &GPIO_InitStruct);
 8001c8e:	f107 0310 	add.w	r3, r7, #16
 8001c92:	4619      	mov	r1, r3
 8001c94:	4813      	ldr	r0, [pc, #76]	; (8001ce4 <MX_GPIO_Init+0x138>)
 8001c96:	f000 ffb1 	bl	8002bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : Clock_Output_Pin */
  GPIO_InitStruct.Pin = Clock_Output_Pin;
 8001c9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Clock_Output_GPIO_Port, &GPIO_InitStruct);
 8001ca8:	f107 0310 	add.w	r3, r7, #16
 8001cac:	4619      	mov	r1, r3
 8001cae:	480e      	ldr	r0, [pc, #56]	; (8001ce8 <MX_GPIO_Init+0x13c>)
 8001cb0:	f000 ffa4 	bl	8002bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : FOC_CS_Pin CS_magnet_Pin CS_gyro_Pin CS_accel_Pin 
                           CAN_Stand_By_Pin */
  GPIO_InitStruct.Pin = FOC_CS_Pin|CS_magnet_Pin|CS_gyro_Pin|CS_accel_Pin 
 8001cb4:	f44f 431e 	mov.w	r3, #40448	; 0x9e00
 8001cb8:	613b      	str	r3, [r7, #16]
                          |CAN_Stand_By_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc6:	f107 0310 	add.w	r3, r7, #16
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4806      	ldr	r0, [pc, #24]	; (8001ce8 <MX_GPIO_Init+0x13c>)
 8001cce:	f000 ff95 	bl	8002bfc <HAL_GPIO_Init>

}
 8001cd2:	bf00      	nop
 8001cd4:	3720      	adds	r7, #32
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40011000 	.word	0x40011000
 8001ce4:	40010c00 	.word	0x40010c00
 8001ce8:	40010800 	.word	0x40010800

08001cec <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch){
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff fd16 	bl	8001728 <ITM_SendChar>
	return ch;
 8001cfc:	687b      	ldr	r3, [r7, #4]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <_write>:

int _write(int file, char *ptr, int len){
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b086      	sub	sp, #24
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	60f8      	str	r0, [r7, #12]
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for(DataIdx = 0; DataIdx < len; DataIdx++){
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
 8001d16:	e009      	b.n	8001d2c <_write+0x26>
		__io_putchar(*ptr++);
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	60ba      	str	r2, [r7, #8]
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ffe3 	bl	8001cec <__io_putchar>
	for(DataIdx = 0; DataIdx < len; DataIdx++){
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	dbf1      	blt.n	8001d18 <_write+0x12>
	}
	return len;
 8001d34:	687b      	ldr	r3, [r7, #4]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d42:	bf00      	nop
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr
	...

08001d4c <mount_card>:
	}
}

/* Mount SD Card */
FRESULT mount_card (FATFS *fs)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
      return f_mount(fs, "", 0);
 8001d54:	2200      	movs	r2, #0
 8001d56:	4904      	ldr	r1, [pc, #16]	; (8001d68 <mount_card+0x1c>)
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f004 fa03 	bl	8006164 <f_mount>
 8001d5e:	4603      	mov	r3, r0
      //if fresult <>
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	08009b64 	.word	0x08009b64

08001d6c <card_capacity>:
}

/*************** Card capacity details ********************/

void card_capacity (DWORD *free_space, DWORD *total_space)//, DWORD *fre_clust)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
	FATFS *pfs;
	DWORD fre_clust;

	/* Check free space */
	f_getfree("", &fre_clust, &pfs);
 8001d76:	f107 020c 	add.w	r2, r7, #12
 8001d7a:	f107 0308 	add.w	r3, r7, #8
 8001d7e:	4619      	mov	r1, r3
 8001d80:	480d      	ldr	r0, [pc, #52]	; (8001db8 <card_capacity+0x4c>)
 8001d82:	f005 f92f 	bl	8006fe4 <f_getfree>
	*total_space = ((pfs->n_fatent - 2) * (pfs->csize)); //total number of sectors
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001d8c:	3b02      	subs	r3, #2
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8001d94:	fb02 f203 	mul.w	r2, r2, r3
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	601a      	str	r2, [r3, #0]
	*free_space = (fre_clust * (pfs->csize)); //number of free sectors
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8001da2:	461a      	mov	r2, r3
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	fb03 f202 	mul.w	r2, r3, r2
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	601a      	str	r2, [r3, #0]
}
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	08009b64 	.word	0x08009b64

08001dbc <update_file>:
	return fresult;
}

/*********************UPDATING an existing file ***************************/
FRESULT update_file(char *filename, char *data, FIL *fil, UINT *bw)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
 8001dc8:	603b      	str	r3, [r7, #0]
	FRESULT fresult;

	/* Open the file with write access */
	fresult = f_open(fil, filename, FA_OPEN_ALWAYS | FA_WRITE);
 8001dca:	2212      	movs	r2, #18
 8001dcc:	68f9      	ldr	r1, [r7, #12]
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f004 fa10 	bl	80061f4 <f_open>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	75fb      	strb	r3, [r7, #23]

	/* Move to offset to the end of the file */
	fresult = f_lseek(fil, fil->fsize);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001dde:	4619      	mov	r1, r3
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f004 fea1 	bl	8006b28 <f_lseek>
 8001de6:	4603      	mov	r3, r0
 8001de8:	75fb      	strb	r3, [r7, #23]

	/* write the string to the file */
	fresult = f_puts(data, fil); //pode precisar de um "\n"
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	68b8      	ldr	r0, [r7, #8]
 8001dee:	f005 fa03 	bl	80071f8 <f_puts>
 8001df2:	4603      	mov	r3, r0
 8001df4:	75fb      	strb	r3, [r7, #23]

	f_close (fil);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f004 fe6e 	bl	8006ad8 <f_close>
	return fresult;
 8001dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3718      	adds	r7, #24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e0e:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <HAL_MspInit+0x5c>)
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	4a14      	ldr	r2, [pc, #80]	; (8001e64 <HAL_MspInit+0x5c>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	6193      	str	r3, [r2, #24]
 8001e1a:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <HAL_MspInit+0x5c>)
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e26:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <HAL_MspInit+0x5c>)
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	4a0e      	ldr	r2, [pc, #56]	; (8001e64 <HAL_MspInit+0x5c>)
 8001e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e30:	61d3      	str	r3, [r2, #28]
 8001e32:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <HAL_MspInit+0x5c>)
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	607b      	str	r3, [r7, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <HAL_MspInit+0x60>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	4a04      	ldr	r2, [pc, #16]	; (8001e68 <HAL_MspInit+0x60>)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40010000 	.word	0x40010000

08001e6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b088      	sub	sp, #32
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 0310 	add.w	r3, r7, #16
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a14      	ldr	r2, [pc, #80]	; (8001ed8 <HAL_ADC_MspInit+0x6c>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d121      	bne.n	8001ed0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e8c:	4b13      	ldr	r3, [pc, #76]	; (8001edc <HAL_ADC_MspInit+0x70>)
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	4a12      	ldr	r2, [pc, #72]	; (8001edc <HAL_ADC_MspInit+0x70>)
 8001e92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e96:	6193      	str	r3, [r2, #24]
 8001e98:	4b10      	ldr	r3, [pc, #64]	; (8001edc <HAL_ADC_MspInit+0x70>)
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea4:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <HAL_ADC_MspInit+0x70>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	4a0c      	ldr	r2, [pc, #48]	; (8001edc <HAL_ADC_MspInit+0x70>)
 8001eaa:	f043 0304 	orr.w	r3, r3, #4
 8001eae:	6193      	str	r3, [r2, #24]
 8001eb0:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <HAL_ADC_MspInit+0x70>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec4:	f107 0310 	add.w	r3, r7, #16
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4805      	ldr	r0, [pc, #20]	; (8001ee0 <HAL_ADC_MspInit+0x74>)
 8001ecc:	f000 fe96 	bl	8002bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ed0:	bf00      	nop
 8001ed2:	3720      	adds	r7, #32
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40012400 	.word	0x40012400
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40010800 	.word	0x40010800

08001ee4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	; 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a25      	ldr	r2, [pc, #148]	; (8001f94 <HAL_CAN_MspInit+0xb0>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d143      	bne.n	8001f8c <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001f04:	4b24      	ldr	r3, [pc, #144]	; (8001f98 <HAL_CAN_MspInit+0xb4>)
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	4a23      	ldr	r2, [pc, #140]	; (8001f98 <HAL_CAN_MspInit+0xb4>)
 8001f0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f0e:	61d3      	str	r3, [r2, #28]
 8001f10:	4b21      	ldr	r3, [pc, #132]	; (8001f98 <HAL_CAN_MspInit+0xb4>)
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1c:	4b1e      	ldr	r3, [pc, #120]	; (8001f98 <HAL_CAN_MspInit+0xb4>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	4a1d      	ldr	r2, [pc, #116]	; (8001f98 <HAL_CAN_MspInit+0xb4>)
 8001f22:	f043 0308 	orr.w	r3, r3, #8
 8001f26:	6193      	str	r3, [r2, #24]
 8001f28:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <HAL_CAN_MspInit+0xb4>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	f003 0308 	and.w	r3, r3, #8
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f42:	f107 0314 	add.w	r3, r7, #20
 8001f46:	4619      	mov	r1, r3
 8001f48:	4814      	ldr	r0, [pc, #80]	; (8001f9c <HAL_CAN_MspInit+0xb8>)
 8001f4a:	f000 fe57 	bl	8002bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f54:	2302      	movs	r3, #2
 8001f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	4619      	mov	r1, r3
 8001f62:	480e      	ldr	r0, [pc, #56]	; (8001f9c <HAL_CAN_MspInit+0xb8>)
 8001f64:	f000 fe4a 	bl	8002bfc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001f68:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <HAL_CAN_MspInit+0xbc>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
 8001f86:	4a06      	ldr	r2, [pc, #24]	; (8001fa0 <HAL_CAN_MspInit+0xbc>)
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001f8c:	bf00      	nop
 8001f8e:	3728      	adds	r7, #40	; 0x28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40006400 	.word	0x40006400
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40010c00 	.word	0x40010c00
 8001fa0:	40010000 	.word	0x40010000

08001fa4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b088      	sub	sp, #32
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 0310 	add.w	r3, r7, #16
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a1c      	ldr	r2, [pc, #112]	; (8002030 <HAL_SPI_MspInit+0x8c>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d131      	bne.n	8002028 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001fc4:	4b1b      	ldr	r3, [pc, #108]	; (8002034 <HAL_SPI_MspInit+0x90>)
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	4a1a      	ldr	r2, [pc, #104]	; (8002034 <HAL_SPI_MspInit+0x90>)
 8001fca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fce:	61d3      	str	r3, [r2, #28]
 8001fd0:	4b18      	ldr	r3, [pc, #96]	; (8002034 <HAL_SPI_MspInit+0x90>)
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fdc:	4b15      	ldr	r3, [pc, #84]	; (8002034 <HAL_SPI_MspInit+0x90>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	4a14      	ldr	r2, [pc, #80]	; (8002034 <HAL_SPI_MspInit+0x90>)
 8001fe2:	f043 0308 	orr.w	r3, r3, #8
 8001fe6:	6193      	str	r3, [r2, #24]
 8001fe8:	4b12      	ldr	r3, [pc, #72]	; (8002034 <HAL_SPI_MspInit+0x90>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	f003 0308 	and.w	r3, r3, #8
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001ff4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001ff8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ffe:	2303      	movs	r3, #3
 8002000:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002002:	f107 0310 	add.w	r3, r7, #16
 8002006:	4619      	mov	r1, r3
 8002008:	480b      	ldr	r0, [pc, #44]	; (8002038 <HAL_SPI_MspInit+0x94>)
 800200a:	f000 fdf7 	bl	8002bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800200e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002012:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201c:	f107 0310 	add.w	r3, r7, #16
 8002020:	4619      	mov	r1, r3
 8002022:	4805      	ldr	r0, [pc, #20]	; (8002038 <HAL_SPI_MspInit+0x94>)
 8002024:	f000 fdea 	bl	8002bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002028:	bf00      	nop
 800202a:	3720      	adds	r7, #32
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40003800 	.word	0x40003800
 8002034:	40021000 	.word	0x40021000
 8002038:	40010c00 	.word	0x40010c00

0800203c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b088      	sub	sp, #32
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002044:	f107 0310 	add.w	r3, r7, #16
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a15      	ldr	r2, [pc, #84]	; (80020ac <HAL_TIM_Encoder_MspInit+0x70>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d123      	bne.n	80020a4 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800205c:	4b14      	ldr	r3, [pc, #80]	; (80020b0 <HAL_TIM_Encoder_MspInit+0x74>)
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	4a13      	ldr	r2, [pc, #76]	; (80020b0 <HAL_TIM_Encoder_MspInit+0x74>)
 8002062:	f043 0302 	orr.w	r3, r3, #2
 8002066:	61d3      	str	r3, [r2, #28]
 8002068:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <HAL_TIM_Encoder_MspInit+0x74>)
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002074:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <HAL_TIM_Encoder_MspInit+0x74>)
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	4a0d      	ldr	r2, [pc, #52]	; (80020b0 <HAL_TIM_Encoder_MspInit+0x74>)
 800207a:	f043 0304 	orr.w	r3, r3, #4
 800207e:	6193      	str	r3, [r2, #24]
 8002080:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <HAL_TIM_Encoder_MspInit+0x74>)
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = encoder_va_Pin|encoder_vb_Pin;
 800208c:	23c0      	movs	r3, #192	; 0xc0
 800208e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002098:	f107 0310 	add.w	r3, r7, #16
 800209c:	4619      	mov	r1, r3
 800209e:	4805      	ldr	r0, [pc, #20]	; (80020b4 <HAL_TIM_Encoder_MspInit+0x78>)
 80020a0:	f000 fdac 	bl	8002bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80020a4:	bf00      	nop
 80020a6:	3720      	adds	r7, #32
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40000400 	.word	0x40000400
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40010800 	.word	0x40010800

080020b8 <SDTimer_handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 80020bc:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <SDTimer_handler+0x3c>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d006      	beq.n	80020d4 <SDTimer_handler+0x1c>
		Timer1--;
 80020c6:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <SDTimer_handler+0x3c>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	3b01      	subs	r3, #1
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <SDTimer_handler+0x3c>)
 80020d2:	701a      	strb	r2, [r3, #0]
	if(Timer2 > 0)
 80020d4:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <SDTimer_handler+0x40>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d006      	beq.n	80020ec <SDTimer_handler+0x34>
		Timer2--;
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <SDTimer_handler+0x40>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	3b01      	subs	r3, #1
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	4b03      	ldr	r3, [pc, #12]	; (80020f8 <SDTimer_handler+0x40>)
 80020ea:	701a      	strb	r2, [r3, #0]
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr
 80020f4:	20000a59 	.word	0x20000a59
 80020f8:	20000a58 	.word	0x20000a58

080020fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002100:	bf00      	nop
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr

08002108 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800210c:	e7fe      	b.n	800210c <HardFault_Handler+0x4>

0800210e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002112:	e7fe      	b.n	8002112 <MemManage_Handler+0x4>

08002114 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002118:	e7fe      	b.n	8002118 <BusFault_Handler+0x4>

0800211a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800211a:	b480      	push	{r7}
 800211c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800211e:	e7fe      	b.n	800211e <UsageFault_Handler+0x4>

08002120 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002124:	bf00      	nop
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr

0800212c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr

08002138 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr

08002144 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFsCnt++;
 8002148:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <SysTick_Handler+0x30>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	b2db      	uxtb	r3, r3
 800214e:	3301      	adds	r3, #1
 8002150:	b2da      	uxtb	r2, r3
 8002152:	4b08      	ldr	r3, [pc, #32]	; (8002174 <SysTick_Handler+0x30>)
 8002154:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt > 10){
 8002156:	4b07      	ldr	r3, [pc, #28]	; (8002174 <SysTick_Handler+0x30>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b0a      	cmp	r3, #10
 800215e:	d904      	bls.n	800216a <SysTick_Handler+0x26>
		FatFsCnt=0;
 8002160:	4b04      	ldr	r3, [pc, #16]	; (8002174 <SysTick_Handler+0x30>)
 8002162:	2200      	movs	r2, #0
 8002164:	701a      	strb	r2, [r3, #0]
		SDTimer_handler();
 8002166:	f7ff ffa7 	bl	80020b8 <SDTimer_handler>
	}


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800216a:	f000 f91f 	bl	80023ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000212 	.word	0x20000212

08002178 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	e00a      	b.n	80021a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800218a:	f3af 8000 	nop.w
 800218e:	4601      	mov	r1, r0
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	1c5a      	adds	r2, r3, #1
 8002194:	60ba      	str	r2, [r7, #8]
 8002196:	b2ca      	uxtb	r2, r1
 8002198:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	3301      	adds	r3, #1
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	dbf0      	blt.n	800218a <_read+0x12>
	}

return len;
 80021a8:	687b      	ldr	r3, [r7, #4]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
	return -1;
 80021ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021be:	4618      	mov	r0, r3
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr

080021c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021d8:	605a      	str	r2, [r3, #4]
	return 0;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr

080021e6 <_isatty>:

int _isatty(int file)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
	return 1;
 80021ee:	2301      	movs	r3, #1
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr

080021fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b085      	sub	sp, #20
 80021fe:	af00      	add	r7, sp, #0
 8002200:	60f8      	str	r0, [r7, #12]
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	607a      	str	r2, [r7, #4]
	return 0;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr
	...

08002214 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <_sbrk+0x50>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d102      	bne.n	800222a <_sbrk+0x16>
		heap_end = &end;
 8002224:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <_sbrk+0x50>)
 8002226:	4a10      	ldr	r2, [pc, #64]	; (8002268 <_sbrk+0x54>)
 8002228:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800222a:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <_sbrk+0x50>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <_sbrk+0x50>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4413      	add	r3, r2
 8002238:	466a      	mov	r2, sp
 800223a:	4293      	cmp	r3, r2
 800223c:	d907      	bls.n	800224e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800223e:	f005 f86f 	bl	8007320 <__errno>
 8002242:	4602      	mov	r2, r0
 8002244:	230c      	movs	r3, #12
 8002246:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002248:	f04f 33ff 	mov.w	r3, #4294967295
 800224c:	e006      	b.n	800225c <_sbrk+0x48>
	}

	heap_end += incr;
 800224e:	4b05      	ldr	r3, [pc, #20]	; (8002264 <_sbrk+0x50>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4413      	add	r3, r2
 8002256:	4a03      	ldr	r2, [pc, #12]	; (8002264 <_sbrk+0x50>)
 8002258:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800225a:	68fb      	ldr	r3, [r7, #12]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	20000214 	.word	0x20000214
 8002268:	20000ec8 	.word	0x20000ec8

0800226c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002270:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <SystemInit+0x5c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a14      	ldr	r2, [pc, #80]	; (80022c8 <SystemInit+0x5c>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <SystemInit+0x5c>)
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	4911      	ldr	r1, [pc, #68]	; (80022c8 <SystemInit+0x5c>)
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <SystemInit+0x60>)
 8002284:	4013      	ands	r3, r2
 8002286:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002288:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <SystemInit+0x5c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a0e      	ldr	r2, [pc, #56]	; (80022c8 <SystemInit+0x5c>)
 800228e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002296:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <SystemInit+0x5c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a0a      	ldr	r2, [pc, #40]	; (80022c8 <SystemInit+0x5c>)
 800229e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022a2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80022a4:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <SystemInit+0x5c>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	4a07      	ldr	r2, [pc, #28]	; (80022c8 <SystemInit+0x5c>)
 80022aa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80022ae:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80022b0:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <SystemInit+0x5c>)
 80022b2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80022b6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80022b8:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <SystemInit+0x64>)
 80022ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022be:	609a      	str	r2, [r3, #8]
#endif 
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr
 80022c8:	40021000 	.word	0x40021000
 80022cc:	f8ff0000 	.word	0xf8ff0000
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80022d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80022d6:	e003      	b.n	80022e0 <LoopCopyDataInit>

080022d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80022d8:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80022da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80022dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80022de:	3104      	adds	r1, #4

080022e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80022e0:	480a      	ldr	r0, [pc, #40]	; (800230c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80022e2:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80022e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80022e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80022e8:	d3f6      	bcc.n	80022d8 <CopyDataInit>
  ldr r2, =_sbss
 80022ea:	4a0a      	ldr	r2, [pc, #40]	; (8002314 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80022ec:	e002      	b.n	80022f4 <LoopFillZerobss>

080022ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80022ee:	2300      	movs	r3, #0
  str r3, [r2], #4
 80022f0:	f842 3b04 	str.w	r3, [r2], #4

080022f4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80022f4:	4b08      	ldr	r3, [pc, #32]	; (8002318 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80022f6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80022f8:	d3f9      	bcc.n	80022ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022fa:	f7ff ffb7 	bl	800226c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022fe:	f005 f815 	bl	800732c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002302:	f7ff fa37 	bl	8001774 <main>
  bx lr
 8002306:	4770      	bx	lr
  ldr r3, =_sidata
 8002308:	08009f18 	.word	0x08009f18
  ldr r0, =_sdata
 800230c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002310:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 8002314:	200001f4 	.word	0x200001f4
  ldr r3, = _ebss
 8002318:	20000ec8 	.word	0x20000ec8

0800231c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800231c:	e7fe      	b.n	800231c <ADC1_2_IRQHandler>
	...

08002320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002324:	4b08      	ldr	r3, [pc, #32]	; (8002348 <HAL_Init+0x28>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a07      	ldr	r2, [pc, #28]	; (8002348 <HAL_Init+0x28>)
 800232a:	f043 0310 	orr.w	r3, r3, #16
 800232e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002330:	2003      	movs	r0, #3
 8002332:	f000 fc2f 	bl	8002b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002336:	2000      	movs	r0, #0
 8002338:	f000 f808 	bl	800234c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800233c:	f7ff fd64 	bl	8001e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40022000 	.word	0x40022000

0800234c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002354:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <HAL_InitTick+0x54>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <HAL_InitTick+0x58>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	4619      	mov	r1, r3
 800235e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002362:	fbb3 f3f1 	udiv	r3, r3, r1
 8002366:	fbb2 f3f3 	udiv	r3, r2, r3
 800236a:	4618      	mov	r0, r3
 800236c:	f000 fc39 	bl	8002be2 <HAL_SYSTICK_Config>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e00e      	b.n	8002398 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b0f      	cmp	r3, #15
 800237e:	d80a      	bhi.n	8002396 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002380:	2200      	movs	r2, #0
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	f04f 30ff 	mov.w	r0, #4294967295
 8002388:	f000 fc0f 	bl	8002baa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800238c:	4a06      	ldr	r2, [pc, #24]	; (80023a8 <HAL_InitTick+0x5c>)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	e000      	b.n	8002398 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
}
 8002398:	4618      	mov	r0, r3
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	20000004 	.word	0x20000004
 80023a4:	2000000c 	.word	0x2000000c
 80023a8:	20000008 	.word	0x20000008

080023ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <HAL_IncTick+0x1c>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	4b05      	ldr	r3, [pc, #20]	; (80023cc <HAL_IncTick+0x20>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4413      	add	r3, r2
 80023bc:	4a03      	ldr	r2, [pc, #12]	; (80023cc <HAL_IncTick+0x20>)
 80023be:	6013      	str	r3, [r2, #0]
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr
 80023c8:	2000000c 	.word	0x2000000c
 80023cc:	20000a5c 	.word	0x20000a5c

080023d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return uwTick;
 80023d4:	4b02      	ldr	r3, [pc, #8]	; (80023e0 <HAL_GetTick+0x10>)
 80023d6:	681b      	ldr	r3, [r3, #0]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr
 80023e0:	20000a5c 	.word	0x20000a5c

080023e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023ec:	f7ff fff0 	bl	80023d0 <HAL_GetTick>
 80023f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fc:	d005      	beq.n	800240a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023fe:	4b09      	ldr	r3, [pc, #36]	; (8002424 <HAL_Delay+0x40>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	461a      	mov	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4413      	add	r3, r2
 8002408:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800240a:	bf00      	nop
 800240c:	f7ff ffe0 	bl	80023d0 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	429a      	cmp	r2, r3
 800241a:	d8f7      	bhi.n	800240c <HAL_Delay+0x28>
  {
  }
}
 800241c:	bf00      	nop
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	2000000c 	.word	0x2000000c

08002428 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002430:	2300      	movs	r3, #0
 8002432:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e0be      	b.n	80025c8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002454:	2b00      	cmp	r3, #0
 8002456:	d109      	bne.n	800246c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff fd00 	bl	8001e6c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 f9ab 	bl	80027c8 <ADC_ConversionStop_Disable>
 8002472:	4603      	mov	r3, r0
 8002474:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247a:	f003 0310 	and.w	r3, r3, #16
 800247e:	2b00      	cmp	r3, #0
 8002480:	f040 8099 	bne.w	80025b6 <HAL_ADC_Init+0x18e>
 8002484:	7dfb      	ldrb	r3, [r7, #23]
 8002486:	2b00      	cmp	r3, #0
 8002488:	f040 8095 	bne.w	80025b6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002490:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002494:	f023 0302 	bic.w	r3, r3, #2
 8002498:	f043 0202 	orr.w	r2, r3, #2
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80024a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	7b1b      	ldrb	r3, [r3, #12]
 80024ae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80024b0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024c0:	d003      	beq.n	80024ca <HAL_ADC_Init+0xa2>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d102      	bne.n	80024d0 <HAL_ADC_Init+0xa8>
 80024ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024ce:	e000      	b.n	80024d2 <HAL_ADC_Init+0xaa>
 80024d0:	2300      	movs	r3, #0
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	7d1b      	ldrb	r3, [r3, #20]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d119      	bne.n	8002514 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	7b1b      	ldrb	r3, [r3, #12]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d109      	bne.n	80024fc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	3b01      	subs	r3, #1
 80024ee:	035a      	lsls	r2, r3, #13
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	e00b      	b.n	8002514 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002500:	f043 0220 	orr.w	r2, r3, #32
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250c:	f043 0201 	orr.w	r2, r3, #1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	430a      	orrs	r2, r1
 8002526:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	4b28      	ldr	r3, [pc, #160]	; (80025d0 <HAL_ADC_Init+0x1a8>)
 8002530:	4013      	ands	r3, r2
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6812      	ldr	r2, [r2, #0]
 8002536:	68b9      	ldr	r1, [r7, #8]
 8002538:	430b      	orrs	r3, r1
 800253a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002544:	d003      	beq.n	800254e <HAL_ADC_Init+0x126>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d104      	bne.n	8002558 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	3b01      	subs	r3, #1
 8002554:	051b      	lsls	r3, r3, #20
 8002556:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	430a      	orrs	r2, r1
 800256a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	4b18      	ldr	r3, [pc, #96]	; (80025d4 <HAL_ADC_Init+0x1ac>)
 8002574:	4013      	ands	r3, r2
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	429a      	cmp	r2, r3
 800257a:	d10b      	bne.n	8002594 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002586:	f023 0303 	bic.w	r3, r3, #3
 800258a:	f043 0201 	orr.w	r2, r3, #1
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002592:	e018      	b.n	80025c6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002598:	f023 0312 	bic.w	r3, r3, #18
 800259c:	f043 0210 	orr.w	r2, r3, #16
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a8:	f043 0201 	orr.w	r2, r3, #1
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80025b4:	e007      	b.n	80025c6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ba:	f043 0210 	orr.w	r2, r3, #16
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80025c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	ffe1f7fd 	.word	0xffe1f7fd
 80025d4:	ff1f0efe 	.word	0xff1f0efe

080025d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025e2:	2300      	movs	r3, #0
 80025e4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d101      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x20>
 80025f4:	2302      	movs	r3, #2
 80025f6:	e0dc      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x1da>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2b06      	cmp	r3, #6
 8002606:	d81c      	bhi.n	8002642 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	4613      	mov	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	3b05      	subs	r3, #5
 800261a:	221f      	movs	r2, #31
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	4019      	ands	r1, r3
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	6818      	ldr	r0, [r3, #0]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	3b05      	subs	r3, #5
 8002634:	fa00 f203 	lsl.w	r2, r0, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	635a      	str	r2, [r3, #52]	; 0x34
 8002640:	e03c      	b.n	80026bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b0c      	cmp	r3, #12
 8002648:	d81c      	bhi.n	8002684 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	3b23      	subs	r3, #35	; 0x23
 800265c:	221f      	movs	r2, #31
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43db      	mvns	r3, r3
 8002664:	4019      	ands	r1, r3
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	3b23      	subs	r3, #35	; 0x23
 8002676:	fa00 f203 	lsl.w	r2, r0, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	631a      	str	r2, [r3, #48]	; 0x30
 8002682:	e01b      	b.n	80026bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	3b41      	subs	r3, #65	; 0x41
 8002696:	221f      	movs	r2, #31
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	4019      	ands	r1, r3
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	6818      	ldr	r0, [r3, #0]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	4613      	mov	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	3b41      	subs	r3, #65	; 0x41
 80026b0:	fa00 f203 	lsl.w	r2, r0, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b09      	cmp	r3, #9
 80026c2:	d91c      	bls.n	80026fe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68d9      	ldr	r1, [r3, #12]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	4613      	mov	r3, r2
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	4413      	add	r3, r2
 80026d4:	3b1e      	subs	r3, #30
 80026d6:	2207      	movs	r2, #7
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	4019      	ands	r1, r3
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	6898      	ldr	r0, [r3, #8]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	4613      	mov	r3, r2
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	4413      	add	r3, r2
 80026ee:	3b1e      	subs	r3, #30
 80026f0:	fa00 f203 	lsl.w	r2, r0, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	60da      	str	r2, [r3, #12]
 80026fc:	e019      	b.n	8002732 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6919      	ldr	r1, [r3, #16]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	4613      	mov	r3, r2
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	4413      	add	r3, r2
 800270e:	2207      	movs	r2, #7
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	4019      	ands	r1, r3
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	6898      	ldr	r0, [r3, #8]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	4613      	mov	r3, r2
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	4413      	add	r3, r2
 8002726:	fa00 f203 	lsl.w	r2, r0, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2b10      	cmp	r3, #16
 8002738:	d003      	beq.n	8002742 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800273e:	2b11      	cmp	r3, #17
 8002740:	d132      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a1d      	ldr	r2, [pc, #116]	; (80027bc <HAL_ADC_ConfigChannel+0x1e4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d125      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d126      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002768:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2b10      	cmp	r3, #16
 8002770:	d11a      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002772:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a13      	ldr	r2, [pc, #76]	; (80027c4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002778:	fba2 2303 	umull	r2, r3, r2, r3
 800277c:	0c9a      	lsrs	r2, r3, #18
 800277e:	4613      	mov	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002788:	e002      	b.n	8002790 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	3b01      	subs	r3, #1
 800278e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1f9      	bne.n	800278a <HAL_ADC_ConfigChannel+0x1b2>
 8002796:	e007      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279c:	f043 0220 	orr.w	r2, r3, #32
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr
 80027bc:	40012400 	.word	0x40012400
 80027c0:	20000004 	.word	0x20000004
 80027c4:	431bde83 	.word	0x431bde83

080027c8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d127      	bne.n	8002832 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0201 	bic.w	r2, r2, #1
 80027f0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027f2:	f7ff fded 	bl	80023d0 <HAL_GetTick>
 80027f6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027f8:	e014      	b.n	8002824 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027fa:	f7ff fde9 	bl	80023d0 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d90d      	bls.n	8002824 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280c:	f043 0210 	orr.w	r2, r3, #16
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	f043 0201 	orr.w	r2, r3, #1
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e007      	b.n	8002834 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b01      	cmp	r3, #1
 8002830:	d0e3      	beq.n	80027fa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e0ed      	b.n	8002a2a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d102      	bne.n	8002860 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff fb42 	bl	8001ee4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0202 	bic.w	r2, r2, #2
 800286e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002870:	f7ff fdae 	bl	80023d0 <HAL_GetTick>
 8002874:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002876:	e012      	b.n	800289e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002878:	f7ff fdaa 	bl	80023d0 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b0a      	cmp	r3, #10
 8002884:	d90b      	bls.n	800289e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2205      	movs	r2, #5
 8002896:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e0c5      	b.n	8002a2a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1e5      	bne.n	8002878 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0201 	orr.w	r2, r2, #1
 80028ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028bc:	f7ff fd88 	bl	80023d0 <HAL_GetTick>
 80028c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80028c2:	e012      	b.n	80028ea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028c4:	f7ff fd84 	bl	80023d0 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b0a      	cmp	r3, #10
 80028d0:	d90b      	bls.n	80028ea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2205      	movs	r2, #5
 80028e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e09f      	b.n	8002a2a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0e5      	beq.n	80028c4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	7e1b      	ldrb	r3, [r3, #24]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d108      	bne.n	8002912 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	e007      	b.n	8002922 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002920:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	7e5b      	ldrb	r3, [r3, #25]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d108      	bne.n	800293c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	e007      	b.n	800294c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800294a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	7e9b      	ldrb	r3, [r3, #26]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d108      	bne.n	8002966 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0220 	orr.w	r2, r2, #32
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	e007      	b.n	8002976 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 0220 	bic.w	r2, r2, #32
 8002974:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	7edb      	ldrb	r3, [r3, #27]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d108      	bne.n	8002990 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0210 	bic.w	r2, r2, #16
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	e007      	b.n	80029a0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0210 	orr.w	r2, r2, #16
 800299e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	7f1b      	ldrb	r3, [r3, #28]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d108      	bne.n	80029ba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0208 	orr.w	r2, r2, #8
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	e007      	b.n	80029ca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 0208 	bic.w	r2, r2, #8
 80029c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	7f5b      	ldrb	r3, [r3, #29]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d108      	bne.n	80029e4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f042 0204 	orr.w	r2, r2, #4
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	e007      	b.n	80029f4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0204 	bic.w	r2, r2, #4
 80029f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	ea42 0103 	orr.w	r1, r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	1e5a      	subs	r2, r3, #1
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <__NVIC_SetPriorityGrouping>:
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a44:	4b0c      	ldr	r3, [pc, #48]	; (8002a78 <__NVIC_SetPriorityGrouping+0x44>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a50:	4013      	ands	r3, r2
 8002a52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a66:	4a04      	ldr	r2, [pc, #16]	; (8002a78 <__NVIC_SetPriorityGrouping+0x44>)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	60d3      	str	r3, [r2, #12]
}
 8002a6c:	bf00      	nop
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	e000ed00 	.word	0xe000ed00

08002a7c <__NVIC_GetPriorityGrouping>:
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a80:	4b04      	ldr	r3, [pc, #16]	; (8002a94 <__NVIC_GetPriorityGrouping+0x18>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	0a1b      	lsrs	r3, r3, #8
 8002a86:	f003 0307 	and.w	r3, r3, #7
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	e000ed00 	.word	0xe000ed00

08002a98 <__NVIC_SetPriority>:
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	6039      	str	r1, [r7, #0]
 8002aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	db0a      	blt.n	8002ac2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	490c      	ldr	r1, [pc, #48]	; (8002ae4 <__NVIC_SetPriority+0x4c>)
 8002ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab6:	0112      	lsls	r2, r2, #4
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	440b      	add	r3, r1
 8002abc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002ac0:	e00a      	b.n	8002ad8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	4908      	ldr	r1, [pc, #32]	; (8002ae8 <__NVIC_SetPriority+0x50>)
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	3b04      	subs	r3, #4
 8002ad0:	0112      	lsls	r2, r2, #4
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	761a      	strb	r2, [r3, #24]
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	e000e100 	.word	0xe000e100
 8002ae8:	e000ed00 	.word	0xe000ed00

08002aec <NVIC_EncodePriority>:
{
 8002aec:	b480      	push	{r7}
 8002aee:	b089      	sub	sp, #36	; 0x24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	f1c3 0307 	rsb	r3, r3, #7
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	bf28      	it	cs
 8002b0a:	2304      	movcs	r3, #4
 8002b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	3304      	adds	r3, #4
 8002b12:	2b06      	cmp	r3, #6
 8002b14:	d902      	bls.n	8002b1c <NVIC_EncodePriority+0x30>
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	3b03      	subs	r3, #3
 8002b1a:	e000      	b.n	8002b1e <NVIC_EncodePriority+0x32>
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b20:	f04f 32ff 	mov.w	r2, #4294967295
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43da      	mvns	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	401a      	ands	r2, r3
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b34:	f04f 31ff 	mov.w	r1, #4294967295
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3e:	43d9      	mvns	r1, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b44:	4313      	orrs	r3, r2
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3724      	adds	r7, #36	; 0x24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr

08002b50 <SysTick_Config>:
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b60:	d301      	bcc.n	8002b66 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002b62:	2301      	movs	r3, #1
 8002b64:	e00f      	b.n	8002b86 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b66:	4a0a      	ldr	r2, [pc, #40]	; (8002b90 <SysTick_Config+0x40>)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b6e:	210f      	movs	r1, #15
 8002b70:	f04f 30ff 	mov.w	r0, #4294967295
 8002b74:	f7ff ff90 	bl	8002a98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b78:	4b05      	ldr	r3, [pc, #20]	; (8002b90 <SysTick_Config+0x40>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b7e:	4b04      	ldr	r3, [pc, #16]	; (8002b90 <SysTick_Config+0x40>)
 8002b80:	2207      	movs	r2, #7
 8002b82:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	e000e010 	.word	0xe000e010

08002b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff ff49 	bl	8002a34 <__NVIC_SetPriorityGrouping>
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b086      	sub	sp, #24
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	60b9      	str	r1, [r7, #8]
 8002bb4:	607a      	str	r2, [r7, #4]
 8002bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bbc:	f7ff ff5e 	bl	8002a7c <__NVIC_GetPriorityGrouping>
 8002bc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68b9      	ldr	r1, [r7, #8]
 8002bc6:	6978      	ldr	r0, [r7, #20]
 8002bc8:	f7ff ff90 	bl	8002aec <NVIC_EncodePriority>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff ff5f 	bl	8002a98 <__NVIC_SetPriority>
}
 8002bda:	bf00      	nop
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7ff ffb0 	bl	8002b50 <SysTick_Config>
 8002bf0:	4603      	mov	r3, r0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b08b      	sub	sp, #44	; 0x2c
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c06:	2300      	movs	r3, #0
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c0e:	e127      	b.n	8002e60 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c10:	2201      	movs	r2, #1
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	69fa      	ldr	r2, [r7, #28]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	f040 8116 	bne.w	8002e5a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b12      	cmp	r3, #18
 8002c34:	d034      	beq.n	8002ca0 <HAL_GPIO_Init+0xa4>
 8002c36:	2b12      	cmp	r3, #18
 8002c38:	d80d      	bhi.n	8002c56 <HAL_GPIO_Init+0x5a>
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d02b      	beq.n	8002c96 <HAL_GPIO_Init+0x9a>
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d804      	bhi.n	8002c4c <HAL_GPIO_Init+0x50>
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d031      	beq.n	8002caa <HAL_GPIO_Init+0xae>
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d01c      	beq.n	8002c84 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c4a:	e048      	b.n	8002cde <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	d043      	beq.n	8002cd8 <HAL_GPIO_Init+0xdc>
 8002c50:	2b11      	cmp	r3, #17
 8002c52:	d01b      	beq.n	8002c8c <HAL_GPIO_Init+0x90>
          break;
 8002c54:	e043      	b.n	8002cde <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002c56:	4a89      	ldr	r2, [pc, #548]	; (8002e7c <HAL_GPIO_Init+0x280>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d026      	beq.n	8002caa <HAL_GPIO_Init+0xae>
 8002c5c:	4a87      	ldr	r2, [pc, #540]	; (8002e7c <HAL_GPIO_Init+0x280>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d806      	bhi.n	8002c70 <HAL_GPIO_Init+0x74>
 8002c62:	4a87      	ldr	r2, [pc, #540]	; (8002e80 <HAL_GPIO_Init+0x284>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d020      	beq.n	8002caa <HAL_GPIO_Init+0xae>
 8002c68:	4a86      	ldr	r2, [pc, #536]	; (8002e84 <HAL_GPIO_Init+0x288>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d01d      	beq.n	8002caa <HAL_GPIO_Init+0xae>
          break;
 8002c6e:	e036      	b.n	8002cde <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002c70:	4a85      	ldr	r2, [pc, #532]	; (8002e88 <HAL_GPIO_Init+0x28c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d019      	beq.n	8002caa <HAL_GPIO_Init+0xae>
 8002c76:	4a85      	ldr	r2, [pc, #532]	; (8002e8c <HAL_GPIO_Init+0x290>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d016      	beq.n	8002caa <HAL_GPIO_Init+0xae>
 8002c7c:	4a84      	ldr	r2, [pc, #528]	; (8002e90 <HAL_GPIO_Init+0x294>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d013      	beq.n	8002caa <HAL_GPIO_Init+0xae>
          break;
 8002c82:	e02c      	b.n	8002cde <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	623b      	str	r3, [r7, #32]
          break;
 8002c8a:	e028      	b.n	8002cde <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	3304      	adds	r3, #4
 8002c92:	623b      	str	r3, [r7, #32]
          break;
 8002c94:	e023      	b.n	8002cde <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	3308      	adds	r3, #8
 8002c9c:	623b      	str	r3, [r7, #32]
          break;
 8002c9e:	e01e      	b.n	8002cde <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	330c      	adds	r3, #12
 8002ca6:	623b      	str	r3, [r7, #32]
          break;
 8002ca8:	e019      	b.n	8002cde <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d102      	bne.n	8002cb8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002cb2:	2304      	movs	r3, #4
 8002cb4:	623b      	str	r3, [r7, #32]
          break;
 8002cb6:	e012      	b.n	8002cde <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d105      	bne.n	8002ccc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cc0:	2308      	movs	r3, #8
 8002cc2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	69fa      	ldr	r2, [r7, #28]
 8002cc8:	611a      	str	r2, [r3, #16]
          break;
 8002cca:	e008      	b.n	8002cde <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ccc:	2308      	movs	r3, #8
 8002cce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69fa      	ldr	r2, [r7, #28]
 8002cd4:	615a      	str	r2, [r3, #20]
          break;
 8002cd6:	e002      	b.n	8002cde <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	623b      	str	r3, [r7, #32]
          break;
 8002cdc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	2bff      	cmp	r3, #255	; 0xff
 8002ce2:	d801      	bhi.n	8002ce8 <HAL_GPIO_Init+0xec>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	e001      	b.n	8002cec <HAL_GPIO_Init+0xf0>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3304      	adds	r3, #4
 8002cec:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	2bff      	cmp	r3, #255	; 0xff
 8002cf2:	d802      	bhi.n	8002cfa <HAL_GPIO_Init+0xfe>
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	e002      	b.n	8002d00 <HAL_GPIO_Init+0x104>
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	3b08      	subs	r3, #8
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	210f      	movs	r1, #15
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	401a      	ands	r2, r3
 8002d12:	6a39      	ldr	r1, [r7, #32]
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 8096 	beq.w	8002e5a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d2e:	4b59      	ldr	r3, [pc, #356]	; (8002e94 <HAL_GPIO_Init+0x298>)
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	4a58      	ldr	r2, [pc, #352]	; (8002e94 <HAL_GPIO_Init+0x298>)
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	6193      	str	r3, [r2, #24]
 8002d3a:	4b56      	ldr	r3, [pc, #344]	; (8002e94 <HAL_GPIO_Init+0x298>)
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	60bb      	str	r3, [r7, #8]
 8002d44:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d46:	4a54      	ldr	r2, [pc, #336]	; (8002e98 <HAL_GPIO_Init+0x29c>)
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	089b      	lsrs	r3, r3, #2
 8002d4c:	3302      	adds	r3, #2
 8002d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d52:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	220f      	movs	r2, #15
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	43db      	mvns	r3, r3
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	4013      	ands	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a4b      	ldr	r2, [pc, #300]	; (8002e9c <HAL_GPIO_Init+0x2a0>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d013      	beq.n	8002d9a <HAL_GPIO_Init+0x19e>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a4a      	ldr	r2, [pc, #296]	; (8002ea0 <HAL_GPIO_Init+0x2a4>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d00d      	beq.n	8002d96 <HAL_GPIO_Init+0x19a>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a49      	ldr	r2, [pc, #292]	; (8002ea4 <HAL_GPIO_Init+0x2a8>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d007      	beq.n	8002d92 <HAL_GPIO_Init+0x196>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a48      	ldr	r2, [pc, #288]	; (8002ea8 <HAL_GPIO_Init+0x2ac>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d101      	bne.n	8002d8e <HAL_GPIO_Init+0x192>
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e006      	b.n	8002d9c <HAL_GPIO_Init+0x1a0>
 8002d8e:	2304      	movs	r3, #4
 8002d90:	e004      	b.n	8002d9c <HAL_GPIO_Init+0x1a0>
 8002d92:	2302      	movs	r3, #2
 8002d94:	e002      	b.n	8002d9c <HAL_GPIO_Init+0x1a0>
 8002d96:	2301      	movs	r3, #1
 8002d98:	e000      	b.n	8002d9c <HAL_GPIO_Init+0x1a0>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d9e:	f002 0203 	and.w	r2, r2, #3
 8002da2:	0092      	lsls	r2, r2, #2
 8002da4:	4093      	lsls	r3, r2
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002dac:	493a      	ldr	r1, [pc, #232]	; (8002e98 <HAL_GPIO_Init+0x29c>)
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	089b      	lsrs	r3, r3, #2
 8002db2:	3302      	adds	r3, #2
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d006      	beq.n	8002dd4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002dc6:	4b39      	ldr	r3, [pc, #228]	; (8002eac <HAL_GPIO_Init+0x2b0>)
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	4938      	ldr	r1, [pc, #224]	; (8002eac <HAL_GPIO_Init+0x2b0>)
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	600b      	str	r3, [r1, #0]
 8002dd2:	e006      	b.n	8002de2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002dd4:	4b35      	ldr	r3, [pc, #212]	; (8002eac <HAL_GPIO_Init+0x2b0>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	4933      	ldr	r1, [pc, #204]	; (8002eac <HAL_GPIO_Init+0x2b0>)
 8002dde:	4013      	ands	r3, r2
 8002de0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d006      	beq.n	8002dfc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002dee:	4b2f      	ldr	r3, [pc, #188]	; (8002eac <HAL_GPIO_Init+0x2b0>)
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	492e      	ldr	r1, [pc, #184]	; (8002eac <HAL_GPIO_Init+0x2b0>)
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	604b      	str	r3, [r1, #4]
 8002dfa:	e006      	b.n	8002e0a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002dfc:	4b2b      	ldr	r3, [pc, #172]	; (8002eac <HAL_GPIO_Init+0x2b0>)
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	43db      	mvns	r3, r3
 8002e04:	4929      	ldr	r1, [pc, #164]	; (8002eac <HAL_GPIO_Init+0x2b0>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d006      	beq.n	8002e24 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e16:	4b25      	ldr	r3, [pc, #148]	; (8002eac <HAL_GPIO_Init+0x2b0>)
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	4924      	ldr	r1, [pc, #144]	; (8002eac <HAL_GPIO_Init+0x2b0>)
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	608b      	str	r3, [r1, #8]
 8002e22:	e006      	b.n	8002e32 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e24:	4b21      	ldr	r3, [pc, #132]	; (8002eac <HAL_GPIO_Init+0x2b0>)
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	491f      	ldr	r1, [pc, #124]	; (8002eac <HAL_GPIO_Init+0x2b0>)
 8002e2e:	4013      	ands	r3, r2
 8002e30:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d006      	beq.n	8002e4c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e3e:	4b1b      	ldr	r3, [pc, #108]	; (8002eac <HAL_GPIO_Init+0x2b0>)
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	491a      	ldr	r1, [pc, #104]	; (8002eac <HAL_GPIO_Init+0x2b0>)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60cb      	str	r3, [r1, #12]
 8002e4a:	e006      	b.n	8002e5a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e4c:	4b17      	ldr	r3, [pc, #92]	; (8002eac <HAL_GPIO_Init+0x2b0>)
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	43db      	mvns	r3, r3
 8002e54:	4915      	ldr	r1, [pc, #84]	; (8002eac <HAL_GPIO_Init+0x2b0>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f47f aed0 	bne.w	8002c10 <HAL_GPIO_Init+0x14>
  }
}
 8002e70:	bf00      	nop
 8002e72:	372c      	adds	r7, #44	; 0x2c
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bc80      	pop	{r7}
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	10210000 	.word	0x10210000
 8002e80:	10110000 	.word	0x10110000
 8002e84:	10120000 	.word	0x10120000
 8002e88:	10310000 	.word	0x10310000
 8002e8c:	10320000 	.word	0x10320000
 8002e90:	10220000 	.word	0x10220000
 8002e94:	40021000 	.word	0x40021000
 8002e98:	40010000 	.word	0x40010000
 8002e9c:	40010800 	.word	0x40010800
 8002ea0:	40010c00 	.word	0x40010c00
 8002ea4:	40011000 	.word	0x40011000
 8002ea8:	40011400 	.word	0x40011400
 8002eac:	40010400 	.word	0x40010400

08002eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	807b      	strh	r3, [r7, #2]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ec0:	787b      	ldrb	r3, [r7, #1]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ec6:	887a      	ldrh	r2, [r7, #2]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ecc:	e003      	b.n	8002ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ece:	887b      	ldrh	r3, [r7, #2]
 8002ed0:	041a      	lsls	r2, r3, #16
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	611a      	str	r2, [r3, #16]
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr

08002ee0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	887b      	ldrh	r3, [r7, #2]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ef8:	887a      	ldrh	r2, [r7, #2]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002efe:	e002      	b.n	8002f06 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f00:	887a      	ldrh	r2, [r7, #2]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	611a      	str	r2, [r3, #16]
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr

08002f10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e26c      	b.n	80033fc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 8087 	beq.w	800303e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f30:	4b92      	ldr	r3, [pc, #584]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 030c 	and.w	r3, r3, #12
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d00c      	beq.n	8002f56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f3c:	4b8f      	ldr	r3, [pc, #572]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f003 030c 	and.w	r3, r3, #12
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d112      	bne.n	8002f6e <HAL_RCC_OscConfig+0x5e>
 8002f48:	4b8c      	ldr	r3, [pc, #560]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f54:	d10b      	bne.n	8002f6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f56:	4b89      	ldr	r3, [pc, #548]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d06c      	beq.n	800303c <HAL_RCC_OscConfig+0x12c>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d168      	bne.n	800303c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e246      	b.n	80033fc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f76:	d106      	bne.n	8002f86 <HAL_RCC_OscConfig+0x76>
 8002f78:	4b80      	ldr	r3, [pc, #512]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a7f      	ldr	r2, [pc, #508]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f82:	6013      	str	r3, [r2, #0]
 8002f84:	e02e      	b.n	8002fe4 <HAL_RCC_OscConfig+0xd4>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10c      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x98>
 8002f8e:	4b7b      	ldr	r3, [pc, #492]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a7a      	ldr	r2, [pc, #488]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002f94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	4b78      	ldr	r3, [pc, #480]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a77      	ldr	r2, [pc, #476]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fa4:	6013      	str	r3, [r2, #0]
 8002fa6:	e01d      	b.n	8002fe4 <HAL_RCC_OscConfig+0xd4>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fb0:	d10c      	bne.n	8002fcc <HAL_RCC_OscConfig+0xbc>
 8002fb2:	4b72      	ldr	r3, [pc, #456]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a71      	ldr	r2, [pc, #452]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fbc:	6013      	str	r3, [r2, #0]
 8002fbe:	4b6f      	ldr	r3, [pc, #444]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a6e      	ldr	r2, [pc, #440]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	e00b      	b.n	8002fe4 <HAL_RCC_OscConfig+0xd4>
 8002fcc:	4b6b      	ldr	r3, [pc, #428]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a6a      	ldr	r2, [pc, #424]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fd6:	6013      	str	r3, [r2, #0]
 8002fd8:	4b68      	ldr	r3, [pc, #416]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a67      	ldr	r2, [pc, #412]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fe2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d013      	beq.n	8003014 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fec:	f7ff f9f0 	bl	80023d0 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ff4:	f7ff f9ec 	bl	80023d0 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b64      	cmp	r3, #100	; 0x64
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e1fa      	b.n	80033fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003006:	4b5d      	ldr	r3, [pc, #372]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0f0      	beq.n	8002ff4 <HAL_RCC_OscConfig+0xe4>
 8003012:	e014      	b.n	800303e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003014:	f7ff f9dc 	bl	80023d0 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800301c:	f7ff f9d8 	bl	80023d0 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b64      	cmp	r3, #100	; 0x64
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e1e6      	b.n	80033fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800302e:	4b53      	ldr	r3, [pc, #332]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x10c>
 800303a:	e000      	b.n	800303e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800303c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d063      	beq.n	8003112 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800304a:	4b4c      	ldr	r3, [pc, #304]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f003 030c 	and.w	r3, r3, #12
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00b      	beq.n	800306e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003056:	4b49      	ldr	r3, [pc, #292]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f003 030c 	and.w	r3, r3, #12
 800305e:	2b08      	cmp	r3, #8
 8003060:	d11c      	bne.n	800309c <HAL_RCC_OscConfig+0x18c>
 8003062:	4b46      	ldr	r3, [pc, #280]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d116      	bne.n	800309c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800306e:	4b43      	ldr	r3, [pc, #268]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d005      	beq.n	8003086 <HAL_RCC_OscConfig+0x176>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d001      	beq.n	8003086 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e1ba      	b.n	80033fc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003086:	4b3d      	ldr	r3, [pc, #244]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	4939      	ldr	r1, [pc, #228]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8003096:	4313      	orrs	r3, r2
 8003098:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800309a:	e03a      	b.n	8003112 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d020      	beq.n	80030e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030a4:	4b36      	ldr	r3, [pc, #216]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 80030a6:	2201      	movs	r2, #1
 80030a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030aa:	f7ff f991 	bl	80023d0 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b2:	f7ff f98d 	bl	80023d0 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e19b      	b.n	80033fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c4:	4b2d      	ldr	r3, [pc, #180]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0f0      	beq.n	80030b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d0:	4b2a      	ldr	r3, [pc, #168]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	4927      	ldr	r1, [pc, #156]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	600b      	str	r3, [r1, #0]
 80030e4:	e015      	b.n	8003112 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030e6:	4b26      	ldr	r3, [pc, #152]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ec:	f7ff f970 	bl	80023d0 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030f4:	f7ff f96c 	bl	80023d0 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e17a      	b.n	80033fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003106:	4b1d      	ldr	r3, [pc, #116]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	2b00      	cmp	r3, #0
 800311c:	d03a      	beq.n	8003194 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d019      	beq.n	800315a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003126:	4b17      	ldr	r3, [pc, #92]	; (8003184 <HAL_RCC_OscConfig+0x274>)
 8003128:	2201      	movs	r2, #1
 800312a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800312c:	f7ff f950 	bl	80023d0 <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003134:	f7ff f94c 	bl	80023d0 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e15a      	b.n	80033fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003146:	4b0d      	ldr	r3, [pc, #52]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0f0      	beq.n	8003134 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003152:	2001      	movs	r0, #1
 8003154:	f000 fae0 	bl	8003718 <RCC_Delay>
 8003158:	e01c      	b.n	8003194 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800315a:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <HAL_RCC_OscConfig+0x274>)
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003160:	f7ff f936 	bl	80023d0 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003166:	e00f      	b.n	8003188 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003168:	f7ff f932 	bl	80023d0 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d908      	bls.n	8003188 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e140      	b.n	80033fc <HAL_RCC_OscConfig+0x4ec>
 800317a:	bf00      	nop
 800317c:	40021000 	.word	0x40021000
 8003180:	42420000 	.word	0x42420000
 8003184:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003188:	4b9e      	ldr	r3, [pc, #632]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1e9      	bne.n	8003168 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 80a6 	beq.w	80032ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031a2:	2300      	movs	r3, #0
 80031a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031a6:	4b97      	ldr	r3, [pc, #604]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10d      	bne.n	80031ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031b2:	4b94      	ldr	r3, [pc, #592]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	4a93      	ldr	r2, [pc, #588]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 80031b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031bc:	61d3      	str	r3, [r2, #28]
 80031be:	4b91      	ldr	r3, [pc, #580]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c6:	60bb      	str	r3, [r7, #8]
 80031c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ca:	2301      	movs	r3, #1
 80031cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ce:	4b8e      	ldr	r3, [pc, #568]	; (8003408 <HAL_RCC_OscConfig+0x4f8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d118      	bne.n	800320c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031da:	4b8b      	ldr	r3, [pc, #556]	; (8003408 <HAL_RCC_OscConfig+0x4f8>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a8a      	ldr	r2, [pc, #552]	; (8003408 <HAL_RCC_OscConfig+0x4f8>)
 80031e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031e6:	f7ff f8f3 	bl	80023d0 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ee:	f7ff f8ef 	bl	80023d0 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b64      	cmp	r3, #100	; 0x64
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e0fd      	b.n	80033fc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003200:	4b81      	ldr	r3, [pc, #516]	; (8003408 <HAL_RCC_OscConfig+0x4f8>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0f0      	beq.n	80031ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d106      	bne.n	8003222 <HAL_RCC_OscConfig+0x312>
 8003214:	4b7b      	ldr	r3, [pc, #492]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	4a7a      	ldr	r2, [pc, #488]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 800321a:	f043 0301 	orr.w	r3, r3, #1
 800321e:	6213      	str	r3, [r2, #32]
 8003220:	e02d      	b.n	800327e <HAL_RCC_OscConfig+0x36e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10c      	bne.n	8003244 <HAL_RCC_OscConfig+0x334>
 800322a:	4b76      	ldr	r3, [pc, #472]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	4a75      	ldr	r2, [pc, #468]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 8003230:	f023 0301 	bic.w	r3, r3, #1
 8003234:	6213      	str	r3, [r2, #32]
 8003236:	4b73      	ldr	r3, [pc, #460]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	4a72      	ldr	r2, [pc, #456]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 800323c:	f023 0304 	bic.w	r3, r3, #4
 8003240:	6213      	str	r3, [r2, #32]
 8003242:	e01c      	b.n	800327e <HAL_RCC_OscConfig+0x36e>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	2b05      	cmp	r3, #5
 800324a:	d10c      	bne.n	8003266 <HAL_RCC_OscConfig+0x356>
 800324c:	4b6d      	ldr	r3, [pc, #436]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	4a6c      	ldr	r2, [pc, #432]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 8003252:	f043 0304 	orr.w	r3, r3, #4
 8003256:	6213      	str	r3, [r2, #32]
 8003258:	4b6a      	ldr	r3, [pc, #424]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	4a69      	ldr	r2, [pc, #420]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	6213      	str	r3, [r2, #32]
 8003264:	e00b      	b.n	800327e <HAL_RCC_OscConfig+0x36e>
 8003266:	4b67      	ldr	r3, [pc, #412]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	4a66      	ldr	r2, [pc, #408]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 800326c:	f023 0301 	bic.w	r3, r3, #1
 8003270:	6213      	str	r3, [r2, #32]
 8003272:	4b64      	ldr	r3, [pc, #400]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	4a63      	ldr	r2, [pc, #396]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 8003278:	f023 0304 	bic.w	r3, r3, #4
 800327c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d015      	beq.n	80032b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003286:	f7ff f8a3 	bl	80023d0 <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800328c:	e00a      	b.n	80032a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800328e:	f7ff f89f 	bl	80023d0 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	f241 3288 	movw	r2, #5000	; 0x1388
 800329c:	4293      	cmp	r3, r2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e0ab      	b.n	80033fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a4:	4b57      	ldr	r3, [pc, #348]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0ee      	beq.n	800328e <HAL_RCC_OscConfig+0x37e>
 80032b0:	e014      	b.n	80032dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b2:	f7ff f88d 	bl	80023d0 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032b8:	e00a      	b.n	80032d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ba:	f7ff f889 	bl	80023d0 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e095      	b.n	80033fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032d0:	4b4c      	ldr	r3, [pc, #304]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1ee      	bne.n	80032ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032dc:	7dfb      	ldrb	r3, [r7, #23]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d105      	bne.n	80032ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032e2:	4b48      	ldr	r3, [pc, #288]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	4a47      	ldr	r2, [pc, #284]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 80032e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 8081 	beq.w	80033fa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032f8:	4b42      	ldr	r3, [pc, #264]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 030c 	and.w	r3, r3, #12
 8003300:	2b08      	cmp	r3, #8
 8003302:	d061      	beq.n	80033c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	69db      	ldr	r3, [r3, #28]
 8003308:	2b02      	cmp	r3, #2
 800330a:	d146      	bne.n	800339a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800330c:	4b3f      	ldr	r3, [pc, #252]	; (800340c <HAL_RCC_OscConfig+0x4fc>)
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003312:	f7ff f85d 	bl	80023d0 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800331a:	f7ff f859 	bl	80023d0 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e067      	b.n	80033fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800332c:	4b35      	ldr	r3, [pc, #212]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1f0      	bne.n	800331a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003340:	d108      	bne.n	8003354 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003342:	4b30      	ldr	r3, [pc, #192]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	492d      	ldr	r1, [pc, #180]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 8003350:	4313      	orrs	r3, r2
 8003352:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003354:	4b2b      	ldr	r3, [pc, #172]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a19      	ldr	r1, [r3, #32]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	430b      	orrs	r3, r1
 8003366:	4927      	ldr	r1, [pc, #156]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 8003368:	4313      	orrs	r3, r2
 800336a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800336c:	4b27      	ldr	r3, [pc, #156]	; (800340c <HAL_RCC_OscConfig+0x4fc>)
 800336e:	2201      	movs	r2, #1
 8003370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003372:	f7ff f82d 	bl	80023d0 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800337a:	f7ff f829 	bl	80023d0 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e037      	b.n	80033fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800338c:	4b1d      	ldr	r3, [pc, #116]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0f0      	beq.n	800337a <HAL_RCC_OscConfig+0x46a>
 8003398:	e02f      	b.n	80033fa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800339a:	4b1c      	ldr	r3, [pc, #112]	; (800340c <HAL_RCC_OscConfig+0x4fc>)
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a0:	f7ff f816 	bl	80023d0 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a8:	f7ff f812 	bl	80023d0 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e020      	b.n	80033fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ba:	4b12      	ldr	r3, [pc, #72]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f0      	bne.n	80033a8 <HAL_RCC_OscConfig+0x498>
 80033c6:	e018      	b.n	80033fa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e013      	b.n	80033fc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033d4:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d106      	bne.n	80033f6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d001      	beq.n	80033fa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40021000 	.word	0x40021000
 8003408:	40007000 	.word	0x40007000
 800340c:	42420060 	.word	0x42420060

08003410 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e0d0      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003424:	4b6a      	ldr	r3, [pc, #424]	; (80035d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	429a      	cmp	r2, r3
 8003430:	d910      	bls.n	8003454 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003432:	4b67      	ldr	r3, [pc, #412]	; (80035d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f023 0207 	bic.w	r2, r3, #7
 800343a:	4965      	ldr	r1, [pc, #404]	; (80035d0 <HAL_RCC_ClockConfig+0x1c0>)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	4313      	orrs	r3, r2
 8003440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003442:	4b63      	ldr	r3, [pc, #396]	; (80035d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	429a      	cmp	r2, r3
 800344e:	d001      	beq.n	8003454 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e0b8      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d020      	beq.n	80034a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	d005      	beq.n	8003478 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800346c:	4b59      	ldr	r3, [pc, #356]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	4a58      	ldr	r2, [pc, #352]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003472:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003476:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0308 	and.w	r3, r3, #8
 8003480:	2b00      	cmp	r3, #0
 8003482:	d005      	beq.n	8003490 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003484:	4b53      	ldr	r3, [pc, #332]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	4a52      	ldr	r2, [pc, #328]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 800348a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800348e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003490:	4b50      	ldr	r3, [pc, #320]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	494d      	ldr	r1, [pc, #308]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d040      	beq.n	8003530 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d107      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b6:	4b47      	ldr	r3, [pc, #284]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d115      	bne.n	80034ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e07f      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d107      	bne.n	80034de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ce:	4b41      	ldr	r3, [pc, #260]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d109      	bne.n	80034ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e073      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034de:	4b3d      	ldr	r3, [pc, #244]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e06b      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034ee:	4b39      	ldr	r3, [pc, #228]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f023 0203 	bic.w	r2, r3, #3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	4936      	ldr	r1, [pc, #216]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003500:	f7fe ff66 	bl	80023d0 <HAL_GetTick>
 8003504:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003506:	e00a      	b.n	800351e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003508:	f7fe ff62 	bl	80023d0 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	f241 3288 	movw	r2, #5000	; 0x1388
 8003516:	4293      	cmp	r3, r2
 8003518:	d901      	bls.n	800351e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e053      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351e:	4b2d      	ldr	r3, [pc, #180]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f003 020c 	and.w	r2, r3, #12
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	429a      	cmp	r2, r3
 800352e:	d1eb      	bne.n	8003508 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003530:	4b27      	ldr	r3, [pc, #156]	; (80035d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	429a      	cmp	r2, r3
 800353c:	d210      	bcs.n	8003560 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800353e:	4b24      	ldr	r3, [pc, #144]	; (80035d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f023 0207 	bic.w	r2, r3, #7
 8003546:	4922      	ldr	r1, [pc, #136]	; (80035d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	4313      	orrs	r3, r2
 800354c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800354e:	4b20      	ldr	r3, [pc, #128]	; (80035d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	429a      	cmp	r2, r3
 800355a:	d001      	beq.n	8003560 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e032      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	d008      	beq.n	800357e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800356c:	4b19      	ldr	r3, [pc, #100]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	4916      	ldr	r1, [pc, #88]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 800357a:	4313      	orrs	r3, r2
 800357c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b00      	cmp	r3, #0
 8003588:	d009      	beq.n	800359e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800358a:	4b12      	ldr	r3, [pc, #72]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	490e      	ldr	r1, [pc, #56]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 800359a:	4313      	orrs	r3, r2
 800359c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800359e:	f000 f859 	bl	8003654 <HAL_RCC_GetSysClockFreq>
 80035a2:	4601      	mov	r1, r0
 80035a4:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	091b      	lsrs	r3, r3, #4
 80035aa:	f003 030f 	and.w	r3, r3, #15
 80035ae:	4a0a      	ldr	r2, [pc, #40]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 80035b0:	5cd3      	ldrb	r3, [r2, r3]
 80035b2:	fa21 f303 	lsr.w	r3, r1, r3
 80035b6:	4a09      	ldr	r2, [pc, #36]	; (80035dc <HAL_RCC_ClockConfig+0x1cc>)
 80035b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035ba:	4b09      	ldr	r3, [pc, #36]	; (80035e0 <HAL_RCC_ClockConfig+0x1d0>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fe fec4 	bl	800234c <HAL_InitTick>

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40022000 	.word	0x40022000
 80035d4:	40021000 	.word	0x40021000
 80035d8:	08009bc0 	.word	0x08009bc0
 80035dc:	20000004 	.word	0x20000004
 80035e0:	20000008 	.word	0x20000008

080035e4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b08a      	sub	sp, #40	; 0x28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 80035f0:	f107 0318 	add.w	r3, r7, #24
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	605a      	str	r2, [r3, #4]
 80035fa:	609a      	str	r2, [r3, #8]
 80035fc:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 80035fe:	2302      	movs	r3, #2
 8003600:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003602:	2303      	movs	r3, #3
 8003604:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 8003606:	2300      	movs	r3, #0
 8003608:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 800360a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800360e:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8003610:	4b0e      	ldr	r3, [pc, #56]	; (800364c <HAL_RCC_MCOConfig+0x68>)
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	4a0d      	ldr	r2, [pc, #52]	; (800364c <HAL_RCC_MCOConfig+0x68>)
 8003616:	f043 0304 	orr.w	r3, r3, #4
 800361a:	6193      	str	r3, [r2, #24]
 800361c:	4b0b      	ldr	r3, [pc, #44]	; (800364c <HAL_RCC_MCOConfig+0x68>)
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	617b      	str	r3, [r7, #20]
 8003626:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8003628:	f107 0318 	add.w	r3, r7, #24
 800362c:	4619      	mov	r1, r3
 800362e:	4808      	ldr	r0, [pc, #32]	; (8003650 <HAL_RCC_MCOConfig+0x6c>)
 8003630:	f7ff fae4 	bl	8002bfc <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8003634:	4b05      	ldr	r3, [pc, #20]	; (800364c <HAL_RCC_MCOConfig+0x68>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800363c:	4903      	ldr	r1, [pc, #12]	; (800364c <HAL_RCC_MCOConfig+0x68>)
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	4313      	orrs	r3, r2
 8003642:	604b      	str	r3, [r1, #4]
}
 8003644:	bf00      	nop
 8003646:	3728      	adds	r7, #40	; 0x28
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40021000 	.word	0x40021000
 8003650:	40010800 	.word	0x40010800

08003654 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003654:	b490      	push	{r4, r7}
 8003656:	b08a      	sub	sp, #40	; 0x28
 8003658:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800365a:	4b2a      	ldr	r3, [pc, #168]	; (8003704 <HAL_RCC_GetSysClockFreq+0xb0>)
 800365c:	1d3c      	adds	r4, r7, #4
 800365e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003660:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003664:	4b28      	ldr	r3, [pc, #160]	; (8003708 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800366a:	2300      	movs	r3, #0
 800366c:	61fb      	str	r3, [r7, #28]
 800366e:	2300      	movs	r3, #0
 8003670:	61bb      	str	r3, [r7, #24]
 8003672:	2300      	movs	r3, #0
 8003674:	627b      	str	r3, [r7, #36]	; 0x24
 8003676:	2300      	movs	r3, #0
 8003678:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800367e:	4b23      	ldr	r3, [pc, #140]	; (800370c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f003 030c 	and.w	r3, r3, #12
 800368a:	2b04      	cmp	r3, #4
 800368c:	d002      	beq.n	8003694 <HAL_RCC_GetSysClockFreq+0x40>
 800368e:	2b08      	cmp	r3, #8
 8003690:	d003      	beq.n	800369a <HAL_RCC_GetSysClockFreq+0x46>
 8003692:	e02d      	b.n	80036f0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003694:	4b1e      	ldr	r3, [pc, #120]	; (8003710 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003696:	623b      	str	r3, [r7, #32]
      break;
 8003698:	e02d      	b.n	80036f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	0c9b      	lsrs	r3, r3, #18
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80036a6:	4413      	add	r3, r2
 80036a8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80036ac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d013      	beq.n	80036e0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036b8:	4b14      	ldr	r3, [pc, #80]	; (800370c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	0c5b      	lsrs	r3, r3, #17
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80036c6:	4413      	add	r3, r2
 80036c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80036cc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	4a0f      	ldr	r2, [pc, #60]	; (8003710 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036d2:	fb02 f203 	mul.w	r2, r2, r3
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036dc:	627b      	str	r3, [r7, #36]	; 0x24
 80036de:	e004      	b.n	80036ea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	4a0c      	ldr	r2, [pc, #48]	; (8003714 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036e4:	fb02 f303 	mul.w	r3, r2, r3
 80036e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	623b      	str	r3, [r7, #32]
      break;
 80036ee:	e002      	b.n	80036f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036f0:	4b07      	ldr	r3, [pc, #28]	; (8003710 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036f2:	623b      	str	r3, [r7, #32]
      break;
 80036f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036f6:	6a3b      	ldr	r3, [r7, #32]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3728      	adds	r7, #40	; 0x28
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bc90      	pop	{r4, r7}
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	08009b68 	.word	0x08009b68
 8003708:	08009b78 	.word	0x08009b78
 800370c:	40021000 	.word	0x40021000
 8003710:	007a1200 	.word	0x007a1200
 8003714:	003d0900 	.word	0x003d0900

08003718 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003720:	4b0a      	ldr	r3, [pc, #40]	; (800374c <RCC_Delay+0x34>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a0a      	ldr	r2, [pc, #40]	; (8003750 <RCC_Delay+0x38>)
 8003726:	fba2 2303 	umull	r2, r3, r2, r3
 800372a:	0a5b      	lsrs	r3, r3, #9
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	fb02 f303 	mul.w	r3, r2, r3
 8003732:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003734:	bf00      	nop
  }
  while (Delay --);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	1e5a      	subs	r2, r3, #1
 800373a:	60fa      	str	r2, [r7, #12]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1f9      	bne.n	8003734 <RCC_Delay+0x1c>
}
 8003740:	bf00      	nop
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	bc80      	pop	{r7}
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	20000004 	.word	0x20000004
 8003750:	10624dd3 	.word	0x10624dd3

08003754 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	613b      	str	r3, [r7, #16]
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b00      	cmp	r3, #0
 800376e:	d07d      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003770:	2300      	movs	r3, #0
 8003772:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003774:	4b4f      	ldr	r3, [pc, #316]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10d      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003780:	4b4c      	ldr	r3, [pc, #304]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	4a4b      	ldr	r2, [pc, #300]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800378a:	61d3      	str	r3, [r2, #28]
 800378c:	4b49      	ldr	r3, [pc, #292]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800378e:	69db      	ldr	r3, [r3, #28]
 8003790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003794:	60bb      	str	r3, [r7, #8]
 8003796:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003798:	2301      	movs	r3, #1
 800379a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800379c:	4b46      	ldr	r3, [pc, #280]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d118      	bne.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037a8:	4b43      	ldr	r3, [pc, #268]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a42      	ldr	r2, [pc, #264]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037b4:	f7fe fe0c 	bl	80023d0 <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ba:	e008      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037bc:	f7fe fe08 	bl	80023d0 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b64      	cmp	r3, #100	; 0x64
 80037c8:	d901      	bls.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e06d      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ce:	4b3a      	ldr	r3, [pc, #232]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0f0      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037da:	4b36      	ldr	r3, [pc, #216]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037e2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d02e      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d027      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037f8:	4b2e      	ldr	r3, [pc, #184]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003800:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003802:	4b2e      	ldr	r3, [pc, #184]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003804:	2201      	movs	r2, #1
 8003806:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003808:	4b2c      	ldr	r3, [pc, #176]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800380e:	4a29      	ldr	r2, [pc, #164]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d014      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381e:	f7fe fdd7 	bl	80023d0 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003824:	e00a      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003826:	f7fe fdd3 	bl	80023d0 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	f241 3288 	movw	r2, #5000	; 0x1388
 8003834:	4293      	cmp	r3, r2
 8003836:	d901      	bls.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e036      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800383c:	4b1d      	ldr	r3, [pc, #116]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0ee      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003848:	4b1a      	ldr	r3, [pc, #104]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	4917      	ldr	r1, [pc, #92]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003856:	4313      	orrs	r3, r2
 8003858:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800385a:	7dfb      	ldrb	r3, [r7, #23]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d105      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003860:	4b14      	ldr	r3, [pc, #80]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003862:	69db      	ldr	r3, [r3, #28]
 8003864:	4a13      	ldr	r2, [pc, #76]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800386a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d008      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003878:	4b0e      	ldr	r3, [pc, #56]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	490b      	ldr	r1, [pc, #44]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003886:	4313      	orrs	r3, r2
 8003888:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0310 	and.w	r3, r3, #16
 8003892:	2b00      	cmp	r3, #0
 8003894:	d008      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003896:	4b07      	ldr	r3, [pc, #28]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	4904      	ldr	r1, [pc, #16]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3718      	adds	r7, #24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40021000 	.word	0x40021000
 80038b8:	40007000 	.word	0x40007000
 80038bc:	42420440 	.word	0x42420440

080038c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e053      	b.n	800397a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d106      	bne.n	80038f2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7fe fb59 	bl	8001fa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2202      	movs	r2, #2
 80038f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003908:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	431a      	orrs	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	431a      	orrs	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	69db      	ldr	r3, [r3, #28]
 8003934:	431a      	orrs	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	ea42 0103 	orr.w	r1, r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	0c1a      	lsrs	r2, r3, #16
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f002 0204 	and.w	r2, r2, #4
 8003958:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	69da      	ldr	r2, [r3, #28]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003968:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b088      	sub	sp, #32
 8003986:	af00      	add	r7, sp, #0
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	603b      	str	r3, [r7, #0]
 800398e:	4613      	mov	r3, r2
 8003990:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800399c:	2b01      	cmp	r3, #1
 800399e:	d101      	bne.n	80039a4 <HAL_SPI_Transmit+0x22>
 80039a0:	2302      	movs	r3, #2
 80039a2:	e11e      	b.n	8003be2 <HAL_SPI_Transmit+0x260>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039ac:	f7fe fd10 	bl	80023d0 <HAL_GetTick>
 80039b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80039b2:	88fb      	ldrh	r3, [r7, #6]
 80039b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d002      	beq.n	80039c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80039c2:	2302      	movs	r3, #2
 80039c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039c6:	e103      	b.n	8003bd0 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <HAL_SPI_Transmit+0x52>
 80039ce:	88fb      	ldrh	r3, [r7, #6]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d102      	bne.n	80039da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039d8:	e0fa      	b.n	8003bd0 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2203      	movs	r2, #3
 80039de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	88fa      	ldrh	r2, [r7, #6]
 80039f2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	88fa      	ldrh	r2, [r7, #6]
 80039f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a20:	d107      	bne.n	8003a32 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a30:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3c:	2b40      	cmp	r3, #64	; 0x40
 8003a3e:	d007      	beq.n	8003a50 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a58:	d14b      	bne.n	8003af2 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <HAL_SPI_Transmit+0xe6>
 8003a62:	8afb      	ldrh	r3, [r7, #22]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d13e      	bne.n	8003ae6 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6c:	881a      	ldrh	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a78:	1c9a      	adds	r2, r3, #2
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a8c:	e02b      	b.n	8003ae6 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d112      	bne.n	8003ac2 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa0:	881a      	ldrh	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aac:	1c9a      	adds	r2, r3, #2
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ac0:	e011      	b.n	8003ae6 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ac2:	f7fe fc85 	bl	80023d0 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d803      	bhi.n	8003ada <HAL_SPI_Transmit+0x158>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad8:	d102      	bne.n	8003ae0 <HAL_SPI_Transmit+0x15e>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d102      	bne.n	8003ae6 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ae4:	e074      	b.n	8003bd0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1ce      	bne.n	8003a8e <HAL_SPI_Transmit+0x10c>
 8003af0:	e04c      	b.n	8003b8c <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d002      	beq.n	8003b00 <HAL_SPI_Transmit+0x17e>
 8003afa:	8afb      	ldrh	r3, [r7, #22]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d140      	bne.n	8003b82 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	330c      	adds	r3, #12
 8003b0a:	7812      	ldrb	r2, [r2, #0]
 8003b0c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b12:	1c5a      	adds	r2, r3, #1
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b26:	e02c      	b.n	8003b82 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d113      	bne.n	8003b5e <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	330c      	adds	r3, #12
 8003b40:	7812      	ldrb	r2, [r2, #0]
 8003b42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b5c:	e011      	b.n	8003b82 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b5e:	f7fe fc37 	bl	80023d0 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d803      	bhi.n	8003b76 <HAL_SPI_Transmit+0x1f4>
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b74:	d102      	bne.n	8003b7c <HAL_SPI_Transmit+0x1fa>
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d102      	bne.n	8003b82 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b80:	e026      	b.n	8003bd0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1cd      	bne.n	8003b28 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	6839      	ldr	r1, [r7, #0]
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 fa43 	bl	800401c <SPI_EndRxTxTransaction>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d002      	beq.n	8003ba2 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10a      	bne.n	8003bc0 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003baa:	2300      	movs	r3, #0
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	613b      	str	r3, [r7, #16]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	613b      	str	r3, [r7, #16]
 8003bbe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	77fb      	strb	r3, [r7, #31]
 8003bcc:	e000      	b.n	8003bd0 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003bce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003be0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3720      	adds	r7, #32
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b08c      	sub	sp, #48	; 0x30
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	60f8      	str	r0, [r7, #12]
 8003bf2:	60b9      	str	r1, [r7, #8]
 8003bf4:	607a      	str	r2, [r7, #4]
 8003bf6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d101      	bne.n	8003c10 <HAL_SPI_TransmitReceive+0x26>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e18a      	b.n	8003f26 <HAL_SPI_TransmitReceive+0x33c>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c18:	f7fe fbda 	bl	80023d0 <HAL_GetTick>
 8003c1c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003c2e:	887b      	ldrh	r3, [r7, #2]
 8003c30:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d00f      	beq.n	8003c5a <HAL_SPI_TransmitReceive+0x70>
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c40:	d107      	bne.n	8003c52 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d103      	bne.n	8003c52 <HAL_SPI_TransmitReceive+0x68>
 8003c4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d003      	beq.n	8003c5a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003c52:	2302      	movs	r3, #2
 8003c54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c58:	e15b      	b.n	8003f12 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d005      	beq.n	8003c6c <HAL_SPI_TransmitReceive+0x82>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <HAL_SPI_TransmitReceive+0x82>
 8003c66:	887b      	ldrh	r3, [r7, #2]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d103      	bne.n	8003c74 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c72:	e14e      	b.n	8003f12 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d003      	beq.n	8003c88 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2205      	movs	r2, #5
 8003c84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	887a      	ldrh	r2, [r7, #2]
 8003c98:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	887a      	ldrh	r2, [r7, #2]
 8003c9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	887a      	ldrh	r2, [r7, #2]
 8003caa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	887a      	ldrh	r2, [r7, #2]
 8003cb0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc8:	2b40      	cmp	r3, #64	; 0x40
 8003cca:	d007      	beq.n	8003cdc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ce4:	d178      	bne.n	8003dd8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <HAL_SPI_TransmitReceive+0x10a>
 8003cee:	8b7b      	ldrh	r3, [r7, #26]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d166      	bne.n	8003dc2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf8:	881a      	ldrh	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d04:	1c9a      	adds	r2, r3, #2
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d18:	e053      	b.n	8003dc2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d11b      	bne.n	8003d60 <HAL_SPI_TransmitReceive+0x176>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d016      	beq.n	8003d60 <HAL_SPI_TransmitReceive+0x176>
 8003d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d113      	bne.n	8003d60 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3c:	881a      	ldrh	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d48:	1c9a      	adds	r2, r3, #2
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d119      	bne.n	8003da2 <HAL_SPI_TransmitReceive+0x1b8>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d014      	beq.n	8003da2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68da      	ldr	r2, [r3, #12]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d82:	b292      	uxth	r2, r2
 8003d84:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8a:	1c9a      	adds	r2, r3, #2
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	3b01      	subs	r3, #1
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003da2:	f7fe fb15 	bl	80023d0 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d807      	bhi.n	8003dc2 <HAL_SPI_TransmitReceive+0x1d8>
 8003db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db8:	d003      	beq.n	8003dc2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003dc0:	e0a7      	b.n	8003f12 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1a6      	bne.n	8003d1a <HAL_SPI_TransmitReceive+0x130>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1a1      	bne.n	8003d1a <HAL_SPI_TransmitReceive+0x130>
 8003dd6:	e07c      	b.n	8003ed2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d002      	beq.n	8003de6 <HAL_SPI_TransmitReceive+0x1fc>
 8003de0:	8b7b      	ldrh	r3, [r7, #26]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d16b      	bne.n	8003ebe <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	330c      	adds	r3, #12
 8003df0:	7812      	ldrb	r2, [r2, #0]
 8003df2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df8:	1c5a      	adds	r2, r3, #1
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	3b01      	subs	r3, #1
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e0c:	e057      	b.n	8003ebe <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d11c      	bne.n	8003e56 <HAL_SPI_TransmitReceive+0x26c>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d017      	beq.n	8003e56 <HAL_SPI_TransmitReceive+0x26c>
 8003e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d114      	bne.n	8003e56 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	330c      	adds	r3, #12
 8003e36:	7812      	ldrb	r2, [r2, #0]
 8003e38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3e:	1c5a      	adds	r2, r3, #1
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e52:	2300      	movs	r3, #0
 8003e54:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d119      	bne.n	8003e98 <HAL_SPI_TransmitReceive+0x2ae>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d014      	beq.n	8003e98 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68da      	ldr	r2, [r3, #12]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e80:	1c5a      	adds	r2, r3, #1
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e94:	2301      	movs	r3, #1
 8003e96:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e98:	f7fe fa9a 	bl	80023d0 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d803      	bhi.n	8003eb0 <HAL_SPI_TransmitReceive+0x2c6>
 8003ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eae:	d102      	bne.n	8003eb6 <HAL_SPI_TransmitReceive+0x2cc>
 8003eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d103      	bne.n	8003ebe <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ebc:	e029      	b.n	8003f12 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1a2      	bne.n	8003e0e <HAL_SPI_TransmitReceive+0x224>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d19d      	bne.n	8003e0e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 f8a0 	bl	800401c <SPI_EndRxTxTransaction>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d006      	beq.n	8003ef0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2220      	movs	r2, #32
 8003eec:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003eee:	e010      	b.n	8003f12 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10b      	bne.n	8003f10 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ef8:	2300      	movs	r3, #0
 8003efa:	617b      	str	r3, [r7, #20]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	e000      	b.n	8003f12 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003f10:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3730      	adds	r7, #48	; 0x30
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b083      	sub	sp, #12
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f3c:	b2db      	uxtb	r3, r3
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bc80      	pop	{r7}
 8003f46:	4770      	bx	lr

08003f48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	603b      	str	r3, [r7, #0]
 8003f54:	4613      	mov	r3, r2
 8003f56:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f58:	e04c      	b.n	8003ff4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f60:	d048      	beq.n	8003ff4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003f62:	f7fe fa35 	bl	80023d0 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d902      	bls.n	8003f78 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d13d      	bne.n	8003ff4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f86:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f90:	d111      	bne.n	8003fb6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f9a:	d004      	beq.n	8003fa6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa4:	d107      	bne.n	8003fb6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fb4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fbe:	d10f      	bne.n	8003fe0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fde:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e00f      	b.n	8004014 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	429a      	cmp	r2, r3
 8004002:	bf0c      	ite	eq
 8004004:	2301      	moveq	r3, #1
 8004006:	2300      	movne	r3, #0
 8004008:	b2db      	uxtb	r3, r3
 800400a:	461a      	mov	r2, r3
 800400c:	79fb      	ldrb	r3, [r7, #7]
 800400e:	429a      	cmp	r2, r3
 8004010:	d1a3      	bne.n	8003f5a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af02      	add	r7, sp, #8
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	2200      	movs	r2, #0
 8004030:	2180      	movs	r1, #128	; 0x80
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f7ff ff88 	bl	8003f48 <SPI_WaitFlagStateUntilTimeout>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d007      	beq.n	800404e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004042:	f043 0220 	orr.w	r2, r3, #32
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e000      	b.n	8004050 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e07f      	b.n	800416c <HAL_TIM_Encoder_Init+0x114>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	d106      	bne.n	8004086 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f7fd ffdb 	bl	800203c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2202      	movs	r2, #2
 800408a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6812      	ldr	r2, [r2, #0]
 8004098:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800409c:	f023 0307 	bic.w	r3, r3, #7
 80040a0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	3304      	adds	r3, #4
 80040aa:	4619      	mov	r1, r3
 80040ac:	4610      	mov	r0, r2
 80040ae:	f000 f899 	bl	80041e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040da:	f023 0303 	bic.w	r3, r3, #3
 80040de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	021b      	lsls	r3, r3, #8
 80040ea:	4313      	orrs	r3, r2
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80040f8:	f023 030c 	bic.w	r3, r3, #12
 80040fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004104:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004108:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	021b      	lsls	r3, r3, #8
 8004114:	4313      	orrs	r3, r2
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	4313      	orrs	r3, r2
 800411a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	011a      	lsls	r2, r3, #4
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	031b      	lsls	r3, r3, #12
 8004128:	4313      	orrs	r3, r2
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	4313      	orrs	r3, r2
 800412e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004136:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	4313      	orrs	r3, r2
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3718      	adds	r7, #24
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d002      	beq.n	800418a <HAL_TIM_Encoder_Start+0x16>
 8004184:	2b04      	cmp	r3, #4
 8004186:	d008      	beq.n	800419a <HAL_TIM_Encoder_Start+0x26>
 8004188:	e00f      	b.n	80041aa <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2201      	movs	r2, #1
 8004190:	2100      	movs	r1, #0
 8004192:	4618      	mov	r0, r3
 8004194:	f000 f888 	bl	80042a8 <TIM_CCxChannelCmd>
      break;
 8004198:	e016      	b.n	80041c8 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2201      	movs	r2, #1
 80041a0:	2104      	movs	r1, #4
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 f880 	bl	80042a8 <TIM_CCxChannelCmd>
      break;
 80041a8:	e00e      	b.n	80041c8 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2201      	movs	r2, #1
 80041b0:	2100      	movs	r1, #0
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 f878 	bl	80042a8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2201      	movs	r2, #1
 80041be:	2104      	movs	r1, #4
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 f871 	bl	80042a8 <TIM_CCxChannelCmd>
      break;
 80041c6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0201 	orr.w	r2, r2, #1
 80041d6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a29      	ldr	r2, [pc, #164]	; (800429c <TIM_Base_SetConfig+0xb8>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d00b      	beq.n	8004214 <TIM_Base_SetConfig+0x30>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004202:	d007      	beq.n	8004214 <TIM_Base_SetConfig+0x30>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a26      	ldr	r2, [pc, #152]	; (80042a0 <TIM_Base_SetConfig+0xbc>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d003      	beq.n	8004214 <TIM_Base_SetConfig+0x30>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a25      	ldr	r2, [pc, #148]	; (80042a4 <TIM_Base_SetConfig+0xc0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d108      	bne.n	8004226 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800421a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a1c      	ldr	r2, [pc, #112]	; (800429c <TIM_Base_SetConfig+0xb8>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d00b      	beq.n	8004246 <TIM_Base_SetConfig+0x62>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004234:	d007      	beq.n	8004246 <TIM_Base_SetConfig+0x62>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a19      	ldr	r2, [pc, #100]	; (80042a0 <TIM_Base_SetConfig+0xbc>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d003      	beq.n	8004246 <TIM_Base_SetConfig+0x62>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a18      	ldr	r2, [pc, #96]	; (80042a4 <TIM_Base_SetConfig+0xc0>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d108      	bne.n	8004258 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800424c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4313      	orrs	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a07      	ldr	r2, [pc, #28]	; (800429c <TIM_Base_SetConfig+0xb8>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d103      	bne.n	800428c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	691a      	ldr	r2, [r3, #16]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	615a      	str	r2, [r3, #20]
}
 8004292:	bf00      	nop
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	bc80      	pop	{r7}
 800429a:	4770      	bx	lr
 800429c:	40012c00 	.word	0x40012c00
 80042a0:	40000400 	.word	0x40000400
 80042a4:	40000800 	.word	0x40000800

080042a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f003 031f 	and.w	r3, r3, #31
 80042ba:	2201      	movs	r2, #1
 80042bc:	fa02 f303 	lsl.w	r3, r2, r3
 80042c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6a1a      	ldr	r2, [r3, #32]
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	43db      	mvns	r3, r3
 80042ca:	401a      	ands	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a1a      	ldr	r2, [r3, #32]
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	f003 031f 	and.w	r3, r3, #31
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	fa01 f303 	lsl.w	r3, r1, r3
 80042e0:	431a      	orrs	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	621a      	str	r2, [r3, #32]
}
 80042e6:	bf00      	nop
 80042e8:	371c      	adds	r7, #28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bc80      	pop	{r7}
 80042ee:	4770      	bx	lr

080042f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004300:	2b01      	cmp	r3, #1
 8004302:	d101      	bne.n	8004308 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004304:	2302      	movs	r3, #2
 8004306:	e032      	b.n	800436e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	4313      	orrs	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004340:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	4313      	orrs	r3, r2
 800434a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr

08004378 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800437c:	4904      	ldr	r1, [pc, #16]	; (8004390 <MX_FATFS_Init+0x18>)
 800437e:	4805      	ldr	r0, [pc, #20]	; (8004394 <MX_FATFS_Init+0x1c>)
 8004380:	f002 ffbe 	bl	8007300 <FATFS_LinkDriver>
 8004384:	4603      	mov	r3, r0
 8004386:	461a      	mov	r2, r3
 8004388:	4b03      	ldr	r3, [pc, #12]	; (8004398 <MX_FATFS_Init+0x20>)
 800438a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800438c:	bf00      	nop
 800438e:	bd80      	pop	{r7, pc}
 8004390:	20000a60 	.word	0x20000a60
 8004394:	20000010 	.word	0x20000010
 8004398:	20000a64 	.word	0x20000a64

0800439c <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80043a0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bc80      	pop	{r7}
 80043a8:	4770      	bx	lr

080043aa <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b082      	sub	sp, #8
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	4603      	mov	r3, r0
 80043b2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 80043b4:	79fb      	ldrb	r3, [r7, #7]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fc fe9c 	bl	80010f4 <SD_disk_initialize>
 80043bc:	4603      	mov	r3, r0
 80043be:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3708      	adds	r7, #8
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	4603      	mov	r3, r0
 80043d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 80043d2:	79fb      	ldrb	r3, [r7, #7]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7fc ff77 	bl	80012c8 <SD_disk_status>
 80043da:	4603      	mov	r3, r0
 80043dc:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b084      	sub	sp, #16
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
 80043f0:	603b      	str	r3, [r7, #0]
 80043f2:	4603      	mov	r3, r0
 80043f4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 80043f6:	7bf8      	ldrb	r0, [r7, #15]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	68b9      	ldr	r1, [r7, #8]
 80043fe:	f7fc ff77 	bl	80012f0 <SD_disk_read>
 8004402:	4603      	mov	r3, r0
 8004404:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 800440e:	b580      	push	{r7, lr}
 8004410:	b084      	sub	sp, #16
 8004412:	af00      	add	r7, sp, #0
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
 8004418:	603b      	str	r3, [r7, #0]
 800441a:	4603      	mov	r3, r0
 800441c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800441e:	7bf8      	ldrb	r0, [r7, #15]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	68b9      	ldr	r1, [r7, #8]
 8004426:	f7fc ffcd 	bl	80013c4 <SD_disk_write>
 800442a:	4603      	mov	r3, r0
 800442c:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800442e:	4618      	mov	r0, r3
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b082      	sub	sp, #8
 800443a:	af00      	add	r7, sp, #0
 800443c:	4603      	mov	r3, r0
 800443e:	603a      	str	r2, [r7, #0]
 8004440:	71fb      	strb	r3, [r7, #7]
 8004442:	460b      	mov	r3, r1
 8004444:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8004446:	79fb      	ldrb	r3, [r7, #7]
 8004448:	79b9      	ldrb	r1, [r7, #6]
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	4618      	mov	r0, r3
 800444e:	f7fd f83d 	bl	80014cc <SD_disk_ioctl>
 8004452:	4603      	mov	r3, r0
 8004454:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8004456:	4618      	mov	r0, r3
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
	...

08004460 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	4603      	mov	r3, r0
 8004468:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800446a:	79fb      	ldrb	r3, [r7, #7]
 800446c:	4a08      	ldr	r2, [pc, #32]	; (8004490 <disk_status+0x30>)
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	79fa      	ldrb	r2, [r7, #7]
 8004478:	4905      	ldr	r1, [pc, #20]	; (8004490 <disk_status+0x30>)
 800447a:	440a      	add	r2, r1
 800447c:	7a12      	ldrb	r2, [r2, #8]
 800447e:	4610      	mov	r0, r2
 8004480:	4798      	blx	r3
 8004482:	4603      	mov	r3, r0
 8004484:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004486:	7bfb      	ldrb	r3, [r7, #15]
}
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	20000238 	.word	0x20000238

08004494 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	4603      	mov	r3, r0
 800449c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800449e:	2300      	movs	r3, #0
 80044a0:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80044a2:	79fb      	ldrb	r3, [r7, #7]
 80044a4:	4a0d      	ldr	r2, [pc, #52]	; (80044dc <disk_initialize+0x48>)
 80044a6:	5cd3      	ldrb	r3, [r2, r3]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d111      	bne.n	80044d0 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80044ac:	79fb      	ldrb	r3, [r7, #7]
 80044ae:	4a0b      	ldr	r2, [pc, #44]	; (80044dc <disk_initialize+0x48>)
 80044b0:	2101      	movs	r1, #1
 80044b2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80044b4:	79fb      	ldrb	r3, [r7, #7]
 80044b6:	4a09      	ldr	r2, [pc, #36]	; (80044dc <disk_initialize+0x48>)
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	79fa      	ldrb	r2, [r7, #7]
 80044c2:	4906      	ldr	r1, [pc, #24]	; (80044dc <disk_initialize+0x48>)
 80044c4:	440a      	add	r2, r1
 80044c6:	7a12      	ldrb	r2, [r2, #8]
 80044c8:	4610      	mov	r0, r2
 80044ca:	4798      	blx	r3
 80044cc:	4603      	mov	r3, r0
 80044ce:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	20000238 	.word	0x20000238

080044e0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80044e0:	b590      	push	{r4, r7, lr}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60b9      	str	r1, [r7, #8]
 80044e8:	607a      	str	r2, [r7, #4]
 80044ea:	603b      	str	r3, [r7, #0]
 80044ec:	4603      	mov	r3, r0
 80044ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80044f0:	7bfb      	ldrb	r3, [r7, #15]
 80044f2:	4a0a      	ldr	r2, [pc, #40]	; (800451c <disk_read+0x3c>)
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	689c      	ldr	r4, [r3, #8]
 80044fc:	7bfb      	ldrb	r3, [r7, #15]
 80044fe:	4a07      	ldr	r2, [pc, #28]	; (800451c <disk_read+0x3c>)
 8004500:	4413      	add	r3, r2
 8004502:	7a18      	ldrb	r0, [r3, #8]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	68b9      	ldr	r1, [r7, #8]
 800450a:	47a0      	blx	r4
 800450c:	4603      	mov	r3, r0
 800450e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004510:	7dfb      	ldrb	r3, [r7, #23]
}
 8004512:	4618      	mov	r0, r3
 8004514:	371c      	adds	r7, #28
 8004516:	46bd      	mov	sp, r7
 8004518:	bd90      	pop	{r4, r7, pc}
 800451a:	bf00      	nop
 800451c:	20000238 	.word	0x20000238

08004520 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004520:	b590      	push	{r4, r7, lr}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	60b9      	str	r1, [r7, #8]
 8004528:	607a      	str	r2, [r7, #4]
 800452a:	603b      	str	r3, [r7, #0]
 800452c:	4603      	mov	r3, r0
 800452e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004530:	7bfb      	ldrb	r3, [r7, #15]
 8004532:	4a0a      	ldr	r2, [pc, #40]	; (800455c <disk_write+0x3c>)
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	68dc      	ldr	r4, [r3, #12]
 800453c:	7bfb      	ldrb	r3, [r7, #15]
 800453e:	4a07      	ldr	r2, [pc, #28]	; (800455c <disk_write+0x3c>)
 8004540:	4413      	add	r3, r2
 8004542:	7a18      	ldrb	r0, [r3, #8]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	68b9      	ldr	r1, [r7, #8]
 800454a:	47a0      	blx	r4
 800454c:	4603      	mov	r3, r0
 800454e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004550:	7dfb      	ldrb	r3, [r7, #23]
}
 8004552:	4618      	mov	r0, r3
 8004554:	371c      	adds	r7, #28
 8004556:	46bd      	mov	sp, r7
 8004558:	bd90      	pop	{r4, r7, pc}
 800455a:	bf00      	nop
 800455c:	20000238 	.word	0x20000238

08004560 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	4603      	mov	r3, r0
 8004568:	603a      	str	r2, [r7, #0]
 800456a:	71fb      	strb	r3, [r7, #7]
 800456c:	460b      	mov	r3, r1
 800456e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004570:	79fb      	ldrb	r3, [r7, #7]
 8004572:	4a09      	ldr	r2, [pc, #36]	; (8004598 <disk_ioctl+0x38>)
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	79fa      	ldrb	r2, [r7, #7]
 800457e:	4906      	ldr	r1, [pc, #24]	; (8004598 <disk_ioctl+0x38>)
 8004580:	440a      	add	r2, r1
 8004582:	7a10      	ldrb	r0, [r2, #8]
 8004584:	79b9      	ldrb	r1, [r7, #6]
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	4798      	blx	r3
 800458a:	4603      	mov	r3, r0
 800458c:	73fb      	strb	r3, [r7, #15]
  return res;
 800458e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	20000238 	.word	0x20000238

0800459c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800459c:	b480      	push	{r7}
 800459e:	b087      	sub	sp, #28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80045b0:	e007      	b.n	80045c2 <mem_cpy+0x26>
		*d++ = *s++;
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	1c53      	adds	r3, r2, #1
 80045b6:	613b      	str	r3, [r7, #16]
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	1c59      	adds	r1, r3, #1
 80045bc:	6179      	str	r1, [r7, #20]
 80045be:	7812      	ldrb	r2, [r2, #0]
 80045c0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	1e5a      	subs	r2, r3, #1
 80045c6:	607a      	str	r2, [r7, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1f2      	bne.n	80045b2 <mem_cpy+0x16>
}
 80045cc:	bf00      	nop
 80045ce:	371c      	adds	r7, #28
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bc80      	pop	{r7}
 80045d4:	4770      	bx	lr

080045d6 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80045d6:	b480      	push	{r7}
 80045d8:	b087      	sub	sp, #28
 80045da:	af00      	add	r7, sp, #0
 80045dc:	60f8      	str	r0, [r7, #12]
 80045de:	60b9      	str	r1, [r7, #8]
 80045e0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80045e6:	e005      	b.n	80045f4 <mem_set+0x1e>
		*d++ = (BYTE)val;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	1c5a      	adds	r2, r3, #1
 80045ec:	617a      	str	r2, [r7, #20]
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	1e5a      	subs	r2, r3, #1
 80045f8:	607a      	str	r2, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1f4      	bne.n	80045e8 <mem_set+0x12>
}
 80045fe:	bf00      	nop
 8004600:	371c      	adds	r7, #28
 8004602:	46bd      	mov	sp, r7
 8004604:	bc80      	pop	{r7}
 8004606:	4770      	bx	lr

08004608 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8004608:	b480      	push	{r7}
 800460a:	b089      	sub	sp, #36	; 0x24
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	61fb      	str	r3, [r7, #28]
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800461c:	2300      	movs	r3, #0
 800461e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004620:	bf00      	nop
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	1e5a      	subs	r2, r3, #1
 8004626:	607a      	str	r2, [r7, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00d      	beq.n	8004648 <mem_cmp+0x40>
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	1c5a      	adds	r2, r3, #1
 8004630:	61fa      	str	r2, [r7, #28]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	4619      	mov	r1, r3
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	1c5a      	adds	r2, r3, #1
 800463a:	61ba      	str	r2, [r7, #24]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	1acb      	subs	r3, r1, r3
 8004640:	617b      	str	r3, [r7, #20]
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d0ec      	beq.n	8004622 <mem_cmp+0x1a>
	return r;
 8004648:	697b      	ldr	r3, [r7, #20]
}
 800464a:	4618      	mov	r0, r3
 800464c:	3724      	adds	r7, #36	; 0x24
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr

08004654 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800465e:	e002      	b.n	8004666 <chk_chr+0x12>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3301      	adds	r3, #1
 8004664:	607b      	str	r3, [r7, #4]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d005      	beq.n	800467a <chk_chr+0x26>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	461a      	mov	r2, r3
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	4293      	cmp	r3, r2
 8004678:	d1f2      	bne.n	8004660 <chk_chr+0xc>
	return *str;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	781b      	ldrb	r3, [r3, #0]
}
 800467e:	4618      	mov	r0, r3
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	bc80      	pop	{r7}
 8004686:	4770      	bx	lr

08004688 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004692:	2300      	movs	r3, #0
 8004694:	60bb      	str	r3, [r7, #8]
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	60fb      	str	r3, [r7, #12]
 800469a:	e038      	b.n	800470e <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 800469c:	492f      	ldr	r1, [pc, #188]	; (800475c <chk_lock+0xd4>)
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	4613      	mov	r3, r2
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	4413      	add	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d029      	beq.n	8004704 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80046b0:	492a      	ldr	r1, [pc, #168]	; (800475c <chk_lock+0xd4>)
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	4613      	mov	r3, r2
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	4413      	add	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	440b      	add	r3, r1
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d11e      	bne.n	8004708 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 80046ca:	4924      	ldr	r1, [pc, #144]	; (800475c <chk_lock+0xd4>)
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	4613      	mov	r3, r2
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	4413      	add	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	440b      	add	r3, r1
 80046d8:	3304      	adds	r3, #4
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d110      	bne.n	8004708 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80046e6:	491d      	ldr	r1, [pc, #116]	; (800475c <chk_lock+0xd4>)
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	4613      	mov	r3, r2
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	4413      	add	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	440b      	add	r3, r1
 80046f4:	3308      	adds	r3, #8
 80046f6:	881a      	ldrh	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 80046fe:	429a      	cmp	r2, r3
 8004700:	d102      	bne.n	8004708 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8004702:	e007      	b.n	8004714 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8004704:	2301      	movs	r3, #1
 8004706:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	3301      	adds	r3, #1
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d9c3      	bls.n	800469c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2b02      	cmp	r3, #2
 8004718:	d109      	bne.n	800472e <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d102      	bne.n	8004726 <chk_lock+0x9e>
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	2b02      	cmp	r3, #2
 8004724:	d101      	bne.n	800472a <chk_lock+0xa2>
 8004726:	2300      	movs	r3, #0
 8004728:	e013      	b.n	8004752 <chk_lock+0xca>
 800472a:	2312      	movs	r3, #18
 800472c:	e011      	b.n	8004752 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10b      	bne.n	800474c <chk_lock+0xc4>
 8004734:	4909      	ldr	r1, [pc, #36]	; (800475c <chk_lock+0xd4>)
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	4613      	mov	r3, r2
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	4413      	add	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	440b      	add	r3, r1
 8004742:	330a      	adds	r3, #10
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800474a:	d101      	bne.n	8004750 <chk_lock+0xc8>
 800474c:	2310      	movs	r3, #16
 800474e:	e000      	b.n	8004752 <chk_lock+0xca>
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3714      	adds	r7, #20
 8004756:	46bd      	mov	sp, r7
 8004758:	bc80      	pop	{r7}
 800475a:	4770      	bx	lr
 800475c:	20000220 	.word	0x20000220

08004760 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004766:	2300      	movs	r3, #0
 8004768:	607b      	str	r3, [r7, #4]
 800476a:	e002      	b.n	8004772 <enq_lock+0x12>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	3301      	adds	r3, #1
 8004770:	607b      	str	r3, [r7, #4]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d809      	bhi.n	800478c <enq_lock+0x2c>
 8004778:	490a      	ldr	r1, [pc, #40]	; (80047a4 <enq_lock+0x44>)
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	4613      	mov	r3, r2
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	4413      	add	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	440b      	add	r3, r1
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1ef      	bne.n	800476c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b02      	cmp	r3, #2
 8004790:	bf14      	ite	ne
 8004792:	2301      	movne	r3, #1
 8004794:	2300      	moveq	r3, #0
 8004796:	b2db      	uxtb	r3, r3
}
 8004798:	4618      	mov	r0, r3
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	bc80      	pop	{r7}
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	20000220 	.word	0x20000220

080047a8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80047b2:	2300      	movs	r3, #0
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	e02b      	b.n	8004810 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 80047b8:	4955      	ldr	r1, [pc, #340]	; (8004910 <inc_lock+0x168>)
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	4613      	mov	r3, r2
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	4413      	add	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	440b      	add	r3, r1
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d11b      	bne.n	800480a <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 80047d2:	494f      	ldr	r1, [pc, #316]	; (8004910 <inc_lock+0x168>)
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	4613      	mov	r3, r2
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	4413      	add	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	440b      	add	r3, r1
 80047e0:	3304      	adds	r3, #4
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d10d      	bne.n	800480a <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 80047ee:	4948      	ldr	r1, [pc, #288]	; (8004910 <inc_lock+0x168>)
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	4613      	mov	r3, r2
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	4413      	add	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	440b      	add	r3, r1
 80047fc:	3308      	adds	r3, #8
 80047fe:	881a      	ldrh	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8004806:	429a      	cmp	r2, r3
 8004808:	d006      	beq.n	8004818 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	3301      	adds	r3, #1
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d9d0      	bls.n	80047b8 <inc_lock+0x10>
 8004816:	e000      	b.n	800481a <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8004818:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2b02      	cmp	r3, #2
 800481e:	d145      	bne.n	80048ac <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004820:	2300      	movs	r3, #0
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	e002      	b.n	800482c <inc_lock+0x84>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	3301      	adds	r3, #1
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d809      	bhi.n	8004846 <inc_lock+0x9e>
 8004832:	4937      	ldr	r1, [pc, #220]	; (8004910 <inc_lock+0x168>)
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	4613      	mov	r3, r2
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	4413      	add	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	440b      	add	r3, r1
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1ef      	bne.n	8004826 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2b02      	cmp	r3, #2
 800484a:	d101      	bne.n	8004850 <inc_lock+0xa8>
 800484c:	2300      	movs	r3, #0
 800484e:	e05a      	b.n	8004906 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8004856:	482e      	ldr	r0, [pc, #184]	; (8004910 <inc_lock+0x168>)
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	4613      	mov	r3, r2
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	4413      	add	r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	4403      	add	r3, r0
 8004864:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 800486c:	4828      	ldr	r0, [pc, #160]	; (8004910 <inc_lock+0x168>)
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	4613      	mov	r3, r2
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	4413      	add	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4403      	add	r3, r0
 800487a:	3304      	adds	r3, #4
 800487c:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8004884:	4922      	ldr	r1, [pc, #136]	; (8004910 <inc_lock+0x168>)
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	4613      	mov	r3, r2
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	4413      	add	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	440b      	add	r3, r1
 8004892:	3308      	adds	r3, #8
 8004894:	4602      	mov	r2, r0
 8004896:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8004898:	491d      	ldr	r1, [pc, #116]	; (8004910 <inc_lock+0x168>)
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	4613      	mov	r3, r2
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	4413      	add	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	440b      	add	r3, r1
 80048a6:	330a      	adds	r3, #10
 80048a8:	2200      	movs	r2, #0
 80048aa:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00c      	beq.n	80048cc <inc_lock+0x124>
 80048b2:	4917      	ldr	r1, [pc, #92]	; (8004910 <inc_lock+0x168>)
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	4613      	mov	r3, r2
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	4413      	add	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	440b      	add	r3, r1
 80048c0:	330a      	adds	r3, #10
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <inc_lock+0x124>
 80048c8:	2300      	movs	r3, #0
 80048ca:	e01c      	b.n	8004906 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10b      	bne.n	80048ea <inc_lock+0x142>
 80048d2:	490f      	ldr	r1, [pc, #60]	; (8004910 <inc_lock+0x168>)
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	4613      	mov	r3, r2
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	4413      	add	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	440b      	add	r3, r1
 80048e0:	330a      	adds	r3, #10
 80048e2:	881b      	ldrh	r3, [r3, #0]
 80048e4:	3301      	adds	r3, #1
 80048e6:	b299      	uxth	r1, r3
 80048e8:	e001      	b.n	80048ee <inc_lock+0x146>
 80048ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80048ee:	4808      	ldr	r0, [pc, #32]	; (8004910 <inc_lock+0x168>)
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	4613      	mov	r3, r2
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	4413      	add	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4403      	add	r3, r0
 80048fc:	330a      	adds	r3, #10
 80048fe:	460a      	mov	r2, r1
 8004900:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	3301      	adds	r3, #1
}
 8004906:	4618      	mov	r0, r3
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	bc80      	pop	{r7}
 800490e:	4770      	bx	lr
 8004910:	20000220 	.word	0x20000220

08004914 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3b01      	subs	r3, #1
 8004920:	607b      	str	r3, [r7, #4]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d82e      	bhi.n	8004986 <dec_lock+0x72>
		n = Files[i].ctr;
 8004928:	491b      	ldr	r1, [pc, #108]	; (8004998 <dec_lock+0x84>)
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	4613      	mov	r3, r2
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	4413      	add	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	440b      	add	r3, r1
 8004936:	330a      	adds	r3, #10
 8004938:	881b      	ldrh	r3, [r3, #0]
 800493a:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800493c:	89fb      	ldrh	r3, [r7, #14]
 800493e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004942:	d101      	bne.n	8004948 <dec_lock+0x34>
 8004944:	2300      	movs	r3, #0
 8004946:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8004948:	89fb      	ldrh	r3, [r7, #14]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d002      	beq.n	8004954 <dec_lock+0x40>
 800494e:	89fb      	ldrh	r3, [r7, #14]
 8004950:	3b01      	subs	r3, #1
 8004952:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004954:	4910      	ldr	r1, [pc, #64]	; (8004998 <dec_lock+0x84>)
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	4613      	mov	r3, r2
 800495a:	005b      	lsls	r3, r3, #1
 800495c:	4413      	add	r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	440b      	add	r3, r1
 8004962:	330a      	adds	r3, #10
 8004964:	89fa      	ldrh	r2, [r7, #14]
 8004966:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004968:	89fb      	ldrh	r3, [r7, #14]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d108      	bne.n	8004980 <dec_lock+0x6c>
 800496e:	490a      	ldr	r1, [pc, #40]	; (8004998 <dec_lock+0x84>)
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	4613      	mov	r3, r2
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	4413      	add	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	440b      	add	r3, r1
 800497c:	2200      	movs	r2, #0
 800497e:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004980:	2300      	movs	r3, #0
 8004982:	737b      	strb	r3, [r7, #13]
 8004984:	e001      	b.n	800498a <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004986:	2302      	movs	r3, #2
 8004988:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800498a:	7b7b      	ldrb	r3, [r7, #13]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	bc80      	pop	{r7}
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	20000220 	.word	0x20000220

0800499c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80049a4:	2300      	movs	r3, #0
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	e016      	b.n	80049d8 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80049aa:	490f      	ldr	r1, [pc, #60]	; (80049e8 <clear_lock+0x4c>)
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	4613      	mov	r3, r2
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	4413      	add	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	440b      	add	r3, r1
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d108      	bne.n	80049d2 <clear_lock+0x36>
 80049c0:	4909      	ldr	r1, [pc, #36]	; (80049e8 <clear_lock+0x4c>)
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	4613      	mov	r3, r2
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	4413      	add	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	440b      	add	r3, r1
 80049ce:	2200      	movs	r2, #0
 80049d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	3301      	adds	r3, #1
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d9e5      	bls.n	80049aa <clear_lock+0xe>
	}
}
 80049de:	bf00      	nop
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bc80      	pop	{r7}
 80049e6:	4770      	bx	lr
 80049e8:	20000220 	.word	0x20000220

080049ec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80049f4:	2300      	movs	r3, #0
 80049f6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d038      	beq.n	8004a74 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8004a08:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8004a10:	6879      	ldr	r1, [r7, #4]
 8004a12:	2301      	movs	r3, #1
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	f7ff fd83 	bl	8004520 <disk_write>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d002      	beq.n	8004a26 <sync_window+0x3a>
			res = FR_DISK_ERR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	73fb      	strb	r3, [r7, #15]
 8004a24:	e026      	b.n	8004a74 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	1ad2      	subs	r2, r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d218      	bcs.n	8004a74 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8004a48:	613b      	str	r3, [r7, #16]
 8004a4a:	e010      	b.n	8004a6e <sync_window+0x82>
					wsect += fs->fsize;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	4413      	add	r3, r2
 8004a56:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8004a5e:	6879      	ldr	r1, [r7, #4]
 8004a60:	2301      	movs	r3, #1
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	f7ff fd5c 	bl	8004520 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	613b      	str	r3, [r7, #16]
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d8eb      	bhi.n	8004a4c <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3718      	adds	r7, #24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b084      	sub	sp, #16
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
 8004a86:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d01b      	beq.n	8004ad0 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f7ff ffa7 	bl	80049ec <sync_window>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004aa2:	7bfb      	ldrb	r3, [r7, #15]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d113      	bne.n	8004ad0 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8004aae:	6879      	ldr	r1, [r7, #4]
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	f7ff fd14 	bl	80044e0 <disk_read>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d004      	beq.n	8004ac8 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004abe:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac2:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8004ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b084      	sub	sp, #16
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7ff ff82 	bl	80049ec <sync_window>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004aec:	7bfb      	ldrb	r3, [r7, #15]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f040 809b 	bne.w	8004c2a <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004afa:	2b03      	cmp	r3, #3
 8004afc:	f040 8088 	bne.w	8004c10 <sync_fs+0x136>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	f040 8082 	bne.w	8004c10 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b12:	2100      	movs	r1, #0
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7ff fd5e 	bl	80045d6 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2255      	movs	r2, #85	; 0x55
 8004b1e:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	22aa      	movs	r2, #170	; 0xaa
 8004b26:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2252      	movs	r2, #82	; 0x52
 8004b2e:	701a      	strb	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2252      	movs	r2, #82	; 0x52
 8004b34:	705a      	strb	r2, [r3, #1]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2261      	movs	r2, #97	; 0x61
 8004b3a:	709a      	strb	r2, [r3, #2]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2241      	movs	r2, #65	; 0x41
 8004b40:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2272      	movs	r2, #114	; 0x72
 8004b46:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2272      	movs	r2, #114	; 0x72
 8004b4e:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2241      	movs	r2, #65	; 0x41
 8004b56:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2261      	movs	r2, #97	; 0x61
 8004b5e:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004b68:	b2da      	uxtb	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	0a1b      	lsrs	r3, r3, #8
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004b8a:	0c1b      	lsrs	r3, r3, #16
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004b9a:	0e1b      	lsrs	r3, r3, #24
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004baa:	b2da      	uxtb	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	0a1b      	lsrs	r3, r3, #8
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	b2da      	uxtb	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004bcc:	0c1b      	lsrs	r3, r3, #16
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004bdc:	0e1b      	lsrs	r3, r3, #24
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004bec:	1c5a      	adds	r2, r3, #1
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8004bfa:	6879      	ldr	r1, [r7, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8004c02:	2301      	movs	r3, #1
 8004c04:	f7ff fc8c 	bl	8004520 <disk_write>
			fs->fsi_flag = 0;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004c16:	2200      	movs	r2, #0
 8004c18:	2100      	movs	r1, #0
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7ff fca0 	bl	8004560 <disk_ioctl>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <sync_fs+0x150>
			res = FR_DISK_ERR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	3b02      	subs	r3, #2
 8004c42:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004c4a:	3b02      	subs	r3, #2
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d301      	bcc.n	8004c56 <clust2sect+0x22>
 8004c52:	2300      	movs	r3, #0
 8004c54:	e00a      	b.n	8004c6c <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	fb03 f202 	mul.w	r2, r3, r2
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8004c6a:	4413      	add	r3, r2
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bc80      	pop	{r7}
 8004c74:	4770      	bx	lr

08004c76 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b086      	sub	sp, #24
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
 8004c7e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d905      	bls.n	8004c92 <get_fat+0x1c>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d302      	bcc.n	8004c98 <get_fat+0x22>
		val = 1;	/* Internal error */
 8004c92:	2301      	movs	r3, #1
 8004c94:	617b      	str	r3, [r7, #20]
 8004c96:	e0a0      	b.n	8004dda <get_fat+0x164>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004c98:	f04f 33ff 	mov.w	r3, #4294967295
 8004c9c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d044      	beq.n	8004d32 <get_fat+0xbc>
 8004ca8:	2b03      	cmp	r3, #3
 8004caa:	d063      	beq.n	8004d74 <get_fat+0xfe>
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	f040 808a 	bne.w	8004dc6 <get_fat+0x150>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	085b      	lsrs	r3, r3, #1
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	0a5b      	lsrs	r3, r3, #9
 8004cca:	4413      	add	r3, r2
 8004ccc:	4619      	mov	r1, r3
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7ff fed5 	bl	8004a7e <move_window>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d178      	bne.n	8004dcc <get_fat+0x156>
			wc = fs->win.d8[bc++ % SS(fs)];
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	60fa      	str	r2, [r7, #12]
 8004ce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	5cd3      	ldrb	r3, [r2, r3]
 8004ce8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	0a5b      	lsrs	r3, r3, #9
 8004cf4:	4413      	add	r3, r2
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f7ff fec0 	bl	8004a7e <move_window>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d165      	bne.n	8004dd0 <get_fat+0x15a>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	5cd3      	ldrb	r3, [r2, r3]
 8004d0e:	021b      	lsls	r3, r3, #8
 8004d10:	461a      	mov	r2, r3
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d002      	beq.n	8004d28 <get_fat+0xb2>
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	091b      	lsrs	r3, r3, #4
 8004d26:	e002      	b.n	8004d2e <get_fat+0xb8>
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d2e:	617b      	str	r3, [r7, #20]
			break;
 8004d30:	e053      	b.n	8004dda <get_fat+0x164>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	0a1b      	lsrs	r3, r3, #8
 8004d3c:	4413      	add	r3, r2
 8004d3e:	4619      	mov	r1, r3
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7ff fe9c 	bl	8004a7e <move_window>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d143      	bne.n	8004dd4 <get_fat+0x15e>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	005b      	lsls	r3, r3, #1
 8004d50:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	4413      	add	r3, r2
 8004d58:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	021b      	lsls	r3, r3, #8
 8004d62:	b21a      	sxth	r2, r3
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	b21b      	sxth	r3, r3
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	b21b      	sxth	r3, r3
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	617b      	str	r3, [r7, #20]
			break;
 8004d72:	e032      	b.n	8004dda <get_fat+0x164>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	09db      	lsrs	r3, r3, #7
 8004d7e:	4413      	add	r3, r2
 8004d80:	4619      	mov	r1, r3
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7ff fe7b 	bl	8004a7e <move_window>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d124      	bne.n	8004dd8 <get_fat+0x162>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	4413      	add	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	3303      	adds	r3, #3
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	061a      	lsls	r2, r3, #24
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	3302      	adds	r3, #2
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	041b      	lsls	r3, r3, #16
 8004dac:	4313      	orrs	r3, r2
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	3201      	adds	r2, #1
 8004db2:	7812      	ldrb	r2, [r2, #0]
 8004db4:	0212      	lsls	r2, r2, #8
 8004db6:	4313      	orrs	r3, r2
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	7812      	ldrb	r2, [r2, #0]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004dc2:	617b      	str	r3, [r7, #20]
			break;
 8004dc4:	e009      	b.n	8004dda <get_fat+0x164>

		default:
			val = 1;	/* Internal error */
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	617b      	str	r3, [r7, #20]
 8004dca:	e006      	b.n	8004dda <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004dcc:	bf00      	nop
 8004dce:	e004      	b.n	8004dda <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004dd0:	bf00      	nop
 8004dd2:	e002      	b.n	8004dda <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004dd4:	bf00      	nop
 8004dd6:	e000      	b.n	8004dda <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004dd8:	bf00      	nop
		}
	}

	return val;
 8004dda:	697b      	ldr	r3, [r7, #20]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3718      	adds	r7, #24
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b088      	sub	sp, #32
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d905      	bls.n	8004e02 <put_fat+0x1e>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d302      	bcc.n	8004e08 <put_fat+0x24>
		res = FR_INT_ERR;
 8004e02:	2302      	movs	r3, #2
 8004e04:	77fb      	strb	r3, [r7, #31]
 8004e06:	e0f3      	b.n	8004ff0 <put_fat+0x20c>

	} else {
		switch (fs->fs_type) {
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d074      	beq.n	8004efc <put_fat+0x118>
 8004e12:	2b03      	cmp	r3, #3
 8004e14:	f000 8099 	beq.w	8004f4a <put_fat+0x166>
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	f040 80df 	bne.w	8004fdc <put_fat+0x1f8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	617b      	str	r3, [r7, #20]
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	085b      	lsrs	r3, r3, #1
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	4413      	add	r3, r2
 8004e2a:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	0a5b      	lsrs	r3, r3, #9
 8004e36:	4413      	add	r3, r2
 8004e38:	4619      	mov	r1, r3
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f7ff fe1f 	bl	8004a7e <move_window>
 8004e40:	4603      	mov	r3, r0
 8004e42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004e44:	7ffb      	ldrb	r3, [r7, #31]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f040 80cb 	bne.w	8004fe2 <put_fat+0x1fe>
			p = &fs->win.d8[bc++ % SS(fs)];
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	1c5a      	adds	r2, r3, #1
 8004e50:	617a      	str	r2, [r7, #20]
 8004e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	4413      	add	r3, r2
 8004e5a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00d      	beq.n	8004e82 <put_fat+0x9e>
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	b25b      	sxtb	r3, r3
 8004e6c:	f003 030f 	and.w	r3, r3, #15
 8004e70:	b25a      	sxtb	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	b25b      	sxtb	r3, r3
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	b25b      	sxtb	r3, r3
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	e001      	b.n	8004e86 <put_fat+0xa2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	69ba      	ldr	r2, [r7, #24]
 8004e88:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	0a5b      	lsrs	r3, r3, #9
 8004e9c:	4413      	add	r3, r2
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f7ff fdec 	bl	8004a7e <move_window>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004eaa:	7ffb      	ldrb	r3, [r7, #31]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f040 809a 	bne.w	8004fe6 <put_fat+0x202>
			p = &fs->win.d8[bc % SS(fs)];
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	4413      	add	r3, r2
 8004ebc:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d003      	beq.n	8004ed0 <put_fat+0xec>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	091b      	lsrs	r3, r3, #4
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	e00e      	b.n	8004eee <put_fat+0x10a>
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	b25b      	sxtb	r3, r3
 8004ed6:	f023 030f 	bic.w	r3, r3, #15
 8004eda:	b25a      	sxtb	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	0a1b      	lsrs	r3, r3, #8
 8004ee0:	b25b      	sxtb	r3, r3
 8004ee2:	f003 030f 	and.w	r3, r3, #15
 8004ee6:	b25b      	sxtb	r3, r3
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	b25b      	sxtb	r3, r3
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8004efa:	e079      	b.n	8004ff0 <put_fat+0x20c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	0a1b      	lsrs	r3, r3, #8
 8004f06:	4413      	add	r3, r2
 8004f08:	4619      	mov	r1, r3
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f7ff fdb7 	bl	8004a7e <move_window>
 8004f10:	4603      	mov	r3, r0
 8004f12:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004f14:	7ffb      	ldrb	r3, [r7, #31]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d167      	bne.n	8004fea <put_fat+0x206>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	4413      	add	r3, r2
 8004f26:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	b2da      	uxtb	r2, r3
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	701a      	strb	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	0a1b      	lsrs	r3, r3, #8
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	b2d2      	uxtb	r2, r2
 8004f3e:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8004f48:	e052      	b.n	8004ff0 <put_fat+0x20c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	09db      	lsrs	r3, r3, #7
 8004f54:	4413      	add	r3, r2
 8004f56:	4619      	mov	r1, r3
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f7ff fd90 	bl	8004a7e <move_window>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004f62:	7ffb      	ldrb	r3, [r7, #31]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d142      	bne.n	8004fee <put_fat+0x20a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4413      	add	r3, r2
 8004f74:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	3303      	adds	r3, #3
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	061a      	lsls	r2, r3, #24
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	3302      	adds	r3, #2
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	041b      	lsls	r3, r3, #16
 8004f86:	4313      	orrs	r3, r2
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	3201      	adds	r2, #1
 8004f8c:	7812      	ldrb	r2, [r2, #0]
 8004f8e:	0212      	lsls	r2, r2, #8
 8004f90:	4313      	orrs	r3, r2
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	7812      	ldrb	r2, [r2, #0]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	701a      	strb	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	0a1b      	lsrs	r3, r3, #8
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	b2d2      	uxtb	r2, r2
 8004fb8:	701a      	strb	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	0c1a      	lsrs	r2, r3, #16
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	3302      	adds	r3, #2
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	701a      	strb	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	0e1a      	lsrs	r2, r3, #24
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	3303      	adds	r3, #3
 8004fce:	b2d2      	uxtb	r2, r2
 8004fd0:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8004fda:	e009      	b.n	8004ff0 <put_fat+0x20c>

		default :
			res = FR_INT_ERR;
 8004fdc:	2302      	movs	r3, #2
 8004fde:	77fb      	strb	r3, [r7, #31]
 8004fe0:	e006      	b.n	8004ff0 <put_fat+0x20c>
			if (res != FR_OK) break;
 8004fe2:	bf00      	nop
 8004fe4:	e004      	b.n	8004ff0 <put_fat+0x20c>
			if (res != FR_OK) break;
 8004fe6:	bf00      	nop
 8004fe8:	e002      	b.n	8004ff0 <put_fat+0x20c>
			if (res != FR_OK) break;
 8004fea:	bf00      	nop
 8004fec:	e000      	b.n	8004ff0 <put_fat+0x20c>
			if (res != FR_OK) break;
 8004fee:	bf00      	nop
		}
	}

	return res;
 8004ff0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3720      	adds	r7, #32
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b084      	sub	sp, #16
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
 8005002:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d905      	bls.n	8005016 <remove_chain+0x1c>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	429a      	cmp	r2, r3
 8005014:	d302      	bcc.n	800501c <remove_chain+0x22>
		res = FR_INT_ERR;
 8005016:	2302      	movs	r3, #2
 8005018:	73fb      	strb	r3, [r7, #15]
 800501a:	e043      	b.n	80050a4 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800501c:	2300      	movs	r3, #0
 800501e:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005020:	e036      	b.n	8005090 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8005022:	6839      	ldr	r1, [r7, #0]
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f7ff fe26 	bl	8004c76 <get_fat>
 800502a:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d035      	beq.n	800509e <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d102      	bne.n	800503e <remove_chain+0x44>
 8005038:	2302      	movs	r3, #2
 800503a:	73fb      	strb	r3, [r7, #15]
 800503c:	e032      	b.n	80050a4 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005044:	d102      	bne.n	800504c <remove_chain+0x52>
 8005046:	2301      	movs	r3, #1
 8005048:	73fb      	strb	r3, [r7, #15]
 800504a:	e02b      	b.n	80050a4 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800504c:	2200      	movs	r2, #0
 800504e:	6839      	ldr	r1, [r7, #0]
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f7ff fec7 	bl	8004de4 <put_fat>
 8005056:	4603      	mov	r3, r0
 8005058:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800505a:	7bfb      	ldrb	r3, [r7, #15]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d120      	bne.n	80050a2 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506a:	d00f      	beq.n	800508c <remove_chain+0x92>
				fs->free_clust++;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005072:	1c5a      	adds	r2, r3, #1
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8005080:	f043 0301 	orr.w	r3, r3, #1
 8005084:	b2da      	uxtb	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	429a      	cmp	r2, r3
 800509a:	d3c2      	bcc.n	8005022 <remove_chain+0x28>
 800509c:	e002      	b.n	80050a4 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800509e:	bf00      	nop
 80050a0:	e000      	b.n	80050a4 <remove_chain+0xaa>
			if (res != FR_OK) break;
 80050a2:	bf00      	nop
		}
	}

	return res;
 80050a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b086      	sub	sp, #24
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10f      	bne.n	80050de <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80050c4:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d005      	beq.n	80050d8 <create_chain+0x2a>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d31c      	bcc.n	8005112 <create_chain+0x64>
 80050d8:	2301      	movs	r3, #1
 80050da:	613b      	str	r3, [r7, #16]
 80050dc:	e019      	b.n	8005112 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80050de:	6839      	ldr	r1, [r7, #0]
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f7ff fdc8 	bl	8004c76 <get_fat>
 80050e6:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d801      	bhi.n	80050f2 <create_chain+0x44>
 80050ee:	2301      	movs	r3, #1
 80050f0:	e076      	b.n	80051e0 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f8:	d101      	bne.n	80050fe <create_chain+0x50>
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	e070      	b.n	80051e0 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	429a      	cmp	r2, r3
 8005108:	d201      	bcs.n	800510e <create_chain+0x60>
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	e068      	b.n	80051e0 <create_chain+0x132>
		scl = clst;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	3301      	adds	r3, #1
 800511a:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	429a      	cmp	r2, r3
 8005126:	d307      	bcc.n	8005138 <create_chain+0x8a>
			ncl = 2;
 8005128:	2302      	movs	r3, #2
 800512a:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	429a      	cmp	r2, r3
 8005132:	d901      	bls.n	8005138 <create_chain+0x8a>
 8005134:	2300      	movs	r3, #0
 8005136:	e053      	b.n	80051e0 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8005138:	6979      	ldr	r1, [r7, #20]
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7ff fd9b 	bl	8004c76 <get_fat>
 8005140:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00e      	beq.n	8005166 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514e:	d002      	beq.n	8005156 <create_chain+0xa8>
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d101      	bne.n	800515a <create_chain+0xac>
			return cs;
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	e042      	b.n	80051e0 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	429a      	cmp	r2, r3
 8005160:	d1d9      	bne.n	8005116 <create_chain+0x68>
 8005162:	2300      	movs	r3, #0
 8005164:	e03c      	b.n	80051e0 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8005166:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8005168:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800516c:	6979      	ldr	r1, [r7, #20]
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7ff fe38 	bl	8004de4 <put_fat>
 8005174:	4603      	mov	r3, r0
 8005176:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8005178:	7bfb      	ldrb	r3, [r7, #15]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d109      	bne.n	8005192 <create_chain+0xe4>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d006      	beq.n	8005192 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	6839      	ldr	r1, [r7, #0]
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f7ff fe2b 	bl	8004de4 <put_fat>
 800518e:	4603      	mov	r3, r0
 8005190:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8005192:	7bfb      	ldrb	r3, [r7, #15]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d11a      	bne.n	80051ce <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80051a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051aa:	d018      	beq.n	80051de <create_chain+0x130>
			fs->free_clust--;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80051b2:	1e5a      	subs	r2, r3, #1
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80051c0:	f043 0301 	orr.w	r3, r3, #1
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 80051cc:	e007      	b.n	80051de <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80051ce:	7bfb      	ldrb	r3, [r7, #15]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d102      	bne.n	80051da <create_chain+0x12c>
 80051d4:	f04f 33ff 	mov.w	r3, #4294967295
 80051d8:	e000      	b.n	80051dc <create_chain+0x12e>
 80051da:	2301      	movs	r3, #1
 80051dc:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80051de:	697b      	ldr	r3, [r7, #20]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3718      	adds	r7, #24
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80051f8:	3304      	adds	r3, #4
 80051fa:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	0a5b      	lsrs	r3, r3, #9
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8005206:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800520a:	fbb3 f3f2 	udiv	r3, r3, r2
 800520e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	1d1a      	adds	r2, r3, #4
 8005214:	613a      	str	r2, [r7, #16]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <clmt_clust+0x3c>
 8005220:	2300      	movs	r3, #0
 8005222:	e010      	b.n	8005246 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	429a      	cmp	r2, r3
 800522a:	d307      	bcc.n	800523c <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	617b      	str	r3, [r7, #20]
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	3304      	adds	r3, #4
 8005238:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800523a:	e7e9      	b.n	8005210 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800523c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	4413      	add	r3, r2
}
 8005246:	4618      	mov	r0, r3
 8005248:	371c      	adds	r7, #28
 800524a:	46bd      	mov	sp, r7
 800524c:	bc80      	pop	{r7}
 800524e:	4770      	bx	lr

08005250 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	b29a      	uxth	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800526a:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d007      	beq.n	8005282 <dir_sdi+0x32>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005278:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	429a      	cmp	r2, r3
 8005280:	d301      	bcc.n	8005286 <dir_sdi+0x36>
		return FR_INT_ERR;
 8005282:	2302      	movs	r3, #2
 8005284:	e074      	b.n	8005370 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10c      	bne.n	80052a6 <dir_sdi+0x56>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005292:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005296:	2b03      	cmp	r3, #3
 8005298:	d105      	bne.n	80052a6 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052a0:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80052a4:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d111      	bne.n	80052d0 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052b2:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80052b6:	461a      	mov	r2, r3
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d301      	bcc.n	80052c2 <dir_sdi+0x72>
			return FR_INT_ERR;
 80052be:	2302      	movs	r3, #2
 80052c0:	e056      	b.n	8005370 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052c8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80052cc:	613b      	str	r3, [r7, #16]
 80052ce:	e032      	b.n	8005336 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052d6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80052de:	e01e      	b.n	800531e <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052e6:	6979      	ldr	r1, [r7, #20]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7ff fcc4 	bl	8004c76 <get_fat>
 80052ee:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f6:	d101      	bne.n	80052fc <dir_sdi+0xac>
 80052f8:	2301      	movs	r3, #1
 80052fa:	e039      	b.n	8005370 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d907      	bls.n	8005312 <dir_sdi+0xc2>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005308:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	429a      	cmp	r2, r3
 8005310:	d301      	bcc.n	8005316 <dir_sdi+0xc6>
				return FR_INT_ERR;
 8005312:	2302      	movs	r3, #2
 8005314:	e02c      	b.n	8005370 <dir_sdi+0x120>
			idx -= ic;
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	429a      	cmp	r2, r3
 8005324:	d2dc      	bcs.n	80052e0 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800532c:	6979      	ldr	r1, [r7, #20]
 800532e:	4618      	mov	r0, r3
 8005330:	f7ff fc80 	bl	8004c34 <clust2sect>
 8005334:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <dir_sdi+0xf8>
 8005344:	2302      	movs	r3, #2
 8005346:	e013      	b.n	8005370 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	091a      	lsrs	r2, r3, #4
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	441a      	add	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800535c:	461a      	mov	r2, r3
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	f003 030f 	and.w	r3, r3, #15
 8005364:	015b      	lsls	r3, r3, #5
 8005366:	441a      	add	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3718      	adds	r7, #24
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005378:	b590      	push	{r4, r7, lr}
 800537a:	b087      	sub	sp, #28
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8005388:	3301      	adds	r3, #1
 800538a:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	b29b      	uxth	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	d004      	beq.n	800539e <dir_next+0x26>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <dir_next+0x2a>
		return FR_NO_FILE;
 800539e:	2304      	movs	r3, #4
 80053a0:	e0dd      	b.n	800555e <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f003 030f 	and.w	r3, r3, #15
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f040 80c6 	bne.w	800553a <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80053b4:	1c5a      	adds	r2, r3, #1
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10b      	bne.n	80053de <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80053cc:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80053d0:	461a      	mov	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	4293      	cmp	r3, r2
 80053d6:	f0c0 80b0 	bcc.w	800553a <dir_next+0x1c2>
				return FR_NO_FILE;
 80053da:	2304      	movs	r3, #4
 80053dc:	e0bf      	b.n	800555e <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	091b      	lsrs	r3, r3, #4
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80053e8:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80053ec:	3a01      	subs	r2, #1
 80053ee:	4013      	ands	r3, r2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f040 80a2 	bne.w	800553a <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005402:	4619      	mov	r1, r3
 8005404:	4610      	mov	r0, r2
 8005406:	f7ff fc36 	bl	8004c76 <get_fat>
 800540a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d801      	bhi.n	8005416 <dir_next+0x9e>
 8005412:	2302      	movs	r3, #2
 8005414:	e0a3      	b.n	800555e <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541c:	d101      	bne.n	8005422 <dir_next+0xaa>
 800541e:	2301      	movs	r3, #1
 8005420:	e09d      	b.n	800555e <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005428:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	429a      	cmp	r2, r3
 8005430:	d374      	bcc.n	800551c <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <dir_next+0xc4>
 8005438:	2304      	movs	r3, #4
 800543a:	e090      	b.n	800555e <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005448:	4619      	mov	r1, r3
 800544a:	4610      	mov	r0, r2
 800544c:	f7ff fe2f 	bl	80050ae <create_chain>
 8005450:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <dir_next+0xe4>
 8005458:	2307      	movs	r3, #7
 800545a:	e080      	b.n	800555e <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d101      	bne.n	8005466 <dir_next+0xee>
 8005462:	2302      	movs	r3, #2
 8005464:	e07b      	b.n	800555e <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546c:	d101      	bne.n	8005472 <dir_next+0xfa>
 800546e:	2301      	movs	r3, #1
 8005470:	e075      	b.n	800555e <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005478:	4618      	mov	r0, r3
 800547a:	f7ff fab7 	bl	80049ec <sync_window>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <dir_next+0x110>
 8005484:	2301      	movs	r3, #1
 8005486:	e06a      	b.n	800555e <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800548e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005492:	2100      	movs	r1, #0
 8005494:	4618      	mov	r0, r3
 8005496:	f7ff f89e 	bl	80045d6 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 80054a6:	6979      	ldr	r1, [r7, #20]
 80054a8:	4610      	mov	r0, r2
 80054aa:	f7ff fbc3 	bl	8004c34 <clust2sect>
 80054ae:	4603      	mov	r3, r0
 80054b0:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80054b4:	2300      	movs	r3, #0
 80054b6:	613b      	str	r3, [r7, #16]
 80054b8:	e01b      	b.n	80054f2 <dir_next+0x17a>
						dp->fs->wflag = 1;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7ff fa8d 	bl	80049ec <sync_window>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d001      	beq.n	80054dc <dir_next+0x164>
 80054d8:	2301      	movs	r3, #1
 80054da:	e040      	b.n	800555e <dir_next+0x1e6>
						dp->fs->winsect++;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80054e2:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80054e6:	3201      	adds	r2, #1
 80054e8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	3301      	adds	r3, #1
 80054f0:	613b      	str	r3, [r7, #16]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80054f8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80054fc:	461a      	mov	r2, r3
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	4293      	cmp	r3, r2
 8005502:	d3da      	bcc.n	80054ba <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800550a:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	1a8a      	subs	r2, r1, r2
 8005518:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800552a:	6979      	ldr	r1, [r7, #20]
 800552c:	4618      	mov	r0, r3
 800552e:	f7ff fb81 	bl	8004c34 <clust2sect>
 8005532:	4602      	mov	r2, r0
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	b29a      	uxth	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800554a:	461a      	mov	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f003 030f 	and.w	r3, r3, #15
 8005552:	015b      	lsls	r3, r3, #5
 8005554:	441a      	add	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	371c      	adds	r7, #28
 8005562:	46bd      	mov	sp, r7
 8005564:	bd90      	pop	{r4, r7, pc}

08005566 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b084      	sub	sp, #16
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8005570:	2100      	movs	r1, #0
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7ff fe6c 	bl	8005250 <dir_sdi>
 8005578:	4603      	mov	r3, r0
 800557a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800557c:	7bfb      	ldrb	r3, [r7, #15]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d131      	bne.n	80055e6 <dir_alloc+0x80>
		n = 0;
 8005582:	2300      	movs	r3, #0
 8005584:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005592:	4619      	mov	r1, r3
 8005594:	4610      	mov	r0, r2
 8005596:	f7ff fa72 	bl	8004a7e <move_window>
 800559a:	4603      	mov	r3, r0
 800559c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800559e:	7bfb      	ldrb	r3, [r7, #15]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d11f      	bne.n	80055e4 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	2be5      	cmp	r3, #229	; 0xe5
 80055ae:	d005      	beq.n	80055bc <dir_alloc+0x56>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d107      	bne.n	80055cc <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	3301      	adds	r3, #1
 80055c0:	60bb      	str	r3, [r7, #8]
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d102      	bne.n	80055d0 <dir_alloc+0x6a>
 80055ca:	e00c      	b.n	80055e6 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80055cc:	2300      	movs	r3, #0
 80055ce:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80055d0:	2101      	movs	r1, #1
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f7ff fed0 	bl	8005378 <dir_next>
 80055d8:	4603      	mov	r3, r0
 80055da:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80055dc:	7bfb      	ldrb	r3, [r7, #15]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d0d1      	beq.n	8005586 <dir_alloc+0x20>
 80055e2:	e000      	b.n	80055e6 <dir_alloc+0x80>
			if (res != FR_OK) break;
 80055e4:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80055e6:	7bfb      	ldrb	r3, [r7, #15]
 80055e8:	2b04      	cmp	r3, #4
 80055ea:	d101      	bne.n	80055f0 <dir_alloc+0x8a>
 80055ec:	2307      	movs	r3, #7
 80055ee:	73fb      	strb	r3, [r7, #15]
	return res;
 80055f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b085      	sub	sp, #20
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
 8005602:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	331b      	adds	r3, #27
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	021b      	lsls	r3, r3, #8
 800560c:	b21a      	sxth	r2, r3
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	331a      	adds	r3, #26
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	b21b      	sxth	r3, r3
 8005616:	4313      	orrs	r3, r2
 8005618:	b21b      	sxth	r3, r3
 800561a:	b29b      	uxth	r3, r3
 800561c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005624:	2b03      	cmp	r3, #3
 8005626:	d10f      	bne.n	8005648 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	3315      	adds	r3, #21
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	021b      	lsls	r3, r3, #8
 8005630:	b21a      	sxth	r2, r3
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	3314      	adds	r3, #20
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	b21b      	sxth	r3, r3
 800563a:	4313      	orrs	r3, r2
 800563c:	b21b      	sxth	r3, r3
 800563e:	b29b      	uxth	r3, r3
 8005640:	041b      	lsls	r3, r3, #16
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	4313      	orrs	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]

	return cl;
 8005648:	68fb      	ldr	r3, [r7, #12]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	bc80      	pop	{r7}
 8005652:	4770      	bx	lr

08005654 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	331a      	adds	r3, #26
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	b2d2      	uxtb	r2, r2
 8005666:	701a      	strb	r2, [r3, #0]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	b29b      	uxth	r3, r3
 800566c:	0a1b      	lsrs	r3, r3, #8
 800566e:	b29a      	uxth	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	331b      	adds	r3, #27
 8005674:	b2d2      	uxtb	r2, r2
 8005676:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	0c1a      	lsrs	r2, r3, #16
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3314      	adds	r3, #20
 8005680:	b2d2      	uxtb	r2, r2
 8005682:	701a      	strb	r2, [r3, #0]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	0c1b      	lsrs	r3, r3, #16
 8005688:	b29b      	uxth	r3, r3
 800568a:	0a1b      	lsrs	r3, r3, #8
 800568c:	b29a      	uxth	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	3315      	adds	r3, #21
 8005692:	b2d2      	uxtb	r2, r2
 8005694:	701a      	strb	r2, [r3, #0]
}
 8005696:	bf00      	nop
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	bc80      	pop	{r7}
 800569e:	4770      	bx	lr

080056a0 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80056a8:	2100      	movs	r1, #0
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f7ff fdd0 	bl	8005250 <dir_sdi>
 80056b0:	4603      	mov	r3, r0
 80056b2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80056b4:	7dfb      	ldrb	r3, [r7, #23]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <dir_find+0x1e>
 80056ba:	7dfb      	ldrb	r3, [r7, #23]
 80056bc:	e03b      	b.n	8005736 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80056ca:	4619      	mov	r1, r3
 80056cc:	4610      	mov	r0, r2
 80056ce:	f7ff f9d6 	bl	8004a7e <move_window>
 80056d2:	4603      	mov	r3, r0
 80056d4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80056d6:	7dfb      	ldrb	r3, [r7, #23]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d128      	bne.n	800572e <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80056e2:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80056ea:	7bfb      	ldrb	r3, [r7, #15]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d102      	bne.n	80056f6 <dir_find+0x56>
 80056f0:	2304      	movs	r3, #4
 80056f2:	75fb      	strb	r3, [r7, #23]
 80056f4:	e01e      	b.n	8005734 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	330b      	adds	r3, #11
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	f003 0308 	and.w	r3, r3, #8
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10a      	bne.n	800571a <dir_find+0x7a>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800570a:	220b      	movs	r2, #11
 800570c:	4619      	mov	r1, r3
 800570e:	6938      	ldr	r0, [r7, #16]
 8005710:	f7fe ff7a 	bl	8004608 <mem_cmp>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00b      	beq.n	8005732 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800571a:	2100      	movs	r1, #0
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f7ff fe2b 	bl	8005378 <dir_next>
 8005722:	4603      	mov	r3, r0
 8005724:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005726:	7dfb      	ldrb	r3, [r7, #23]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0c8      	beq.n	80056be <dir_find+0x1e>
 800572c:	e002      	b.n	8005734 <dir_find+0x94>
		if (res != FR_OK) break;
 800572e:	bf00      	nop
 8005730:	e000      	b.n	8005734 <dir_find+0x94>
			break;
 8005732:	bf00      	nop

	return res;
 8005734:	7dfb      	ldrb	r3, [r7, #23]
}
 8005736:	4618      	mov	r0, r3
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b084      	sub	sp, #16
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005746:	2101      	movs	r1, #1
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f7ff ff0c 	bl	8005566 <dir_alloc>
 800574e:	4603      	mov	r3, r0
 8005750:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8005752:	7bfb      	ldrb	r3, [r7, #15]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d126      	bne.n	80057a6 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005764:	4619      	mov	r1, r3
 8005766:	4610      	mov	r0, r2
 8005768:	f7ff f989 	bl	8004a7e <move_window>
 800576c:	4603      	mov	r3, r0
 800576e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005770:	7bfb      	ldrb	r3, [r7, #15]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d117      	bne.n	80057a6 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800577c:	2220      	movs	r2, #32
 800577e:	2100      	movs	r1, #0
 8005780:	4618      	mov	r0, r3
 8005782:	f7fe ff28 	bl	80045d6 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005792:	220b      	movs	r2, #11
 8005794:	4619      	mov	r1, r3
 8005796:	f7fe ff01 	bl	800459c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 80057a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b088      	sub	sp, #32
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	60fb      	str	r3, [r7, #12]
 80057c0:	e002      	b.n	80057c8 <create_name+0x18>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	3301      	adds	r3, #1
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	2b2f      	cmp	r3, #47	; 0x2f
 80057ce:	d0f8      	beq.n	80057c2 <create_name+0x12>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	2b5c      	cmp	r3, #92	; 0x5c
 80057d6:	d0f4      	beq.n	80057c2 <create_name+0x12>
	sfn = dp->fn;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80057de:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80057e0:	220b      	movs	r2, #11
 80057e2:	2120      	movs	r1, #32
 80057e4:	68b8      	ldr	r0, [r7, #8]
 80057e6:	f7fe fef6 	bl	80045d6 <mem_set>
	si = i = b = 0; ni = 8;
 80057ea:	2300      	movs	r3, #0
 80057ec:	77fb      	strb	r3, [r7, #31]
 80057ee:	2300      	movs	r3, #0
 80057f0:	613b      	str	r3, [r7, #16]
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	617b      	str	r3, [r7, #20]
 80057f6:	2308      	movs	r3, #8
 80057f8:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	1c5a      	adds	r2, r3, #1
 80057fe:	617a      	str	r2, [r7, #20]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	4413      	add	r3, r2
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8005808:	7fbb      	ldrb	r3, [r7, #30]
 800580a:	2b20      	cmp	r3, #32
 800580c:	d953      	bls.n	80058b6 <create_name+0x106>
 800580e:	7fbb      	ldrb	r3, [r7, #30]
 8005810:	2b2f      	cmp	r3, #47	; 0x2f
 8005812:	d050      	beq.n	80058b6 <create_name+0x106>
 8005814:	7fbb      	ldrb	r3, [r7, #30]
 8005816:	2b5c      	cmp	r3, #92	; 0x5c
 8005818:	d04d      	beq.n	80058b6 <create_name+0x106>
		if (c == '.' || i >= ni) {
 800581a:	7fbb      	ldrb	r3, [r7, #30]
 800581c:	2b2e      	cmp	r3, #46	; 0x2e
 800581e:	d003      	beq.n	8005828 <create_name+0x78>
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	429a      	cmp	r2, r3
 8005826:	d30f      	bcc.n	8005848 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	2b08      	cmp	r3, #8
 800582c:	d102      	bne.n	8005834 <create_name+0x84>
 800582e:	7fbb      	ldrb	r3, [r7, #30]
 8005830:	2b2e      	cmp	r3, #46	; 0x2e
 8005832:	d001      	beq.n	8005838 <create_name+0x88>
 8005834:	2306      	movs	r3, #6
 8005836:	e073      	b.n	8005920 <create_name+0x170>
			i = 8; ni = 11;
 8005838:	2308      	movs	r3, #8
 800583a:	613b      	str	r3, [r7, #16]
 800583c:	230b      	movs	r3, #11
 800583e:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8005840:	7ffb      	ldrb	r3, [r7, #31]
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	77fb      	strb	r3, [r7, #31]
 8005846:	e035      	b.n	80058b4 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005848:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800584c:	2b00      	cmp	r3, #0
 800584e:	da08      	bge.n	8005862 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8005850:	7ffb      	ldrb	r3, [r7, #31]
 8005852:	f043 0303 	orr.w	r3, r3, #3
 8005856:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005858:	7fbb      	ldrb	r3, [r7, #30]
 800585a:	3b80      	subs	r3, #128	; 0x80
 800585c:	4a32      	ldr	r2, [pc, #200]	; (8005928 <create_name+0x178>)
 800585e:	5cd3      	ldrb	r3, [r2, r3]
 8005860:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8005862:	7fbb      	ldrb	r3, [r7, #30]
 8005864:	4619      	mov	r1, r3
 8005866:	4831      	ldr	r0, [pc, #196]	; (800592c <create_name+0x17c>)
 8005868:	f7fe fef4 	bl	8004654 <chk_chr>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <create_name+0xc6>
				return FR_INVALID_NAME;
 8005872:	2306      	movs	r3, #6
 8005874:	e054      	b.n	8005920 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8005876:	7fbb      	ldrb	r3, [r7, #30]
 8005878:	2b40      	cmp	r3, #64	; 0x40
 800587a:	d907      	bls.n	800588c <create_name+0xdc>
 800587c:	7fbb      	ldrb	r3, [r7, #30]
 800587e:	2b5a      	cmp	r3, #90	; 0x5a
 8005880:	d804      	bhi.n	800588c <create_name+0xdc>
				b |= 2;
 8005882:	7ffb      	ldrb	r3, [r7, #31]
 8005884:	f043 0302 	orr.w	r3, r3, #2
 8005888:	77fb      	strb	r3, [r7, #31]
 800588a:	e00c      	b.n	80058a6 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800588c:	7fbb      	ldrb	r3, [r7, #30]
 800588e:	2b60      	cmp	r3, #96	; 0x60
 8005890:	d909      	bls.n	80058a6 <create_name+0xf6>
 8005892:	7fbb      	ldrb	r3, [r7, #30]
 8005894:	2b7a      	cmp	r3, #122	; 0x7a
 8005896:	d806      	bhi.n	80058a6 <create_name+0xf6>
					b |= 1; c -= 0x20;
 8005898:	7ffb      	ldrb	r3, [r7, #31]
 800589a:	f043 0301 	orr.w	r3, r3, #1
 800589e:	77fb      	strb	r3, [r7, #31]
 80058a0:	7fbb      	ldrb	r3, [r7, #30]
 80058a2:	3b20      	subs	r3, #32
 80058a4:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	1c5a      	adds	r2, r3, #1
 80058aa:	613a      	str	r2, [r7, #16]
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	4413      	add	r3, r2
 80058b0:	7fba      	ldrb	r2, [r7, #30]
 80058b2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80058b4:	e7a1      	b.n	80057fa <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	441a      	add	r2, r3
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80058c0:	7fbb      	ldrb	r3, [r7, #30]
 80058c2:	2b20      	cmp	r3, #32
 80058c4:	d801      	bhi.n	80058ca <create_name+0x11a>
 80058c6:	2304      	movs	r3, #4
 80058c8:	e000      	b.n	80058cc <create_name+0x11c>
 80058ca:	2300      	movs	r3, #0
 80058cc:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d101      	bne.n	80058d8 <create_name+0x128>
 80058d4:	2306      	movs	r3, #6
 80058d6:	e023      	b.n	8005920 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	2be5      	cmp	r3, #229	; 0xe5
 80058de:	d102      	bne.n	80058e6 <create_name+0x136>
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2205      	movs	r2, #5
 80058e4:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	2b08      	cmp	r3, #8
 80058ea:	d102      	bne.n	80058f2 <create_name+0x142>
 80058ec:	7ffb      	ldrb	r3, [r7, #31]
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80058f2:	7ffb      	ldrb	r3, [r7, #31]
 80058f4:	f003 0303 	and.w	r3, r3, #3
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d103      	bne.n	8005904 <create_name+0x154>
 80058fc:	7fbb      	ldrb	r3, [r7, #30]
 80058fe:	f043 0310 	orr.w	r3, r3, #16
 8005902:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8005904:	7ffb      	ldrb	r3, [r7, #31]
 8005906:	f003 030c 	and.w	r3, r3, #12
 800590a:	2b04      	cmp	r3, #4
 800590c:	d103      	bne.n	8005916 <create_name+0x166>
 800590e:	7fbb      	ldrb	r3, [r7, #30]
 8005910:	f043 0308 	orr.w	r3, r3, #8
 8005914:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	330b      	adds	r3, #11
 800591a:	7fba      	ldrb	r2, [r7, #30]
 800591c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800591e:	2300      	movs	r3, #0
#endif
}
 8005920:	4618      	mov	r0, r3
 8005922:	3720      	adds	r7, #32
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	08009bd0 	.word	0x08009bd0
 800592c:	08009b7c 	.word	0x08009b7c

08005930 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	2b2f      	cmp	r3, #47	; 0x2f
 8005940:	d003      	beq.n	800594a <follow_path+0x1a>
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	2b5c      	cmp	r3, #92	; 0x5c
 8005948:	d102      	bne.n	8005950 <follow_path+0x20>
		path++;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	3301      	adds	r3, #1
 800594e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	2b1f      	cmp	r3, #31
 800595e:	d80a      	bhi.n	8005976 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8005960:	2100      	movs	r1, #0
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7ff fc74 	bl	8005250 <dir_sdi>
 8005968:	4603      	mov	r3, r0
 800596a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005974:	e045      	b.n	8005a02 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005976:	463b      	mov	r3, r7
 8005978:	4619      	mov	r1, r3
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7ff ff18 	bl	80057b0 <create_name>
 8005980:	4603      	mov	r3, r0
 8005982:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005984:	7bfb      	ldrb	r3, [r7, #15]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d136      	bne.n	80059f8 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7ff fe88 	bl	80056a0 <dir_find>
 8005990:	4603      	mov	r3, r0
 8005992:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800599a:	7adb      	ldrb	r3, [r3, #11]
 800599c:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800599e:	7bfb      	ldrb	r3, [r7, #15]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00a      	beq.n	80059ba <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
 80059a6:	2b04      	cmp	r3, #4
 80059a8:	d128      	bne.n	80059fc <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80059aa:	7bbb      	ldrb	r3, [r7, #14]
 80059ac:	f003 0304 	and.w	r3, r3, #4
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d123      	bne.n	80059fc <follow_path+0xcc>
 80059b4:	2305      	movs	r3, #5
 80059b6:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80059b8:	e020      	b.n	80059fc <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80059ba:	7bbb      	ldrb	r3, [r7, #14]
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d11d      	bne.n	8005a00 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80059ca:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	330b      	adds	r3, #11
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	f003 0310 	and.w	r3, r3, #16
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d102      	bne.n	80059e0 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 80059da:	2305      	movs	r3, #5
 80059dc:	73fb      	strb	r3, [r7, #15]
 80059de:	e010      	b.n	8005a02 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80059e6:	68b9      	ldr	r1, [r7, #8]
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7ff fe06 	bl	80055fa <ld_clust>
 80059ee:	4602      	mov	r2, r0
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80059f6:	e7be      	b.n	8005976 <follow_path+0x46>
			if (res != FR_OK) break;
 80059f8:	bf00      	nop
 80059fa:	e002      	b.n	8005a02 <follow_path+0xd2>
				break;
 80059fc:	bf00      	nop
 80059fe:	e000      	b.n	8005a02 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005a00:	bf00      	nop
		}
	}

	return res;
 8005a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b087      	sub	sp, #28
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005a14:	f04f 33ff 	mov.w	r3, #4294967295
 8005a18:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d031      	beq.n	8005a86 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	617b      	str	r3, [r7, #20]
 8005a28:	e002      	b.n	8005a30 <get_ldnumber+0x24>
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	617b      	str	r3, [r7, #20]
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	2b20      	cmp	r3, #32
 8005a36:	d903      	bls.n	8005a40 <get_ldnumber+0x34>
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	2b3a      	cmp	r3, #58	; 0x3a
 8005a3e:	d1f4      	bne.n	8005a2a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	2b3a      	cmp	r3, #58	; 0x3a
 8005a46:	d11c      	bne.n	8005a82 <get_ldnumber+0x76>
			tp = *path;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	1c5a      	adds	r2, r3, #1
 8005a52:	60fa      	str	r2, [r7, #12]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	3b30      	subs	r3, #48	; 0x30
 8005a58:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	2b09      	cmp	r3, #9
 8005a5e:	d80e      	bhi.n	8005a7e <get_ldnumber+0x72>
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d10a      	bne.n	8005a7e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d107      	bne.n	8005a7e <get_ldnumber+0x72>
					vol = (int)i;
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	3301      	adds	r3, #1
 8005a76:	617b      	str	r3, [r7, #20]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	e002      	b.n	8005a88 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005a82:	2300      	movs	r3, #0
 8005a84:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005a86:	693b      	ldr	r3, [r7, #16]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	371c      	adds	r7, #28
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bc80      	pop	{r7}
 8005a90:	4770      	bx	lr
	...

08005a94 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8005aac:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8005ab0:	6839      	ldr	r1, [r7, #0]
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f7fe ffe3 	bl	8004a7e <move_window>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <check_fs+0x2e>
		return 3;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e04a      	b.n	8005b58 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005ac8:	3301      	adds	r3, #1
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	021b      	lsls	r3, r3, #8
 8005ace:	b21a      	sxth	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8005ad6:	b21b      	sxth	r3, r3
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	b21b      	sxth	r3, r3
 8005adc:	4a20      	ldr	r2, [pc, #128]	; (8005b60 <check_fs+0xcc>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d001      	beq.n	8005ae6 <check_fs+0x52>
		return 2;
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	e038      	b.n	8005b58 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	3336      	adds	r3, #54	; 0x36
 8005aea:	3303      	adds	r3, #3
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	061a      	lsls	r2, r3, #24
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	3336      	adds	r3, #54	; 0x36
 8005af4:	3302      	adds	r3, #2
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	041b      	lsls	r3, r3, #16
 8005afa:	4313      	orrs	r3, r2
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	3236      	adds	r2, #54	; 0x36
 8005b00:	3201      	adds	r2, #1
 8005b02:	7812      	ldrb	r2, [r2, #0]
 8005b04:	0212      	lsls	r2, r2, #8
 8005b06:	4313      	orrs	r3, r2
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005b14:	4a13      	ldr	r2, [pc, #76]	; (8005b64 <check_fs+0xd0>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d101      	bne.n	8005b1e <check_fs+0x8a>
		return 0;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	e01c      	b.n	8005b58 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	3352      	adds	r3, #82	; 0x52
 8005b22:	3303      	adds	r3, #3
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	061a      	lsls	r2, r3, #24
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	3352      	adds	r3, #82	; 0x52
 8005b2c:	3302      	adds	r3, #2
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	041b      	lsls	r3, r3, #16
 8005b32:	4313      	orrs	r3, r2
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	3252      	adds	r2, #82	; 0x52
 8005b38:	3201      	adds	r2, #1
 8005b3a:	7812      	ldrb	r2, [r2, #0]
 8005b3c:	0212      	lsls	r2, r2, #8
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8005b46:	4313      	orrs	r3, r2
 8005b48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005b4c:	4a05      	ldr	r2, [pc, #20]	; (8005b64 <check_fs+0xd0>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d101      	bne.n	8005b56 <check_fs+0xc2>
		return 0;
 8005b52:	2300      	movs	r3, #0
 8005b54:	e000      	b.n	8005b58 <check_fs+0xc4>

	return 1;
 8005b56:	2301      	movs	r3, #1
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3708      	adds	r7, #8
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	ffffaa55 	.word	0xffffaa55
 8005b64:	00544146 	.word	0x00544146

08005b68 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b096      	sub	sp, #88	; 0x58
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	4613      	mov	r3, r2
 8005b74:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005b7c:	68b8      	ldr	r0, [r7, #8]
 8005b7e:	f7ff ff45 	bl	8005a0c <get_ldnumber>
 8005b82:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	da01      	bge.n	8005b8e <find_volume+0x26>
 8005b8a:	230b      	movs	r3, #11
 8005b8c:	e2aa      	b.n	80060e4 <find_volume+0x57c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005b8e:	4a9e      	ldr	r2, [pc, #632]	; (8005e08 <find_volume+0x2a0>)
 8005b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b96:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d101      	bne.n	8005ba2 <find_volume+0x3a>
 8005b9e:	230c      	movs	r3, #12
 8005ba0:	e2a0      	b.n	80060e4 <find_volume+0x57c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ba6:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8005ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005baa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d01b      	beq.n	8005bea <find_volume+0x82>
		stat = disk_status(fs->drv);
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb4:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7fe fc51 	bl	8004460 <disk_status>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005bc4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005bc8:	f003 0301 	and.w	r3, r3, #1
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10c      	bne.n	8005bea <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8005bd0:	79fb      	ldrb	r3, [r7, #7]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d007      	beq.n	8005be6 <find_volume+0x7e>
 8005bd6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005bda:	f003 0304 	and.w	r3, r3, #4
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8005be2:	230a      	movs	r3, #10
 8005be4:	e27e      	b.n	80060e4 <find_volume+0x57c>
			return FR_OK;				/* The file system object is valid */
 8005be6:	2300      	movs	r3, #0
 8005be8:	e27c      	b.n	80060e4 <find_volume+0x57c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bf4:	b2da      	uxtb	r2, r3
 8005bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfe:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7fe fc46 	bl	8004494 <disk_initialize>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8005c0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e262      	b.n	80060e4 <find_volume+0x57c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8005c1e:	79fb      	ldrb	r3, [r7, #7]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d007      	beq.n	8005c34 <find_volume+0xcc>
 8005c24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005c28:	f003 0304 	and.w	r3, r3, #4
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d001      	beq.n	8005c34 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8005c30:	230a      	movs	r3, #10
 8005c32:	e257      	b.n	80060e4 <find_volume+0x57c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8005c34:	2300      	movs	r3, #0
 8005c36:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8005c38:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c3a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005c3c:	f7ff ff2a 	bl	8005a94 <check_fs>
 8005c40:	4603      	mov	r3, r0
 8005c42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8005c46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d155      	bne.n	8005cfa <find_volume+0x192>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005c4e:	2300      	movs	r3, #0
 8005c50:	643b      	str	r3, [r7, #64]	; 0x40
 8005c52:	e029      	b.n	8005ca8 <find_volume+0x140>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8005c54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c58:	011b      	lsls	r3, r3, #4
 8005c5a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005c5e:	4413      	add	r3, r2
 8005c60:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8005c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c64:	3304      	adds	r3, #4
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d012      	beq.n	8005c92 <find_volume+0x12a>
 8005c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6e:	330b      	adds	r3, #11
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	061a      	lsls	r2, r3, #24
 8005c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c76:	330a      	adds	r3, #10
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	041b      	lsls	r3, r3, #16
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c80:	3209      	adds	r2, #9
 8005c82:	7812      	ldrb	r2, [r2, #0]
 8005c84:	0212      	lsls	r2, r2, #8
 8005c86:	4313      	orrs	r3, r2
 8005c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c8a:	3208      	adds	r2, #8
 8005c8c:	7812      	ldrb	r2, [r2, #0]
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	e000      	b.n	8005c94 <find_volume+0x12c>
 8005c92:	2200      	movs	r2, #0
 8005c94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005c9c:	440b      	add	r3, r1
 8005c9e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005ca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	643b      	str	r3, [r7, #64]	; 0x40
 8005ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005caa:	2b03      	cmp	r3, #3
 8005cac:	d9d2      	bls.n	8005c54 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8005cae:	2300      	movs	r3, #0
 8005cb0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005cb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d002      	beq.n	8005cbe <find_volume+0x156>
 8005cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8005cbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005ccc:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8005cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d005      	beq.n	8005ce0 <find_volume+0x178>
 8005cd4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005cd6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005cd8:	f7ff fedc 	bl	8005a94 <check_fs>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	e000      	b.n	8005ce2 <find_volume+0x17a>
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8005ce6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d005      	beq.n	8005cfa <find_volume+0x192>
 8005cee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	643b      	str	r3, [r7, #64]	; 0x40
 8005cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cf6:	2b03      	cmp	r3, #3
 8005cf8:	d9e1      	bls.n	8005cbe <find_volume+0x156>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005cfa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cfe:	2b03      	cmp	r3, #3
 8005d00:	d101      	bne.n	8005d06 <find_volume+0x19e>
 8005d02:	2301      	movs	r3, #1
 8005d04:	e1ee      	b.n	80060e4 <find_volume+0x57c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8005d06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <find_volume+0x1aa>
 8005d0e:	230d      	movs	r3, #13
 8005d10:	e1e8      	b.n	80060e4 <find_volume+0x57c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d14:	7b1b      	ldrb	r3, [r3, #12]
 8005d16:	021b      	lsls	r3, r3, #8
 8005d18:	b21a      	sxth	r2, r3
 8005d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1c:	7adb      	ldrb	r3, [r3, #11]
 8005d1e:	b21b      	sxth	r3, r3
 8005d20:	4313      	orrs	r3, r2
 8005d22:	b21b      	sxth	r3, r3
 8005d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d28:	d001      	beq.n	8005d2e <find_volume+0x1c6>
		return FR_NO_FILESYSTEM;
 8005d2a:	230d      	movs	r3, #13
 8005d2c:	e1da      	b.n	80060e4 <find_volume+0x57c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8005d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d30:	7ddb      	ldrb	r3, [r3, #23]
 8005d32:	021b      	lsls	r3, r3, #8
 8005d34:	b21a      	sxth	r2, r3
 8005d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d38:	7d9b      	ldrb	r3, [r3, #22]
 8005d3a:	b21b      	sxth	r3, r3
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	b21b      	sxth	r3, r3
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8005d44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d112      	bne.n	8005d70 <find_volume+0x208>
 8005d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005d50:	061a      	lsls	r2, r3, #24
 8005d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d54:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005d58:	041b      	lsls	r3, r3, #16
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d5e:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8005d62:	0212      	lsls	r2, r2, #8
 8005d64:	4313      	orrs	r3, r2
 8005d66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d68:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8005d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d74:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8005d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7a:	7c1a      	ldrb	r2, [r3, #16]
 8005d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7e:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8005d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d84:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d006      	beq.n	8005d9a <find_volume+0x232>
 8005d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8e:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d001      	beq.n	8005d9a <find_volume+0x232>
		return FR_NO_FILESYSTEM;
 8005d96:	230d      	movs	r3, #13
 8005d98:	e1a4      	b.n	80060e4 <find_volume+0x57c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8005d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8005da0:	461a      	mov	r2, r3
 8005da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005da4:	fb02 f303 	mul.w	r3, r2, r3
 8005da8:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8005daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dac:	7b5a      	ldrb	r2, [r3, #13]
 8005dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db0:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8005db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00a      	beq.n	8005dd4 <find_volume+0x26c>
 8005dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	4013      	ands	r3, r2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <find_volume+0x270>
		return FR_NO_FILESYSTEM;
 8005dd4:	230d      	movs	r3, #13
 8005dd6:	e185      	b.n	80060e4 <find_volume+0x57c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8005dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dda:	7c9b      	ldrb	r3, [r3, #18]
 8005ddc:	021b      	lsls	r3, r3, #8
 8005dde:	b21a      	sxth	r2, r3
 8005de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de2:	7c5b      	ldrb	r3, [r3, #17]
 8005de4:	b21b      	sxth	r3, r3
 8005de6:	4313      	orrs	r3, r2
 8005de8:	b21b      	sxth	r3, r3
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dee:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8005df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df4:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8005df8:	f003 030f 	and.w	r3, r3, #15
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d004      	beq.n	8005e0c <find_volume+0x2a4>
		return FR_NO_FILESYSTEM;
 8005e02:	230d      	movs	r3, #13
 8005e04:	e16e      	b.n	80060e4 <find_volume+0x57c>
 8005e06:	bf00      	nop
 8005e08:	20000218 	.word	0x20000218

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8005e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0e:	7d1b      	ldrb	r3, [r3, #20]
 8005e10:	021b      	lsls	r3, r3, #8
 8005e12:	b21a      	sxth	r2, r3
 8005e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e16:	7cdb      	ldrb	r3, [r3, #19]
 8005e18:	b21b      	sxth	r3, r3
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	b21b      	sxth	r3, r3
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8005e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d112      	bne.n	8005e4e <find_volume+0x2e6>
 8005e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005e2e:	061a      	lsls	r2, r3, #24
 8005e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e32:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005e36:	041b      	lsls	r3, r3, #16
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e3c:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8005e40:	0212      	lsls	r2, r2, #8
 8005e42:	4313      	orrs	r3, r2
 8005e44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e46:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8005e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e50:	7bdb      	ldrb	r3, [r3, #15]
 8005e52:	021b      	lsls	r3, r3, #8
 8005e54:	b21a      	sxth	r2, r3
 8005e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e58:	7b9b      	ldrb	r3, [r3, #14]
 8005e5a:	b21b      	sxth	r3, r3
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	b21b      	sxth	r3, r3
 8005e60:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8005e62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d101      	bne.n	8005e6c <find_volume+0x304>
 8005e68:	230d      	movs	r3, #13
 8005e6a:	e13b      	b.n	80060e4 <find_volume+0x57c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8005e6c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e70:	4413      	add	r3, r2
 8005e72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e74:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8005e78:	0912      	lsrs	r2, r2, #4
 8005e7a:	b292      	uxth	r2, r2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005e80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d201      	bcs.n	8005e8c <find_volume+0x324>
 8005e88:	230d      	movs	r3, #13
 8005e8a:	e12b      	b.n	80060e4 <find_volume+0x57c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8005e8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e94:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8005e98:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e9c:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <find_volume+0x340>
 8005ea4:	230d      	movs	r3, #13
 8005ea6:	e11d      	b.n	80060e4 <find_volume+0x57c>
	fmt = FS_FAT12;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8005eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb0:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d902      	bls.n	8005ebe <find_volume+0x356>
 8005eb8:	2302      	movs	r3, #2
 8005eba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d902      	bls.n	8005ece <find_volume+0x366>
 8005ec8:	2303      	movs	r3, #3
 8005eca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed0:	1c9a      	adds	r2, r3, #2
 8005ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8005ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eda:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005edc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8005ee0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005ee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ee4:	441a      	add	r2, r3
 8005ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee8:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8005eec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef0:	441a      	add	r2, r3
 8005ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef4:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8005ef8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005efc:	2b03      	cmp	r3, #3
 8005efe:	d121      	bne.n	8005f44 <find_volume+0x3dc>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8005f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f02:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <find_volume+0x3a6>
 8005f0a:	230d      	movs	r3, #13
 8005f0c:	e0ea      	b.n	80060e4 <find_volume+0x57c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8005f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f10:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005f14:	061a      	lsls	r2, r3, #24
 8005f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f18:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005f1c:	041b      	lsls	r3, r3, #16
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f22:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8005f26:	0212      	lsls	r2, r2, #8
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f2c:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8005f30:	431a      	orrs	r2, r3
 8005f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f34:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8005f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	647b      	str	r3, [r7, #68]	; 0x44
 8005f42:	e025      	b.n	8005f90 <find_volume+0x428>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f46:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <find_volume+0x3ea>
 8005f4e:	230d      	movs	r3, #13
 8005f50:	e0c8      	b.n	80060e4 <find_volume+0x57c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f54:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f5a:	441a      	add	r2, r3
 8005f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5e:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005f62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d104      	bne.n	8005f74 <find_volume+0x40c>
 8005f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f70:	005b      	lsls	r3, r3, #1
 8005f72:	e00c      	b.n	8005f8e <find_volume+0x426>
 8005f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f76:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	005b      	lsls	r3, r3, #1
 8005f7e:	4413      	add	r3, r2
 8005f80:	085a      	lsrs	r2, r3, #1
 8005f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f84:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8005f8e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8005f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f92:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005f96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f98:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005f9c:	0a5b      	lsrs	r3, r3, #9
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d201      	bcs.n	8005fa6 <find_volume+0x43e>
		return FR_NO_FILESYSTEM;
 8005fa2:	230d      	movs	r3, #13
 8005fa4:	e09e      	b.n	80060e4 <find_volume+0x57c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8005fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fac:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8005fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8005fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbe:	2280      	movs	r2, #128	; 0x80
 8005fc0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8005fc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fc8:	2b03      	cmp	r3, #3
 8005fca:	d177      	bne.n	80060bc <find_volume+0x554>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8005fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005fd2:	021b      	lsls	r3, r3, #8
 8005fd4:	b21a      	sxth	r2, r3
 8005fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005fdc:	b21b      	sxth	r3, r3
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	b21b      	sxth	r3, r3
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d16a      	bne.n	80060bc <find_volume+0x554>
		&& move_window(fs, bsect + 1) == FR_OK)
 8005fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fe8:	3301      	adds	r3, #1
 8005fea:	4619      	mov	r1, r3
 8005fec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005fee:	f7fe fd46 	bl	8004a7e <move_window>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d161      	bne.n	80060bc <find_volume+0x554>
	{
		fs->fsi_flag = 0;
 8005ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006002:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8006006:	021b      	lsls	r3, r3, #8
 8006008:	b21a      	sxth	r2, r3
 800600a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600c:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8006010:	b21b      	sxth	r3, r3
 8006012:	4313      	orrs	r3, r2
 8006014:	b21b      	sxth	r3, r3
 8006016:	4a35      	ldr	r2, [pc, #212]	; (80060ec <find_volume+0x584>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d14f      	bne.n	80060bc <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800601c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601e:	78db      	ldrb	r3, [r3, #3]
 8006020:	061a      	lsls	r2, r3, #24
 8006022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006024:	789b      	ldrb	r3, [r3, #2]
 8006026:	041b      	lsls	r3, r3, #16
 8006028:	4313      	orrs	r3, r2
 800602a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800602c:	7852      	ldrb	r2, [r2, #1]
 800602e:	0212      	lsls	r2, r2, #8
 8006030:	4313      	orrs	r3, r2
 8006032:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006034:	7812      	ldrb	r2, [r2, #0]
 8006036:	4313      	orrs	r3, r2
 8006038:	4a2d      	ldr	r2, [pc, #180]	; (80060f0 <find_volume+0x588>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d13e      	bne.n	80060bc <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800603e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006040:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8006044:	061a      	lsls	r2, r3, #24
 8006046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006048:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800604c:	041b      	lsls	r3, r3, #16
 800604e:	4313      	orrs	r3, r2
 8006050:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006052:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8006056:	0212      	lsls	r2, r2, #8
 8006058:	4313      	orrs	r3, r2
 800605a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800605c:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8006060:	4313      	orrs	r3, r2
 8006062:	4a24      	ldr	r2, [pc, #144]	; (80060f4 <find_volume+0x58c>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d129      	bne.n	80060bc <find_volume+0x554>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8006068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606a:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800606e:	061a      	lsls	r2, r3, #24
 8006070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006072:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8006076:	041b      	lsls	r3, r3, #16
 8006078:	4313      	orrs	r3, r2
 800607a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800607c:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8006080:	0212      	lsls	r2, r2, #8
 8006082:	4313      	orrs	r3, r2
 8006084:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006086:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800608a:	431a      	orrs	r2, r3
 800608c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8006092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006094:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8006098:	061a      	lsls	r2, r3, #24
 800609a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609c:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 80060a0:	041b      	lsls	r3, r3, #16
 80060a2:	4313      	orrs	r3, r2
 80060a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060a6:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 80060aa:	0212      	lsls	r2, r2, #8
 80060ac:	4313      	orrs	r3, r2
 80060ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060b0:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80060b4:	431a      	orrs	r2, r3
 80060b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80060bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060be:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80060c2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 80060c6:	4b0c      	ldr	r3, [pc, #48]	; (80060f8 <find_volume+0x590>)
 80060c8:	881b      	ldrh	r3, [r3, #0]
 80060ca:	3301      	adds	r3, #1
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	4b0a      	ldr	r3, [pc, #40]	; (80060f8 <find_volume+0x590>)
 80060d0:	801a      	strh	r2, [r3, #0]
 80060d2:	4b09      	ldr	r3, [pc, #36]	; (80060f8 <find_volume+0x590>)
 80060d4:	881a      	ldrh	r2, [r3, #0]
 80060d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d8:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80060dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80060de:	f7fe fc5d 	bl	800499c <clear_lock>
#endif

	return FR_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3758      	adds	r7, #88	; 0x58
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	ffffaa55 	.word	0xffffaa55
 80060f0:	41615252 	.word	0x41615252
 80060f4:	61417272 	.word	0x61417272
 80060f8:	2000021c 	.word	0x2000021c

080060fc <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d022      	beq.n	8006154 <validate+0x58>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006114:	2b00      	cmp	r3, #0
 8006116:	d01d      	beq.n	8006154 <validate+0x58>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800611e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006122:	2b00      	cmp	r3, #0
 8006124:	d016      	beq.n	8006154 <validate+0x58>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800612c:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8006136:	429a      	cmp	r2, r3
 8006138:	d10c      	bne.n	8006154 <validate+0x58>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006140:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006144:	4618      	mov	r0, r3
 8006146:	f7fe f98b 	bl	8004460 <disk_status>
 800614a:	4603      	mov	r3, r0
 800614c:	f003 0301 	and.w	r3, r3, #1
 8006150:	2b00      	cmp	r3, #0
 8006152:	d001      	beq.n	8006158 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8006154:	2309      	movs	r3, #9
 8006156:	e000      	b.n	800615a <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
	...

08006164 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b088      	sub	sp, #32
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	4613      	mov	r3, r2
 8006170:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8006176:	f107 0310 	add.w	r3, r7, #16
 800617a:	4618      	mov	r0, r3
 800617c:	f7ff fc46 	bl	8005a0c <get_ldnumber>
 8006180:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	2b00      	cmp	r3, #0
 8006186:	da01      	bge.n	800618c <f_mount+0x28>
 8006188:	230b      	movs	r3, #11
 800618a:	e02d      	b.n	80061e8 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800618c:	4a18      	ldr	r2, [pc, #96]	; (80061f0 <f_mount+0x8c>)
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006194:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d006      	beq.n	80061aa <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 800619c:	69b8      	ldr	r0, [r7, #24]
 800619e:	f7fe fbfd 	bl	800499c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d003      	beq.n	80061b8 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	490d      	ldr	r1, [pc, #52]	; (80061f0 <f_mount+0x8c>)
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d002      	beq.n	80061ce <f_mount+0x6a>
 80061c8:	79fb      	ldrb	r3, [r7, #7]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d001      	beq.n	80061d2 <f_mount+0x6e>
 80061ce:	2300      	movs	r3, #0
 80061d0:	e00a      	b.n	80061e8 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80061d2:	f107 0108 	add.w	r1, r7, #8
 80061d6:	f107 030c 	add.w	r3, r7, #12
 80061da:	2200      	movs	r2, #0
 80061dc:	4618      	mov	r0, r3
 80061de:	f7ff fcc3 	bl	8005b68 <find_volume>
 80061e2:	4603      	mov	r3, r0
 80061e4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80061e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3720      	adds	r7, #32
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	20000218 	.word	0x20000218

080061f4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	f107 030c 	add.w	r3, r7, #12
 8006200:	6018      	str	r0, [r3, #0]
 8006202:	f107 0308 	add.w	r3, r7, #8
 8006206:	6019      	str	r1, [r3, #0]
 8006208:	1dfb      	adds	r3, r7, #7
 800620a:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800620c:	f107 030c 	add.w	r3, r7, #12
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <f_open+0x26>
 8006216:	2309      	movs	r3, #9
 8006218:	e1f2      	b.n	8006600 <f_open+0x40c>
	fp->fs = 0;			/* Clear file object */
 800621a:	f107 030c 	add.w	r3, r7, #12
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2200      	movs	r2, #0
 8006222:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8006226:	1dfb      	adds	r3, r7, #7
 8006228:	1dfa      	adds	r2, r7, #7
 800622a:	7812      	ldrb	r2, [r2, #0]
 800622c:	f002 021f 	and.w	r2, r2, #31
 8006230:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8006232:	1dfb      	adds	r3, r7, #7
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	f023 0301 	bic.w	r3, r3, #1
 800623a:	b2da      	uxtb	r2, r3
 800623c:	f107 0108 	add.w	r1, r7, #8
 8006240:	f107 0320 	add.w	r3, r7, #32
 8006244:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006248:	4618      	mov	r0, r3
 800624a:	f7ff fc8d 	bl	8005b68 <find_volume>
 800624e:	4603      	mov	r3, r0
 8006250:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8006254:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006258:	2b00      	cmp	r3, #0
 800625a:	f040 81cf 	bne.w	80065fc <f_open+0x408>
		INIT_BUF(dj);
 800625e:	f107 0320 	add.w	r3, r7, #32
 8006262:	f107 0214 	add.w	r2, r7, #20
 8006266:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 800626a:	f107 0308 	add.w	r3, r7, #8
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	f107 0320 	add.w	r3, r7, #32
 8006274:	4611      	mov	r1, r2
 8006276:	4618      	mov	r0, r3
 8006278:	f7ff fb5a 	bl	8005930 <follow_path>
 800627c:	4603      	mov	r3, r0
 800627e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 8006282:	f107 0320 	add.w	r3, r7, #32
 8006286:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800628a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800628e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006292:	2b00      	cmp	r3, #0
 8006294:	d11a      	bne.n	80062cc <f_open+0xd8>
			if (!dir)	/* Default directory itself */
 8006296:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800629a:	2b00      	cmp	r3, #0
 800629c:	d103      	bne.n	80062a6 <f_open+0xb2>
				res = FR_INVALID_NAME;
 800629e:	2306      	movs	r3, #6
 80062a0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80062a4:	e012      	b.n	80062cc <f_open+0xd8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80062a6:	1dfb      	adds	r3, r7, #7
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	f023 0301 	bic.w	r3, r3, #1
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	bf14      	ite	ne
 80062b2:	2301      	movne	r3, #1
 80062b4:	2300      	moveq	r3, #0
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	461a      	mov	r2, r3
 80062ba:	f107 0320 	add.w	r3, r7, #32
 80062be:	4611      	mov	r1, r2
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7fe f9e1 	bl	8004688 <chk_lock>
 80062c6:	4603      	mov	r3, r0
 80062c8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80062cc:	1dfb      	adds	r3, r7, #7
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	f003 031c 	and.w	r3, r3, #28
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 80cc 	beq.w	8006472 <f_open+0x27e>
			if (res != FR_OK) {					/* No file, create new */
 80062da:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d01f      	beq.n	8006322 <f_open+0x12e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80062e2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80062e6:	2b04      	cmp	r3, #4
 80062e8:	d10e      	bne.n	8006308 <f_open+0x114>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80062ea:	f7fe fa39 	bl	8004760 <enq_lock>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d006      	beq.n	8006302 <f_open+0x10e>
 80062f4:	f107 0320 	add.w	r3, r7, #32
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7ff fa20 	bl	800573e <dir_register>
 80062fe:	4603      	mov	r3, r0
 8006300:	e000      	b.n	8006304 <f_open+0x110>
 8006302:	2312      	movs	r3, #18
 8006304:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006308:	1dfb      	adds	r3, r7, #7
 800630a:	1dfa      	adds	r2, r7, #7
 800630c:	7812      	ldrb	r2, [r2, #0]
 800630e:	f042 0208 	orr.w	r2, r2, #8
 8006312:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8006314:	f107 0320 	add.w	r3, r7, #32
 8006318:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800631c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8006320:	e014      	b.n	800634c <f_open+0x158>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006322:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006326:	330b      	adds	r3, #11
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	f003 0311 	and.w	r3, r3, #17
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <f_open+0x146>
					res = FR_DENIED;
 8006332:	2307      	movs	r3, #7
 8006334:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8006338:	e008      	b.n	800634c <f_open+0x158>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800633a:	1dfb      	adds	r3, r7, #7
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	f003 0304 	and.w	r3, r3, #4
 8006342:	2b00      	cmp	r3, #0
 8006344:	d002      	beq.n	800634c <f_open+0x158>
						res = FR_EXIST;
 8006346:	2308      	movs	r3, #8
 8006348:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800634c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006350:	2b00      	cmp	r3, #0
 8006352:	f040 80af 	bne.w	80064b4 <f_open+0x2c0>
 8006356:	1dfb      	adds	r3, r7, #7
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	f003 0308 	and.w	r3, r3, #8
 800635e:	2b00      	cmp	r3, #0
 8006360:	f000 80a8 	beq.w	80064b4 <f_open+0x2c0>
				dw = GET_FATTIME();				/* Created time */
 8006364:	f7fe f81a 	bl	800439c <get_fattime>
 8006368:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 800636c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006370:	330e      	adds	r3, #14
 8006372:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8006376:	b2d2      	uxtb	r2, r2
 8006378:	701a      	strb	r2, [r3, #0]
 800637a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800637e:	b29b      	uxth	r3, r3
 8006380:	0a1b      	lsrs	r3, r3, #8
 8006382:	b29a      	uxth	r2, r3
 8006384:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006388:	330f      	adds	r3, #15
 800638a:	b2d2      	uxtb	r2, r2
 800638c:	701a      	strb	r2, [r3, #0]
 800638e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8006392:	0c1a      	lsrs	r2, r3, #16
 8006394:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006398:	3310      	adds	r3, #16
 800639a:	b2d2      	uxtb	r2, r2
 800639c:	701a      	strb	r2, [r3, #0]
 800639e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80063a2:	0e1a      	lsrs	r2, r3, #24
 80063a4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80063a8:	3311      	adds	r3, #17
 80063aa:	b2d2      	uxtb	r2, r2
 80063ac:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80063ae:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80063b2:	330b      	adds	r3, #11
 80063b4:	2200      	movs	r2, #0
 80063b6:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80063b8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80063bc:	331c      	adds	r3, #28
 80063be:	2200      	movs	r2, #0
 80063c0:	701a      	strb	r2, [r3, #0]
 80063c2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80063c6:	331d      	adds	r3, #29
 80063c8:	2200      	movs	r2, #0
 80063ca:	701a      	strb	r2, [r3, #0]
 80063cc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80063d0:	331e      	adds	r3, #30
 80063d2:	2200      	movs	r2, #0
 80063d4:	701a      	strb	r2, [r3, #0]
 80063d6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80063da:	331f      	adds	r3, #31
 80063dc:	2200      	movs	r2, #0
 80063de:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80063e0:	f107 0320 	add.w	r3, r7, #32
 80063e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80063e8:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7ff f904 	bl	80055fa <ld_clust>
 80063f2:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 80063f6:	2100      	movs	r1, #0
 80063f8:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 80063fc:	f7ff f92a 	bl	8005654 <st_clust>
				dj.fs->wflag = 1;
 8006400:	f107 0320 	add.w	r3, r7, #32
 8006404:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006408:	2201      	movs	r2, #1
 800640a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800640e:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8006412:	2b00      	cmp	r3, #0
 8006414:	d04e      	beq.n	80064b4 <f_open+0x2c0>
					dw = dj.fs->winsect;
 8006416:	f107 0320 	add.w	r3, r7, #32
 800641a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800641e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8006422:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8006426:	f107 0320 	add.w	r3, r7, #32
 800642a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800642e:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8006432:	4618      	mov	r0, r3
 8006434:	f7fe fde1 	bl	8004ffa <remove_chain>
 8006438:	4603      	mov	r3, r0
 800643a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 800643e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006442:	2b00      	cmp	r3, #0
 8006444:	d136      	bne.n	80064b4 <f_open+0x2c0>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8006446:	f107 0320 	add.w	r3, r7, #32
 800644a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800644e:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8006452:	3a01      	subs	r2, #1
 8006454:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8006458:	f107 0320 	add.w	r3, r7, #32
 800645c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006460:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8006464:	4618      	mov	r0, r3
 8006466:	f7fe fb0a 	bl	8004a7e <move_window>
 800646a:	4603      	mov	r3, r0
 800646c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8006470:	e020      	b.n	80064b4 <f_open+0x2c0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8006472:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006476:	2b00      	cmp	r3, #0
 8006478:	d11c      	bne.n	80064b4 <f_open+0x2c0>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800647a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800647e:	330b      	adds	r3, #11
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	f003 0310 	and.w	r3, r3, #16
 8006486:	2b00      	cmp	r3, #0
 8006488:	d003      	beq.n	8006492 <f_open+0x29e>
					res = FR_NO_FILE;
 800648a:	2304      	movs	r3, #4
 800648c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8006490:	e010      	b.n	80064b4 <f_open+0x2c0>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8006492:	1dfb      	adds	r3, r7, #7
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	f003 0302 	and.w	r3, r3, #2
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00a      	beq.n	80064b4 <f_open+0x2c0>
 800649e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80064a2:	330b      	adds	r3, #11
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d002      	beq.n	80064b4 <f_open+0x2c0>
						res = FR_DENIED;
 80064ae:	2307      	movs	r3, #7
 80064b0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 80064b4:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d13d      	bne.n	8006538 <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80064bc:	1dfb      	adds	r3, r7, #7
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	f003 0308 	and.w	r3, r3, #8
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d005      	beq.n	80064d4 <f_open+0x2e0>
				mode |= FA__WRITTEN;
 80064c8:	1dfb      	adds	r3, r7, #7
 80064ca:	1dfa      	adds	r2, r7, #7
 80064cc:	7812      	ldrb	r2, [r2, #0]
 80064ce:	f042 0220 	orr.w	r2, r2, #32
 80064d2:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80064d4:	f107 0320 	add.w	r3, r7, #32
 80064d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80064dc:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80064e0:	f107 030c 	add.w	r3, r7, #12
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 80064ea:	f107 030c 	add.w	r3, r7, #12
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80064f4:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80064f8:	1dfb      	adds	r3, r7, #7
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	f023 0301 	bic.w	r3, r3, #1
 8006500:	2b00      	cmp	r3, #0
 8006502:	bf14      	ite	ne
 8006504:	2301      	movne	r3, #1
 8006506:	2300      	moveq	r3, #0
 8006508:	b2db      	uxtb	r3, r3
 800650a:	461a      	mov	r2, r3
 800650c:	f107 0320 	add.w	r3, r7, #32
 8006510:	4611      	mov	r1, r2
 8006512:	4618      	mov	r0, r3
 8006514:	f7fe f948 	bl	80047a8 <inc_lock>
 8006518:	4602      	mov	r2, r0
 800651a:	f107 030c 	add.w	r3, r7, #12
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8006524:	f107 030c 	add.w	r3, r7, #12
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800652e:	2b00      	cmp	r3, #0
 8006530:	d102      	bne.n	8006538 <f_open+0x344>
 8006532:	2302      	movs	r3, #2
 8006534:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8006538:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800653c:	2b00      	cmp	r3, #0
 800653e:	d15d      	bne.n	80065fc <f_open+0x408>
			fp->flag = mode;					/* File access mode */
 8006540:	f107 030c 	add.w	r3, r7, #12
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	1dfa      	adds	r2, r7, #7
 8006548:	7812      	ldrb	r2, [r2, #0]
 800654a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 800654e:	f107 030c 	add.w	r3, r7, #12
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800655a:	f107 0320 	add.w	r3, r7, #32
 800655e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006562:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8006566:	4618      	mov	r0, r3
 8006568:	f7ff f847 	bl	80055fa <ld_clust>
 800656c:	4602      	mov	r2, r0
 800656e:	f107 030c 	add.w	r3, r7, #12
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8006578:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800657c:	331f      	adds	r3, #31
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	061a      	lsls	r2, r3, #24
 8006582:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006586:	331e      	adds	r3, #30
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	041b      	lsls	r3, r3, #16
 800658c:	4313      	orrs	r3, r2
 800658e:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8006592:	321d      	adds	r2, #29
 8006594:	7812      	ldrb	r2, [r2, #0]
 8006596:	0212      	lsls	r2, r2, #8
 8006598:	4313      	orrs	r3, r2
 800659a:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800659e:	321c      	adds	r2, #28
 80065a0:	7812      	ldrb	r2, [r2, #0]
 80065a2:	431a      	orrs	r2, r3
 80065a4:	f107 030c 	add.w	r3, r7, #12
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 80065ae:	f107 030c 	add.w	r3, r7, #12
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 80065ba:	f107 030c 	add.w	r3, r7, #12
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80065c6:	f107 030c 	add.w	r3, r7, #12
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80065d2:	f107 0320 	add.w	r3, r7, #32
 80065d6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80065da:	f107 030c 	add.w	r3, r7, #12
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 80065e4:	f107 030c 	add.w	r3, r7, #12
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80065ee:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80065f2:	f107 030c 	add.w	r3, r7, #12
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 80065fc:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 8006600:	4618      	mov	r0, r3
 8006602:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b08a      	sub	sp, #40	; 0x28
 800660e:	af00      	add	r7, sp, #0
 8006610:	60f8      	str	r0, [r7, #12]
 8006612:	60b9      	str	r1, [r7, #8]
 8006614:	607a      	str	r2, [r7, #4]
 8006616:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	2200      	movs	r2, #0
 8006620:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f7ff fd6a 	bl	80060fc <validate>
 8006628:	4603      	mov	r3, r0
 800662a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800662c:	7dfb      	ldrb	r3, [r7, #23]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <f_write+0x2c>
 8006632:	7dfb      	ldrb	r3, [r7, #23]
 8006634:	e192      	b.n	800695c <f_write+0x352>
	if (fp->err)							/* Check error */
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800663c:	2b00      	cmp	r3, #0
 800663e:	d003      	beq.n	8006648 <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8006646:	e189      	b.n	800695c <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800664e:	f003 0302 	and.w	r3, r3, #2
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006656:	2307      	movs	r3, #7
 8006658:	e180      	b.n	800695c <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	441a      	add	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800666a:	429a      	cmp	r2, r3
 800666c:	f080 8158 	bcs.w	8006920 <f_write+0x316>
 8006670:	2300      	movs	r3, #0
 8006672:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8006674:	e154      	b.n	8006920 <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800667c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006680:	2b00      	cmp	r3, #0
 8006682:	f040 8114 	bne.w	80068ae <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800668c:	0a5b      	lsrs	r3, r3, #9
 800668e:	b2da      	uxtb	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006696:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800669a:	3b01      	subs	r3, #1
 800669c:	b2db      	uxtb	r3, r3
 800669e:	4013      	ands	r3, r2
 80066a0:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 80066a2:	7dbb      	ldrb	r3, [r7, #22]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d151      	bne.n	800674c <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10f      	bne.n	80066d2 <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80066b8:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d121      	bne.n	8006704 <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80066c6:	2100      	movs	r1, #0
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7fe fcf0 	bl	80050ae <create_chain>
 80066ce:	6278      	str	r0, [r7, #36]	; 0x24
 80066d0:	e018      	b.n	8006704 <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d008      	beq.n	80066ee <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80066e2:	4619      	mov	r1, r3
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f7fe fd7f 	bl	80051e8 <clmt_clust>
 80066ea:	6278      	str	r0, [r7, #36]	; 0x24
 80066ec:	e00a      	b.n	8006704 <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80066fa:	4619      	mov	r1, r3
 80066fc:	4610      	mov	r0, r2
 80066fe:	f7fe fcd6 	bl	80050ae <create_chain>
 8006702:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006706:	2b00      	cmp	r3, #0
 8006708:	f000 810f 	beq.w	800692a <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800670c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670e:	2b01      	cmp	r3, #1
 8006710:	d105      	bne.n	800671e <f_write+0x114>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2202      	movs	r2, #2
 8006716:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800671a:	2302      	movs	r3, #2
 800671c:	e11e      	b.n	800695c <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800671e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006724:	d105      	bne.n	8006732 <f_write+0x128>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800672e:	2301      	movs	r3, #1
 8006730:	e114      	b.n	800695c <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006736:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006740:	2b00      	cmp	r3, #0
 8006742:	d103      	bne.n	800674c <f_write+0x142>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006748:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006756:	2b00      	cmp	r3, #0
 8006758:	d01d      	beq.n	8006796 <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006760:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006764:	68f9      	ldr	r1, [r7, #12]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800676c:	2301      	movs	r3, #1
 800676e:	f7fd fed7 	bl	8004520 <disk_write>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d005      	beq.n	8006784 <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006780:	2301      	movs	r3, #1
 8006782:	e0eb      	b.n	800695c <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800678a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800678e:	b2da      	uxtb	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80067a2:	4619      	mov	r1, r3
 80067a4:	4610      	mov	r0, r2
 80067a6:	f7fe fa45 	bl	8004c34 <clust2sect>
 80067aa:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d105      	bne.n	80067be <f_write+0x1b4>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2202      	movs	r2, #2
 80067b6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80067ba:	2302      	movs	r3, #2
 80067bc:	e0ce      	b.n	800695c <f_write+0x352>
			sect += csect;
 80067be:	7dbb      	ldrb	r3, [r7, #22]
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	4413      	add	r3, r2
 80067c4:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	0a5b      	lsrs	r3, r3, #9
 80067ca:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d048      	beq.n	8006864 <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80067d2:	7dba      	ldrb	r2, [r7, #22]
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	4413      	add	r3, r2
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80067de:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d908      	bls.n	80067f8 <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80067ec:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80067f0:	461a      	mov	r2, r3
 80067f2:	7dbb      	ldrb	r3, [r7, #22]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80067fe:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	69b9      	ldr	r1, [r7, #24]
 8006808:	f7fd fe8a 	bl	8004520 <disk_write>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d005      	beq.n	800681e <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800681a:	2301      	movs	r3, #1
 800681c:	e09e      	b.n	800695c <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	69fa      	ldr	r2, [r7, #28]
 800682a:	429a      	cmp	r2, r3
 800682c:	d916      	bls.n	800685c <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	025b      	lsls	r3, r3, #9
 800683c:	69ba      	ldr	r2, [r7, #24]
 800683e:	4413      	add	r3, r2
 8006840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006844:	4619      	mov	r1, r3
 8006846:	f7fd fea9 	bl	800459c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006850:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006854:	b2da      	uxtb	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	025b      	lsls	r3, r3, #9
 8006860:	623b      	str	r3, [r7, #32]
				continue;
 8006862:	e047      	b.n	80068f4 <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800686a:	693a      	ldr	r2, [r7, #16]
 800686c:	429a      	cmp	r2, r3
 800686e:	d01a      	beq.n	80068a6 <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800687c:	429a      	cmp	r2, r3
 800687e:	d212      	bcs.n	80068a6 <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006886:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800688a:	68f9      	ldr	r1, [r7, #12]
 800688c:	2301      	movs	r3, #1
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	f7fd fe26 	bl	80044e0 <disk_read>
 8006894:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8006896:	2b00      	cmp	r3, #0
 8006898:	d005      	beq.n	80068a6 <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80068a2:	2301      	movs	r3, #1
 80068a4:	e05a      	b.n	800695c <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80068b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068b8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80068bc:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 80068be:	6a3a      	ldr	r2, [r7, #32]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d901      	bls.n	80068ca <f_write+0x2c0>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80068d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	4413      	add	r3, r2
 80068d8:	6a3a      	ldr	r2, [r7, #32]
 80068da:	69b9      	ldr	r1, [r7, #24]
 80068dc:	4618      	mov	r0, r3
 80068de:	f7fd fe5d 	bl	800459c <mem_cpy>
		fp->flag |= FA__DIRTY;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80068e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068ec:	b2da      	uxtb	r2, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80068f4:	69ba      	ldr	r2, [r7, #24]
 80068f6:	6a3b      	ldr	r3, [r7, #32]
 80068f8:	4413      	add	r3, r2
 80068fa:	61bb      	str	r3, [r7, #24]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006902:	6a3b      	ldr	r3, [r7, #32]
 8006904:	441a      	add	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	6a3b      	ldr	r3, [r7, #32]
 8006912:	441a      	add	r2, r3
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	601a      	str	r2, [r3, #0]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	f47f aea7 	bne.w	8006676 <f_write+0x6c>
 8006928:	e000      	b.n	800692c <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800692a:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006938:	429a      	cmp	r2, r3
 800693a:	d905      	bls.n	8006948 <f_write+0x33e>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800694e:	f043 0320 	orr.w	r3, r3, #32
 8006952:	b2da      	uxtb	r2, r3
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3728      	adds	r7, #40	; 0x28
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b086      	sub	sp, #24
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f7ff fbc5 	bl	80060fc <validate>
 8006972:	4603      	mov	r3, r0
 8006974:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006976:	7dfb      	ldrb	r3, [r7, #23]
 8006978:	2b00      	cmp	r3, #0
 800697a:	f040 80a8 	bne.w	8006ace <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006984:	f003 0320 	and.w	r3, r3, #32
 8006988:	2b00      	cmp	r3, #0
 800698a:	f000 80a0 	beq.w	8006ace <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006998:	2b00      	cmp	r3, #0
 800699a:	d019      	beq.n	80069d0 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80069a2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80069a6:	6879      	ldr	r1, [r7, #4]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80069ae:	2301      	movs	r3, #1
 80069b0:	f7fd fdb6 	bl	8004520 <disk_write>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d001      	beq.n	80069be <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80069ba:	2301      	movs	r3, #1
 80069bc:	e088      	b.n	8006ad0 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80069c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069c8:	b2da      	uxtb	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80069dc:	4619      	mov	r1, r3
 80069de:	4610      	mov	r0, r2
 80069e0:	f7fe f84d 	bl	8004a7e <move_window>
 80069e4:	4603      	mov	r3, r0
 80069e6:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 80069e8:	7dfb      	ldrb	r3, [r7, #23]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d16f      	bne.n	8006ace <f_sync+0x16a>
				dir = fp->dir_ptr;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80069f4:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	330b      	adds	r3, #11
 80069fa:	781a      	ldrb	r2, [r3, #0]
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	330b      	adds	r3, #11
 8006a00:	f042 0220 	orr.w	r2, r2, #32
 8006a04:	b2d2      	uxtb	r2, r2
 8006a06:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	331c      	adds	r3, #28
 8006a12:	b2d2      	uxtb	r2, r2
 8006a14:	701a      	strb	r2, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	0a1b      	lsrs	r3, r3, #8
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	331d      	adds	r3, #29
 8006a26:	b2d2      	uxtb	r2, r2
 8006a28:	701a      	strb	r2, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006a30:	0c1a      	lsrs	r2, r3, #16
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	331e      	adds	r3, #30
 8006a36:	b2d2      	uxtb	r2, r2
 8006a38:	701a      	strb	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006a40:	0e1a      	lsrs	r2, r3, #24
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	331f      	adds	r3, #31
 8006a46:	b2d2      	uxtb	r2, r2
 8006a48:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006a50:	4619      	mov	r1, r3
 8006a52:	6938      	ldr	r0, [r7, #16]
 8006a54:	f7fe fdfe 	bl	8005654 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8006a58:	f7fd fca0 	bl	800439c <get_fattime>
 8006a5c:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	3316      	adds	r3, #22
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	b2d2      	uxtb	r2, r2
 8006a66:	701a      	strb	r2, [r3, #0]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	0a1b      	lsrs	r3, r3, #8
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	3317      	adds	r3, #23
 8006a74:	b2d2      	uxtb	r2, r2
 8006a76:	701a      	strb	r2, [r3, #0]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	0c1a      	lsrs	r2, r3, #16
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	3318      	adds	r3, #24
 8006a80:	b2d2      	uxtb	r2, r2
 8006a82:	701a      	strb	r2, [r3, #0]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	0e1a      	lsrs	r2, r3, #24
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	3319      	adds	r3, #25
 8006a8c:	b2d2      	uxtb	r2, r2
 8006a8e:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	3312      	adds	r3, #18
 8006a94:	2200      	movs	r2, #0
 8006a96:	701a      	strb	r2, [r3, #0]
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	3313      	adds	r3, #19
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006aa6:	f023 0320 	bic.w	r3, r3, #32
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7fe f808 	bl	8004ada <sync_fs>
 8006aca:	4603      	mov	r3, r0
 8006acc:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8006ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3718      	adds	r7, #24
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f7ff ff3f 	bl	8006964 <f_sync>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006aea:	7bfb      	ldrb	r3, [r7, #15]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d116      	bne.n	8006b1e <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f7ff fb03 	bl	80060fc <validate>
 8006af6:	4603      	mov	r3, r0
 8006af8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006afa:	7bfb      	ldrb	r3, [r7, #15]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d10e      	bne.n	8006b1e <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7fd ff04 	bl	8004914 <dec_lock>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006b10:	7bfb      	ldrb	r3, [r7, #15]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d103      	bne.n	8006b1e <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b090      	sub	sp, #64	; 0x40
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f7ff fae2 	bl	80060fc <validate>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006b3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d002      	beq.n	8006b4c <f_lseek+0x24>
 8006b46:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006b4a:	e247      	b.n	8006fdc <f_lseek+0x4b4>
	if (fp->err)						/* Check error */
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d003      	beq.n	8006b5e <f_lseek+0x36>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8006b5c:	e23e      	b.n	8006fdc <f_lseek+0x4b4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f000 80f2 	beq.w	8006d4e <f_lseek+0x226>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b70:	d164      	bne.n	8006c3c <f_lseek+0x114>
			tbl = fp->cltbl;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8006b78:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7c:	1d1a      	adds	r2, r3, #4
 8006b7e:	627a      	str	r2, [r7, #36]	; 0x24
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	617b      	str	r3, [r7, #20]
 8006b84:	2302      	movs	r3, #2
 8006b86:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006b8e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8006b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d041      	beq.n	8006c1a <f_lseek+0xf2>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8006b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b98:	613b      	str	r3, [r7, #16]
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba0:	3302      	adds	r3, #2
 8006ba2:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba6:	60fb      	str	r3, [r7, #12]
 8006ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006baa:	3301      	adds	r3, #1
 8006bac:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006bb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7fe f85d 	bl	8004c76 <get_fat>
 8006bbc:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d805      	bhi.n	8006bd0 <f_lseek+0xa8>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006bcc:	2302      	movs	r3, #2
 8006bce:	e205      	b.n	8006fdc <f_lseek+0x4b4>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd6:	d105      	bne.n	8006be4 <f_lseek+0xbc>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006be0:	2301      	movs	r3, #1
 8006be2:	e1fb      	b.n	8006fdc <f_lseek+0x4b4>
					} while (cl == pcl + 1);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	3301      	adds	r3, #1
 8006be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d0da      	beq.n	8006ba4 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8006bee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d809      	bhi.n	8006c0a <f_lseek+0xe2>
						*tbl++ = ncl; *tbl++ = tcl;
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf8:	1d1a      	adds	r2, r3, #4
 8006bfa:	627a      	str	r2, [r7, #36]	; 0x24
 8006bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bfe:	601a      	str	r2, [r3, #0]
 8006c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c02:	1d1a      	adds	r2, r3, #4
 8006c04:	627a      	str	r2, [r7, #36]	; 0x24
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006c10:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d3bd      	bcc.n	8006b96 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8006c20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c22:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8006c24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d803      	bhi.n	8006c34 <f_lseek+0x10c>
				*tbl = 0;		/* Terminate table */
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2e:	2200      	movs	r2, #0
 8006c30:	601a      	str	r2, [r3, #0]
 8006c32:	e1d1      	b.n	8006fd8 <f_lseek+0x4b0>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8006c34:	2311      	movs	r3, #17
 8006c36:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006c3a:	e1cd      	b.n	8006fd8 <f_lseek+0x4b0>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006c42:	683a      	ldr	r2, [r7, #0]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d903      	bls.n	8006c50 <f_lseek+0x128>
				ofs = fp->fsize;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006c4e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	683a      	ldr	r2, [r7, #0]
 8006c54:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			if (ofs) {
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	f000 81bc 	beq.w	8006fd8 <f_lseek+0x4b0>
				fp->clust = clmt_clust(fp, ofs - 1);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	3b01      	subs	r3, #1
 8006c64:	4619      	mov	r1, r3
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f7fe fabe 	bl	80051e8 <clmt_clust>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				dsc = clust2sect(fp->fs, fp->clust);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006c80:	4619      	mov	r1, r3
 8006c82:	4610      	mov	r0, r2
 8006c84:	f7fd ffd6 	bl	8004c34 <clust2sect>
 8006c88:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d105      	bne.n	8006c9c <f_lseek+0x174>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2202      	movs	r2, #2
 8006c94:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006c98:	2302      	movs	r3, #2
 8006c9a:	e19f      	b.n	8006fdc <f_lseek+0x4b4>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	0a5b      	lsrs	r3, r3, #9
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8006ca8:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8006cac:	3a01      	subs	r2, #1
 8006cae:	4013      	ands	r3, r2
 8006cb0:	69ba      	ldr	r2, [r7, #24]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f000 8189 	beq.w	8006fd8 <f_lseek+0x4b0>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006ccc:	69ba      	ldr	r2, [r7, #24]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	f000 8182 	beq.w	8006fd8 <f_lseek+0x4b0>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d01d      	beq.n	8006d1e <f_lseek+0x1f6>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006ce8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006cec:	6879      	ldr	r1, [r7, #4]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	f7fd fc13 	bl	8004520 <disk_write>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d005      	beq.n	8006d0c <f_lseek+0x1e4>
							ABORT(fp->fs, FR_DISK_ERR);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e167      	b.n	8006fdc <f_lseek+0x4b4>
						fp->flag &= ~FA__DIRTY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006d12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d16:	b2da      	uxtb	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006d24:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006d28:	6879      	ldr	r1, [r7, #4]
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	69ba      	ldr	r2, [r7, #24]
 8006d2e:	f7fd fbd7 	bl	80044e0 <disk_read>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d005      	beq.n	8006d44 <f_lseek+0x21c>
						ABORT(fp->fs, FR_DISK_ERR);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006d40:	2301      	movs	r3, #1
 8006d42:	e14b      	b.n	8006fdc <f_lseek+0x4b4>
#endif
					fp->dsect = dsc;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	69ba      	ldr	r2, [r7, #24]
 8006d48:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 8006d4c:	e144      	b.n	8006fd8 <f_lseek+0x4b0>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006d54:	683a      	ldr	r2, [r7, #0]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d90a      	bls.n	8006d70 <f_lseek+0x248>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006d60:	f003 0302 	and.w	r3, r3, #2
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d103      	bne.n	8006d70 <f_lseek+0x248>
#endif
			) ofs = fp->fsize;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006d6e:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006d76:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d80:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		if (ofs) {
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f000 80c6 	beq.w	8006f18 <f_lseek+0x3f0>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006d92:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006d96:	025b      	lsls	r3, r3, #9
 8006d98:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8006d9a:	6a3b      	ldr	r3, [r7, #32]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d01e      	beq.n	8006dde <f_lseek+0x2b6>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	1e5a      	subs	r2, r3, #1
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	fbb2 f2f3 	udiv	r2, r2, r3
 8006daa:	6a3b      	ldr	r3, [r7, #32]
 8006dac:	1e59      	subs	r1, r3, #1
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d312      	bcc.n	8006dde <f_lseek+0x2b6>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8006db8:	6a3b      	ldr	r3, [r7, #32]
 8006dba:	1e5a      	subs	r2, r3, #1
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	425b      	negs	r3, r3
 8006dc0:	401a      	ands	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				ofs -= fp->fptr;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006dce:	683a      	ldr	r2, [r7, #0]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006dda:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ddc:	e029      	b.n	8006e32 <f_lseek+0x30a>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006de4:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8006de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d11e      	bne.n	8006e2a <f_lseek+0x302>
					clst = create_chain(fp->fs, 0);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006df2:	2100      	movs	r1, #0
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7fe f95a 	bl	80050ae <create_chain>
 8006dfa:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8006dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d105      	bne.n	8006e0e <f_lseek+0x2e6>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2202      	movs	r2, #2
 8006e06:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006e0a:	2302      	movs	r3, #2
 8006e0c:	e0e6      	b.n	8006fdc <f_lseek+0x4b4>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e14:	d105      	bne.n	8006e22 <f_lseek+0x2fa>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e0dc      	b.n	8006fdc <f_lseek+0x4b4>
					fp->sclust = clst;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e26:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				}
#endif
				fp->clust = clst;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e2e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			if (clst != 0) {
 8006e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d06f      	beq.n	8006f18 <f_lseek+0x3f0>
				while (ofs > bcs) {						/* Cluster following loop */
 8006e38:	e047      	b.n	8006eca <f_lseek+0x3a2>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006e40:	f003 0302 	and.w	r3, r3, #2
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00d      	beq.n	8006e64 <f_lseek+0x33c>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006e4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7fe f92c 	bl	80050ae <create_chain>
 8006e56:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8006e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10a      	bne.n	8006e74 <f_lseek+0x34c>
							ofs = bcs; break;
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	603b      	str	r3, [r7, #0]
 8006e62:	e036      	b.n	8006ed2 <f_lseek+0x3aa>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006e6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7fd ff02 	bl	8004c76 <get_fat>
 8006e72:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e7a:	d105      	bne.n	8006e88 <f_lseek+0x360>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006e84:	2301      	movs	r3, #1
 8006e86:	e0a9      	b.n	8006fdc <f_lseek+0x4b4>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8006e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d907      	bls.n	8006e9e <f_lseek+0x376>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006e94:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d305      	bcc.n	8006eaa <f_lseek+0x382>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2202      	movs	r2, #2
 8006ea2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006ea6:	2302      	movs	r3, #2
 8006ea8:	e098      	b.n	8006fdc <f_lseek+0x4b4>
					fp->clust = clst;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006eae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
					fp->fptr += bcs;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	441a      	add	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
					ofs -= bcs;
 8006ec2:	683a      	ldr	r2, [r7, #0]
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8006eca:	683a      	ldr	r2, [r7, #0]
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d8b3      	bhi.n	8006e3a <f_lseek+0x312>
				}
				fp->fptr += ofs;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	441a      	add	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d015      	beq.n	8006f18 <f_lseek+0x3f0>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006ef2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7fd fe9d 	bl	8004c34 <clust2sect>
 8006efa:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8006efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d105      	bne.n	8006f0e <f_lseek+0x3e6>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2202      	movs	r2, #2
 8006f06:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006f0a:	2302      	movs	r3, #2
 8006f0c:	e066      	b.n	8006fdc <f_lseek+0x4b4>
					nsect += ofs / SS(fp->fs);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	0a5b      	lsrs	r3, r3, #9
 8006f12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f14:	4413      	add	r3, r2
 8006f16:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d041      	beq.n	8006faa <f_lseek+0x482>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006f2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d03b      	beq.n	8006faa <f_lseek+0x482>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d01d      	beq.n	8006f7c <f_lseek+0x454>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006f46:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006f4a:	6879      	ldr	r1, [r7, #4]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006f52:	2301      	movs	r3, #1
 8006f54:	f7fd fae4 	bl	8004520 <disk_write>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d005      	beq.n	8006f6a <f_lseek+0x442>
					ABORT(fp->fs, FR_DISK_ERR);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006f66:	2301      	movs	r3, #1
 8006f68:	e038      	b.n	8006fdc <f_lseek+0x4b4>
				fp->flag &= ~FA__DIRTY;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006f70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f74:	b2da      	uxtb	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006f82:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006f86:	6879      	ldr	r1, [r7, #4]
 8006f88:	2301      	movs	r3, #1
 8006f8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f8c:	f7fd faa8 	bl	80044e0 <disk_read>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d005      	beq.n	8006fa2 <f_lseek+0x47a>
				ABORT(fp->fs, FR_DISK_ERR);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e01c      	b.n	8006fdc <f_lseek+0x4b4>
#endif
			fp->dsect = nsect;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fa6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d90e      	bls.n	8006fd8 <f_lseek+0x4b0>
			fp->fsize = fp->fptr;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006fcc:	f043 0320 	orr.w	r3, r3, #32
 8006fd0:	b2da      	uxtb	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8006fd8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3740      	adds	r7, #64	; 0x40
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b08e      	sub	sp, #56	; 0x38
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8006ff0:	f107 030c 	add.w	r3, r7, #12
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f7fe fdb5 	bl	8005b68 <find_volume>
 8006ffe:	4603      	mov	r3, r0
 8007000:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 800700a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800700e:	2b00      	cmp	r3, #0
 8007010:	f040 80af 	bne.w	8007172 <f_getfree+0x18e>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007020:	3b02      	subs	r3, #2
 8007022:	429a      	cmp	r2, r3
 8007024:	d805      	bhi.n	8007032 <f_getfree+0x4e>
			*nclst = fs->free_clust;
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	601a      	str	r2, [r3, #0]
 8007030:	e09f      	b.n	8007172 <f_getfree+0x18e>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007038:	76fb      	strb	r3, [r7, #27]
			n = 0;
 800703a:	2300      	movs	r3, #0
 800703c:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 800703e:	7efb      	ldrb	r3, [r7, #27]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d125      	bne.n	8007090 <f_getfree+0xac>
				clst = 2;
 8007044:	2302      	movs	r3, #2
 8007046:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 8007048:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800704a:	69f8      	ldr	r0, [r7, #28]
 800704c:	f7fd fe13 	bl	8004c76 <get_fat>
 8007050:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007058:	d103      	bne.n	8007062 <f_getfree+0x7e>
 800705a:	2301      	movs	r3, #1
 800705c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007060:	e077      	b.n	8007152 <f_getfree+0x16e>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d103      	bne.n	8007070 <f_getfree+0x8c>
 8007068:	2302      	movs	r3, #2
 800706a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800706e:	e070      	b.n	8007152 <f_getfree+0x16e>
					if (stat == 0) n++;
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d102      	bne.n	800707c <f_getfree+0x98>
 8007076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007078:	3301      	adds	r3, #1
 800707a:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 800707c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707e:	3301      	adds	r3, #1
 8007080:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007088:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800708a:	429a      	cmp	r2, r3
 800708c:	d3dc      	bcc.n	8007048 <f_getfree+0x64>
 800708e:	e060      	b.n	8007152 <f_getfree+0x16e>
			} else {
				clst = fs->n_fatent;
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007096:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800709e:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 80070a0:	2300      	movs	r3, #0
 80070a2:	627b      	str	r3, [r7, #36]	; 0x24
 80070a4:	2300      	movs	r3, #0
 80070a6:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d112      	bne.n	80070d4 <f_getfree+0xf0>
						res = move_window(fs, sect++);
 80070ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b0:	1c5a      	adds	r2, r3, #1
 80070b2:	62ba      	str	r2, [r7, #40]	; 0x28
 80070b4:	4619      	mov	r1, r3
 80070b6:	69f8      	ldr	r0, [r7, #28]
 80070b8:	f7fd fce1 	bl	8004a7e <move_window>
 80070bc:	4603      	mov	r3, r0
 80070be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 80070c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d142      	bne.n	8007150 <f_getfree+0x16c>
						p = fs->win.d8;
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 80070ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070d2:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 80070d4:	7efb      	ldrb	r3, [r7, #27]
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d115      	bne.n	8007106 <f_getfree+0x122>
						if (LD_WORD(p) == 0) n++;
 80070da:	6a3b      	ldr	r3, [r7, #32]
 80070dc:	3301      	adds	r3, #1
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	021b      	lsls	r3, r3, #8
 80070e2:	b21a      	sxth	r2, r3
 80070e4:	6a3b      	ldr	r3, [r7, #32]
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	b21b      	sxth	r3, r3
 80070ea:	4313      	orrs	r3, r2
 80070ec:	b21b      	sxth	r3, r3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d102      	bne.n	80070f8 <f_getfree+0x114>
 80070f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f4:	3301      	adds	r3, #1
 80070f6:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 80070f8:	6a3b      	ldr	r3, [r7, #32]
 80070fa:	3302      	adds	r3, #2
 80070fc:	623b      	str	r3, [r7, #32]
 80070fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007100:	3b02      	subs	r3, #2
 8007102:	627b      	str	r3, [r7, #36]	; 0x24
 8007104:	e01d      	b.n	8007142 <f_getfree+0x15e>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	3303      	adds	r3, #3
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	061a      	lsls	r2, r3, #24
 800710e:	6a3b      	ldr	r3, [r7, #32]
 8007110:	3302      	adds	r3, #2
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	041b      	lsls	r3, r3, #16
 8007116:	4313      	orrs	r3, r2
 8007118:	6a3a      	ldr	r2, [r7, #32]
 800711a:	3201      	adds	r2, #1
 800711c:	7812      	ldrb	r2, [r2, #0]
 800711e:	0212      	lsls	r2, r2, #8
 8007120:	4313      	orrs	r3, r2
 8007122:	6a3a      	ldr	r2, [r7, #32]
 8007124:	7812      	ldrb	r2, [r2, #0]
 8007126:	4313      	orrs	r3, r2
 8007128:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d102      	bne.n	8007136 <f_getfree+0x152>
 8007130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007132:	3301      	adds	r3, #1
 8007134:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 8007136:	6a3b      	ldr	r3, [r7, #32]
 8007138:	3304      	adds	r3, #4
 800713a:	623b      	str	r3, [r7, #32]
 800713c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713e:	3b04      	subs	r3, #4
 8007140:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 8007142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007144:	3b01      	subs	r3, #1
 8007146:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800714a:	2b00      	cmp	r3, #0
 800714c:	d1ac      	bne.n	80070a8 <f_getfree+0xc4>
 800714e:	e000      	b.n	8007152 <f_getfree+0x16e>
						if (res != FR_OK) break;
 8007150:	bf00      	nop
			}
			fs->free_clust = n;
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007156:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8007160:	f043 0301 	orr.w	r3, r3, #1
 8007164:	b2da      	uxtb	r2, r3
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
			*nclst = n;
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007170:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 8007172:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8007176:	4618      	mov	r0, r3
 8007178:	3738      	adds	r7, #56	; 0x38
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b084      	sub	sp, #16
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
 8007186:	460b      	mov	r3, r1
 8007188:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800718a:	78fb      	ldrb	r3, [r7, #3]
 800718c:	2b0a      	cmp	r3, #10
 800718e:	d103      	bne.n	8007198 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8007190:	210d      	movs	r1, #13
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f7ff fff3 	bl	800717e <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	db25      	blt.n	80071f0 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	1c5a      	adds	r2, r3, #1
 80071a8:	60fa      	str	r2, [r7, #12]
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	4413      	add	r3, r2
 80071ae:	78fa      	ldrb	r2, [r7, #3]
 80071b0:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2b3c      	cmp	r3, #60	; 0x3c
 80071b6:	dd12      	ble.n	80071de <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6818      	ldr	r0, [r3, #0]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f103 010c 	add.w	r1, r3, #12
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	f107 0308 	add.w	r3, r7, #8
 80071c8:	f7ff fa1f 	bl	800660a <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d101      	bne.n	80071d8 <putc_bfd+0x5a>
 80071d4:	2300      	movs	r3, #0
 80071d6:	e001      	b.n	80071dc <putc_bfd+0x5e>
 80071d8:	f04f 33ff 	mov.w	r3, #4294967295
 80071dc:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	1c5a      	adds	r2, r3, #1
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	609a      	str	r2, [r3, #8]
 80071ee:	e000      	b.n	80071f2 <putc_bfd+0x74>
	if (i < 0) return;
 80071f0:	bf00      	nop
}
 80071f2:	3710      	adds	r7, #16
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80071f8:	b590      	push	{r4, r7, lr}
 80071fa:	b097      	sub	sp, #92	; 0x5c
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8007206:	2300      	movs	r3, #0
 8007208:	613b      	str	r3, [r7, #16]
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800720e:	e009      	b.n	8007224 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	1c5a      	adds	r2, r3, #1
 8007214:	607a      	str	r2, [r7, #4]
 8007216:	781a      	ldrb	r2, [r3, #0]
 8007218:	f107 030c 	add.w	r3, r7, #12
 800721c:	4611      	mov	r1, r2
 800721e:	4618      	mov	r0, r3
 8007220:	f7ff ffad 	bl	800717e <putc_bfd>
	while (*str)			/* Put the string */
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1f1      	bne.n	8007210 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	2b00      	cmp	r3, #0
 8007230:	db16      	blt.n	8007260 <f_puts+0x68>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8007232:	68f8      	ldr	r0, [r7, #12]
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	461c      	mov	r4, r3
 8007238:	f107 0208 	add.w	r2, r7, #8
 800723c:	f107 030c 	add.w	r3, r7, #12
 8007240:	f103 010c 	add.w	r1, r3, #12
 8007244:	4613      	mov	r3, r2
 8007246:	4622      	mov	r2, r4
 8007248:	f7ff f9df 	bl	800660a <f_write>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d106      	bne.n	8007260 <f_puts+0x68>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	461a      	mov	r2, r3
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	429a      	cmp	r2, r3
 800725a:	d101      	bne.n	8007260 <f_puts+0x68>
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	e001      	b.n	8007264 <f_puts+0x6c>
	return EOF;
 8007260:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007264:	4618      	mov	r0, r3
 8007266:	375c      	adds	r7, #92	; 0x5c
 8007268:	46bd      	mov	sp, r7
 800726a:	bd90      	pop	{r4, r7, pc}

0800726c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800726c:	b480      	push	{r7}
 800726e:	b087      	sub	sp, #28
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	60b9      	str	r1, [r7, #8]
 8007276:	4613      	mov	r3, r2
 8007278:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800727a:	2301      	movs	r3, #1
 800727c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800727e:	2300      	movs	r3, #0
 8007280:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8007282:	4b1e      	ldr	r3, [pc, #120]	; (80072fc <FATFS_LinkDriverEx+0x90>)
 8007284:	7a5b      	ldrb	r3, [r3, #9]
 8007286:	b2db      	uxtb	r3, r3
 8007288:	2b01      	cmp	r3, #1
 800728a:	d831      	bhi.n	80072f0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800728c:	4b1b      	ldr	r3, [pc, #108]	; (80072fc <FATFS_LinkDriverEx+0x90>)
 800728e:	7a5b      	ldrb	r3, [r3, #9]
 8007290:	b2db      	uxtb	r3, r3
 8007292:	461a      	mov	r2, r3
 8007294:	4b19      	ldr	r3, [pc, #100]	; (80072fc <FATFS_LinkDriverEx+0x90>)
 8007296:	2100      	movs	r1, #0
 8007298:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800729a:	4b18      	ldr	r3, [pc, #96]	; (80072fc <FATFS_LinkDriverEx+0x90>)
 800729c:	7a5b      	ldrb	r3, [r3, #9]
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	4a16      	ldr	r2, [pc, #88]	; (80072fc <FATFS_LinkDriverEx+0x90>)
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	4413      	add	r3, r2
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80072aa:	4b14      	ldr	r3, [pc, #80]	; (80072fc <FATFS_LinkDriverEx+0x90>)
 80072ac:	7a5b      	ldrb	r3, [r3, #9]
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	461a      	mov	r2, r3
 80072b2:	4b12      	ldr	r3, [pc, #72]	; (80072fc <FATFS_LinkDriverEx+0x90>)
 80072b4:	4413      	add	r3, r2
 80072b6:	79fa      	ldrb	r2, [r7, #7]
 80072b8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80072ba:	4b10      	ldr	r3, [pc, #64]	; (80072fc <FATFS_LinkDriverEx+0x90>)
 80072bc:	7a5b      	ldrb	r3, [r3, #9]
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	1c5a      	adds	r2, r3, #1
 80072c2:	b2d1      	uxtb	r1, r2
 80072c4:	4a0d      	ldr	r2, [pc, #52]	; (80072fc <FATFS_LinkDriverEx+0x90>)
 80072c6:	7251      	strb	r1, [r2, #9]
 80072c8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80072ca:	7dbb      	ldrb	r3, [r7, #22]
 80072cc:	3330      	adds	r3, #48	; 0x30
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	3301      	adds	r3, #1
 80072d8:	223a      	movs	r2, #58	; 0x3a
 80072da:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	3302      	adds	r3, #2
 80072e0:	222f      	movs	r2, #47	; 0x2f
 80072e2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	3303      	adds	r3, #3
 80072e8:	2200      	movs	r2, #0
 80072ea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80072ec:	2300      	movs	r3, #0
 80072ee:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80072f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	371c      	adds	r7, #28
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bc80      	pop	{r7}
 80072fa:	4770      	bx	lr
 80072fc:	20000238 	.word	0x20000238

08007300 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800730a:	2200      	movs	r2, #0
 800730c:	6839      	ldr	r1, [r7, #0]
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7ff ffac 	bl	800726c <FATFS_LinkDriverEx>
 8007314:	4603      	mov	r3, r0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3708      	adds	r7, #8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
	...

08007320 <__errno>:
 8007320:	4b01      	ldr	r3, [pc, #4]	; (8007328 <__errno+0x8>)
 8007322:	6818      	ldr	r0, [r3, #0]
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	20000024 	.word	0x20000024

0800732c <__libc_init_array>:
 800732c:	b570      	push	{r4, r5, r6, lr}
 800732e:	2500      	movs	r5, #0
 8007330:	4e0c      	ldr	r6, [pc, #48]	; (8007364 <__libc_init_array+0x38>)
 8007332:	4c0d      	ldr	r4, [pc, #52]	; (8007368 <__libc_init_array+0x3c>)
 8007334:	1ba4      	subs	r4, r4, r6
 8007336:	10a4      	asrs	r4, r4, #2
 8007338:	42a5      	cmp	r5, r4
 800733a:	d109      	bne.n	8007350 <__libc_init_array+0x24>
 800733c:	f002 fbaa 	bl	8009a94 <_init>
 8007340:	2500      	movs	r5, #0
 8007342:	4e0a      	ldr	r6, [pc, #40]	; (800736c <__libc_init_array+0x40>)
 8007344:	4c0a      	ldr	r4, [pc, #40]	; (8007370 <__libc_init_array+0x44>)
 8007346:	1ba4      	subs	r4, r4, r6
 8007348:	10a4      	asrs	r4, r4, #2
 800734a:	42a5      	cmp	r5, r4
 800734c:	d105      	bne.n	800735a <__libc_init_array+0x2e>
 800734e:	bd70      	pop	{r4, r5, r6, pc}
 8007350:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007354:	4798      	blx	r3
 8007356:	3501      	adds	r5, #1
 8007358:	e7ee      	b.n	8007338 <__libc_init_array+0xc>
 800735a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800735e:	4798      	blx	r3
 8007360:	3501      	adds	r5, #1
 8007362:	e7f2      	b.n	800734a <__libc_init_array+0x1e>
 8007364:	08009f10 	.word	0x08009f10
 8007368:	08009f10 	.word	0x08009f10
 800736c:	08009f10 	.word	0x08009f10
 8007370:	08009f14 	.word	0x08009f14

08007374 <memset>:
 8007374:	4603      	mov	r3, r0
 8007376:	4402      	add	r2, r0
 8007378:	4293      	cmp	r3, r2
 800737a:	d100      	bne.n	800737e <memset+0xa>
 800737c:	4770      	bx	lr
 800737e:	f803 1b01 	strb.w	r1, [r3], #1
 8007382:	e7f9      	b.n	8007378 <memset+0x4>

08007384 <__cvt>:
 8007384:	2b00      	cmp	r3, #0
 8007386:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800738a:	461e      	mov	r6, r3
 800738c:	bfbb      	ittet	lt
 800738e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007392:	461e      	movlt	r6, r3
 8007394:	2300      	movge	r3, #0
 8007396:	232d      	movlt	r3, #45	; 0x2d
 8007398:	b088      	sub	sp, #32
 800739a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800739c:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80073a0:	f027 0720 	bic.w	r7, r7, #32
 80073a4:	2f46      	cmp	r7, #70	; 0x46
 80073a6:	4614      	mov	r4, r2
 80073a8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80073aa:	700b      	strb	r3, [r1, #0]
 80073ac:	d004      	beq.n	80073b8 <__cvt+0x34>
 80073ae:	2f45      	cmp	r7, #69	; 0x45
 80073b0:	d100      	bne.n	80073b4 <__cvt+0x30>
 80073b2:	3501      	adds	r5, #1
 80073b4:	2302      	movs	r3, #2
 80073b6:	e000      	b.n	80073ba <__cvt+0x36>
 80073b8:	2303      	movs	r3, #3
 80073ba:	aa07      	add	r2, sp, #28
 80073bc:	9204      	str	r2, [sp, #16]
 80073be:	aa06      	add	r2, sp, #24
 80073c0:	e9cd a202 	strd	sl, r2, [sp, #8]
 80073c4:	e9cd 3500 	strd	r3, r5, [sp]
 80073c8:	4622      	mov	r2, r4
 80073ca:	4633      	mov	r3, r6
 80073cc:	f000 fdf4 	bl	8007fb8 <_dtoa_r>
 80073d0:	2f47      	cmp	r7, #71	; 0x47
 80073d2:	4680      	mov	r8, r0
 80073d4:	d102      	bne.n	80073dc <__cvt+0x58>
 80073d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073d8:	07db      	lsls	r3, r3, #31
 80073da:	d526      	bpl.n	800742a <__cvt+0xa6>
 80073dc:	2f46      	cmp	r7, #70	; 0x46
 80073de:	eb08 0905 	add.w	r9, r8, r5
 80073e2:	d111      	bne.n	8007408 <__cvt+0x84>
 80073e4:	f898 3000 	ldrb.w	r3, [r8]
 80073e8:	2b30      	cmp	r3, #48	; 0x30
 80073ea:	d10a      	bne.n	8007402 <__cvt+0x7e>
 80073ec:	2200      	movs	r2, #0
 80073ee:	2300      	movs	r3, #0
 80073f0:	4620      	mov	r0, r4
 80073f2:	4631      	mov	r1, r6
 80073f4:	f7f9 fad8 	bl	80009a8 <__aeabi_dcmpeq>
 80073f8:	b918      	cbnz	r0, 8007402 <__cvt+0x7e>
 80073fa:	f1c5 0501 	rsb	r5, r5, #1
 80073fe:	f8ca 5000 	str.w	r5, [sl]
 8007402:	f8da 3000 	ldr.w	r3, [sl]
 8007406:	4499      	add	r9, r3
 8007408:	2200      	movs	r2, #0
 800740a:	2300      	movs	r3, #0
 800740c:	4620      	mov	r0, r4
 800740e:	4631      	mov	r1, r6
 8007410:	f7f9 faca 	bl	80009a8 <__aeabi_dcmpeq>
 8007414:	b938      	cbnz	r0, 8007426 <__cvt+0xa2>
 8007416:	2230      	movs	r2, #48	; 0x30
 8007418:	9b07      	ldr	r3, [sp, #28]
 800741a:	454b      	cmp	r3, r9
 800741c:	d205      	bcs.n	800742a <__cvt+0xa6>
 800741e:	1c59      	adds	r1, r3, #1
 8007420:	9107      	str	r1, [sp, #28]
 8007422:	701a      	strb	r2, [r3, #0]
 8007424:	e7f8      	b.n	8007418 <__cvt+0x94>
 8007426:	f8cd 901c 	str.w	r9, [sp, #28]
 800742a:	4640      	mov	r0, r8
 800742c:	9b07      	ldr	r3, [sp, #28]
 800742e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007430:	eba3 0308 	sub.w	r3, r3, r8
 8007434:	6013      	str	r3, [r2, #0]
 8007436:	b008      	add	sp, #32
 8007438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800743c <__exponent>:
 800743c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800743e:	2900      	cmp	r1, #0
 8007440:	bfb4      	ite	lt
 8007442:	232d      	movlt	r3, #45	; 0x2d
 8007444:	232b      	movge	r3, #43	; 0x2b
 8007446:	4604      	mov	r4, r0
 8007448:	bfb8      	it	lt
 800744a:	4249      	neglt	r1, r1
 800744c:	2909      	cmp	r1, #9
 800744e:	f804 2b02 	strb.w	r2, [r4], #2
 8007452:	7043      	strb	r3, [r0, #1]
 8007454:	dd21      	ble.n	800749a <__exponent+0x5e>
 8007456:	f10d 0307 	add.w	r3, sp, #7
 800745a:	461f      	mov	r7, r3
 800745c:	260a      	movs	r6, #10
 800745e:	fb91 f5f6 	sdiv	r5, r1, r6
 8007462:	fb06 1115 	mls	r1, r6, r5, r1
 8007466:	2d09      	cmp	r5, #9
 8007468:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800746c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007470:	f103 32ff 	add.w	r2, r3, #4294967295
 8007474:	4629      	mov	r1, r5
 8007476:	dc09      	bgt.n	800748c <__exponent+0x50>
 8007478:	3130      	adds	r1, #48	; 0x30
 800747a:	3b02      	subs	r3, #2
 800747c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007480:	42bb      	cmp	r3, r7
 8007482:	4622      	mov	r2, r4
 8007484:	d304      	bcc.n	8007490 <__exponent+0x54>
 8007486:	1a10      	subs	r0, r2, r0
 8007488:	b003      	add	sp, #12
 800748a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800748c:	4613      	mov	r3, r2
 800748e:	e7e6      	b.n	800745e <__exponent+0x22>
 8007490:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007494:	f804 2b01 	strb.w	r2, [r4], #1
 8007498:	e7f2      	b.n	8007480 <__exponent+0x44>
 800749a:	2330      	movs	r3, #48	; 0x30
 800749c:	4419      	add	r1, r3
 800749e:	7083      	strb	r3, [r0, #2]
 80074a0:	1d02      	adds	r2, r0, #4
 80074a2:	70c1      	strb	r1, [r0, #3]
 80074a4:	e7ef      	b.n	8007486 <__exponent+0x4a>
	...

080074a8 <_printf_float>:
 80074a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ac:	b091      	sub	sp, #68	; 0x44
 80074ae:	460c      	mov	r4, r1
 80074b0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80074b2:	4693      	mov	fp, r2
 80074b4:	461e      	mov	r6, r3
 80074b6:	4605      	mov	r5, r0
 80074b8:	f001 fcac 	bl	8008e14 <_localeconv_r>
 80074bc:	6803      	ldr	r3, [r0, #0]
 80074be:	4618      	mov	r0, r3
 80074c0:	9309      	str	r3, [sp, #36]	; 0x24
 80074c2:	f7f8 fe45 	bl	8000150 <strlen>
 80074c6:	2300      	movs	r3, #0
 80074c8:	930e      	str	r3, [sp, #56]	; 0x38
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	900a      	str	r0, [sp, #40]	; 0x28
 80074ce:	3307      	adds	r3, #7
 80074d0:	f023 0307 	bic.w	r3, r3, #7
 80074d4:	f103 0208 	add.w	r2, r3, #8
 80074d8:	f894 8018 	ldrb.w	r8, [r4, #24]
 80074dc:	f8d4 a000 	ldr.w	sl, [r4]
 80074e0:	603a      	str	r2, [r7, #0]
 80074e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80074ea:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80074ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80074f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80074f4:	f04f 32ff 	mov.w	r2, #4294967295
 80074f8:	4ba6      	ldr	r3, [pc, #664]	; (8007794 <_printf_float+0x2ec>)
 80074fa:	4638      	mov	r0, r7
 80074fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074fe:	f7f9 fa85 	bl	8000a0c <__aeabi_dcmpun>
 8007502:	bb68      	cbnz	r0, 8007560 <_printf_float+0xb8>
 8007504:	f04f 32ff 	mov.w	r2, #4294967295
 8007508:	4ba2      	ldr	r3, [pc, #648]	; (8007794 <_printf_float+0x2ec>)
 800750a:	4638      	mov	r0, r7
 800750c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800750e:	f7f9 fa5f 	bl	80009d0 <__aeabi_dcmple>
 8007512:	bb28      	cbnz	r0, 8007560 <_printf_float+0xb8>
 8007514:	2200      	movs	r2, #0
 8007516:	2300      	movs	r3, #0
 8007518:	4638      	mov	r0, r7
 800751a:	4649      	mov	r1, r9
 800751c:	f7f9 fa4e 	bl	80009bc <__aeabi_dcmplt>
 8007520:	b110      	cbz	r0, 8007528 <_printf_float+0x80>
 8007522:	232d      	movs	r3, #45	; 0x2d
 8007524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007528:	4f9b      	ldr	r7, [pc, #620]	; (8007798 <_printf_float+0x2f0>)
 800752a:	4b9c      	ldr	r3, [pc, #624]	; (800779c <_printf_float+0x2f4>)
 800752c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007530:	bf98      	it	ls
 8007532:	461f      	movls	r7, r3
 8007534:	2303      	movs	r3, #3
 8007536:	f04f 0900 	mov.w	r9, #0
 800753a:	6123      	str	r3, [r4, #16]
 800753c:	f02a 0304 	bic.w	r3, sl, #4
 8007540:	6023      	str	r3, [r4, #0]
 8007542:	9600      	str	r6, [sp, #0]
 8007544:	465b      	mov	r3, fp
 8007546:	aa0f      	add	r2, sp, #60	; 0x3c
 8007548:	4621      	mov	r1, r4
 800754a:	4628      	mov	r0, r5
 800754c:	f000 f9e2 	bl	8007914 <_printf_common>
 8007550:	3001      	adds	r0, #1
 8007552:	f040 8090 	bne.w	8007676 <_printf_float+0x1ce>
 8007556:	f04f 30ff 	mov.w	r0, #4294967295
 800755a:	b011      	add	sp, #68	; 0x44
 800755c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007560:	463a      	mov	r2, r7
 8007562:	464b      	mov	r3, r9
 8007564:	4638      	mov	r0, r7
 8007566:	4649      	mov	r1, r9
 8007568:	f7f9 fa50 	bl	8000a0c <__aeabi_dcmpun>
 800756c:	b110      	cbz	r0, 8007574 <_printf_float+0xcc>
 800756e:	4f8c      	ldr	r7, [pc, #560]	; (80077a0 <_printf_float+0x2f8>)
 8007570:	4b8c      	ldr	r3, [pc, #560]	; (80077a4 <_printf_float+0x2fc>)
 8007572:	e7db      	b.n	800752c <_printf_float+0x84>
 8007574:	6863      	ldr	r3, [r4, #4]
 8007576:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800757a:	1c59      	adds	r1, r3, #1
 800757c:	a80d      	add	r0, sp, #52	; 0x34
 800757e:	a90e      	add	r1, sp, #56	; 0x38
 8007580:	d140      	bne.n	8007604 <_printf_float+0x15c>
 8007582:	2306      	movs	r3, #6
 8007584:	6063      	str	r3, [r4, #4]
 8007586:	f04f 0c00 	mov.w	ip, #0
 800758a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800758e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8007592:	6863      	ldr	r3, [r4, #4]
 8007594:	6022      	str	r2, [r4, #0]
 8007596:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800759a:	9300      	str	r3, [sp, #0]
 800759c:	463a      	mov	r2, r7
 800759e:	464b      	mov	r3, r9
 80075a0:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80075a4:	4628      	mov	r0, r5
 80075a6:	f7ff feed 	bl	8007384 <__cvt>
 80075aa:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80075ae:	2b47      	cmp	r3, #71	; 0x47
 80075b0:	4607      	mov	r7, r0
 80075b2:	d109      	bne.n	80075c8 <_printf_float+0x120>
 80075b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075b6:	1cd8      	adds	r0, r3, #3
 80075b8:	db02      	blt.n	80075c0 <_printf_float+0x118>
 80075ba:	6862      	ldr	r2, [r4, #4]
 80075bc:	4293      	cmp	r3, r2
 80075be:	dd47      	ble.n	8007650 <_printf_float+0x1a8>
 80075c0:	f1a8 0802 	sub.w	r8, r8, #2
 80075c4:	fa5f f888 	uxtb.w	r8, r8
 80075c8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80075cc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80075ce:	d824      	bhi.n	800761a <_printf_float+0x172>
 80075d0:	3901      	subs	r1, #1
 80075d2:	4642      	mov	r2, r8
 80075d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80075d8:	910d      	str	r1, [sp, #52]	; 0x34
 80075da:	f7ff ff2f 	bl	800743c <__exponent>
 80075de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075e0:	4681      	mov	r9, r0
 80075e2:	1813      	adds	r3, r2, r0
 80075e4:	2a01      	cmp	r2, #1
 80075e6:	6123      	str	r3, [r4, #16]
 80075e8:	dc02      	bgt.n	80075f0 <_printf_float+0x148>
 80075ea:	6822      	ldr	r2, [r4, #0]
 80075ec:	07d1      	lsls	r1, r2, #31
 80075ee:	d501      	bpl.n	80075f4 <_printf_float+0x14c>
 80075f0:	3301      	adds	r3, #1
 80075f2:	6123      	str	r3, [r4, #16]
 80075f4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d0a2      	beq.n	8007542 <_printf_float+0x9a>
 80075fc:	232d      	movs	r3, #45	; 0x2d
 80075fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007602:	e79e      	b.n	8007542 <_printf_float+0x9a>
 8007604:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8007608:	f000 816e 	beq.w	80078e8 <_printf_float+0x440>
 800760c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007610:	d1b9      	bne.n	8007586 <_printf_float+0xde>
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1b7      	bne.n	8007586 <_printf_float+0xde>
 8007616:	2301      	movs	r3, #1
 8007618:	e7b4      	b.n	8007584 <_printf_float+0xdc>
 800761a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800761e:	d119      	bne.n	8007654 <_printf_float+0x1ac>
 8007620:	2900      	cmp	r1, #0
 8007622:	6863      	ldr	r3, [r4, #4]
 8007624:	dd0c      	ble.n	8007640 <_printf_float+0x198>
 8007626:	6121      	str	r1, [r4, #16]
 8007628:	b913      	cbnz	r3, 8007630 <_printf_float+0x188>
 800762a:	6822      	ldr	r2, [r4, #0]
 800762c:	07d2      	lsls	r2, r2, #31
 800762e:	d502      	bpl.n	8007636 <_printf_float+0x18e>
 8007630:	3301      	adds	r3, #1
 8007632:	440b      	add	r3, r1
 8007634:	6123      	str	r3, [r4, #16]
 8007636:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007638:	f04f 0900 	mov.w	r9, #0
 800763c:	65a3      	str	r3, [r4, #88]	; 0x58
 800763e:	e7d9      	b.n	80075f4 <_printf_float+0x14c>
 8007640:	b913      	cbnz	r3, 8007648 <_printf_float+0x1a0>
 8007642:	6822      	ldr	r2, [r4, #0]
 8007644:	07d0      	lsls	r0, r2, #31
 8007646:	d501      	bpl.n	800764c <_printf_float+0x1a4>
 8007648:	3302      	adds	r3, #2
 800764a:	e7f3      	b.n	8007634 <_printf_float+0x18c>
 800764c:	2301      	movs	r3, #1
 800764e:	e7f1      	b.n	8007634 <_printf_float+0x18c>
 8007650:	f04f 0867 	mov.w	r8, #103	; 0x67
 8007654:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007658:	4293      	cmp	r3, r2
 800765a:	db05      	blt.n	8007668 <_printf_float+0x1c0>
 800765c:	6822      	ldr	r2, [r4, #0]
 800765e:	6123      	str	r3, [r4, #16]
 8007660:	07d1      	lsls	r1, r2, #31
 8007662:	d5e8      	bpl.n	8007636 <_printf_float+0x18e>
 8007664:	3301      	adds	r3, #1
 8007666:	e7e5      	b.n	8007634 <_printf_float+0x18c>
 8007668:	2b00      	cmp	r3, #0
 800766a:	bfcc      	ite	gt
 800766c:	2301      	movgt	r3, #1
 800766e:	f1c3 0302 	rsble	r3, r3, #2
 8007672:	4413      	add	r3, r2
 8007674:	e7de      	b.n	8007634 <_printf_float+0x18c>
 8007676:	6823      	ldr	r3, [r4, #0]
 8007678:	055a      	lsls	r2, r3, #21
 800767a:	d407      	bmi.n	800768c <_printf_float+0x1e4>
 800767c:	6923      	ldr	r3, [r4, #16]
 800767e:	463a      	mov	r2, r7
 8007680:	4659      	mov	r1, fp
 8007682:	4628      	mov	r0, r5
 8007684:	47b0      	blx	r6
 8007686:	3001      	adds	r0, #1
 8007688:	d129      	bne.n	80076de <_printf_float+0x236>
 800768a:	e764      	b.n	8007556 <_printf_float+0xae>
 800768c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8007690:	f240 80d7 	bls.w	8007842 <_printf_float+0x39a>
 8007694:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007698:	2200      	movs	r2, #0
 800769a:	2300      	movs	r3, #0
 800769c:	f7f9 f984 	bl	80009a8 <__aeabi_dcmpeq>
 80076a0:	b388      	cbz	r0, 8007706 <_printf_float+0x25e>
 80076a2:	2301      	movs	r3, #1
 80076a4:	4a40      	ldr	r2, [pc, #256]	; (80077a8 <_printf_float+0x300>)
 80076a6:	4659      	mov	r1, fp
 80076a8:	4628      	mov	r0, r5
 80076aa:	47b0      	blx	r6
 80076ac:	3001      	adds	r0, #1
 80076ae:	f43f af52 	beq.w	8007556 <_printf_float+0xae>
 80076b2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80076b6:	429a      	cmp	r2, r3
 80076b8:	db02      	blt.n	80076c0 <_printf_float+0x218>
 80076ba:	6823      	ldr	r3, [r4, #0]
 80076bc:	07d8      	lsls	r0, r3, #31
 80076be:	d50e      	bpl.n	80076de <_printf_float+0x236>
 80076c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076c4:	4659      	mov	r1, fp
 80076c6:	4628      	mov	r0, r5
 80076c8:	47b0      	blx	r6
 80076ca:	3001      	adds	r0, #1
 80076cc:	f43f af43 	beq.w	8007556 <_printf_float+0xae>
 80076d0:	2700      	movs	r7, #0
 80076d2:	f104 081a 	add.w	r8, r4, #26
 80076d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076d8:	3b01      	subs	r3, #1
 80076da:	42bb      	cmp	r3, r7
 80076dc:	dc09      	bgt.n	80076f2 <_printf_float+0x24a>
 80076de:	6823      	ldr	r3, [r4, #0]
 80076e0:	079f      	lsls	r7, r3, #30
 80076e2:	f100 80fd 	bmi.w	80078e0 <_printf_float+0x438>
 80076e6:	68e0      	ldr	r0, [r4, #12]
 80076e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076ea:	4298      	cmp	r0, r3
 80076ec:	bfb8      	it	lt
 80076ee:	4618      	movlt	r0, r3
 80076f0:	e733      	b.n	800755a <_printf_float+0xb2>
 80076f2:	2301      	movs	r3, #1
 80076f4:	4642      	mov	r2, r8
 80076f6:	4659      	mov	r1, fp
 80076f8:	4628      	mov	r0, r5
 80076fa:	47b0      	blx	r6
 80076fc:	3001      	adds	r0, #1
 80076fe:	f43f af2a 	beq.w	8007556 <_printf_float+0xae>
 8007702:	3701      	adds	r7, #1
 8007704:	e7e7      	b.n	80076d6 <_printf_float+0x22e>
 8007706:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007708:	2b00      	cmp	r3, #0
 800770a:	dc2b      	bgt.n	8007764 <_printf_float+0x2bc>
 800770c:	2301      	movs	r3, #1
 800770e:	4a26      	ldr	r2, [pc, #152]	; (80077a8 <_printf_float+0x300>)
 8007710:	4659      	mov	r1, fp
 8007712:	4628      	mov	r0, r5
 8007714:	47b0      	blx	r6
 8007716:	3001      	adds	r0, #1
 8007718:	f43f af1d 	beq.w	8007556 <_printf_float+0xae>
 800771c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800771e:	b923      	cbnz	r3, 800772a <_printf_float+0x282>
 8007720:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007722:	b913      	cbnz	r3, 800772a <_printf_float+0x282>
 8007724:	6823      	ldr	r3, [r4, #0]
 8007726:	07d9      	lsls	r1, r3, #31
 8007728:	d5d9      	bpl.n	80076de <_printf_float+0x236>
 800772a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800772e:	4659      	mov	r1, fp
 8007730:	4628      	mov	r0, r5
 8007732:	47b0      	blx	r6
 8007734:	3001      	adds	r0, #1
 8007736:	f43f af0e 	beq.w	8007556 <_printf_float+0xae>
 800773a:	f04f 0800 	mov.w	r8, #0
 800773e:	f104 091a 	add.w	r9, r4, #26
 8007742:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007744:	425b      	negs	r3, r3
 8007746:	4543      	cmp	r3, r8
 8007748:	dc01      	bgt.n	800774e <_printf_float+0x2a6>
 800774a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800774c:	e797      	b.n	800767e <_printf_float+0x1d6>
 800774e:	2301      	movs	r3, #1
 8007750:	464a      	mov	r2, r9
 8007752:	4659      	mov	r1, fp
 8007754:	4628      	mov	r0, r5
 8007756:	47b0      	blx	r6
 8007758:	3001      	adds	r0, #1
 800775a:	f43f aefc 	beq.w	8007556 <_printf_float+0xae>
 800775e:	f108 0801 	add.w	r8, r8, #1
 8007762:	e7ee      	b.n	8007742 <_printf_float+0x29a>
 8007764:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007766:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007768:	429a      	cmp	r2, r3
 800776a:	bfa8      	it	ge
 800776c:	461a      	movge	r2, r3
 800776e:	2a00      	cmp	r2, #0
 8007770:	4690      	mov	r8, r2
 8007772:	dd07      	ble.n	8007784 <_printf_float+0x2dc>
 8007774:	4613      	mov	r3, r2
 8007776:	4659      	mov	r1, fp
 8007778:	463a      	mov	r2, r7
 800777a:	4628      	mov	r0, r5
 800777c:	47b0      	blx	r6
 800777e:	3001      	adds	r0, #1
 8007780:	f43f aee9 	beq.w	8007556 <_printf_float+0xae>
 8007784:	f104 031a 	add.w	r3, r4, #26
 8007788:	f04f 0a00 	mov.w	sl, #0
 800778c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8007790:	930b      	str	r3, [sp, #44]	; 0x2c
 8007792:	e015      	b.n	80077c0 <_printf_float+0x318>
 8007794:	7fefffff 	.word	0x7fefffff
 8007798:	08009c58 	.word	0x08009c58
 800779c:	08009c54 	.word	0x08009c54
 80077a0:	08009c60 	.word	0x08009c60
 80077a4:	08009c5c 	.word	0x08009c5c
 80077a8:	08009c64 	.word	0x08009c64
 80077ac:	2301      	movs	r3, #1
 80077ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077b0:	4659      	mov	r1, fp
 80077b2:	4628      	mov	r0, r5
 80077b4:	47b0      	blx	r6
 80077b6:	3001      	adds	r0, #1
 80077b8:	f43f aecd 	beq.w	8007556 <_printf_float+0xae>
 80077bc:	f10a 0a01 	add.w	sl, sl, #1
 80077c0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80077c4:	eba9 0308 	sub.w	r3, r9, r8
 80077c8:	4553      	cmp	r3, sl
 80077ca:	dcef      	bgt.n	80077ac <_printf_float+0x304>
 80077cc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80077d0:	429a      	cmp	r2, r3
 80077d2:	444f      	add	r7, r9
 80077d4:	db14      	blt.n	8007800 <_printf_float+0x358>
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	07da      	lsls	r2, r3, #31
 80077da:	d411      	bmi.n	8007800 <_printf_float+0x358>
 80077dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077de:	990d      	ldr	r1, [sp, #52]	; 0x34
 80077e0:	eba3 0209 	sub.w	r2, r3, r9
 80077e4:	eba3 0901 	sub.w	r9, r3, r1
 80077e8:	4591      	cmp	r9, r2
 80077ea:	bfa8      	it	ge
 80077ec:	4691      	movge	r9, r2
 80077ee:	f1b9 0f00 	cmp.w	r9, #0
 80077f2:	dc0d      	bgt.n	8007810 <_printf_float+0x368>
 80077f4:	2700      	movs	r7, #0
 80077f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077fa:	f104 081a 	add.w	r8, r4, #26
 80077fe:	e018      	b.n	8007832 <_printf_float+0x38a>
 8007800:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007804:	4659      	mov	r1, fp
 8007806:	4628      	mov	r0, r5
 8007808:	47b0      	blx	r6
 800780a:	3001      	adds	r0, #1
 800780c:	d1e6      	bne.n	80077dc <_printf_float+0x334>
 800780e:	e6a2      	b.n	8007556 <_printf_float+0xae>
 8007810:	464b      	mov	r3, r9
 8007812:	463a      	mov	r2, r7
 8007814:	4659      	mov	r1, fp
 8007816:	4628      	mov	r0, r5
 8007818:	47b0      	blx	r6
 800781a:	3001      	adds	r0, #1
 800781c:	d1ea      	bne.n	80077f4 <_printf_float+0x34c>
 800781e:	e69a      	b.n	8007556 <_printf_float+0xae>
 8007820:	2301      	movs	r3, #1
 8007822:	4642      	mov	r2, r8
 8007824:	4659      	mov	r1, fp
 8007826:	4628      	mov	r0, r5
 8007828:	47b0      	blx	r6
 800782a:	3001      	adds	r0, #1
 800782c:	f43f ae93 	beq.w	8007556 <_printf_float+0xae>
 8007830:	3701      	adds	r7, #1
 8007832:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007836:	1a9b      	subs	r3, r3, r2
 8007838:	eba3 0309 	sub.w	r3, r3, r9
 800783c:	42bb      	cmp	r3, r7
 800783e:	dcef      	bgt.n	8007820 <_printf_float+0x378>
 8007840:	e74d      	b.n	80076de <_printf_float+0x236>
 8007842:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007844:	2a01      	cmp	r2, #1
 8007846:	dc01      	bgt.n	800784c <_printf_float+0x3a4>
 8007848:	07db      	lsls	r3, r3, #31
 800784a:	d538      	bpl.n	80078be <_printf_float+0x416>
 800784c:	2301      	movs	r3, #1
 800784e:	463a      	mov	r2, r7
 8007850:	4659      	mov	r1, fp
 8007852:	4628      	mov	r0, r5
 8007854:	47b0      	blx	r6
 8007856:	3001      	adds	r0, #1
 8007858:	f43f ae7d 	beq.w	8007556 <_printf_float+0xae>
 800785c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007860:	4659      	mov	r1, fp
 8007862:	4628      	mov	r0, r5
 8007864:	47b0      	blx	r6
 8007866:	3001      	adds	r0, #1
 8007868:	f107 0701 	add.w	r7, r7, #1
 800786c:	f43f ae73 	beq.w	8007556 <_printf_float+0xae>
 8007870:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007874:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007876:	2200      	movs	r2, #0
 8007878:	f103 38ff 	add.w	r8, r3, #4294967295
 800787c:	2300      	movs	r3, #0
 800787e:	f7f9 f893 	bl	80009a8 <__aeabi_dcmpeq>
 8007882:	b9c0      	cbnz	r0, 80078b6 <_printf_float+0x40e>
 8007884:	4643      	mov	r3, r8
 8007886:	463a      	mov	r2, r7
 8007888:	4659      	mov	r1, fp
 800788a:	4628      	mov	r0, r5
 800788c:	47b0      	blx	r6
 800788e:	3001      	adds	r0, #1
 8007890:	d10d      	bne.n	80078ae <_printf_float+0x406>
 8007892:	e660      	b.n	8007556 <_printf_float+0xae>
 8007894:	2301      	movs	r3, #1
 8007896:	4642      	mov	r2, r8
 8007898:	4659      	mov	r1, fp
 800789a:	4628      	mov	r0, r5
 800789c:	47b0      	blx	r6
 800789e:	3001      	adds	r0, #1
 80078a0:	f43f ae59 	beq.w	8007556 <_printf_float+0xae>
 80078a4:	3701      	adds	r7, #1
 80078a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078a8:	3b01      	subs	r3, #1
 80078aa:	42bb      	cmp	r3, r7
 80078ac:	dcf2      	bgt.n	8007894 <_printf_float+0x3ec>
 80078ae:	464b      	mov	r3, r9
 80078b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80078b4:	e6e4      	b.n	8007680 <_printf_float+0x1d8>
 80078b6:	2700      	movs	r7, #0
 80078b8:	f104 081a 	add.w	r8, r4, #26
 80078bc:	e7f3      	b.n	80078a6 <_printf_float+0x3fe>
 80078be:	2301      	movs	r3, #1
 80078c0:	e7e1      	b.n	8007886 <_printf_float+0x3de>
 80078c2:	2301      	movs	r3, #1
 80078c4:	4642      	mov	r2, r8
 80078c6:	4659      	mov	r1, fp
 80078c8:	4628      	mov	r0, r5
 80078ca:	47b0      	blx	r6
 80078cc:	3001      	adds	r0, #1
 80078ce:	f43f ae42 	beq.w	8007556 <_printf_float+0xae>
 80078d2:	3701      	adds	r7, #1
 80078d4:	68e3      	ldr	r3, [r4, #12]
 80078d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078d8:	1a9b      	subs	r3, r3, r2
 80078da:	42bb      	cmp	r3, r7
 80078dc:	dcf1      	bgt.n	80078c2 <_printf_float+0x41a>
 80078de:	e702      	b.n	80076e6 <_printf_float+0x23e>
 80078e0:	2700      	movs	r7, #0
 80078e2:	f104 0819 	add.w	r8, r4, #25
 80078e6:	e7f5      	b.n	80078d4 <_printf_float+0x42c>
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	f43f ae94 	beq.w	8007616 <_printf_float+0x16e>
 80078ee:	f04f 0c00 	mov.w	ip, #0
 80078f2:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80078f6:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80078fa:	6022      	str	r2, [r4, #0]
 80078fc:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8007900:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8007904:	9300      	str	r3, [sp, #0]
 8007906:	463a      	mov	r2, r7
 8007908:	464b      	mov	r3, r9
 800790a:	4628      	mov	r0, r5
 800790c:	f7ff fd3a 	bl	8007384 <__cvt>
 8007910:	4607      	mov	r7, r0
 8007912:	e64f      	b.n	80075b4 <_printf_float+0x10c>

08007914 <_printf_common>:
 8007914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007918:	4691      	mov	r9, r2
 800791a:	461f      	mov	r7, r3
 800791c:	688a      	ldr	r2, [r1, #8]
 800791e:	690b      	ldr	r3, [r1, #16]
 8007920:	4606      	mov	r6, r0
 8007922:	4293      	cmp	r3, r2
 8007924:	bfb8      	it	lt
 8007926:	4613      	movlt	r3, r2
 8007928:	f8c9 3000 	str.w	r3, [r9]
 800792c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007930:	460c      	mov	r4, r1
 8007932:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007936:	b112      	cbz	r2, 800793e <_printf_common+0x2a>
 8007938:	3301      	adds	r3, #1
 800793a:	f8c9 3000 	str.w	r3, [r9]
 800793e:	6823      	ldr	r3, [r4, #0]
 8007940:	0699      	lsls	r1, r3, #26
 8007942:	bf42      	ittt	mi
 8007944:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007948:	3302      	addmi	r3, #2
 800794a:	f8c9 3000 	strmi.w	r3, [r9]
 800794e:	6825      	ldr	r5, [r4, #0]
 8007950:	f015 0506 	ands.w	r5, r5, #6
 8007954:	d107      	bne.n	8007966 <_printf_common+0x52>
 8007956:	f104 0a19 	add.w	sl, r4, #25
 800795a:	68e3      	ldr	r3, [r4, #12]
 800795c:	f8d9 2000 	ldr.w	r2, [r9]
 8007960:	1a9b      	subs	r3, r3, r2
 8007962:	42ab      	cmp	r3, r5
 8007964:	dc29      	bgt.n	80079ba <_printf_common+0xa6>
 8007966:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800796a:	6822      	ldr	r2, [r4, #0]
 800796c:	3300      	adds	r3, #0
 800796e:	bf18      	it	ne
 8007970:	2301      	movne	r3, #1
 8007972:	0692      	lsls	r2, r2, #26
 8007974:	d42e      	bmi.n	80079d4 <_printf_common+0xc0>
 8007976:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800797a:	4639      	mov	r1, r7
 800797c:	4630      	mov	r0, r6
 800797e:	47c0      	blx	r8
 8007980:	3001      	adds	r0, #1
 8007982:	d021      	beq.n	80079c8 <_printf_common+0xb4>
 8007984:	6823      	ldr	r3, [r4, #0]
 8007986:	68e5      	ldr	r5, [r4, #12]
 8007988:	f003 0306 	and.w	r3, r3, #6
 800798c:	2b04      	cmp	r3, #4
 800798e:	bf18      	it	ne
 8007990:	2500      	movne	r5, #0
 8007992:	f8d9 2000 	ldr.w	r2, [r9]
 8007996:	f04f 0900 	mov.w	r9, #0
 800799a:	bf08      	it	eq
 800799c:	1aad      	subeq	r5, r5, r2
 800799e:	68a3      	ldr	r3, [r4, #8]
 80079a0:	6922      	ldr	r2, [r4, #16]
 80079a2:	bf08      	it	eq
 80079a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079a8:	4293      	cmp	r3, r2
 80079aa:	bfc4      	itt	gt
 80079ac:	1a9b      	subgt	r3, r3, r2
 80079ae:	18ed      	addgt	r5, r5, r3
 80079b0:	341a      	adds	r4, #26
 80079b2:	454d      	cmp	r5, r9
 80079b4:	d11a      	bne.n	80079ec <_printf_common+0xd8>
 80079b6:	2000      	movs	r0, #0
 80079b8:	e008      	b.n	80079cc <_printf_common+0xb8>
 80079ba:	2301      	movs	r3, #1
 80079bc:	4652      	mov	r2, sl
 80079be:	4639      	mov	r1, r7
 80079c0:	4630      	mov	r0, r6
 80079c2:	47c0      	blx	r8
 80079c4:	3001      	adds	r0, #1
 80079c6:	d103      	bne.n	80079d0 <_printf_common+0xbc>
 80079c8:	f04f 30ff 	mov.w	r0, #4294967295
 80079cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079d0:	3501      	adds	r5, #1
 80079d2:	e7c2      	b.n	800795a <_printf_common+0x46>
 80079d4:	2030      	movs	r0, #48	; 0x30
 80079d6:	18e1      	adds	r1, r4, r3
 80079d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079dc:	1c5a      	adds	r2, r3, #1
 80079de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079e2:	4422      	add	r2, r4
 80079e4:	3302      	adds	r3, #2
 80079e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079ea:	e7c4      	b.n	8007976 <_printf_common+0x62>
 80079ec:	2301      	movs	r3, #1
 80079ee:	4622      	mov	r2, r4
 80079f0:	4639      	mov	r1, r7
 80079f2:	4630      	mov	r0, r6
 80079f4:	47c0      	blx	r8
 80079f6:	3001      	adds	r0, #1
 80079f8:	d0e6      	beq.n	80079c8 <_printf_common+0xb4>
 80079fa:	f109 0901 	add.w	r9, r9, #1
 80079fe:	e7d8      	b.n	80079b2 <_printf_common+0x9e>

08007a00 <_printf_i>:
 8007a00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a04:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007a08:	460c      	mov	r4, r1
 8007a0a:	7e09      	ldrb	r1, [r1, #24]
 8007a0c:	b085      	sub	sp, #20
 8007a0e:	296e      	cmp	r1, #110	; 0x6e
 8007a10:	4617      	mov	r7, r2
 8007a12:	4606      	mov	r6, r0
 8007a14:	4698      	mov	r8, r3
 8007a16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a18:	f000 80b3 	beq.w	8007b82 <_printf_i+0x182>
 8007a1c:	d822      	bhi.n	8007a64 <_printf_i+0x64>
 8007a1e:	2963      	cmp	r1, #99	; 0x63
 8007a20:	d036      	beq.n	8007a90 <_printf_i+0x90>
 8007a22:	d80a      	bhi.n	8007a3a <_printf_i+0x3a>
 8007a24:	2900      	cmp	r1, #0
 8007a26:	f000 80b9 	beq.w	8007b9c <_printf_i+0x19c>
 8007a2a:	2958      	cmp	r1, #88	; 0x58
 8007a2c:	f000 8083 	beq.w	8007b36 <_printf_i+0x136>
 8007a30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a34:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007a38:	e032      	b.n	8007aa0 <_printf_i+0xa0>
 8007a3a:	2964      	cmp	r1, #100	; 0x64
 8007a3c:	d001      	beq.n	8007a42 <_printf_i+0x42>
 8007a3e:	2969      	cmp	r1, #105	; 0x69
 8007a40:	d1f6      	bne.n	8007a30 <_printf_i+0x30>
 8007a42:	6820      	ldr	r0, [r4, #0]
 8007a44:	6813      	ldr	r3, [r2, #0]
 8007a46:	0605      	lsls	r5, r0, #24
 8007a48:	f103 0104 	add.w	r1, r3, #4
 8007a4c:	d52a      	bpl.n	8007aa4 <_printf_i+0xa4>
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6011      	str	r1, [r2, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	da03      	bge.n	8007a5e <_printf_i+0x5e>
 8007a56:	222d      	movs	r2, #45	; 0x2d
 8007a58:	425b      	negs	r3, r3
 8007a5a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007a5e:	486f      	ldr	r0, [pc, #444]	; (8007c1c <_printf_i+0x21c>)
 8007a60:	220a      	movs	r2, #10
 8007a62:	e039      	b.n	8007ad8 <_printf_i+0xd8>
 8007a64:	2973      	cmp	r1, #115	; 0x73
 8007a66:	f000 809d 	beq.w	8007ba4 <_printf_i+0x1a4>
 8007a6a:	d808      	bhi.n	8007a7e <_printf_i+0x7e>
 8007a6c:	296f      	cmp	r1, #111	; 0x6f
 8007a6e:	d020      	beq.n	8007ab2 <_printf_i+0xb2>
 8007a70:	2970      	cmp	r1, #112	; 0x70
 8007a72:	d1dd      	bne.n	8007a30 <_printf_i+0x30>
 8007a74:	6823      	ldr	r3, [r4, #0]
 8007a76:	f043 0320 	orr.w	r3, r3, #32
 8007a7a:	6023      	str	r3, [r4, #0]
 8007a7c:	e003      	b.n	8007a86 <_printf_i+0x86>
 8007a7e:	2975      	cmp	r1, #117	; 0x75
 8007a80:	d017      	beq.n	8007ab2 <_printf_i+0xb2>
 8007a82:	2978      	cmp	r1, #120	; 0x78
 8007a84:	d1d4      	bne.n	8007a30 <_printf_i+0x30>
 8007a86:	2378      	movs	r3, #120	; 0x78
 8007a88:	4865      	ldr	r0, [pc, #404]	; (8007c20 <_printf_i+0x220>)
 8007a8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a8e:	e055      	b.n	8007b3c <_printf_i+0x13c>
 8007a90:	6813      	ldr	r3, [r2, #0]
 8007a92:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a96:	1d19      	adds	r1, r3, #4
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	6011      	str	r1, [r2, #0]
 8007a9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e08c      	b.n	8007bbe <_printf_i+0x1be>
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007aaa:	6011      	str	r1, [r2, #0]
 8007aac:	bf18      	it	ne
 8007aae:	b21b      	sxthne	r3, r3
 8007ab0:	e7cf      	b.n	8007a52 <_printf_i+0x52>
 8007ab2:	6813      	ldr	r3, [r2, #0]
 8007ab4:	6825      	ldr	r5, [r4, #0]
 8007ab6:	1d18      	adds	r0, r3, #4
 8007ab8:	6010      	str	r0, [r2, #0]
 8007aba:	0628      	lsls	r0, r5, #24
 8007abc:	d501      	bpl.n	8007ac2 <_printf_i+0xc2>
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	e002      	b.n	8007ac8 <_printf_i+0xc8>
 8007ac2:	0668      	lsls	r0, r5, #25
 8007ac4:	d5fb      	bpl.n	8007abe <_printf_i+0xbe>
 8007ac6:	881b      	ldrh	r3, [r3, #0]
 8007ac8:	296f      	cmp	r1, #111	; 0x6f
 8007aca:	bf14      	ite	ne
 8007acc:	220a      	movne	r2, #10
 8007ace:	2208      	moveq	r2, #8
 8007ad0:	4852      	ldr	r0, [pc, #328]	; (8007c1c <_printf_i+0x21c>)
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ad8:	6865      	ldr	r5, [r4, #4]
 8007ada:	2d00      	cmp	r5, #0
 8007adc:	60a5      	str	r5, [r4, #8]
 8007ade:	f2c0 8095 	blt.w	8007c0c <_printf_i+0x20c>
 8007ae2:	6821      	ldr	r1, [r4, #0]
 8007ae4:	f021 0104 	bic.w	r1, r1, #4
 8007ae8:	6021      	str	r1, [r4, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d13d      	bne.n	8007b6a <_printf_i+0x16a>
 8007aee:	2d00      	cmp	r5, #0
 8007af0:	f040 808e 	bne.w	8007c10 <_printf_i+0x210>
 8007af4:	4665      	mov	r5, ip
 8007af6:	2a08      	cmp	r2, #8
 8007af8:	d10b      	bne.n	8007b12 <_printf_i+0x112>
 8007afa:	6823      	ldr	r3, [r4, #0]
 8007afc:	07db      	lsls	r3, r3, #31
 8007afe:	d508      	bpl.n	8007b12 <_printf_i+0x112>
 8007b00:	6923      	ldr	r3, [r4, #16]
 8007b02:	6862      	ldr	r2, [r4, #4]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	bfde      	ittt	le
 8007b08:	2330      	movle	r3, #48	; 0x30
 8007b0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b0e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b12:	ebac 0305 	sub.w	r3, ip, r5
 8007b16:	6123      	str	r3, [r4, #16]
 8007b18:	f8cd 8000 	str.w	r8, [sp]
 8007b1c:	463b      	mov	r3, r7
 8007b1e:	aa03      	add	r2, sp, #12
 8007b20:	4621      	mov	r1, r4
 8007b22:	4630      	mov	r0, r6
 8007b24:	f7ff fef6 	bl	8007914 <_printf_common>
 8007b28:	3001      	adds	r0, #1
 8007b2a:	d14d      	bne.n	8007bc8 <_printf_i+0x1c8>
 8007b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b30:	b005      	add	sp, #20
 8007b32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b36:	4839      	ldr	r0, [pc, #228]	; (8007c1c <_printf_i+0x21c>)
 8007b38:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007b3c:	6813      	ldr	r3, [r2, #0]
 8007b3e:	6821      	ldr	r1, [r4, #0]
 8007b40:	1d1d      	adds	r5, r3, #4
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	6015      	str	r5, [r2, #0]
 8007b46:	060a      	lsls	r2, r1, #24
 8007b48:	d50b      	bpl.n	8007b62 <_printf_i+0x162>
 8007b4a:	07ca      	lsls	r2, r1, #31
 8007b4c:	bf44      	itt	mi
 8007b4e:	f041 0120 	orrmi.w	r1, r1, #32
 8007b52:	6021      	strmi	r1, [r4, #0]
 8007b54:	b91b      	cbnz	r3, 8007b5e <_printf_i+0x15e>
 8007b56:	6822      	ldr	r2, [r4, #0]
 8007b58:	f022 0220 	bic.w	r2, r2, #32
 8007b5c:	6022      	str	r2, [r4, #0]
 8007b5e:	2210      	movs	r2, #16
 8007b60:	e7b7      	b.n	8007ad2 <_printf_i+0xd2>
 8007b62:	064d      	lsls	r5, r1, #25
 8007b64:	bf48      	it	mi
 8007b66:	b29b      	uxthmi	r3, r3
 8007b68:	e7ef      	b.n	8007b4a <_printf_i+0x14a>
 8007b6a:	4665      	mov	r5, ip
 8007b6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b70:	fb02 3311 	mls	r3, r2, r1, r3
 8007b74:	5cc3      	ldrb	r3, [r0, r3]
 8007b76:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	2900      	cmp	r1, #0
 8007b7e:	d1f5      	bne.n	8007b6c <_printf_i+0x16c>
 8007b80:	e7b9      	b.n	8007af6 <_printf_i+0xf6>
 8007b82:	6813      	ldr	r3, [r2, #0]
 8007b84:	6825      	ldr	r5, [r4, #0]
 8007b86:	1d18      	adds	r0, r3, #4
 8007b88:	6961      	ldr	r1, [r4, #20]
 8007b8a:	6010      	str	r0, [r2, #0]
 8007b8c:	0628      	lsls	r0, r5, #24
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	d501      	bpl.n	8007b96 <_printf_i+0x196>
 8007b92:	6019      	str	r1, [r3, #0]
 8007b94:	e002      	b.n	8007b9c <_printf_i+0x19c>
 8007b96:	066a      	lsls	r2, r5, #25
 8007b98:	d5fb      	bpl.n	8007b92 <_printf_i+0x192>
 8007b9a:	8019      	strh	r1, [r3, #0]
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	4665      	mov	r5, ip
 8007ba0:	6123      	str	r3, [r4, #16]
 8007ba2:	e7b9      	b.n	8007b18 <_printf_i+0x118>
 8007ba4:	6813      	ldr	r3, [r2, #0]
 8007ba6:	1d19      	adds	r1, r3, #4
 8007ba8:	6011      	str	r1, [r2, #0]
 8007baa:	681d      	ldr	r5, [r3, #0]
 8007bac:	6862      	ldr	r2, [r4, #4]
 8007bae:	2100      	movs	r1, #0
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	f001 f9a9 	bl	8008f08 <memchr>
 8007bb6:	b108      	cbz	r0, 8007bbc <_printf_i+0x1bc>
 8007bb8:	1b40      	subs	r0, r0, r5
 8007bba:	6060      	str	r0, [r4, #4]
 8007bbc:	6863      	ldr	r3, [r4, #4]
 8007bbe:	6123      	str	r3, [r4, #16]
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bc6:	e7a7      	b.n	8007b18 <_printf_i+0x118>
 8007bc8:	6923      	ldr	r3, [r4, #16]
 8007bca:	462a      	mov	r2, r5
 8007bcc:	4639      	mov	r1, r7
 8007bce:	4630      	mov	r0, r6
 8007bd0:	47c0      	blx	r8
 8007bd2:	3001      	adds	r0, #1
 8007bd4:	d0aa      	beq.n	8007b2c <_printf_i+0x12c>
 8007bd6:	6823      	ldr	r3, [r4, #0]
 8007bd8:	079b      	lsls	r3, r3, #30
 8007bda:	d413      	bmi.n	8007c04 <_printf_i+0x204>
 8007bdc:	68e0      	ldr	r0, [r4, #12]
 8007bde:	9b03      	ldr	r3, [sp, #12]
 8007be0:	4298      	cmp	r0, r3
 8007be2:	bfb8      	it	lt
 8007be4:	4618      	movlt	r0, r3
 8007be6:	e7a3      	b.n	8007b30 <_printf_i+0x130>
 8007be8:	2301      	movs	r3, #1
 8007bea:	464a      	mov	r2, r9
 8007bec:	4639      	mov	r1, r7
 8007bee:	4630      	mov	r0, r6
 8007bf0:	47c0      	blx	r8
 8007bf2:	3001      	adds	r0, #1
 8007bf4:	d09a      	beq.n	8007b2c <_printf_i+0x12c>
 8007bf6:	3501      	adds	r5, #1
 8007bf8:	68e3      	ldr	r3, [r4, #12]
 8007bfa:	9a03      	ldr	r2, [sp, #12]
 8007bfc:	1a9b      	subs	r3, r3, r2
 8007bfe:	42ab      	cmp	r3, r5
 8007c00:	dcf2      	bgt.n	8007be8 <_printf_i+0x1e8>
 8007c02:	e7eb      	b.n	8007bdc <_printf_i+0x1dc>
 8007c04:	2500      	movs	r5, #0
 8007c06:	f104 0919 	add.w	r9, r4, #25
 8007c0a:	e7f5      	b.n	8007bf8 <_printf_i+0x1f8>
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d1ac      	bne.n	8007b6a <_printf_i+0x16a>
 8007c10:	7803      	ldrb	r3, [r0, #0]
 8007c12:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c1a:	e76c      	b.n	8007af6 <_printf_i+0xf6>
 8007c1c:	08009c66 	.word	0x08009c66
 8007c20:	08009c77 	.word	0x08009c77

08007c24 <iprintf>:
 8007c24:	b40f      	push	{r0, r1, r2, r3}
 8007c26:	4b0a      	ldr	r3, [pc, #40]	; (8007c50 <iprintf+0x2c>)
 8007c28:	b513      	push	{r0, r1, r4, lr}
 8007c2a:	681c      	ldr	r4, [r3, #0]
 8007c2c:	b124      	cbz	r4, 8007c38 <iprintf+0x14>
 8007c2e:	69a3      	ldr	r3, [r4, #24]
 8007c30:	b913      	cbnz	r3, 8007c38 <iprintf+0x14>
 8007c32:	4620      	mov	r0, r4
 8007c34:	f001 f864 	bl	8008d00 <__sinit>
 8007c38:	ab05      	add	r3, sp, #20
 8007c3a:	9a04      	ldr	r2, [sp, #16]
 8007c3c:	68a1      	ldr	r1, [r4, #8]
 8007c3e:	4620      	mov	r0, r4
 8007c40:	9301      	str	r3, [sp, #4]
 8007c42:	f001 fd33 	bl	80096ac <_vfiprintf_r>
 8007c46:	b002      	add	sp, #8
 8007c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c4c:	b004      	add	sp, #16
 8007c4e:	4770      	bx	lr
 8007c50:	20000024 	.word	0x20000024

08007c54 <_puts_r>:
 8007c54:	b570      	push	{r4, r5, r6, lr}
 8007c56:	460e      	mov	r6, r1
 8007c58:	4605      	mov	r5, r0
 8007c5a:	b118      	cbz	r0, 8007c64 <_puts_r+0x10>
 8007c5c:	6983      	ldr	r3, [r0, #24]
 8007c5e:	b90b      	cbnz	r3, 8007c64 <_puts_r+0x10>
 8007c60:	f001 f84e 	bl	8008d00 <__sinit>
 8007c64:	69ab      	ldr	r3, [r5, #24]
 8007c66:	68ac      	ldr	r4, [r5, #8]
 8007c68:	b913      	cbnz	r3, 8007c70 <_puts_r+0x1c>
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	f001 f848 	bl	8008d00 <__sinit>
 8007c70:	4b23      	ldr	r3, [pc, #140]	; (8007d00 <_puts_r+0xac>)
 8007c72:	429c      	cmp	r4, r3
 8007c74:	d117      	bne.n	8007ca6 <_puts_r+0x52>
 8007c76:	686c      	ldr	r4, [r5, #4]
 8007c78:	89a3      	ldrh	r3, [r4, #12]
 8007c7a:	071b      	lsls	r3, r3, #28
 8007c7c:	d51d      	bpl.n	8007cba <_puts_r+0x66>
 8007c7e:	6923      	ldr	r3, [r4, #16]
 8007c80:	b1db      	cbz	r3, 8007cba <_puts_r+0x66>
 8007c82:	3e01      	subs	r6, #1
 8007c84:	68a3      	ldr	r3, [r4, #8]
 8007c86:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007c8a:	3b01      	subs	r3, #1
 8007c8c:	60a3      	str	r3, [r4, #8]
 8007c8e:	b9e9      	cbnz	r1, 8007ccc <_puts_r+0x78>
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	da2e      	bge.n	8007cf2 <_puts_r+0x9e>
 8007c94:	4622      	mov	r2, r4
 8007c96:	210a      	movs	r1, #10
 8007c98:	4628      	mov	r0, r5
 8007c9a:	f000 f83f 	bl	8007d1c <__swbuf_r>
 8007c9e:	3001      	adds	r0, #1
 8007ca0:	d011      	beq.n	8007cc6 <_puts_r+0x72>
 8007ca2:	200a      	movs	r0, #10
 8007ca4:	e011      	b.n	8007cca <_puts_r+0x76>
 8007ca6:	4b17      	ldr	r3, [pc, #92]	; (8007d04 <_puts_r+0xb0>)
 8007ca8:	429c      	cmp	r4, r3
 8007caa:	d101      	bne.n	8007cb0 <_puts_r+0x5c>
 8007cac:	68ac      	ldr	r4, [r5, #8]
 8007cae:	e7e3      	b.n	8007c78 <_puts_r+0x24>
 8007cb0:	4b15      	ldr	r3, [pc, #84]	; (8007d08 <_puts_r+0xb4>)
 8007cb2:	429c      	cmp	r4, r3
 8007cb4:	bf08      	it	eq
 8007cb6:	68ec      	ldreq	r4, [r5, #12]
 8007cb8:	e7de      	b.n	8007c78 <_puts_r+0x24>
 8007cba:	4621      	mov	r1, r4
 8007cbc:	4628      	mov	r0, r5
 8007cbe:	f000 f87f 	bl	8007dc0 <__swsetup_r>
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	d0dd      	beq.n	8007c82 <_puts_r+0x2e>
 8007cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8007cca:	bd70      	pop	{r4, r5, r6, pc}
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	da04      	bge.n	8007cda <_puts_r+0x86>
 8007cd0:	69a2      	ldr	r2, [r4, #24]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	dc06      	bgt.n	8007ce4 <_puts_r+0x90>
 8007cd6:	290a      	cmp	r1, #10
 8007cd8:	d004      	beq.n	8007ce4 <_puts_r+0x90>
 8007cda:	6823      	ldr	r3, [r4, #0]
 8007cdc:	1c5a      	adds	r2, r3, #1
 8007cde:	6022      	str	r2, [r4, #0]
 8007ce0:	7019      	strb	r1, [r3, #0]
 8007ce2:	e7cf      	b.n	8007c84 <_puts_r+0x30>
 8007ce4:	4622      	mov	r2, r4
 8007ce6:	4628      	mov	r0, r5
 8007ce8:	f000 f818 	bl	8007d1c <__swbuf_r>
 8007cec:	3001      	adds	r0, #1
 8007cee:	d1c9      	bne.n	8007c84 <_puts_r+0x30>
 8007cf0:	e7e9      	b.n	8007cc6 <_puts_r+0x72>
 8007cf2:	200a      	movs	r0, #10
 8007cf4:	6823      	ldr	r3, [r4, #0]
 8007cf6:	1c5a      	adds	r2, r3, #1
 8007cf8:	6022      	str	r2, [r4, #0]
 8007cfa:	7018      	strb	r0, [r3, #0]
 8007cfc:	e7e5      	b.n	8007cca <_puts_r+0x76>
 8007cfe:	bf00      	nop
 8007d00:	08009cb8 	.word	0x08009cb8
 8007d04:	08009cd8 	.word	0x08009cd8
 8007d08:	08009c98 	.word	0x08009c98

08007d0c <puts>:
 8007d0c:	4b02      	ldr	r3, [pc, #8]	; (8007d18 <puts+0xc>)
 8007d0e:	4601      	mov	r1, r0
 8007d10:	6818      	ldr	r0, [r3, #0]
 8007d12:	f7ff bf9f 	b.w	8007c54 <_puts_r>
 8007d16:	bf00      	nop
 8007d18:	20000024 	.word	0x20000024

08007d1c <__swbuf_r>:
 8007d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d1e:	460e      	mov	r6, r1
 8007d20:	4614      	mov	r4, r2
 8007d22:	4605      	mov	r5, r0
 8007d24:	b118      	cbz	r0, 8007d2e <__swbuf_r+0x12>
 8007d26:	6983      	ldr	r3, [r0, #24]
 8007d28:	b90b      	cbnz	r3, 8007d2e <__swbuf_r+0x12>
 8007d2a:	f000 ffe9 	bl	8008d00 <__sinit>
 8007d2e:	4b21      	ldr	r3, [pc, #132]	; (8007db4 <__swbuf_r+0x98>)
 8007d30:	429c      	cmp	r4, r3
 8007d32:	d12a      	bne.n	8007d8a <__swbuf_r+0x6e>
 8007d34:	686c      	ldr	r4, [r5, #4]
 8007d36:	69a3      	ldr	r3, [r4, #24]
 8007d38:	60a3      	str	r3, [r4, #8]
 8007d3a:	89a3      	ldrh	r3, [r4, #12]
 8007d3c:	071a      	lsls	r2, r3, #28
 8007d3e:	d52e      	bpl.n	8007d9e <__swbuf_r+0x82>
 8007d40:	6923      	ldr	r3, [r4, #16]
 8007d42:	b363      	cbz	r3, 8007d9e <__swbuf_r+0x82>
 8007d44:	6923      	ldr	r3, [r4, #16]
 8007d46:	6820      	ldr	r0, [r4, #0]
 8007d48:	b2f6      	uxtb	r6, r6
 8007d4a:	1ac0      	subs	r0, r0, r3
 8007d4c:	6963      	ldr	r3, [r4, #20]
 8007d4e:	4637      	mov	r7, r6
 8007d50:	4283      	cmp	r3, r0
 8007d52:	dc04      	bgt.n	8007d5e <__swbuf_r+0x42>
 8007d54:	4621      	mov	r1, r4
 8007d56:	4628      	mov	r0, r5
 8007d58:	f000 ff68 	bl	8008c2c <_fflush_r>
 8007d5c:	bb28      	cbnz	r0, 8007daa <__swbuf_r+0x8e>
 8007d5e:	68a3      	ldr	r3, [r4, #8]
 8007d60:	3001      	adds	r0, #1
 8007d62:	3b01      	subs	r3, #1
 8007d64:	60a3      	str	r3, [r4, #8]
 8007d66:	6823      	ldr	r3, [r4, #0]
 8007d68:	1c5a      	adds	r2, r3, #1
 8007d6a:	6022      	str	r2, [r4, #0]
 8007d6c:	701e      	strb	r6, [r3, #0]
 8007d6e:	6963      	ldr	r3, [r4, #20]
 8007d70:	4283      	cmp	r3, r0
 8007d72:	d004      	beq.n	8007d7e <__swbuf_r+0x62>
 8007d74:	89a3      	ldrh	r3, [r4, #12]
 8007d76:	07db      	lsls	r3, r3, #31
 8007d78:	d519      	bpl.n	8007dae <__swbuf_r+0x92>
 8007d7a:	2e0a      	cmp	r6, #10
 8007d7c:	d117      	bne.n	8007dae <__swbuf_r+0x92>
 8007d7e:	4621      	mov	r1, r4
 8007d80:	4628      	mov	r0, r5
 8007d82:	f000 ff53 	bl	8008c2c <_fflush_r>
 8007d86:	b190      	cbz	r0, 8007dae <__swbuf_r+0x92>
 8007d88:	e00f      	b.n	8007daa <__swbuf_r+0x8e>
 8007d8a:	4b0b      	ldr	r3, [pc, #44]	; (8007db8 <__swbuf_r+0x9c>)
 8007d8c:	429c      	cmp	r4, r3
 8007d8e:	d101      	bne.n	8007d94 <__swbuf_r+0x78>
 8007d90:	68ac      	ldr	r4, [r5, #8]
 8007d92:	e7d0      	b.n	8007d36 <__swbuf_r+0x1a>
 8007d94:	4b09      	ldr	r3, [pc, #36]	; (8007dbc <__swbuf_r+0xa0>)
 8007d96:	429c      	cmp	r4, r3
 8007d98:	bf08      	it	eq
 8007d9a:	68ec      	ldreq	r4, [r5, #12]
 8007d9c:	e7cb      	b.n	8007d36 <__swbuf_r+0x1a>
 8007d9e:	4621      	mov	r1, r4
 8007da0:	4628      	mov	r0, r5
 8007da2:	f000 f80d 	bl	8007dc0 <__swsetup_r>
 8007da6:	2800      	cmp	r0, #0
 8007da8:	d0cc      	beq.n	8007d44 <__swbuf_r+0x28>
 8007daa:	f04f 37ff 	mov.w	r7, #4294967295
 8007dae:	4638      	mov	r0, r7
 8007db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007db2:	bf00      	nop
 8007db4:	08009cb8 	.word	0x08009cb8
 8007db8:	08009cd8 	.word	0x08009cd8
 8007dbc:	08009c98 	.word	0x08009c98

08007dc0 <__swsetup_r>:
 8007dc0:	4b32      	ldr	r3, [pc, #200]	; (8007e8c <__swsetup_r+0xcc>)
 8007dc2:	b570      	push	{r4, r5, r6, lr}
 8007dc4:	681d      	ldr	r5, [r3, #0]
 8007dc6:	4606      	mov	r6, r0
 8007dc8:	460c      	mov	r4, r1
 8007dca:	b125      	cbz	r5, 8007dd6 <__swsetup_r+0x16>
 8007dcc:	69ab      	ldr	r3, [r5, #24]
 8007dce:	b913      	cbnz	r3, 8007dd6 <__swsetup_r+0x16>
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	f000 ff95 	bl	8008d00 <__sinit>
 8007dd6:	4b2e      	ldr	r3, [pc, #184]	; (8007e90 <__swsetup_r+0xd0>)
 8007dd8:	429c      	cmp	r4, r3
 8007dda:	d10f      	bne.n	8007dfc <__swsetup_r+0x3c>
 8007ddc:	686c      	ldr	r4, [r5, #4]
 8007dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	0715      	lsls	r5, r2, #28
 8007de6:	d42c      	bmi.n	8007e42 <__swsetup_r+0x82>
 8007de8:	06d0      	lsls	r0, r2, #27
 8007dea:	d411      	bmi.n	8007e10 <__swsetup_r+0x50>
 8007dec:	2209      	movs	r2, #9
 8007dee:	6032      	str	r2, [r6, #0]
 8007df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007df4:	81a3      	strh	r3, [r4, #12]
 8007df6:	f04f 30ff 	mov.w	r0, #4294967295
 8007dfa:	e03e      	b.n	8007e7a <__swsetup_r+0xba>
 8007dfc:	4b25      	ldr	r3, [pc, #148]	; (8007e94 <__swsetup_r+0xd4>)
 8007dfe:	429c      	cmp	r4, r3
 8007e00:	d101      	bne.n	8007e06 <__swsetup_r+0x46>
 8007e02:	68ac      	ldr	r4, [r5, #8]
 8007e04:	e7eb      	b.n	8007dde <__swsetup_r+0x1e>
 8007e06:	4b24      	ldr	r3, [pc, #144]	; (8007e98 <__swsetup_r+0xd8>)
 8007e08:	429c      	cmp	r4, r3
 8007e0a:	bf08      	it	eq
 8007e0c:	68ec      	ldreq	r4, [r5, #12]
 8007e0e:	e7e6      	b.n	8007dde <__swsetup_r+0x1e>
 8007e10:	0751      	lsls	r1, r2, #29
 8007e12:	d512      	bpl.n	8007e3a <__swsetup_r+0x7a>
 8007e14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e16:	b141      	cbz	r1, 8007e2a <__swsetup_r+0x6a>
 8007e18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e1c:	4299      	cmp	r1, r3
 8007e1e:	d002      	beq.n	8007e26 <__swsetup_r+0x66>
 8007e20:	4630      	mov	r0, r6
 8007e22:	f001 fb75 	bl	8009510 <_free_r>
 8007e26:	2300      	movs	r3, #0
 8007e28:	6363      	str	r3, [r4, #52]	; 0x34
 8007e2a:	89a3      	ldrh	r3, [r4, #12]
 8007e2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e30:	81a3      	strh	r3, [r4, #12]
 8007e32:	2300      	movs	r3, #0
 8007e34:	6063      	str	r3, [r4, #4]
 8007e36:	6923      	ldr	r3, [r4, #16]
 8007e38:	6023      	str	r3, [r4, #0]
 8007e3a:	89a3      	ldrh	r3, [r4, #12]
 8007e3c:	f043 0308 	orr.w	r3, r3, #8
 8007e40:	81a3      	strh	r3, [r4, #12]
 8007e42:	6923      	ldr	r3, [r4, #16]
 8007e44:	b94b      	cbnz	r3, 8007e5a <__swsetup_r+0x9a>
 8007e46:	89a3      	ldrh	r3, [r4, #12]
 8007e48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e50:	d003      	beq.n	8007e5a <__swsetup_r+0x9a>
 8007e52:	4621      	mov	r1, r4
 8007e54:	4630      	mov	r0, r6
 8007e56:	f001 f80f 	bl	8008e78 <__smakebuf_r>
 8007e5a:	89a2      	ldrh	r2, [r4, #12]
 8007e5c:	f012 0301 	ands.w	r3, r2, #1
 8007e60:	d00c      	beq.n	8007e7c <__swsetup_r+0xbc>
 8007e62:	2300      	movs	r3, #0
 8007e64:	60a3      	str	r3, [r4, #8]
 8007e66:	6963      	ldr	r3, [r4, #20]
 8007e68:	425b      	negs	r3, r3
 8007e6a:	61a3      	str	r3, [r4, #24]
 8007e6c:	6923      	ldr	r3, [r4, #16]
 8007e6e:	b953      	cbnz	r3, 8007e86 <__swsetup_r+0xc6>
 8007e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e74:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007e78:	d1ba      	bne.n	8007df0 <__swsetup_r+0x30>
 8007e7a:	bd70      	pop	{r4, r5, r6, pc}
 8007e7c:	0792      	lsls	r2, r2, #30
 8007e7e:	bf58      	it	pl
 8007e80:	6963      	ldrpl	r3, [r4, #20]
 8007e82:	60a3      	str	r3, [r4, #8]
 8007e84:	e7f2      	b.n	8007e6c <__swsetup_r+0xac>
 8007e86:	2000      	movs	r0, #0
 8007e88:	e7f7      	b.n	8007e7a <__swsetup_r+0xba>
 8007e8a:	bf00      	nop
 8007e8c:	20000024 	.word	0x20000024
 8007e90:	08009cb8 	.word	0x08009cb8
 8007e94:	08009cd8 	.word	0x08009cd8
 8007e98:	08009c98 	.word	0x08009c98

08007e9c <quorem>:
 8007e9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea0:	6903      	ldr	r3, [r0, #16]
 8007ea2:	690c      	ldr	r4, [r1, #16]
 8007ea4:	4680      	mov	r8, r0
 8007ea6:	42a3      	cmp	r3, r4
 8007ea8:	f2c0 8084 	blt.w	8007fb4 <quorem+0x118>
 8007eac:	3c01      	subs	r4, #1
 8007eae:	f101 0714 	add.w	r7, r1, #20
 8007eb2:	f100 0614 	add.w	r6, r0, #20
 8007eb6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007eba:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007ebe:	3501      	adds	r5, #1
 8007ec0:	fbb0 f5f5 	udiv	r5, r0, r5
 8007ec4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007ec8:	eb06 030c 	add.w	r3, r6, ip
 8007ecc:	eb07 090c 	add.w	r9, r7, ip
 8007ed0:	9301      	str	r3, [sp, #4]
 8007ed2:	b39d      	cbz	r5, 8007f3c <quorem+0xa0>
 8007ed4:	f04f 0a00 	mov.w	sl, #0
 8007ed8:	4638      	mov	r0, r7
 8007eda:	46b6      	mov	lr, r6
 8007edc:	46d3      	mov	fp, sl
 8007ede:	f850 2b04 	ldr.w	r2, [r0], #4
 8007ee2:	b293      	uxth	r3, r2
 8007ee4:	fb05 a303 	mla	r3, r5, r3, sl
 8007ee8:	0c12      	lsrs	r2, r2, #16
 8007eea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007eee:	fb05 a202 	mla	r2, r5, r2, sl
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	ebab 0303 	sub.w	r3, fp, r3
 8007ef8:	f8de b000 	ldr.w	fp, [lr]
 8007efc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007f00:	fa1f fb8b 	uxth.w	fp, fp
 8007f04:	445b      	add	r3, fp
 8007f06:	fa1f fb82 	uxth.w	fp, r2
 8007f0a:	f8de 2000 	ldr.w	r2, [lr]
 8007f0e:	4581      	cmp	r9, r0
 8007f10:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007f14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f1e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007f22:	f84e 3b04 	str.w	r3, [lr], #4
 8007f26:	d2da      	bcs.n	8007ede <quorem+0x42>
 8007f28:	f856 300c 	ldr.w	r3, [r6, ip]
 8007f2c:	b933      	cbnz	r3, 8007f3c <quorem+0xa0>
 8007f2e:	9b01      	ldr	r3, [sp, #4]
 8007f30:	3b04      	subs	r3, #4
 8007f32:	429e      	cmp	r6, r3
 8007f34:	461a      	mov	r2, r3
 8007f36:	d331      	bcc.n	8007f9c <quorem+0x100>
 8007f38:	f8c8 4010 	str.w	r4, [r8, #16]
 8007f3c:	4640      	mov	r0, r8
 8007f3e:	f001 fa11 	bl	8009364 <__mcmp>
 8007f42:	2800      	cmp	r0, #0
 8007f44:	db26      	blt.n	8007f94 <quorem+0xf8>
 8007f46:	4630      	mov	r0, r6
 8007f48:	f04f 0c00 	mov.w	ip, #0
 8007f4c:	3501      	adds	r5, #1
 8007f4e:	f857 1b04 	ldr.w	r1, [r7], #4
 8007f52:	f8d0 e000 	ldr.w	lr, [r0]
 8007f56:	b28b      	uxth	r3, r1
 8007f58:	ebac 0303 	sub.w	r3, ip, r3
 8007f5c:	fa1f f28e 	uxth.w	r2, lr
 8007f60:	4413      	add	r3, r2
 8007f62:	0c0a      	lsrs	r2, r1, #16
 8007f64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f72:	45b9      	cmp	r9, r7
 8007f74:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f78:	f840 3b04 	str.w	r3, [r0], #4
 8007f7c:	d2e7      	bcs.n	8007f4e <quorem+0xb2>
 8007f7e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007f82:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007f86:	b92a      	cbnz	r2, 8007f94 <quorem+0xf8>
 8007f88:	3b04      	subs	r3, #4
 8007f8a:	429e      	cmp	r6, r3
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	d30b      	bcc.n	8007fa8 <quorem+0x10c>
 8007f90:	f8c8 4010 	str.w	r4, [r8, #16]
 8007f94:	4628      	mov	r0, r5
 8007f96:	b003      	add	sp, #12
 8007f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f9c:	6812      	ldr	r2, [r2, #0]
 8007f9e:	3b04      	subs	r3, #4
 8007fa0:	2a00      	cmp	r2, #0
 8007fa2:	d1c9      	bne.n	8007f38 <quorem+0x9c>
 8007fa4:	3c01      	subs	r4, #1
 8007fa6:	e7c4      	b.n	8007f32 <quorem+0x96>
 8007fa8:	6812      	ldr	r2, [r2, #0]
 8007faa:	3b04      	subs	r3, #4
 8007fac:	2a00      	cmp	r2, #0
 8007fae:	d1ef      	bne.n	8007f90 <quorem+0xf4>
 8007fb0:	3c01      	subs	r4, #1
 8007fb2:	e7ea      	b.n	8007f8a <quorem+0xee>
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	e7ee      	b.n	8007f96 <quorem+0xfa>

08007fb8 <_dtoa_r>:
 8007fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fbc:	4616      	mov	r6, r2
 8007fbe:	461f      	mov	r7, r3
 8007fc0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007fc2:	b095      	sub	sp, #84	; 0x54
 8007fc4:	4604      	mov	r4, r0
 8007fc6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8007fca:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007fce:	b93d      	cbnz	r5, 8007fe0 <_dtoa_r+0x28>
 8007fd0:	2010      	movs	r0, #16
 8007fd2:	f000 ff91 	bl	8008ef8 <malloc>
 8007fd6:	6260      	str	r0, [r4, #36]	; 0x24
 8007fd8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007fdc:	6005      	str	r5, [r0, #0]
 8007fde:	60c5      	str	r5, [r0, #12]
 8007fe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fe2:	6819      	ldr	r1, [r3, #0]
 8007fe4:	b151      	cbz	r1, 8007ffc <_dtoa_r+0x44>
 8007fe6:	685a      	ldr	r2, [r3, #4]
 8007fe8:	2301      	movs	r3, #1
 8007fea:	4093      	lsls	r3, r2
 8007fec:	604a      	str	r2, [r1, #4]
 8007fee:	608b      	str	r3, [r1, #8]
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	f000 ffd6 	bl	8008fa2 <_Bfree>
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ffa:	601a      	str	r2, [r3, #0]
 8007ffc:	1e3b      	subs	r3, r7, #0
 8007ffe:	bfaf      	iteee	ge
 8008000:	2300      	movge	r3, #0
 8008002:	2201      	movlt	r2, #1
 8008004:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008008:	9303      	strlt	r3, [sp, #12]
 800800a:	bfac      	ite	ge
 800800c:	f8c8 3000 	strge.w	r3, [r8]
 8008010:	f8c8 2000 	strlt.w	r2, [r8]
 8008014:	4bae      	ldr	r3, [pc, #696]	; (80082d0 <_dtoa_r+0x318>)
 8008016:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800801a:	ea33 0308 	bics.w	r3, r3, r8
 800801e:	d11b      	bne.n	8008058 <_dtoa_r+0xa0>
 8008020:	f242 730f 	movw	r3, #9999	; 0x270f
 8008024:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008026:	6013      	str	r3, [r2, #0]
 8008028:	9b02      	ldr	r3, [sp, #8]
 800802a:	b923      	cbnz	r3, 8008036 <_dtoa_r+0x7e>
 800802c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008030:	2800      	cmp	r0, #0
 8008032:	f000 8545 	beq.w	8008ac0 <_dtoa_r+0xb08>
 8008036:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008038:	b953      	cbnz	r3, 8008050 <_dtoa_r+0x98>
 800803a:	4ba6      	ldr	r3, [pc, #664]	; (80082d4 <_dtoa_r+0x31c>)
 800803c:	e021      	b.n	8008082 <_dtoa_r+0xca>
 800803e:	4ba6      	ldr	r3, [pc, #664]	; (80082d8 <_dtoa_r+0x320>)
 8008040:	9306      	str	r3, [sp, #24]
 8008042:	3308      	adds	r3, #8
 8008044:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008046:	6013      	str	r3, [r2, #0]
 8008048:	9806      	ldr	r0, [sp, #24]
 800804a:	b015      	add	sp, #84	; 0x54
 800804c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008050:	4ba0      	ldr	r3, [pc, #640]	; (80082d4 <_dtoa_r+0x31c>)
 8008052:	9306      	str	r3, [sp, #24]
 8008054:	3303      	adds	r3, #3
 8008056:	e7f5      	b.n	8008044 <_dtoa_r+0x8c>
 8008058:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800805c:	2200      	movs	r2, #0
 800805e:	2300      	movs	r3, #0
 8008060:	4630      	mov	r0, r6
 8008062:	4639      	mov	r1, r7
 8008064:	f7f8 fca0 	bl	80009a8 <__aeabi_dcmpeq>
 8008068:	4682      	mov	sl, r0
 800806a:	b160      	cbz	r0, 8008086 <_dtoa_r+0xce>
 800806c:	2301      	movs	r3, #1
 800806e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008070:	6013      	str	r3, [r2, #0]
 8008072:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008074:	2b00      	cmp	r3, #0
 8008076:	f000 8520 	beq.w	8008aba <_dtoa_r+0xb02>
 800807a:	4b98      	ldr	r3, [pc, #608]	; (80082dc <_dtoa_r+0x324>)
 800807c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800807e:	6013      	str	r3, [r2, #0]
 8008080:	3b01      	subs	r3, #1
 8008082:	9306      	str	r3, [sp, #24]
 8008084:	e7e0      	b.n	8008048 <_dtoa_r+0x90>
 8008086:	ab12      	add	r3, sp, #72	; 0x48
 8008088:	9301      	str	r3, [sp, #4]
 800808a:	ab13      	add	r3, sp, #76	; 0x4c
 800808c:	9300      	str	r3, [sp, #0]
 800808e:	4632      	mov	r2, r6
 8008090:	463b      	mov	r3, r7
 8008092:	4620      	mov	r0, r4
 8008094:	f001 f9de 	bl	8009454 <__d2b>
 8008098:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800809c:	4683      	mov	fp, r0
 800809e:	2d00      	cmp	r5, #0
 80080a0:	d07d      	beq.n	800819e <_dtoa_r+0x1e6>
 80080a2:	46b0      	mov	r8, r6
 80080a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80080a8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80080ac:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80080b0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80080b4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80080b8:	2200      	movs	r2, #0
 80080ba:	4b89      	ldr	r3, [pc, #548]	; (80082e0 <_dtoa_r+0x328>)
 80080bc:	4640      	mov	r0, r8
 80080be:	4649      	mov	r1, r9
 80080c0:	f7f8 f852 	bl	8000168 <__aeabi_dsub>
 80080c4:	a37c      	add	r3, pc, #496	; (adr r3, 80082b8 <_dtoa_r+0x300>)
 80080c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ca:	f7f8 fa05 	bl	80004d8 <__aeabi_dmul>
 80080ce:	a37c      	add	r3, pc, #496	; (adr r3, 80082c0 <_dtoa_r+0x308>)
 80080d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d4:	f7f8 f84a 	bl	800016c <__adddf3>
 80080d8:	4606      	mov	r6, r0
 80080da:	4628      	mov	r0, r5
 80080dc:	460f      	mov	r7, r1
 80080de:	f7f8 f991 	bl	8000404 <__aeabi_i2d>
 80080e2:	a379      	add	r3, pc, #484	; (adr r3, 80082c8 <_dtoa_r+0x310>)
 80080e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e8:	f7f8 f9f6 	bl	80004d8 <__aeabi_dmul>
 80080ec:	4602      	mov	r2, r0
 80080ee:	460b      	mov	r3, r1
 80080f0:	4630      	mov	r0, r6
 80080f2:	4639      	mov	r1, r7
 80080f4:	f7f8 f83a 	bl	800016c <__adddf3>
 80080f8:	4606      	mov	r6, r0
 80080fa:	460f      	mov	r7, r1
 80080fc:	f7f8 fc9c 	bl	8000a38 <__aeabi_d2iz>
 8008100:	2200      	movs	r2, #0
 8008102:	4682      	mov	sl, r0
 8008104:	2300      	movs	r3, #0
 8008106:	4630      	mov	r0, r6
 8008108:	4639      	mov	r1, r7
 800810a:	f7f8 fc57 	bl	80009bc <__aeabi_dcmplt>
 800810e:	b148      	cbz	r0, 8008124 <_dtoa_r+0x16c>
 8008110:	4650      	mov	r0, sl
 8008112:	f7f8 f977 	bl	8000404 <__aeabi_i2d>
 8008116:	4632      	mov	r2, r6
 8008118:	463b      	mov	r3, r7
 800811a:	f7f8 fc45 	bl	80009a8 <__aeabi_dcmpeq>
 800811e:	b908      	cbnz	r0, 8008124 <_dtoa_r+0x16c>
 8008120:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008124:	f1ba 0f16 	cmp.w	sl, #22
 8008128:	d85a      	bhi.n	80081e0 <_dtoa_r+0x228>
 800812a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800812e:	496d      	ldr	r1, [pc, #436]	; (80082e4 <_dtoa_r+0x32c>)
 8008130:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008134:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008138:	f7f8 fc5e 	bl	80009f8 <__aeabi_dcmpgt>
 800813c:	2800      	cmp	r0, #0
 800813e:	d051      	beq.n	80081e4 <_dtoa_r+0x22c>
 8008140:	2300      	movs	r3, #0
 8008142:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008146:	930d      	str	r3, [sp, #52]	; 0x34
 8008148:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800814a:	1b5d      	subs	r5, r3, r5
 800814c:	1e6b      	subs	r3, r5, #1
 800814e:	9307      	str	r3, [sp, #28]
 8008150:	bf43      	ittte	mi
 8008152:	2300      	movmi	r3, #0
 8008154:	f1c5 0901 	rsbmi	r9, r5, #1
 8008158:	9307      	strmi	r3, [sp, #28]
 800815a:	f04f 0900 	movpl.w	r9, #0
 800815e:	f1ba 0f00 	cmp.w	sl, #0
 8008162:	db41      	blt.n	80081e8 <_dtoa_r+0x230>
 8008164:	9b07      	ldr	r3, [sp, #28]
 8008166:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800816a:	4453      	add	r3, sl
 800816c:	9307      	str	r3, [sp, #28]
 800816e:	2300      	movs	r3, #0
 8008170:	9308      	str	r3, [sp, #32]
 8008172:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008174:	2b09      	cmp	r3, #9
 8008176:	f200 808f 	bhi.w	8008298 <_dtoa_r+0x2e0>
 800817a:	2b05      	cmp	r3, #5
 800817c:	bfc4      	itt	gt
 800817e:	3b04      	subgt	r3, #4
 8008180:	931e      	strgt	r3, [sp, #120]	; 0x78
 8008182:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008184:	bfc8      	it	gt
 8008186:	2500      	movgt	r5, #0
 8008188:	f1a3 0302 	sub.w	r3, r3, #2
 800818c:	bfd8      	it	le
 800818e:	2501      	movle	r5, #1
 8008190:	2b03      	cmp	r3, #3
 8008192:	f200 808d 	bhi.w	80082b0 <_dtoa_r+0x2f8>
 8008196:	e8df f003 	tbb	[pc, r3]
 800819a:	7d7b      	.short	0x7d7b
 800819c:	6f2f      	.short	0x6f2f
 800819e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80081a2:	441d      	add	r5, r3
 80081a4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80081a8:	2820      	cmp	r0, #32
 80081aa:	dd13      	ble.n	80081d4 <_dtoa_r+0x21c>
 80081ac:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80081b0:	9b02      	ldr	r3, [sp, #8]
 80081b2:	fa08 f800 	lsl.w	r8, r8, r0
 80081b6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80081ba:	fa23 f000 	lsr.w	r0, r3, r0
 80081be:	ea48 0000 	orr.w	r0, r8, r0
 80081c2:	f7f8 f90f 	bl	80003e4 <__aeabi_ui2d>
 80081c6:	2301      	movs	r3, #1
 80081c8:	4680      	mov	r8, r0
 80081ca:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80081ce:	3d01      	subs	r5, #1
 80081d0:	9310      	str	r3, [sp, #64]	; 0x40
 80081d2:	e771      	b.n	80080b8 <_dtoa_r+0x100>
 80081d4:	9b02      	ldr	r3, [sp, #8]
 80081d6:	f1c0 0020 	rsb	r0, r0, #32
 80081da:	fa03 f000 	lsl.w	r0, r3, r0
 80081de:	e7f0      	b.n	80081c2 <_dtoa_r+0x20a>
 80081e0:	2301      	movs	r3, #1
 80081e2:	e7b0      	b.n	8008146 <_dtoa_r+0x18e>
 80081e4:	900d      	str	r0, [sp, #52]	; 0x34
 80081e6:	e7af      	b.n	8008148 <_dtoa_r+0x190>
 80081e8:	f1ca 0300 	rsb	r3, sl, #0
 80081ec:	9308      	str	r3, [sp, #32]
 80081ee:	2300      	movs	r3, #0
 80081f0:	eba9 090a 	sub.w	r9, r9, sl
 80081f4:	930c      	str	r3, [sp, #48]	; 0x30
 80081f6:	e7bc      	b.n	8008172 <_dtoa_r+0x1ba>
 80081f8:	2301      	movs	r3, #1
 80081fa:	9309      	str	r3, [sp, #36]	; 0x24
 80081fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80081fe:	2b00      	cmp	r3, #0
 8008200:	dd74      	ble.n	80082ec <_dtoa_r+0x334>
 8008202:	4698      	mov	r8, r3
 8008204:	9304      	str	r3, [sp, #16]
 8008206:	2200      	movs	r2, #0
 8008208:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800820a:	6072      	str	r2, [r6, #4]
 800820c:	2204      	movs	r2, #4
 800820e:	f102 0014 	add.w	r0, r2, #20
 8008212:	4298      	cmp	r0, r3
 8008214:	6871      	ldr	r1, [r6, #4]
 8008216:	d96e      	bls.n	80082f6 <_dtoa_r+0x33e>
 8008218:	4620      	mov	r0, r4
 800821a:	f000 fe8e 	bl	8008f3a <_Balloc>
 800821e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008220:	6030      	str	r0, [r6, #0]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f1b8 0f0e 	cmp.w	r8, #14
 8008228:	9306      	str	r3, [sp, #24]
 800822a:	f200 80ed 	bhi.w	8008408 <_dtoa_r+0x450>
 800822e:	2d00      	cmp	r5, #0
 8008230:	f000 80ea 	beq.w	8008408 <_dtoa_r+0x450>
 8008234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008238:	f1ba 0f00 	cmp.w	sl, #0
 800823c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008240:	dd77      	ble.n	8008332 <_dtoa_r+0x37a>
 8008242:	4a28      	ldr	r2, [pc, #160]	; (80082e4 <_dtoa_r+0x32c>)
 8008244:	f00a 030f 	and.w	r3, sl, #15
 8008248:	ea4f 162a 	mov.w	r6, sl, asr #4
 800824c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008250:	06f0      	lsls	r0, r6, #27
 8008252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008256:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800825a:	d568      	bpl.n	800832e <_dtoa_r+0x376>
 800825c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008260:	4b21      	ldr	r3, [pc, #132]	; (80082e8 <_dtoa_r+0x330>)
 8008262:	2503      	movs	r5, #3
 8008264:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008268:	f7f8 fa60 	bl	800072c <__aeabi_ddiv>
 800826c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008270:	f006 060f 	and.w	r6, r6, #15
 8008274:	4f1c      	ldr	r7, [pc, #112]	; (80082e8 <_dtoa_r+0x330>)
 8008276:	e04f      	b.n	8008318 <_dtoa_r+0x360>
 8008278:	2301      	movs	r3, #1
 800827a:	9309      	str	r3, [sp, #36]	; 0x24
 800827c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800827e:	4453      	add	r3, sl
 8008280:	f103 0801 	add.w	r8, r3, #1
 8008284:	9304      	str	r3, [sp, #16]
 8008286:	4643      	mov	r3, r8
 8008288:	2b01      	cmp	r3, #1
 800828a:	bfb8      	it	lt
 800828c:	2301      	movlt	r3, #1
 800828e:	e7ba      	b.n	8008206 <_dtoa_r+0x24e>
 8008290:	2300      	movs	r3, #0
 8008292:	e7b2      	b.n	80081fa <_dtoa_r+0x242>
 8008294:	2300      	movs	r3, #0
 8008296:	e7f0      	b.n	800827a <_dtoa_r+0x2c2>
 8008298:	2501      	movs	r5, #1
 800829a:	2300      	movs	r3, #0
 800829c:	9509      	str	r5, [sp, #36]	; 0x24
 800829e:	931e      	str	r3, [sp, #120]	; 0x78
 80082a0:	f04f 33ff 	mov.w	r3, #4294967295
 80082a4:	2200      	movs	r2, #0
 80082a6:	9304      	str	r3, [sp, #16]
 80082a8:	4698      	mov	r8, r3
 80082aa:	2312      	movs	r3, #18
 80082ac:	921f      	str	r2, [sp, #124]	; 0x7c
 80082ae:	e7aa      	b.n	8008206 <_dtoa_r+0x24e>
 80082b0:	2301      	movs	r3, #1
 80082b2:	9309      	str	r3, [sp, #36]	; 0x24
 80082b4:	e7f4      	b.n	80082a0 <_dtoa_r+0x2e8>
 80082b6:	bf00      	nop
 80082b8:	636f4361 	.word	0x636f4361
 80082bc:	3fd287a7 	.word	0x3fd287a7
 80082c0:	8b60c8b3 	.word	0x8b60c8b3
 80082c4:	3fc68a28 	.word	0x3fc68a28
 80082c8:	509f79fb 	.word	0x509f79fb
 80082cc:	3fd34413 	.word	0x3fd34413
 80082d0:	7ff00000 	.word	0x7ff00000
 80082d4:	08009c91 	.word	0x08009c91
 80082d8:	08009c88 	.word	0x08009c88
 80082dc:	08009c65 	.word	0x08009c65
 80082e0:	3ff80000 	.word	0x3ff80000
 80082e4:	08009d20 	.word	0x08009d20
 80082e8:	08009cf8 	.word	0x08009cf8
 80082ec:	2301      	movs	r3, #1
 80082ee:	9304      	str	r3, [sp, #16]
 80082f0:	4698      	mov	r8, r3
 80082f2:	461a      	mov	r2, r3
 80082f4:	e7da      	b.n	80082ac <_dtoa_r+0x2f4>
 80082f6:	3101      	adds	r1, #1
 80082f8:	6071      	str	r1, [r6, #4]
 80082fa:	0052      	lsls	r2, r2, #1
 80082fc:	e787      	b.n	800820e <_dtoa_r+0x256>
 80082fe:	07f1      	lsls	r1, r6, #31
 8008300:	d508      	bpl.n	8008314 <_dtoa_r+0x35c>
 8008302:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008306:	e9d7 2300 	ldrd	r2, r3, [r7]
 800830a:	f7f8 f8e5 	bl	80004d8 <__aeabi_dmul>
 800830e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008312:	3501      	adds	r5, #1
 8008314:	1076      	asrs	r6, r6, #1
 8008316:	3708      	adds	r7, #8
 8008318:	2e00      	cmp	r6, #0
 800831a:	d1f0      	bne.n	80082fe <_dtoa_r+0x346>
 800831c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008320:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008324:	f7f8 fa02 	bl	800072c <__aeabi_ddiv>
 8008328:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800832c:	e01b      	b.n	8008366 <_dtoa_r+0x3ae>
 800832e:	2502      	movs	r5, #2
 8008330:	e7a0      	b.n	8008274 <_dtoa_r+0x2bc>
 8008332:	f000 80a4 	beq.w	800847e <_dtoa_r+0x4c6>
 8008336:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800833a:	f1ca 0600 	rsb	r6, sl, #0
 800833e:	4ba0      	ldr	r3, [pc, #640]	; (80085c0 <_dtoa_r+0x608>)
 8008340:	f006 020f 	and.w	r2, r6, #15
 8008344:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834c:	f7f8 f8c4 	bl	80004d8 <__aeabi_dmul>
 8008350:	2502      	movs	r5, #2
 8008352:	2300      	movs	r3, #0
 8008354:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008358:	4f9a      	ldr	r7, [pc, #616]	; (80085c4 <_dtoa_r+0x60c>)
 800835a:	1136      	asrs	r6, r6, #4
 800835c:	2e00      	cmp	r6, #0
 800835e:	f040 8083 	bne.w	8008468 <_dtoa_r+0x4b0>
 8008362:	2b00      	cmp	r3, #0
 8008364:	d1e0      	bne.n	8008328 <_dtoa_r+0x370>
 8008366:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008368:	2b00      	cmp	r3, #0
 800836a:	f000 808a 	beq.w	8008482 <_dtoa_r+0x4ca>
 800836e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008372:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008376:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800837a:	2200      	movs	r2, #0
 800837c:	4b92      	ldr	r3, [pc, #584]	; (80085c8 <_dtoa_r+0x610>)
 800837e:	f7f8 fb1d 	bl	80009bc <__aeabi_dcmplt>
 8008382:	2800      	cmp	r0, #0
 8008384:	d07d      	beq.n	8008482 <_dtoa_r+0x4ca>
 8008386:	f1b8 0f00 	cmp.w	r8, #0
 800838a:	d07a      	beq.n	8008482 <_dtoa_r+0x4ca>
 800838c:	9b04      	ldr	r3, [sp, #16]
 800838e:	2b00      	cmp	r3, #0
 8008390:	dd36      	ble.n	8008400 <_dtoa_r+0x448>
 8008392:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008396:	2200      	movs	r2, #0
 8008398:	4b8c      	ldr	r3, [pc, #560]	; (80085cc <_dtoa_r+0x614>)
 800839a:	f7f8 f89d 	bl	80004d8 <__aeabi_dmul>
 800839e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083a2:	9e04      	ldr	r6, [sp, #16]
 80083a4:	f10a 37ff 	add.w	r7, sl, #4294967295
 80083a8:	3501      	adds	r5, #1
 80083aa:	4628      	mov	r0, r5
 80083ac:	f7f8 f82a 	bl	8000404 <__aeabi_i2d>
 80083b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083b4:	f7f8 f890 	bl	80004d8 <__aeabi_dmul>
 80083b8:	2200      	movs	r2, #0
 80083ba:	4b85      	ldr	r3, [pc, #532]	; (80085d0 <_dtoa_r+0x618>)
 80083bc:	f7f7 fed6 	bl	800016c <__adddf3>
 80083c0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80083c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80083c8:	950b      	str	r5, [sp, #44]	; 0x2c
 80083ca:	2e00      	cmp	r6, #0
 80083cc:	d15c      	bne.n	8008488 <_dtoa_r+0x4d0>
 80083ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083d2:	2200      	movs	r2, #0
 80083d4:	4b7f      	ldr	r3, [pc, #508]	; (80085d4 <_dtoa_r+0x61c>)
 80083d6:	f7f7 fec7 	bl	8000168 <__aeabi_dsub>
 80083da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083dc:	462b      	mov	r3, r5
 80083de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083e2:	f7f8 fb09 	bl	80009f8 <__aeabi_dcmpgt>
 80083e6:	2800      	cmp	r0, #0
 80083e8:	f040 8281 	bne.w	80088ee <_dtoa_r+0x936>
 80083ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083f2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80083f6:	f7f8 fae1 	bl	80009bc <__aeabi_dcmplt>
 80083fa:	2800      	cmp	r0, #0
 80083fc:	f040 8275 	bne.w	80088ea <_dtoa_r+0x932>
 8008400:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008404:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008408:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800840a:	2b00      	cmp	r3, #0
 800840c:	f2c0 814b 	blt.w	80086a6 <_dtoa_r+0x6ee>
 8008410:	f1ba 0f0e 	cmp.w	sl, #14
 8008414:	f300 8147 	bgt.w	80086a6 <_dtoa_r+0x6ee>
 8008418:	4b69      	ldr	r3, [pc, #420]	; (80085c0 <_dtoa_r+0x608>)
 800841a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800841e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008422:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008426:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008428:	2b00      	cmp	r3, #0
 800842a:	f280 80d7 	bge.w	80085dc <_dtoa_r+0x624>
 800842e:	f1b8 0f00 	cmp.w	r8, #0
 8008432:	f300 80d3 	bgt.w	80085dc <_dtoa_r+0x624>
 8008436:	f040 8257 	bne.w	80088e8 <_dtoa_r+0x930>
 800843a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800843e:	2200      	movs	r2, #0
 8008440:	4b64      	ldr	r3, [pc, #400]	; (80085d4 <_dtoa_r+0x61c>)
 8008442:	f7f8 f849 	bl	80004d8 <__aeabi_dmul>
 8008446:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800844a:	f7f8 facb 	bl	80009e4 <__aeabi_dcmpge>
 800844e:	4646      	mov	r6, r8
 8008450:	4647      	mov	r7, r8
 8008452:	2800      	cmp	r0, #0
 8008454:	f040 822d 	bne.w	80088b2 <_dtoa_r+0x8fa>
 8008458:	9b06      	ldr	r3, [sp, #24]
 800845a:	9a06      	ldr	r2, [sp, #24]
 800845c:	1c5d      	adds	r5, r3, #1
 800845e:	2331      	movs	r3, #49	; 0x31
 8008460:	f10a 0a01 	add.w	sl, sl, #1
 8008464:	7013      	strb	r3, [r2, #0]
 8008466:	e228      	b.n	80088ba <_dtoa_r+0x902>
 8008468:	07f2      	lsls	r2, r6, #31
 800846a:	d505      	bpl.n	8008478 <_dtoa_r+0x4c0>
 800846c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008470:	f7f8 f832 	bl	80004d8 <__aeabi_dmul>
 8008474:	2301      	movs	r3, #1
 8008476:	3501      	adds	r5, #1
 8008478:	1076      	asrs	r6, r6, #1
 800847a:	3708      	adds	r7, #8
 800847c:	e76e      	b.n	800835c <_dtoa_r+0x3a4>
 800847e:	2502      	movs	r5, #2
 8008480:	e771      	b.n	8008366 <_dtoa_r+0x3ae>
 8008482:	4657      	mov	r7, sl
 8008484:	4646      	mov	r6, r8
 8008486:	e790      	b.n	80083aa <_dtoa_r+0x3f2>
 8008488:	4b4d      	ldr	r3, [pc, #308]	; (80085c0 <_dtoa_r+0x608>)
 800848a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800848e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008494:	2b00      	cmp	r3, #0
 8008496:	d048      	beq.n	800852a <_dtoa_r+0x572>
 8008498:	4602      	mov	r2, r0
 800849a:	460b      	mov	r3, r1
 800849c:	2000      	movs	r0, #0
 800849e:	494e      	ldr	r1, [pc, #312]	; (80085d8 <_dtoa_r+0x620>)
 80084a0:	f7f8 f944 	bl	800072c <__aeabi_ddiv>
 80084a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80084a8:	f7f7 fe5e 	bl	8000168 <__aeabi_dsub>
 80084ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80084b0:	9d06      	ldr	r5, [sp, #24]
 80084b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084b6:	f7f8 fabf 	bl	8000a38 <__aeabi_d2iz>
 80084ba:	9011      	str	r0, [sp, #68]	; 0x44
 80084bc:	f7f7 ffa2 	bl	8000404 <__aeabi_i2d>
 80084c0:	4602      	mov	r2, r0
 80084c2:	460b      	mov	r3, r1
 80084c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084c8:	f7f7 fe4e 	bl	8000168 <__aeabi_dsub>
 80084cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084d2:	3330      	adds	r3, #48	; 0x30
 80084d4:	f805 3b01 	strb.w	r3, [r5], #1
 80084d8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80084dc:	f7f8 fa6e 	bl	80009bc <__aeabi_dcmplt>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	d163      	bne.n	80085ac <_dtoa_r+0x5f4>
 80084e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084e8:	2000      	movs	r0, #0
 80084ea:	4937      	ldr	r1, [pc, #220]	; (80085c8 <_dtoa_r+0x610>)
 80084ec:	f7f7 fe3c 	bl	8000168 <__aeabi_dsub>
 80084f0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80084f4:	f7f8 fa62 	bl	80009bc <__aeabi_dcmplt>
 80084f8:	2800      	cmp	r0, #0
 80084fa:	f040 80b5 	bne.w	8008668 <_dtoa_r+0x6b0>
 80084fe:	9b06      	ldr	r3, [sp, #24]
 8008500:	1aeb      	subs	r3, r5, r3
 8008502:	429e      	cmp	r6, r3
 8008504:	f77f af7c 	ble.w	8008400 <_dtoa_r+0x448>
 8008508:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800850c:	2200      	movs	r2, #0
 800850e:	4b2f      	ldr	r3, [pc, #188]	; (80085cc <_dtoa_r+0x614>)
 8008510:	f7f7 ffe2 	bl	80004d8 <__aeabi_dmul>
 8008514:	2200      	movs	r2, #0
 8008516:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800851a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800851e:	4b2b      	ldr	r3, [pc, #172]	; (80085cc <_dtoa_r+0x614>)
 8008520:	f7f7 ffda 	bl	80004d8 <__aeabi_dmul>
 8008524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008528:	e7c3      	b.n	80084b2 <_dtoa_r+0x4fa>
 800852a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800852e:	f7f7 ffd3 	bl	80004d8 <__aeabi_dmul>
 8008532:	9b06      	ldr	r3, [sp, #24]
 8008534:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008538:	199d      	adds	r5, r3, r6
 800853a:	461e      	mov	r6, r3
 800853c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008540:	f7f8 fa7a 	bl	8000a38 <__aeabi_d2iz>
 8008544:	9011      	str	r0, [sp, #68]	; 0x44
 8008546:	f7f7 ff5d 	bl	8000404 <__aeabi_i2d>
 800854a:	4602      	mov	r2, r0
 800854c:	460b      	mov	r3, r1
 800854e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008552:	f7f7 fe09 	bl	8000168 <__aeabi_dsub>
 8008556:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008558:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800855c:	3330      	adds	r3, #48	; 0x30
 800855e:	f806 3b01 	strb.w	r3, [r6], #1
 8008562:	42ae      	cmp	r6, r5
 8008564:	f04f 0200 	mov.w	r2, #0
 8008568:	d124      	bne.n	80085b4 <_dtoa_r+0x5fc>
 800856a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800856e:	4b1a      	ldr	r3, [pc, #104]	; (80085d8 <_dtoa_r+0x620>)
 8008570:	f7f7 fdfc 	bl	800016c <__adddf3>
 8008574:	4602      	mov	r2, r0
 8008576:	460b      	mov	r3, r1
 8008578:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800857c:	f7f8 fa3c 	bl	80009f8 <__aeabi_dcmpgt>
 8008580:	2800      	cmp	r0, #0
 8008582:	d171      	bne.n	8008668 <_dtoa_r+0x6b0>
 8008584:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008588:	2000      	movs	r0, #0
 800858a:	4913      	ldr	r1, [pc, #76]	; (80085d8 <_dtoa_r+0x620>)
 800858c:	f7f7 fdec 	bl	8000168 <__aeabi_dsub>
 8008590:	4602      	mov	r2, r0
 8008592:	460b      	mov	r3, r1
 8008594:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008598:	f7f8 fa10 	bl	80009bc <__aeabi_dcmplt>
 800859c:	2800      	cmp	r0, #0
 800859e:	f43f af2f 	beq.w	8008400 <_dtoa_r+0x448>
 80085a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80085a6:	1e6a      	subs	r2, r5, #1
 80085a8:	2b30      	cmp	r3, #48	; 0x30
 80085aa:	d001      	beq.n	80085b0 <_dtoa_r+0x5f8>
 80085ac:	46ba      	mov	sl, r7
 80085ae:	e04a      	b.n	8008646 <_dtoa_r+0x68e>
 80085b0:	4615      	mov	r5, r2
 80085b2:	e7f6      	b.n	80085a2 <_dtoa_r+0x5ea>
 80085b4:	4b05      	ldr	r3, [pc, #20]	; (80085cc <_dtoa_r+0x614>)
 80085b6:	f7f7 ff8f 	bl	80004d8 <__aeabi_dmul>
 80085ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085be:	e7bd      	b.n	800853c <_dtoa_r+0x584>
 80085c0:	08009d20 	.word	0x08009d20
 80085c4:	08009cf8 	.word	0x08009cf8
 80085c8:	3ff00000 	.word	0x3ff00000
 80085cc:	40240000 	.word	0x40240000
 80085d0:	401c0000 	.word	0x401c0000
 80085d4:	40140000 	.word	0x40140000
 80085d8:	3fe00000 	.word	0x3fe00000
 80085dc:	9d06      	ldr	r5, [sp, #24]
 80085de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80085e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085e6:	4630      	mov	r0, r6
 80085e8:	4639      	mov	r1, r7
 80085ea:	f7f8 f89f 	bl	800072c <__aeabi_ddiv>
 80085ee:	f7f8 fa23 	bl	8000a38 <__aeabi_d2iz>
 80085f2:	4681      	mov	r9, r0
 80085f4:	f7f7 ff06 	bl	8000404 <__aeabi_i2d>
 80085f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085fc:	f7f7 ff6c 	bl	80004d8 <__aeabi_dmul>
 8008600:	4602      	mov	r2, r0
 8008602:	460b      	mov	r3, r1
 8008604:	4630      	mov	r0, r6
 8008606:	4639      	mov	r1, r7
 8008608:	f7f7 fdae 	bl	8000168 <__aeabi_dsub>
 800860c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8008610:	f805 6b01 	strb.w	r6, [r5], #1
 8008614:	9e06      	ldr	r6, [sp, #24]
 8008616:	4602      	mov	r2, r0
 8008618:	1bae      	subs	r6, r5, r6
 800861a:	45b0      	cmp	r8, r6
 800861c:	460b      	mov	r3, r1
 800861e:	d135      	bne.n	800868c <_dtoa_r+0x6d4>
 8008620:	f7f7 fda4 	bl	800016c <__adddf3>
 8008624:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008628:	4606      	mov	r6, r0
 800862a:	460f      	mov	r7, r1
 800862c:	f7f8 f9e4 	bl	80009f8 <__aeabi_dcmpgt>
 8008630:	b9c8      	cbnz	r0, 8008666 <_dtoa_r+0x6ae>
 8008632:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008636:	4630      	mov	r0, r6
 8008638:	4639      	mov	r1, r7
 800863a:	f7f8 f9b5 	bl	80009a8 <__aeabi_dcmpeq>
 800863e:	b110      	cbz	r0, 8008646 <_dtoa_r+0x68e>
 8008640:	f019 0f01 	tst.w	r9, #1
 8008644:	d10f      	bne.n	8008666 <_dtoa_r+0x6ae>
 8008646:	4659      	mov	r1, fp
 8008648:	4620      	mov	r0, r4
 800864a:	f000 fcaa 	bl	8008fa2 <_Bfree>
 800864e:	2300      	movs	r3, #0
 8008650:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008652:	702b      	strb	r3, [r5, #0]
 8008654:	f10a 0301 	add.w	r3, sl, #1
 8008658:	6013      	str	r3, [r2, #0]
 800865a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800865c:	2b00      	cmp	r3, #0
 800865e:	f43f acf3 	beq.w	8008048 <_dtoa_r+0x90>
 8008662:	601d      	str	r5, [r3, #0]
 8008664:	e4f0      	b.n	8008048 <_dtoa_r+0x90>
 8008666:	4657      	mov	r7, sl
 8008668:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800866c:	1e6b      	subs	r3, r5, #1
 800866e:	2a39      	cmp	r2, #57	; 0x39
 8008670:	d106      	bne.n	8008680 <_dtoa_r+0x6c8>
 8008672:	9a06      	ldr	r2, [sp, #24]
 8008674:	429a      	cmp	r2, r3
 8008676:	d107      	bne.n	8008688 <_dtoa_r+0x6d0>
 8008678:	2330      	movs	r3, #48	; 0x30
 800867a:	7013      	strb	r3, [r2, #0]
 800867c:	4613      	mov	r3, r2
 800867e:	3701      	adds	r7, #1
 8008680:	781a      	ldrb	r2, [r3, #0]
 8008682:	3201      	adds	r2, #1
 8008684:	701a      	strb	r2, [r3, #0]
 8008686:	e791      	b.n	80085ac <_dtoa_r+0x5f4>
 8008688:	461d      	mov	r5, r3
 800868a:	e7ed      	b.n	8008668 <_dtoa_r+0x6b0>
 800868c:	2200      	movs	r2, #0
 800868e:	4b99      	ldr	r3, [pc, #612]	; (80088f4 <_dtoa_r+0x93c>)
 8008690:	f7f7 ff22 	bl	80004d8 <__aeabi_dmul>
 8008694:	2200      	movs	r2, #0
 8008696:	2300      	movs	r3, #0
 8008698:	4606      	mov	r6, r0
 800869a:	460f      	mov	r7, r1
 800869c:	f7f8 f984 	bl	80009a8 <__aeabi_dcmpeq>
 80086a0:	2800      	cmp	r0, #0
 80086a2:	d09e      	beq.n	80085e2 <_dtoa_r+0x62a>
 80086a4:	e7cf      	b.n	8008646 <_dtoa_r+0x68e>
 80086a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086a8:	2a00      	cmp	r2, #0
 80086aa:	f000 8088 	beq.w	80087be <_dtoa_r+0x806>
 80086ae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80086b0:	2a01      	cmp	r2, #1
 80086b2:	dc6d      	bgt.n	8008790 <_dtoa_r+0x7d8>
 80086b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80086b6:	2a00      	cmp	r2, #0
 80086b8:	d066      	beq.n	8008788 <_dtoa_r+0x7d0>
 80086ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80086be:	464d      	mov	r5, r9
 80086c0:	9e08      	ldr	r6, [sp, #32]
 80086c2:	9a07      	ldr	r2, [sp, #28]
 80086c4:	2101      	movs	r1, #1
 80086c6:	441a      	add	r2, r3
 80086c8:	4620      	mov	r0, r4
 80086ca:	4499      	add	r9, r3
 80086cc:	9207      	str	r2, [sp, #28]
 80086ce:	f000 fd08 	bl	80090e2 <__i2b>
 80086d2:	4607      	mov	r7, r0
 80086d4:	2d00      	cmp	r5, #0
 80086d6:	dd0b      	ble.n	80086f0 <_dtoa_r+0x738>
 80086d8:	9b07      	ldr	r3, [sp, #28]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	dd08      	ble.n	80086f0 <_dtoa_r+0x738>
 80086de:	42ab      	cmp	r3, r5
 80086e0:	bfa8      	it	ge
 80086e2:	462b      	movge	r3, r5
 80086e4:	9a07      	ldr	r2, [sp, #28]
 80086e6:	eba9 0903 	sub.w	r9, r9, r3
 80086ea:	1aed      	subs	r5, r5, r3
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	9307      	str	r3, [sp, #28]
 80086f0:	9b08      	ldr	r3, [sp, #32]
 80086f2:	b1eb      	cbz	r3, 8008730 <_dtoa_r+0x778>
 80086f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d065      	beq.n	80087c6 <_dtoa_r+0x80e>
 80086fa:	b18e      	cbz	r6, 8008720 <_dtoa_r+0x768>
 80086fc:	4639      	mov	r1, r7
 80086fe:	4632      	mov	r2, r6
 8008700:	4620      	mov	r0, r4
 8008702:	f000 fd8d 	bl	8009220 <__pow5mult>
 8008706:	465a      	mov	r2, fp
 8008708:	4601      	mov	r1, r0
 800870a:	4607      	mov	r7, r0
 800870c:	4620      	mov	r0, r4
 800870e:	f000 fcf1 	bl	80090f4 <__multiply>
 8008712:	4659      	mov	r1, fp
 8008714:	900a      	str	r0, [sp, #40]	; 0x28
 8008716:	4620      	mov	r0, r4
 8008718:	f000 fc43 	bl	8008fa2 <_Bfree>
 800871c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800871e:	469b      	mov	fp, r3
 8008720:	9b08      	ldr	r3, [sp, #32]
 8008722:	1b9a      	subs	r2, r3, r6
 8008724:	d004      	beq.n	8008730 <_dtoa_r+0x778>
 8008726:	4659      	mov	r1, fp
 8008728:	4620      	mov	r0, r4
 800872a:	f000 fd79 	bl	8009220 <__pow5mult>
 800872e:	4683      	mov	fp, r0
 8008730:	2101      	movs	r1, #1
 8008732:	4620      	mov	r0, r4
 8008734:	f000 fcd5 	bl	80090e2 <__i2b>
 8008738:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800873a:	4606      	mov	r6, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	f000 81c6 	beq.w	8008ace <_dtoa_r+0xb16>
 8008742:	461a      	mov	r2, r3
 8008744:	4601      	mov	r1, r0
 8008746:	4620      	mov	r0, r4
 8008748:	f000 fd6a 	bl	8009220 <__pow5mult>
 800874c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800874e:	4606      	mov	r6, r0
 8008750:	2b01      	cmp	r3, #1
 8008752:	dc3e      	bgt.n	80087d2 <_dtoa_r+0x81a>
 8008754:	9b02      	ldr	r3, [sp, #8]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d137      	bne.n	80087ca <_dtoa_r+0x812>
 800875a:	9b03      	ldr	r3, [sp, #12]
 800875c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008760:	2b00      	cmp	r3, #0
 8008762:	d134      	bne.n	80087ce <_dtoa_r+0x816>
 8008764:	9b03      	ldr	r3, [sp, #12]
 8008766:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800876a:	0d1b      	lsrs	r3, r3, #20
 800876c:	051b      	lsls	r3, r3, #20
 800876e:	b12b      	cbz	r3, 800877c <_dtoa_r+0x7c4>
 8008770:	9b07      	ldr	r3, [sp, #28]
 8008772:	f109 0901 	add.w	r9, r9, #1
 8008776:	3301      	adds	r3, #1
 8008778:	9307      	str	r3, [sp, #28]
 800877a:	2301      	movs	r3, #1
 800877c:	9308      	str	r3, [sp, #32]
 800877e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008780:	2b00      	cmp	r3, #0
 8008782:	d128      	bne.n	80087d6 <_dtoa_r+0x81e>
 8008784:	2001      	movs	r0, #1
 8008786:	e02e      	b.n	80087e6 <_dtoa_r+0x82e>
 8008788:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800878a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800878e:	e796      	b.n	80086be <_dtoa_r+0x706>
 8008790:	9b08      	ldr	r3, [sp, #32]
 8008792:	f108 36ff 	add.w	r6, r8, #4294967295
 8008796:	42b3      	cmp	r3, r6
 8008798:	bfb7      	itett	lt
 800879a:	9b08      	ldrlt	r3, [sp, #32]
 800879c:	1b9e      	subge	r6, r3, r6
 800879e:	1af2      	sublt	r2, r6, r3
 80087a0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80087a2:	bfbf      	itttt	lt
 80087a4:	9608      	strlt	r6, [sp, #32]
 80087a6:	189b      	addlt	r3, r3, r2
 80087a8:	930c      	strlt	r3, [sp, #48]	; 0x30
 80087aa:	2600      	movlt	r6, #0
 80087ac:	f1b8 0f00 	cmp.w	r8, #0
 80087b0:	bfb9      	ittee	lt
 80087b2:	eba9 0508 	sublt.w	r5, r9, r8
 80087b6:	2300      	movlt	r3, #0
 80087b8:	464d      	movge	r5, r9
 80087ba:	4643      	movge	r3, r8
 80087bc:	e781      	b.n	80086c2 <_dtoa_r+0x70a>
 80087be:	9e08      	ldr	r6, [sp, #32]
 80087c0:	464d      	mov	r5, r9
 80087c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80087c4:	e786      	b.n	80086d4 <_dtoa_r+0x71c>
 80087c6:	9a08      	ldr	r2, [sp, #32]
 80087c8:	e7ad      	b.n	8008726 <_dtoa_r+0x76e>
 80087ca:	2300      	movs	r3, #0
 80087cc:	e7d6      	b.n	800877c <_dtoa_r+0x7c4>
 80087ce:	9b02      	ldr	r3, [sp, #8]
 80087d0:	e7d4      	b.n	800877c <_dtoa_r+0x7c4>
 80087d2:	2300      	movs	r3, #0
 80087d4:	9308      	str	r3, [sp, #32]
 80087d6:	6933      	ldr	r3, [r6, #16]
 80087d8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80087dc:	6918      	ldr	r0, [r3, #16]
 80087de:	f000 fc32 	bl	8009046 <__hi0bits>
 80087e2:	f1c0 0020 	rsb	r0, r0, #32
 80087e6:	9b07      	ldr	r3, [sp, #28]
 80087e8:	4418      	add	r0, r3
 80087ea:	f010 001f 	ands.w	r0, r0, #31
 80087ee:	d047      	beq.n	8008880 <_dtoa_r+0x8c8>
 80087f0:	f1c0 0320 	rsb	r3, r0, #32
 80087f4:	2b04      	cmp	r3, #4
 80087f6:	dd3b      	ble.n	8008870 <_dtoa_r+0x8b8>
 80087f8:	9b07      	ldr	r3, [sp, #28]
 80087fa:	f1c0 001c 	rsb	r0, r0, #28
 80087fe:	4481      	add	r9, r0
 8008800:	4405      	add	r5, r0
 8008802:	4403      	add	r3, r0
 8008804:	9307      	str	r3, [sp, #28]
 8008806:	f1b9 0f00 	cmp.w	r9, #0
 800880a:	dd05      	ble.n	8008818 <_dtoa_r+0x860>
 800880c:	4659      	mov	r1, fp
 800880e:	464a      	mov	r2, r9
 8008810:	4620      	mov	r0, r4
 8008812:	f000 fd53 	bl	80092bc <__lshift>
 8008816:	4683      	mov	fp, r0
 8008818:	9b07      	ldr	r3, [sp, #28]
 800881a:	2b00      	cmp	r3, #0
 800881c:	dd05      	ble.n	800882a <_dtoa_r+0x872>
 800881e:	4631      	mov	r1, r6
 8008820:	461a      	mov	r2, r3
 8008822:	4620      	mov	r0, r4
 8008824:	f000 fd4a 	bl	80092bc <__lshift>
 8008828:	4606      	mov	r6, r0
 800882a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800882c:	b353      	cbz	r3, 8008884 <_dtoa_r+0x8cc>
 800882e:	4631      	mov	r1, r6
 8008830:	4658      	mov	r0, fp
 8008832:	f000 fd97 	bl	8009364 <__mcmp>
 8008836:	2800      	cmp	r0, #0
 8008838:	da24      	bge.n	8008884 <_dtoa_r+0x8cc>
 800883a:	2300      	movs	r3, #0
 800883c:	4659      	mov	r1, fp
 800883e:	220a      	movs	r2, #10
 8008840:	4620      	mov	r0, r4
 8008842:	f000 fbc5 	bl	8008fd0 <__multadd>
 8008846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008848:	f10a 3aff 	add.w	sl, sl, #4294967295
 800884c:	4683      	mov	fp, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	f000 8144 	beq.w	8008adc <_dtoa_r+0xb24>
 8008854:	2300      	movs	r3, #0
 8008856:	4639      	mov	r1, r7
 8008858:	220a      	movs	r2, #10
 800885a:	4620      	mov	r0, r4
 800885c:	f000 fbb8 	bl	8008fd0 <__multadd>
 8008860:	9b04      	ldr	r3, [sp, #16]
 8008862:	4607      	mov	r7, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	dc4d      	bgt.n	8008904 <_dtoa_r+0x94c>
 8008868:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800886a:	2b02      	cmp	r3, #2
 800886c:	dd4a      	ble.n	8008904 <_dtoa_r+0x94c>
 800886e:	e011      	b.n	8008894 <_dtoa_r+0x8dc>
 8008870:	d0c9      	beq.n	8008806 <_dtoa_r+0x84e>
 8008872:	9a07      	ldr	r2, [sp, #28]
 8008874:	331c      	adds	r3, #28
 8008876:	441a      	add	r2, r3
 8008878:	4499      	add	r9, r3
 800887a:	441d      	add	r5, r3
 800887c:	4613      	mov	r3, r2
 800887e:	e7c1      	b.n	8008804 <_dtoa_r+0x84c>
 8008880:	4603      	mov	r3, r0
 8008882:	e7f6      	b.n	8008872 <_dtoa_r+0x8ba>
 8008884:	f1b8 0f00 	cmp.w	r8, #0
 8008888:	dc36      	bgt.n	80088f8 <_dtoa_r+0x940>
 800888a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800888c:	2b02      	cmp	r3, #2
 800888e:	dd33      	ble.n	80088f8 <_dtoa_r+0x940>
 8008890:	f8cd 8010 	str.w	r8, [sp, #16]
 8008894:	9b04      	ldr	r3, [sp, #16]
 8008896:	b963      	cbnz	r3, 80088b2 <_dtoa_r+0x8fa>
 8008898:	4631      	mov	r1, r6
 800889a:	2205      	movs	r2, #5
 800889c:	4620      	mov	r0, r4
 800889e:	f000 fb97 	bl	8008fd0 <__multadd>
 80088a2:	4601      	mov	r1, r0
 80088a4:	4606      	mov	r6, r0
 80088a6:	4658      	mov	r0, fp
 80088a8:	f000 fd5c 	bl	8009364 <__mcmp>
 80088ac:	2800      	cmp	r0, #0
 80088ae:	f73f add3 	bgt.w	8008458 <_dtoa_r+0x4a0>
 80088b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80088b4:	9d06      	ldr	r5, [sp, #24]
 80088b6:	ea6f 0a03 	mvn.w	sl, r3
 80088ba:	f04f 0900 	mov.w	r9, #0
 80088be:	4631      	mov	r1, r6
 80088c0:	4620      	mov	r0, r4
 80088c2:	f000 fb6e 	bl	8008fa2 <_Bfree>
 80088c6:	2f00      	cmp	r7, #0
 80088c8:	f43f aebd 	beq.w	8008646 <_dtoa_r+0x68e>
 80088cc:	f1b9 0f00 	cmp.w	r9, #0
 80088d0:	d005      	beq.n	80088de <_dtoa_r+0x926>
 80088d2:	45b9      	cmp	r9, r7
 80088d4:	d003      	beq.n	80088de <_dtoa_r+0x926>
 80088d6:	4649      	mov	r1, r9
 80088d8:	4620      	mov	r0, r4
 80088da:	f000 fb62 	bl	8008fa2 <_Bfree>
 80088de:	4639      	mov	r1, r7
 80088e0:	4620      	mov	r0, r4
 80088e2:	f000 fb5e 	bl	8008fa2 <_Bfree>
 80088e6:	e6ae      	b.n	8008646 <_dtoa_r+0x68e>
 80088e8:	2600      	movs	r6, #0
 80088ea:	4637      	mov	r7, r6
 80088ec:	e7e1      	b.n	80088b2 <_dtoa_r+0x8fa>
 80088ee:	46ba      	mov	sl, r7
 80088f0:	4637      	mov	r7, r6
 80088f2:	e5b1      	b.n	8008458 <_dtoa_r+0x4a0>
 80088f4:	40240000 	.word	0x40240000
 80088f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088fa:	f8cd 8010 	str.w	r8, [sp, #16]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	f000 80f3 	beq.w	8008aea <_dtoa_r+0xb32>
 8008904:	2d00      	cmp	r5, #0
 8008906:	dd05      	ble.n	8008914 <_dtoa_r+0x95c>
 8008908:	4639      	mov	r1, r7
 800890a:	462a      	mov	r2, r5
 800890c:	4620      	mov	r0, r4
 800890e:	f000 fcd5 	bl	80092bc <__lshift>
 8008912:	4607      	mov	r7, r0
 8008914:	9b08      	ldr	r3, [sp, #32]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d04c      	beq.n	80089b4 <_dtoa_r+0x9fc>
 800891a:	6879      	ldr	r1, [r7, #4]
 800891c:	4620      	mov	r0, r4
 800891e:	f000 fb0c 	bl	8008f3a <_Balloc>
 8008922:	4605      	mov	r5, r0
 8008924:	693a      	ldr	r2, [r7, #16]
 8008926:	f107 010c 	add.w	r1, r7, #12
 800892a:	3202      	adds	r2, #2
 800892c:	0092      	lsls	r2, r2, #2
 800892e:	300c      	adds	r0, #12
 8008930:	f000 faf8 	bl	8008f24 <memcpy>
 8008934:	2201      	movs	r2, #1
 8008936:	4629      	mov	r1, r5
 8008938:	4620      	mov	r0, r4
 800893a:	f000 fcbf 	bl	80092bc <__lshift>
 800893e:	46b9      	mov	r9, r7
 8008940:	4607      	mov	r7, r0
 8008942:	9b06      	ldr	r3, [sp, #24]
 8008944:	9307      	str	r3, [sp, #28]
 8008946:	9b02      	ldr	r3, [sp, #8]
 8008948:	f003 0301 	and.w	r3, r3, #1
 800894c:	9308      	str	r3, [sp, #32]
 800894e:	4631      	mov	r1, r6
 8008950:	4658      	mov	r0, fp
 8008952:	f7ff faa3 	bl	8007e9c <quorem>
 8008956:	4649      	mov	r1, r9
 8008958:	4605      	mov	r5, r0
 800895a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800895e:	4658      	mov	r0, fp
 8008960:	f000 fd00 	bl	8009364 <__mcmp>
 8008964:	463a      	mov	r2, r7
 8008966:	9002      	str	r0, [sp, #8]
 8008968:	4631      	mov	r1, r6
 800896a:	4620      	mov	r0, r4
 800896c:	f000 fd14 	bl	8009398 <__mdiff>
 8008970:	68c3      	ldr	r3, [r0, #12]
 8008972:	4602      	mov	r2, r0
 8008974:	bb03      	cbnz	r3, 80089b8 <_dtoa_r+0xa00>
 8008976:	4601      	mov	r1, r0
 8008978:	9009      	str	r0, [sp, #36]	; 0x24
 800897a:	4658      	mov	r0, fp
 800897c:	f000 fcf2 	bl	8009364 <__mcmp>
 8008980:	4603      	mov	r3, r0
 8008982:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008984:	4611      	mov	r1, r2
 8008986:	4620      	mov	r0, r4
 8008988:	9309      	str	r3, [sp, #36]	; 0x24
 800898a:	f000 fb0a 	bl	8008fa2 <_Bfree>
 800898e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008990:	b9a3      	cbnz	r3, 80089bc <_dtoa_r+0xa04>
 8008992:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008994:	b992      	cbnz	r2, 80089bc <_dtoa_r+0xa04>
 8008996:	9a08      	ldr	r2, [sp, #32]
 8008998:	b982      	cbnz	r2, 80089bc <_dtoa_r+0xa04>
 800899a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800899e:	d029      	beq.n	80089f4 <_dtoa_r+0xa3c>
 80089a0:	9b02      	ldr	r3, [sp, #8]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	dd01      	ble.n	80089aa <_dtoa_r+0x9f2>
 80089a6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80089aa:	9b07      	ldr	r3, [sp, #28]
 80089ac:	1c5d      	adds	r5, r3, #1
 80089ae:	f883 8000 	strb.w	r8, [r3]
 80089b2:	e784      	b.n	80088be <_dtoa_r+0x906>
 80089b4:	4638      	mov	r0, r7
 80089b6:	e7c2      	b.n	800893e <_dtoa_r+0x986>
 80089b8:	2301      	movs	r3, #1
 80089ba:	e7e3      	b.n	8008984 <_dtoa_r+0x9cc>
 80089bc:	9a02      	ldr	r2, [sp, #8]
 80089be:	2a00      	cmp	r2, #0
 80089c0:	db04      	blt.n	80089cc <_dtoa_r+0xa14>
 80089c2:	d123      	bne.n	8008a0c <_dtoa_r+0xa54>
 80089c4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80089c6:	bb0a      	cbnz	r2, 8008a0c <_dtoa_r+0xa54>
 80089c8:	9a08      	ldr	r2, [sp, #32]
 80089ca:	b9fa      	cbnz	r2, 8008a0c <_dtoa_r+0xa54>
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	ddec      	ble.n	80089aa <_dtoa_r+0x9f2>
 80089d0:	4659      	mov	r1, fp
 80089d2:	2201      	movs	r2, #1
 80089d4:	4620      	mov	r0, r4
 80089d6:	f000 fc71 	bl	80092bc <__lshift>
 80089da:	4631      	mov	r1, r6
 80089dc:	4683      	mov	fp, r0
 80089de:	f000 fcc1 	bl	8009364 <__mcmp>
 80089e2:	2800      	cmp	r0, #0
 80089e4:	dc03      	bgt.n	80089ee <_dtoa_r+0xa36>
 80089e6:	d1e0      	bne.n	80089aa <_dtoa_r+0x9f2>
 80089e8:	f018 0f01 	tst.w	r8, #1
 80089ec:	d0dd      	beq.n	80089aa <_dtoa_r+0x9f2>
 80089ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80089f2:	d1d8      	bne.n	80089a6 <_dtoa_r+0x9ee>
 80089f4:	9b07      	ldr	r3, [sp, #28]
 80089f6:	9a07      	ldr	r2, [sp, #28]
 80089f8:	1c5d      	adds	r5, r3, #1
 80089fa:	2339      	movs	r3, #57	; 0x39
 80089fc:	7013      	strb	r3, [r2, #0]
 80089fe:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008a02:	1e6a      	subs	r2, r5, #1
 8008a04:	2b39      	cmp	r3, #57	; 0x39
 8008a06:	d04d      	beq.n	8008aa4 <_dtoa_r+0xaec>
 8008a08:	3301      	adds	r3, #1
 8008a0a:	e052      	b.n	8008ab2 <_dtoa_r+0xafa>
 8008a0c:	9a07      	ldr	r2, [sp, #28]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	f102 0501 	add.w	r5, r2, #1
 8008a14:	dd06      	ble.n	8008a24 <_dtoa_r+0xa6c>
 8008a16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008a1a:	d0eb      	beq.n	80089f4 <_dtoa_r+0xa3c>
 8008a1c:	f108 0801 	add.w	r8, r8, #1
 8008a20:	9b07      	ldr	r3, [sp, #28]
 8008a22:	e7c4      	b.n	80089ae <_dtoa_r+0x9f6>
 8008a24:	9b06      	ldr	r3, [sp, #24]
 8008a26:	9a04      	ldr	r2, [sp, #16]
 8008a28:	1aeb      	subs	r3, r5, r3
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008a30:	d021      	beq.n	8008a76 <_dtoa_r+0xabe>
 8008a32:	4659      	mov	r1, fp
 8008a34:	2300      	movs	r3, #0
 8008a36:	220a      	movs	r2, #10
 8008a38:	4620      	mov	r0, r4
 8008a3a:	f000 fac9 	bl	8008fd0 <__multadd>
 8008a3e:	45b9      	cmp	r9, r7
 8008a40:	4683      	mov	fp, r0
 8008a42:	f04f 0300 	mov.w	r3, #0
 8008a46:	f04f 020a 	mov.w	r2, #10
 8008a4a:	4649      	mov	r1, r9
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	d105      	bne.n	8008a5c <_dtoa_r+0xaa4>
 8008a50:	f000 fabe 	bl	8008fd0 <__multadd>
 8008a54:	4681      	mov	r9, r0
 8008a56:	4607      	mov	r7, r0
 8008a58:	9507      	str	r5, [sp, #28]
 8008a5a:	e778      	b.n	800894e <_dtoa_r+0x996>
 8008a5c:	f000 fab8 	bl	8008fd0 <__multadd>
 8008a60:	4639      	mov	r1, r7
 8008a62:	4681      	mov	r9, r0
 8008a64:	2300      	movs	r3, #0
 8008a66:	220a      	movs	r2, #10
 8008a68:	4620      	mov	r0, r4
 8008a6a:	f000 fab1 	bl	8008fd0 <__multadd>
 8008a6e:	4607      	mov	r7, r0
 8008a70:	e7f2      	b.n	8008a58 <_dtoa_r+0xaa0>
 8008a72:	f04f 0900 	mov.w	r9, #0
 8008a76:	4659      	mov	r1, fp
 8008a78:	2201      	movs	r2, #1
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	f000 fc1e 	bl	80092bc <__lshift>
 8008a80:	4631      	mov	r1, r6
 8008a82:	4683      	mov	fp, r0
 8008a84:	f000 fc6e 	bl	8009364 <__mcmp>
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	dcb8      	bgt.n	80089fe <_dtoa_r+0xa46>
 8008a8c:	d102      	bne.n	8008a94 <_dtoa_r+0xadc>
 8008a8e:	f018 0f01 	tst.w	r8, #1
 8008a92:	d1b4      	bne.n	80089fe <_dtoa_r+0xa46>
 8008a94:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008a98:	1e6a      	subs	r2, r5, #1
 8008a9a:	2b30      	cmp	r3, #48	; 0x30
 8008a9c:	f47f af0f 	bne.w	80088be <_dtoa_r+0x906>
 8008aa0:	4615      	mov	r5, r2
 8008aa2:	e7f7      	b.n	8008a94 <_dtoa_r+0xadc>
 8008aa4:	9b06      	ldr	r3, [sp, #24]
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d105      	bne.n	8008ab6 <_dtoa_r+0xafe>
 8008aaa:	2331      	movs	r3, #49	; 0x31
 8008aac:	9a06      	ldr	r2, [sp, #24]
 8008aae:	f10a 0a01 	add.w	sl, sl, #1
 8008ab2:	7013      	strb	r3, [r2, #0]
 8008ab4:	e703      	b.n	80088be <_dtoa_r+0x906>
 8008ab6:	4615      	mov	r5, r2
 8008ab8:	e7a1      	b.n	80089fe <_dtoa_r+0xa46>
 8008aba:	4b17      	ldr	r3, [pc, #92]	; (8008b18 <_dtoa_r+0xb60>)
 8008abc:	f7ff bae1 	b.w	8008082 <_dtoa_r+0xca>
 8008ac0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	f47f aabb 	bne.w	800803e <_dtoa_r+0x86>
 8008ac8:	4b14      	ldr	r3, [pc, #80]	; (8008b1c <_dtoa_r+0xb64>)
 8008aca:	f7ff bada 	b.w	8008082 <_dtoa_r+0xca>
 8008ace:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	f77f ae3f 	ble.w	8008754 <_dtoa_r+0x79c>
 8008ad6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ad8:	9308      	str	r3, [sp, #32]
 8008ada:	e653      	b.n	8008784 <_dtoa_r+0x7cc>
 8008adc:	9b04      	ldr	r3, [sp, #16]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	dc03      	bgt.n	8008aea <_dtoa_r+0xb32>
 8008ae2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	f73f aed5 	bgt.w	8008894 <_dtoa_r+0x8dc>
 8008aea:	9d06      	ldr	r5, [sp, #24]
 8008aec:	4631      	mov	r1, r6
 8008aee:	4658      	mov	r0, fp
 8008af0:	f7ff f9d4 	bl	8007e9c <quorem>
 8008af4:	9b06      	ldr	r3, [sp, #24]
 8008af6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008afa:	f805 8b01 	strb.w	r8, [r5], #1
 8008afe:	9a04      	ldr	r2, [sp, #16]
 8008b00:	1aeb      	subs	r3, r5, r3
 8008b02:	429a      	cmp	r2, r3
 8008b04:	ddb5      	ble.n	8008a72 <_dtoa_r+0xaba>
 8008b06:	4659      	mov	r1, fp
 8008b08:	2300      	movs	r3, #0
 8008b0a:	220a      	movs	r2, #10
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	f000 fa5f 	bl	8008fd0 <__multadd>
 8008b12:	4683      	mov	fp, r0
 8008b14:	e7ea      	b.n	8008aec <_dtoa_r+0xb34>
 8008b16:	bf00      	nop
 8008b18:	08009c64 	.word	0x08009c64
 8008b1c:	08009c88 	.word	0x08009c88

08008b20 <__sflush_r>:
 8008b20:	898a      	ldrh	r2, [r1, #12]
 8008b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b26:	4605      	mov	r5, r0
 8008b28:	0710      	lsls	r0, r2, #28
 8008b2a:	460c      	mov	r4, r1
 8008b2c:	d458      	bmi.n	8008be0 <__sflush_r+0xc0>
 8008b2e:	684b      	ldr	r3, [r1, #4]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	dc05      	bgt.n	8008b40 <__sflush_r+0x20>
 8008b34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	dc02      	bgt.n	8008b40 <__sflush_r+0x20>
 8008b3a:	2000      	movs	r0, #0
 8008b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b42:	2e00      	cmp	r6, #0
 8008b44:	d0f9      	beq.n	8008b3a <__sflush_r+0x1a>
 8008b46:	2300      	movs	r3, #0
 8008b48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b4c:	682f      	ldr	r7, [r5, #0]
 8008b4e:	6a21      	ldr	r1, [r4, #32]
 8008b50:	602b      	str	r3, [r5, #0]
 8008b52:	d032      	beq.n	8008bba <__sflush_r+0x9a>
 8008b54:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b56:	89a3      	ldrh	r3, [r4, #12]
 8008b58:	075a      	lsls	r2, r3, #29
 8008b5a:	d505      	bpl.n	8008b68 <__sflush_r+0x48>
 8008b5c:	6863      	ldr	r3, [r4, #4]
 8008b5e:	1ac0      	subs	r0, r0, r3
 8008b60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b62:	b10b      	cbz	r3, 8008b68 <__sflush_r+0x48>
 8008b64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b66:	1ac0      	subs	r0, r0, r3
 8008b68:	2300      	movs	r3, #0
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b6e:	6a21      	ldr	r1, [r4, #32]
 8008b70:	4628      	mov	r0, r5
 8008b72:	47b0      	blx	r6
 8008b74:	1c43      	adds	r3, r0, #1
 8008b76:	89a3      	ldrh	r3, [r4, #12]
 8008b78:	d106      	bne.n	8008b88 <__sflush_r+0x68>
 8008b7a:	6829      	ldr	r1, [r5, #0]
 8008b7c:	291d      	cmp	r1, #29
 8008b7e:	d848      	bhi.n	8008c12 <__sflush_r+0xf2>
 8008b80:	4a29      	ldr	r2, [pc, #164]	; (8008c28 <__sflush_r+0x108>)
 8008b82:	40ca      	lsrs	r2, r1
 8008b84:	07d6      	lsls	r6, r2, #31
 8008b86:	d544      	bpl.n	8008c12 <__sflush_r+0xf2>
 8008b88:	2200      	movs	r2, #0
 8008b8a:	6062      	str	r2, [r4, #4]
 8008b8c:	6922      	ldr	r2, [r4, #16]
 8008b8e:	04d9      	lsls	r1, r3, #19
 8008b90:	6022      	str	r2, [r4, #0]
 8008b92:	d504      	bpl.n	8008b9e <__sflush_r+0x7e>
 8008b94:	1c42      	adds	r2, r0, #1
 8008b96:	d101      	bne.n	8008b9c <__sflush_r+0x7c>
 8008b98:	682b      	ldr	r3, [r5, #0]
 8008b9a:	b903      	cbnz	r3, 8008b9e <__sflush_r+0x7e>
 8008b9c:	6560      	str	r0, [r4, #84]	; 0x54
 8008b9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ba0:	602f      	str	r7, [r5, #0]
 8008ba2:	2900      	cmp	r1, #0
 8008ba4:	d0c9      	beq.n	8008b3a <__sflush_r+0x1a>
 8008ba6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008baa:	4299      	cmp	r1, r3
 8008bac:	d002      	beq.n	8008bb4 <__sflush_r+0x94>
 8008bae:	4628      	mov	r0, r5
 8008bb0:	f000 fcae 	bl	8009510 <_free_r>
 8008bb4:	2000      	movs	r0, #0
 8008bb6:	6360      	str	r0, [r4, #52]	; 0x34
 8008bb8:	e7c0      	b.n	8008b3c <__sflush_r+0x1c>
 8008bba:	2301      	movs	r3, #1
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	47b0      	blx	r6
 8008bc0:	1c41      	adds	r1, r0, #1
 8008bc2:	d1c8      	bne.n	8008b56 <__sflush_r+0x36>
 8008bc4:	682b      	ldr	r3, [r5, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d0c5      	beq.n	8008b56 <__sflush_r+0x36>
 8008bca:	2b1d      	cmp	r3, #29
 8008bcc:	d001      	beq.n	8008bd2 <__sflush_r+0xb2>
 8008bce:	2b16      	cmp	r3, #22
 8008bd0:	d101      	bne.n	8008bd6 <__sflush_r+0xb6>
 8008bd2:	602f      	str	r7, [r5, #0]
 8008bd4:	e7b1      	b.n	8008b3a <__sflush_r+0x1a>
 8008bd6:	89a3      	ldrh	r3, [r4, #12]
 8008bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bdc:	81a3      	strh	r3, [r4, #12]
 8008bde:	e7ad      	b.n	8008b3c <__sflush_r+0x1c>
 8008be0:	690f      	ldr	r7, [r1, #16]
 8008be2:	2f00      	cmp	r7, #0
 8008be4:	d0a9      	beq.n	8008b3a <__sflush_r+0x1a>
 8008be6:	0793      	lsls	r3, r2, #30
 8008be8:	bf18      	it	ne
 8008bea:	2300      	movne	r3, #0
 8008bec:	680e      	ldr	r6, [r1, #0]
 8008bee:	bf08      	it	eq
 8008bf0:	694b      	ldreq	r3, [r1, #20]
 8008bf2:	eba6 0807 	sub.w	r8, r6, r7
 8008bf6:	600f      	str	r7, [r1, #0]
 8008bf8:	608b      	str	r3, [r1, #8]
 8008bfa:	f1b8 0f00 	cmp.w	r8, #0
 8008bfe:	dd9c      	ble.n	8008b3a <__sflush_r+0x1a>
 8008c00:	4643      	mov	r3, r8
 8008c02:	463a      	mov	r2, r7
 8008c04:	6a21      	ldr	r1, [r4, #32]
 8008c06:	4628      	mov	r0, r5
 8008c08:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c0a:	47b0      	blx	r6
 8008c0c:	2800      	cmp	r0, #0
 8008c0e:	dc06      	bgt.n	8008c1e <__sflush_r+0xfe>
 8008c10:	89a3      	ldrh	r3, [r4, #12]
 8008c12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c16:	81a3      	strh	r3, [r4, #12]
 8008c18:	f04f 30ff 	mov.w	r0, #4294967295
 8008c1c:	e78e      	b.n	8008b3c <__sflush_r+0x1c>
 8008c1e:	4407      	add	r7, r0
 8008c20:	eba8 0800 	sub.w	r8, r8, r0
 8008c24:	e7e9      	b.n	8008bfa <__sflush_r+0xda>
 8008c26:	bf00      	nop
 8008c28:	20400001 	.word	0x20400001

08008c2c <_fflush_r>:
 8008c2c:	b538      	push	{r3, r4, r5, lr}
 8008c2e:	690b      	ldr	r3, [r1, #16]
 8008c30:	4605      	mov	r5, r0
 8008c32:	460c      	mov	r4, r1
 8008c34:	b1db      	cbz	r3, 8008c6e <_fflush_r+0x42>
 8008c36:	b118      	cbz	r0, 8008c40 <_fflush_r+0x14>
 8008c38:	6983      	ldr	r3, [r0, #24]
 8008c3a:	b90b      	cbnz	r3, 8008c40 <_fflush_r+0x14>
 8008c3c:	f000 f860 	bl	8008d00 <__sinit>
 8008c40:	4b0c      	ldr	r3, [pc, #48]	; (8008c74 <_fflush_r+0x48>)
 8008c42:	429c      	cmp	r4, r3
 8008c44:	d109      	bne.n	8008c5a <_fflush_r+0x2e>
 8008c46:	686c      	ldr	r4, [r5, #4]
 8008c48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c4c:	b17b      	cbz	r3, 8008c6e <_fflush_r+0x42>
 8008c4e:	4621      	mov	r1, r4
 8008c50:	4628      	mov	r0, r5
 8008c52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c56:	f7ff bf63 	b.w	8008b20 <__sflush_r>
 8008c5a:	4b07      	ldr	r3, [pc, #28]	; (8008c78 <_fflush_r+0x4c>)
 8008c5c:	429c      	cmp	r4, r3
 8008c5e:	d101      	bne.n	8008c64 <_fflush_r+0x38>
 8008c60:	68ac      	ldr	r4, [r5, #8]
 8008c62:	e7f1      	b.n	8008c48 <_fflush_r+0x1c>
 8008c64:	4b05      	ldr	r3, [pc, #20]	; (8008c7c <_fflush_r+0x50>)
 8008c66:	429c      	cmp	r4, r3
 8008c68:	bf08      	it	eq
 8008c6a:	68ec      	ldreq	r4, [r5, #12]
 8008c6c:	e7ec      	b.n	8008c48 <_fflush_r+0x1c>
 8008c6e:	2000      	movs	r0, #0
 8008c70:	bd38      	pop	{r3, r4, r5, pc}
 8008c72:	bf00      	nop
 8008c74:	08009cb8 	.word	0x08009cb8
 8008c78:	08009cd8 	.word	0x08009cd8
 8008c7c:	08009c98 	.word	0x08009c98

08008c80 <std>:
 8008c80:	2300      	movs	r3, #0
 8008c82:	b510      	push	{r4, lr}
 8008c84:	4604      	mov	r4, r0
 8008c86:	e9c0 3300 	strd	r3, r3, [r0]
 8008c8a:	6083      	str	r3, [r0, #8]
 8008c8c:	8181      	strh	r1, [r0, #12]
 8008c8e:	6643      	str	r3, [r0, #100]	; 0x64
 8008c90:	81c2      	strh	r2, [r0, #14]
 8008c92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c96:	6183      	str	r3, [r0, #24]
 8008c98:	4619      	mov	r1, r3
 8008c9a:	2208      	movs	r2, #8
 8008c9c:	305c      	adds	r0, #92	; 0x5c
 8008c9e:	f7fe fb69 	bl	8007374 <memset>
 8008ca2:	4b05      	ldr	r3, [pc, #20]	; (8008cb8 <std+0x38>)
 8008ca4:	6224      	str	r4, [r4, #32]
 8008ca6:	6263      	str	r3, [r4, #36]	; 0x24
 8008ca8:	4b04      	ldr	r3, [pc, #16]	; (8008cbc <std+0x3c>)
 8008caa:	62a3      	str	r3, [r4, #40]	; 0x28
 8008cac:	4b04      	ldr	r3, [pc, #16]	; (8008cc0 <std+0x40>)
 8008cae:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008cb0:	4b04      	ldr	r3, [pc, #16]	; (8008cc4 <std+0x44>)
 8008cb2:	6323      	str	r3, [r4, #48]	; 0x30
 8008cb4:	bd10      	pop	{r4, pc}
 8008cb6:	bf00      	nop
 8008cb8:	080098f9 	.word	0x080098f9
 8008cbc:	0800991b 	.word	0x0800991b
 8008cc0:	08009953 	.word	0x08009953
 8008cc4:	08009977 	.word	0x08009977

08008cc8 <_cleanup_r>:
 8008cc8:	4901      	ldr	r1, [pc, #4]	; (8008cd0 <_cleanup_r+0x8>)
 8008cca:	f000 b885 	b.w	8008dd8 <_fwalk_reent>
 8008cce:	bf00      	nop
 8008cd0:	08008c2d 	.word	0x08008c2d

08008cd4 <__sfmoreglue>:
 8008cd4:	b570      	push	{r4, r5, r6, lr}
 8008cd6:	2568      	movs	r5, #104	; 0x68
 8008cd8:	1e4a      	subs	r2, r1, #1
 8008cda:	4355      	muls	r5, r2
 8008cdc:	460e      	mov	r6, r1
 8008cde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008ce2:	f000 fc61 	bl	80095a8 <_malloc_r>
 8008ce6:	4604      	mov	r4, r0
 8008ce8:	b140      	cbz	r0, 8008cfc <__sfmoreglue+0x28>
 8008cea:	2100      	movs	r1, #0
 8008cec:	e9c0 1600 	strd	r1, r6, [r0]
 8008cf0:	300c      	adds	r0, #12
 8008cf2:	60a0      	str	r0, [r4, #8]
 8008cf4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008cf8:	f7fe fb3c 	bl	8007374 <memset>
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	bd70      	pop	{r4, r5, r6, pc}

08008d00 <__sinit>:
 8008d00:	6983      	ldr	r3, [r0, #24]
 8008d02:	b510      	push	{r4, lr}
 8008d04:	4604      	mov	r4, r0
 8008d06:	bb33      	cbnz	r3, 8008d56 <__sinit+0x56>
 8008d08:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008d0c:	6503      	str	r3, [r0, #80]	; 0x50
 8008d0e:	4b12      	ldr	r3, [pc, #72]	; (8008d58 <__sinit+0x58>)
 8008d10:	4a12      	ldr	r2, [pc, #72]	; (8008d5c <__sinit+0x5c>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	6282      	str	r2, [r0, #40]	; 0x28
 8008d16:	4298      	cmp	r0, r3
 8008d18:	bf04      	itt	eq
 8008d1a:	2301      	moveq	r3, #1
 8008d1c:	6183      	streq	r3, [r0, #24]
 8008d1e:	f000 f81f 	bl	8008d60 <__sfp>
 8008d22:	6060      	str	r0, [r4, #4]
 8008d24:	4620      	mov	r0, r4
 8008d26:	f000 f81b 	bl	8008d60 <__sfp>
 8008d2a:	60a0      	str	r0, [r4, #8]
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	f000 f817 	bl	8008d60 <__sfp>
 8008d32:	2200      	movs	r2, #0
 8008d34:	60e0      	str	r0, [r4, #12]
 8008d36:	2104      	movs	r1, #4
 8008d38:	6860      	ldr	r0, [r4, #4]
 8008d3a:	f7ff ffa1 	bl	8008c80 <std>
 8008d3e:	2201      	movs	r2, #1
 8008d40:	2109      	movs	r1, #9
 8008d42:	68a0      	ldr	r0, [r4, #8]
 8008d44:	f7ff ff9c 	bl	8008c80 <std>
 8008d48:	2202      	movs	r2, #2
 8008d4a:	2112      	movs	r1, #18
 8008d4c:	68e0      	ldr	r0, [r4, #12]
 8008d4e:	f7ff ff97 	bl	8008c80 <std>
 8008d52:	2301      	movs	r3, #1
 8008d54:	61a3      	str	r3, [r4, #24]
 8008d56:	bd10      	pop	{r4, pc}
 8008d58:	08009c50 	.word	0x08009c50
 8008d5c:	08008cc9 	.word	0x08008cc9

08008d60 <__sfp>:
 8008d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d62:	4b1b      	ldr	r3, [pc, #108]	; (8008dd0 <__sfp+0x70>)
 8008d64:	4607      	mov	r7, r0
 8008d66:	681e      	ldr	r6, [r3, #0]
 8008d68:	69b3      	ldr	r3, [r6, #24]
 8008d6a:	b913      	cbnz	r3, 8008d72 <__sfp+0x12>
 8008d6c:	4630      	mov	r0, r6
 8008d6e:	f7ff ffc7 	bl	8008d00 <__sinit>
 8008d72:	3648      	adds	r6, #72	; 0x48
 8008d74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	d503      	bpl.n	8008d84 <__sfp+0x24>
 8008d7c:	6833      	ldr	r3, [r6, #0]
 8008d7e:	b133      	cbz	r3, 8008d8e <__sfp+0x2e>
 8008d80:	6836      	ldr	r6, [r6, #0]
 8008d82:	e7f7      	b.n	8008d74 <__sfp+0x14>
 8008d84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008d88:	b16d      	cbz	r5, 8008da6 <__sfp+0x46>
 8008d8a:	3468      	adds	r4, #104	; 0x68
 8008d8c:	e7f4      	b.n	8008d78 <__sfp+0x18>
 8008d8e:	2104      	movs	r1, #4
 8008d90:	4638      	mov	r0, r7
 8008d92:	f7ff ff9f 	bl	8008cd4 <__sfmoreglue>
 8008d96:	6030      	str	r0, [r6, #0]
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	d1f1      	bne.n	8008d80 <__sfp+0x20>
 8008d9c:	230c      	movs	r3, #12
 8008d9e:	4604      	mov	r4, r0
 8008da0:	603b      	str	r3, [r7, #0]
 8008da2:	4620      	mov	r0, r4
 8008da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008da6:	4b0b      	ldr	r3, [pc, #44]	; (8008dd4 <__sfp+0x74>)
 8008da8:	6665      	str	r5, [r4, #100]	; 0x64
 8008daa:	e9c4 5500 	strd	r5, r5, [r4]
 8008dae:	60a5      	str	r5, [r4, #8]
 8008db0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008db4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008db8:	2208      	movs	r2, #8
 8008dba:	4629      	mov	r1, r5
 8008dbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008dc0:	f7fe fad8 	bl	8007374 <memset>
 8008dc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008dc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008dcc:	e7e9      	b.n	8008da2 <__sfp+0x42>
 8008dce:	bf00      	nop
 8008dd0:	08009c50 	.word	0x08009c50
 8008dd4:	ffff0001 	.word	0xffff0001

08008dd8 <_fwalk_reent>:
 8008dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ddc:	4680      	mov	r8, r0
 8008dde:	4689      	mov	r9, r1
 8008de0:	2600      	movs	r6, #0
 8008de2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008de6:	b914      	cbnz	r4, 8008dee <_fwalk_reent+0x16>
 8008de8:	4630      	mov	r0, r6
 8008dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008df2:	3f01      	subs	r7, #1
 8008df4:	d501      	bpl.n	8008dfa <_fwalk_reent+0x22>
 8008df6:	6824      	ldr	r4, [r4, #0]
 8008df8:	e7f5      	b.n	8008de6 <_fwalk_reent+0xe>
 8008dfa:	89ab      	ldrh	r3, [r5, #12]
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d907      	bls.n	8008e10 <_fwalk_reent+0x38>
 8008e00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e04:	3301      	adds	r3, #1
 8008e06:	d003      	beq.n	8008e10 <_fwalk_reent+0x38>
 8008e08:	4629      	mov	r1, r5
 8008e0a:	4640      	mov	r0, r8
 8008e0c:	47c8      	blx	r9
 8008e0e:	4306      	orrs	r6, r0
 8008e10:	3568      	adds	r5, #104	; 0x68
 8008e12:	e7ee      	b.n	8008df2 <_fwalk_reent+0x1a>

08008e14 <_localeconv_r>:
 8008e14:	4b04      	ldr	r3, [pc, #16]	; (8008e28 <_localeconv_r+0x14>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	6a18      	ldr	r0, [r3, #32]
 8008e1a:	4b04      	ldr	r3, [pc, #16]	; (8008e2c <_localeconv_r+0x18>)
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	bf08      	it	eq
 8008e20:	4618      	moveq	r0, r3
 8008e22:	30f0      	adds	r0, #240	; 0xf0
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	20000024 	.word	0x20000024
 8008e2c:	20000088 	.word	0x20000088

08008e30 <__swhatbuf_r>:
 8008e30:	b570      	push	{r4, r5, r6, lr}
 8008e32:	460e      	mov	r6, r1
 8008e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e38:	b096      	sub	sp, #88	; 0x58
 8008e3a:	2900      	cmp	r1, #0
 8008e3c:	4614      	mov	r4, r2
 8008e3e:	461d      	mov	r5, r3
 8008e40:	da07      	bge.n	8008e52 <__swhatbuf_r+0x22>
 8008e42:	2300      	movs	r3, #0
 8008e44:	602b      	str	r3, [r5, #0]
 8008e46:	89b3      	ldrh	r3, [r6, #12]
 8008e48:	061a      	lsls	r2, r3, #24
 8008e4a:	d410      	bmi.n	8008e6e <__swhatbuf_r+0x3e>
 8008e4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e50:	e00e      	b.n	8008e70 <__swhatbuf_r+0x40>
 8008e52:	466a      	mov	r2, sp
 8008e54:	f000 fdb6 	bl	80099c4 <_fstat_r>
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	dbf2      	blt.n	8008e42 <__swhatbuf_r+0x12>
 8008e5c:	9a01      	ldr	r2, [sp, #4]
 8008e5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008e62:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008e66:	425a      	negs	r2, r3
 8008e68:	415a      	adcs	r2, r3
 8008e6a:	602a      	str	r2, [r5, #0]
 8008e6c:	e7ee      	b.n	8008e4c <__swhatbuf_r+0x1c>
 8008e6e:	2340      	movs	r3, #64	; 0x40
 8008e70:	2000      	movs	r0, #0
 8008e72:	6023      	str	r3, [r4, #0]
 8008e74:	b016      	add	sp, #88	; 0x58
 8008e76:	bd70      	pop	{r4, r5, r6, pc}

08008e78 <__smakebuf_r>:
 8008e78:	898b      	ldrh	r3, [r1, #12]
 8008e7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e7c:	079d      	lsls	r5, r3, #30
 8008e7e:	4606      	mov	r6, r0
 8008e80:	460c      	mov	r4, r1
 8008e82:	d507      	bpl.n	8008e94 <__smakebuf_r+0x1c>
 8008e84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e88:	6023      	str	r3, [r4, #0]
 8008e8a:	6123      	str	r3, [r4, #16]
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	6163      	str	r3, [r4, #20]
 8008e90:	b002      	add	sp, #8
 8008e92:	bd70      	pop	{r4, r5, r6, pc}
 8008e94:	ab01      	add	r3, sp, #4
 8008e96:	466a      	mov	r2, sp
 8008e98:	f7ff ffca 	bl	8008e30 <__swhatbuf_r>
 8008e9c:	9900      	ldr	r1, [sp, #0]
 8008e9e:	4605      	mov	r5, r0
 8008ea0:	4630      	mov	r0, r6
 8008ea2:	f000 fb81 	bl	80095a8 <_malloc_r>
 8008ea6:	b948      	cbnz	r0, 8008ebc <__smakebuf_r+0x44>
 8008ea8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eac:	059a      	lsls	r2, r3, #22
 8008eae:	d4ef      	bmi.n	8008e90 <__smakebuf_r+0x18>
 8008eb0:	f023 0303 	bic.w	r3, r3, #3
 8008eb4:	f043 0302 	orr.w	r3, r3, #2
 8008eb8:	81a3      	strh	r3, [r4, #12]
 8008eba:	e7e3      	b.n	8008e84 <__smakebuf_r+0xc>
 8008ebc:	4b0d      	ldr	r3, [pc, #52]	; (8008ef4 <__smakebuf_r+0x7c>)
 8008ebe:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ec0:	89a3      	ldrh	r3, [r4, #12]
 8008ec2:	6020      	str	r0, [r4, #0]
 8008ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ec8:	81a3      	strh	r3, [r4, #12]
 8008eca:	9b00      	ldr	r3, [sp, #0]
 8008ecc:	6120      	str	r0, [r4, #16]
 8008ece:	6163      	str	r3, [r4, #20]
 8008ed0:	9b01      	ldr	r3, [sp, #4]
 8008ed2:	b15b      	cbz	r3, 8008eec <__smakebuf_r+0x74>
 8008ed4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ed8:	4630      	mov	r0, r6
 8008eda:	f000 fd85 	bl	80099e8 <_isatty_r>
 8008ede:	b128      	cbz	r0, 8008eec <__smakebuf_r+0x74>
 8008ee0:	89a3      	ldrh	r3, [r4, #12]
 8008ee2:	f023 0303 	bic.w	r3, r3, #3
 8008ee6:	f043 0301 	orr.w	r3, r3, #1
 8008eea:	81a3      	strh	r3, [r4, #12]
 8008eec:	89a3      	ldrh	r3, [r4, #12]
 8008eee:	431d      	orrs	r5, r3
 8008ef0:	81a5      	strh	r5, [r4, #12]
 8008ef2:	e7cd      	b.n	8008e90 <__smakebuf_r+0x18>
 8008ef4:	08008cc9 	.word	0x08008cc9

08008ef8 <malloc>:
 8008ef8:	4b02      	ldr	r3, [pc, #8]	; (8008f04 <malloc+0xc>)
 8008efa:	4601      	mov	r1, r0
 8008efc:	6818      	ldr	r0, [r3, #0]
 8008efe:	f000 bb53 	b.w	80095a8 <_malloc_r>
 8008f02:	bf00      	nop
 8008f04:	20000024 	.word	0x20000024

08008f08 <memchr>:
 8008f08:	b510      	push	{r4, lr}
 8008f0a:	b2c9      	uxtb	r1, r1
 8008f0c:	4402      	add	r2, r0
 8008f0e:	4290      	cmp	r0, r2
 8008f10:	4603      	mov	r3, r0
 8008f12:	d101      	bne.n	8008f18 <memchr+0x10>
 8008f14:	2300      	movs	r3, #0
 8008f16:	e003      	b.n	8008f20 <memchr+0x18>
 8008f18:	781c      	ldrb	r4, [r3, #0]
 8008f1a:	3001      	adds	r0, #1
 8008f1c:	428c      	cmp	r4, r1
 8008f1e:	d1f6      	bne.n	8008f0e <memchr+0x6>
 8008f20:	4618      	mov	r0, r3
 8008f22:	bd10      	pop	{r4, pc}

08008f24 <memcpy>:
 8008f24:	b510      	push	{r4, lr}
 8008f26:	1e43      	subs	r3, r0, #1
 8008f28:	440a      	add	r2, r1
 8008f2a:	4291      	cmp	r1, r2
 8008f2c:	d100      	bne.n	8008f30 <memcpy+0xc>
 8008f2e:	bd10      	pop	{r4, pc}
 8008f30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f38:	e7f7      	b.n	8008f2a <memcpy+0x6>

08008f3a <_Balloc>:
 8008f3a:	b570      	push	{r4, r5, r6, lr}
 8008f3c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008f3e:	4604      	mov	r4, r0
 8008f40:	460e      	mov	r6, r1
 8008f42:	b93d      	cbnz	r5, 8008f54 <_Balloc+0x1a>
 8008f44:	2010      	movs	r0, #16
 8008f46:	f7ff ffd7 	bl	8008ef8 <malloc>
 8008f4a:	6260      	str	r0, [r4, #36]	; 0x24
 8008f4c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008f50:	6005      	str	r5, [r0, #0]
 8008f52:	60c5      	str	r5, [r0, #12]
 8008f54:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008f56:	68eb      	ldr	r3, [r5, #12]
 8008f58:	b183      	cbz	r3, 8008f7c <_Balloc+0x42>
 8008f5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008f62:	b9b8      	cbnz	r0, 8008f94 <_Balloc+0x5a>
 8008f64:	2101      	movs	r1, #1
 8008f66:	fa01 f506 	lsl.w	r5, r1, r6
 8008f6a:	1d6a      	adds	r2, r5, #5
 8008f6c:	0092      	lsls	r2, r2, #2
 8008f6e:	4620      	mov	r0, r4
 8008f70:	f000 fabf 	bl	80094f2 <_calloc_r>
 8008f74:	b160      	cbz	r0, 8008f90 <_Balloc+0x56>
 8008f76:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008f7a:	e00e      	b.n	8008f9a <_Balloc+0x60>
 8008f7c:	2221      	movs	r2, #33	; 0x21
 8008f7e:	2104      	movs	r1, #4
 8008f80:	4620      	mov	r0, r4
 8008f82:	f000 fab6 	bl	80094f2 <_calloc_r>
 8008f86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f88:	60e8      	str	r0, [r5, #12]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d1e4      	bne.n	8008f5a <_Balloc+0x20>
 8008f90:	2000      	movs	r0, #0
 8008f92:	bd70      	pop	{r4, r5, r6, pc}
 8008f94:	6802      	ldr	r2, [r0, #0]
 8008f96:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008fa0:	e7f7      	b.n	8008f92 <_Balloc+0x58>

08008fa2 <_Bfree>:
 8008fa2:	b570      	push	{r4, r5, r6, lr}
 8008fa4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008fa6:	4606      	mov	r6, r0
 8008fa8:	460d      	mov	r5, r1
 8008faa:	b93c      	cbnz	r4, 8008fbc <_Bfree+0x1a>
 8008fac:	2010      	movs	r0, #16
 8008fae:	f7ff ffa3 	bl	8008ef8 <malloc>
 8008fb2:	6270      	str	r0, [r6, #36]	; 0x24
 8008fb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008fb8:	6004      	str	r4, [r0, #0]
 8008fba:	60c4      	str	r4, [r0, #12]
 8008fbc:	b13d      	cbz	r5, 8008fce <_Bfree+0x2c>
 8008fbe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008fc0:	686a      	ldr	r2, [r5, #4]
 8008fc2:	68db      	ldr	r3, [r3, #12]
 8008fc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008fc8:	6029      	str	r1, [r5, #0]
 8008fca:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008fce:	bd70      	pop	{r4, r5, r6, pc}

08008fd0 <__multadd>:
 8008fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fd4:	461f      	mov	r7, r3
 8008fd6:	4606      	mov	r6, r0
 8008fd8:	460c      	mov	r4, r1
 8008fda:	2300      	movs	r3, #0
 8008fdc:	690d      	ldr	r5, [r1, #16]
 8008fde:	f101 0c14 	add.w	ip, r1, #20
 8008fe2:	f8dc 0000 	ldr.w	r0, [ip]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	b281      	uxth	r1, r0
 8008fea:	fb02 7101 	mla	r1, r2, r1, r7
 8008fee:	0c00      	lsrs	r0, r0, #16
 8008ff0:	0c0f      	lsrs	r7, r1, #16
 8008ff2:	fb02 7000 	mla	r0, r2, r0, r7
 8008ff6:	b289      	uxth	r1, r1
 8008ff8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008ffc:	429d      	cmp	r5, r3
 8008ffe:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009002:	f84c 1b04 	str.w	r1, [ip], #4
 8009006:	dcec      	bgt.n	8008fe2 <__multadd+0x12>
 8009008:	b1d7      	cbz	r7, 8009040 <__multadd+0x70>
 800900a:	68a3      	ldr	r3, [r4, #8]
 800900c:	42ab      	cmp	r3, r5
 800900e:	dc12      	bgt.n	8009036 <__multadd+0x66>
 8009010:	6861      	ldr	r1, [r4, #4]
 8009012:	4630      	mov	r0, r6
 8009014:	3101      	adds	r1, #1
 8009016:	f7ff ff90 	bl	8008f3a <_Balloc>
 800901a:	4680      	mov	r8, r0
 800901c:	6922      	ldr	r2, [r4, #16]
 800901e:	f104 010c 	add.w	r1, r4, #12
 8009022:	3202      	adds	r2, #2
 8009024:	0092      	lsls	r2, r2, #2
 8009026:	300c      	adds	r0, #12
 8009028:	f7ff ff7c 	bl	8008f24 <memcpy>
 800902c:	4621      	mov	r1, r4
 800902e:	4630      	mov	r0, r6
 8009030:	f7ff ffb7 	bl	8008fa2 <_Bfree>
 8009034:	4644      	mov	r4, r8
 8009036:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800903a:	3501      	adds	r5, #1
 800903c:	615f      	str	r7, [r3, #20]
 800903e:	6125      	str	r5, [r4, #16]
 8009040:	4620      	mov	r0, r4
 8009042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009046 <__hi0bits>:
 8009046:	0c02      	lsrs	r2, r0, #16
 8009048:	0412      	lsls	r2, r2, #16
 800904a:	4603      	mov	r3, r0
 800904c:	b9b2      	cbnz	r2, 800907c <__hi0bits+0x36>
 800904e:	0403      	lsls	r3, r0, #16
 8009050:	2010      	movs	r0, #16
 8009052:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009056:	bf04      	itt	eq
 8009058:	021b      	lsleq	r3, r3, #8
 800905a:	3008      	addeq	r0, #8
 800905c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009060:	bf04      	itt	eq
 8009062:	011b      	lsleq	r3, r3, #4
 8009064:	3004      	addeq	r0, #4
 8009066:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800906a:	bf04      	itt	eq
 800906c:	009b      	lsleq	r3, r3, #2
 800906e:	3002      	addeq	r0, #2
 8009070:	2b00      	cmp	r3, #0
 8009072:	db06      	blt.n	8009082 <__hi0bits+0x3c>
 8009074:	005b      	lsls	r3, r3, #1
 8009076:	d503      	bpl.n	8009080 <__hi0bits+0x3a>
 8009078:	3001      	adds	r0, #1
 800907a:	4770      	bx	lr
 800907c:	2000      	movs	r0, #0
 800907e:	e7e8      	b.n	8009052 <__hi0bits+0xc>
 8009080:	2020      	movs	r0, #32
 8009082:	4770      	bx	lr

08009084 <__lo0bits>:
 8009084:	6803      	ldr	r3, [r0, #0]
 8009086:	4601      	mov	r1, r0
 8009088:	f013 0207 	ands.w	r2, r3, #7
 800908c:	d00b      	beq.n	80090a6 <__lo0bits+0x22>
 800908e:	07da      	lsls	r2, r3, #31
 8009090:	d423      	bmi.n	80090da <__lo0bits+0x56>
 8009092:	0798      	lsls	r0, r3, #30
 8009094:	bf49      	itett	mi
 8009096:	085b      	lsrmi	r3, r3, #1
 8009098:	089b      	lsrpl	r3, r3, #2
 800909a:	2001      	movmi	r0, #1
 800909c:	600b      	strmi	r3, [r1, #0]
 800909e:	bf5c      	itt	pl
 80090a0:	600b      	strpl	r3, [r1, #0]
 80090a2:	2002      	movpl	r0, #2
 80090a4:	4770      	bx	lr
 80090a6:	b298      	uxth	r0, r3
 80090a8:	b9a8      	cbnz	r0, 80090d6 <__lo0bits+0x52>
 80090aa:	2010      	movs	r0, #16
 80090ac:	0c1b      	lsrs	r3, r3, #16
 80090ae:	f013 0fff 	tst.w	r3, #255	; 0xff
 80090b2:	bf04      	itt	eq
 80090b4:	0a1b      	lsreq	r3, r3, #8
 80090b6:	3008      	addeq	r0, #8
 80090b8:	071a      	lsls	r2, r3, #28
 80090ba:	bf04      	itt	eq
 80090bc:	091b      	lsreq	r3, r3, #4
 80090be:	3004      	addeq	r0, #4
 80090c0:	079a      	lsls	r2, r3, #30
 80090c2:	bf04      	itt	eq
 80090c4:	089b      	lsreq	r3, r3, #2
 80090c6:	3002      	addeq	r0, #2
 80090c8:	07da      	lsls	r2, r3, #31
 80090ca:	d402      	bmi.n	80090d2 <__lo0bits+0x4e>
 80090cc:	085b      	lsrs	r3, r3, #1
 80090ce:	d006      	beq.n	80090de <__lo0bits+0x5a>
 80090d0:	3001      	adds	r0, #1
 80090d2:	600b      	str	r3, [r1, #0]
 80090d4:	4770      	bx	lr
 80090d6:	4610      	mov	r0, r2
 80090d8:	e7e9      	b.n	80090ae <__lo0bits+0x2a>
 80090da:	2000      	movs	r0, #0
 80090dc:	4770      	bx	lr
 80090de:	2020      	movs	r0, #32
 80090e0:	4770      	bx	lr

080090e2 <__i2b>:
 80090e2:	b510      	push	{r4, lr}
 80090e4:	460c      	mov	r4, r1
 80090e6:	2101      	movs	r1, #1
 80090e8:	f7ff ff27 	bl	8008f3a <_Balloc>
 80090ec:	2201      	movs	r2, #1
 80090ee:	6144      	str	r4, [r0, #20]
 80090f0:	6102      	str	r2, [r0, #16]
 80090f2:	bd10      	pop	{r4, pc}

080090f4 <__multiply>:
 80090f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f8:	4614      	mov	r4, r2
 80090fa:	690a      	ldr	r2, [r1, #16]
 80090fc:	6923      	ldr	r3, [r4, #16]
 80090fe:	4688      	mov	r8, r1
 8009100:	429a      	cmp	r2, r3
 8009102:	bfbe      	ittt	lt
 8009104:	460b      	movlt	r3, r1
 8009106:	46a0      	movlt	r8, r4
 8009108:	461c      	movlt	r4, r3
 800910a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800910e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009112:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009116:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800911a:	eb07 0609 	add.w	r6, r7, r9
 800911e:	42b3      	cmp	r3, r6
 8009120:	bfb8      	it	lt
 8009122:	3101      	addlt	r1, #1
 8009124:	f7ff ff09 	bl	8008f3a <_Balloc>
 8009128:	f100 0514 	add.w	r5, r0, #20
 800912c:	462b      	mov	r3, r5
 800912e:	2200      	movs	r2, #0
 8009130:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009134:	4573      	cmp	r3, lr
 8009136:	d316      	bcc.n	8009166 <__multiply+0x72>
 8009138:	f104 0214 	add.w	r2, r4, #20
 800913c:	f108 0114 	add.w	r1, r8, #20
 8009140:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009144:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009148:	9300      	str	r3, [sp, #0]
 800914a:	9b00      	ldr	r3, [sp, #0]
 800914c:	9201      	str	r2, [sp, #4]
 800914e:	4293      	cmp	r3, r2
 8009150:	d80c      	bhi.n	800916c <__multiply+0x78>
 8009152:	2e00      	cmp	r6, #0
 8009154:	dd03      	ble.n	800915e <__multiply+0x6a>
 8009156:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800915a:	2b00      	cmp	r3, #0
 800915c:	d05d      	beq.n	800921a <__multiply+0x126>
 800915e:	6106      	str	r6, [r0, #16]
 8009160:	b003      	add	sp, #12
 8009162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009166:	f843 2b04 	str.w	r2, [r3], #4
 800916a:	e7e3      	b.n	8009134 <__multiply+0x40>
 800916c:	f8b2 b000 	ldrh.w	fp, [r2]
 8009170:	f1bb 0f00 	cmp.w	fp, #0
 8009174:	d023      	beq.n	80091be <__multiply+0xca>
 8009176:	4689      	mov	r9, r1
 8009178:	46ac      	mov	ip, r5
 800917a:	f04f 0800 	mov.w	r8, #0
 800917e:	f859 4b04 	ldr.w	r4, [r9], #4
 8009182:	f8dc a000 	ldr.w	sl, [ip]
 8009186:	b2a3      	uxth	r3, r4
 8009188:	fa1f fa8a 	uxth.w	sl, sl
 800918c:	fb0b a303 	mla	r3, fp, r3, sl
 8009190:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009194:	f8dc 4000 	ldr.w	r4, [ip]
 8009198:	4443      	add	r3, r8
 800919a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800919e:	fb0b 840a 	mla	r4, fp, sl, r8
 80091a2:	46e2      	mov	sl, ip
 80091a4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80091ae:	454f      	cmp	r7, r9
 80091b0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80091b4:	f84a 3b04 	str.w	r3, [sl], #4
 80091b8:	d82b      	bhi.n	8009212 <__multiply+0x11e>
 80091ba:	f8cc 8004 	str.w	r8, [ip, #4]
 80091be:	9b01      	ldr	r3, [sp, #4]
 80091c0:	3204      	adds	r2, #4
 80091c2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80091c6:	f1ba 0f00 	cmp.w	sl, #0
 80091ca:	d020      	beq.n	800920e <__multiply+0x11a>
 80091cc:	4689      	mov	r9, r1
 80091ce:	46a8      	mov	r8, r5
 80091d0:	f04f 0b00 	mov.w	fp, #0
 80091d4:	682b      	ldr	r3, [r5, #0]
 80091d6:	f8b9 c000 	ldrh.w	ip, [r9]
 80091da:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80091de:	b29b      	uxth	r3, r3
 80091e0:	fb0a 440c 	mla	r4, sl, ip, r4
 80091e4:	46c4      	mov	ip, r8
 80091e6:	445c      	add	r4, fp
 80091e8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80091ec:	f84c 3b04 	str.w	r3, [ip], #4
 80091f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80091f4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80091f8:	0c1b      	lsrs	r3, r3, #16
 80091fa:	fb0a b303 	mla	r3, sl, r3, fp
 80091fe:	454f      	cmp	r7, r9
 8009200:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009204:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009208:	d805      	bhi.n	8009216 <__multiply+0x122>
 800920a:	f8c8 3004 	str.w	r3, [r8, #4]
 800920e:	3504      	adds	r5, #4
 8009210:	e79b      	b.n	800914a <__multiply+0x56>
 8009212:	46d4      	mov	ip, sl
 8009214:	e7b3      	b.n	800917e <__multiply+0x8a>
 8009216:	46e0      	mov	r8, ip
 8009218:	e7dd      	b.n	80091d6 <__multiply+0xe2>
 800921a:	3e01      	subs	r6, #1
 800921c:	e799      	b.n	8009152 <__multiply+0x5e>
	...

08009220 <__pow5mult>:
 8009220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009224:	4615      	mov	r5, r2
 8009226:	f012 0203 	ands.w	r2, r2, #3
 800922a:	4606      	mov	r6, r0
 800922c:	460f      	mov	r7, r1
 800922e:	d007      	beq.n	8009240 <__pow5mult+0x20>
 8009230:	4c21      	ldr	r4, [pc, #132]	; (80092b8 <__pow5mult+0x98>)
 8009232:	3a01      	subs	r2, #1
 8009234:	2300      	movs	r3, #0
 8009236:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800923a:	f7ff fec9 	bl	8008fd0 <__multadd>
 800923e:	4607      	mov	r7, r0
 8009240:	10ad      	asrs	r5, r5, #2
 8009242:	d035      	beq.n	80092b0 <__pow5mult+0x90>
 8009244:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009246:	b93c      	cbnz	r4, 8009258 <__pow5mult+0x38>
 8009248:	2010      	movs	r0, #16
 800924a:	f7ff fe55 	bl	8008ef8 <malloc>
 800924e:	6270      	str	r0, [r6, #36]	; 0x24
 8009250:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009254:	6004      	str	r4, [r0, #0]
 8009256:	60c4      	str	r4, [r0, #12]
 8009258:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800925c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009260:	b94c      	cbnz	r4, 8009276 <__pow5mult+0x56>
 8009262:	f240 2171 	movw	r1, #625	; 0x271
 8009266:	4630      	mov	r0, r6
 8009268:	f7ff ff3b 	bl	80090e2 <__i2b>
 800926c:	2300      	movs	r3, #0
 800926e:	4604      	mov	r4, r0
 8009270:	f8c8 0008 	str.w	r0, [r8, #8]
 8009274:	6003      	str	r3, [r0, #0]
 8009276:	f04f 0800 	mov.w	r8, #0
 800927a:	07eb      	lsls	r3, r5, #31
 800927c:	d50a      	bpl.n	8009294 <__pow5mult+0x74>
 800927e:	4639      	mov	r1, r7
 8009280:	4622      	mov	r2, r4
 8009282:	4630      	mov	r0, r6
 8009284:	f7ff ff36 	bl	80090f4 <__multiply>
 8009288:	4681      	mov	r9, r0
 800928a:	4639      	mov	r1, r7
 800928c:	4630      	mov	r0, r6
 800928e:	f7ff fe88 	bl	8008fa2 <_Bfree>
 8009292:	464f      	mov	r7, r9
 8009294:	106d      	asrs	r5, r5, #1
 8009296:	d00b      	beq.n	80092b0 <__pow5mult+0x90>
 8009298:	6820      	ldr	r0, [r4, #0]
 800929a:	b938      	cbnz	r0, 80092ac <__pow5mult+0x8c>
 800929c:	4622      	mov	r2, r4
 800929e:	4621      	mov	r1, r4
 80092a0:	4630      	mov	r0, r6
 80092a2:	f7ff ff27 	bl	80090f4 <__multiply>
 80092a6:	6020      	str	r0, [r4, #0]
 80092a8:	f8c0 8000 	str.w	r8, [r0]
 80092ac:	4604      	mov	r4, r0
 80092ae:	e7e4      	b.n	800927a <__pow5mult+0x5a>
 80092b0:	4638      	mov	r0, r7
 80092b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092b6:	bf00      	nop
 80092b8:	08009de8 	.word	0x08009de8

080092bc <__lshift>:
 80092bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092c0:	460c      	mov	r4, r1
 80092c2:	4607      	mov	r7, r0
 80092c4:	4616      	mov	r6, r2
 80092c6:	6923      	ldr	r3, [r4, #16]
 80092c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80092cc:	eb0a 0903 	add.w	r9, sl, r3
 80092d0:	6849      	ldr	r1, [r1, #4]
 80092d2:	68a3      	ldr	r3, [r4, #8]
 80092d4:	f109 0501 	add.w	r5, r9, #1
 80092d8:	42ab      	cmp	r3, r5
 80092da:	db32      	blt.n	8009342 <__lshift+0x86>
 80092dc:	4638      	mov	r0, r7
 80092de:	f7ff fe2c 	bl	8008f3a <_Balloc>
 80092e2:	2300      	movs	r3, #0
 80092e4:	4680      	mov	r8, r0
 80092e6:	461a      	mov	r2, r3
 80092e8:	f100 0114 	add.w	r1, r0, #20
 80092ec:	4553      	cmp	r3, sl
 80092ee:	db2b      	blt.n	8009348 <__lshift+0x8c>
 80092f0:	6920      	ldr	r0, [r4, #16]
 80092f2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80092f6:	f104 0314 	add.w	r3, r4, #20
 80092fa:	f016 021f 	ands.w	r2, r6, #31
 80092fe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009302:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009306:	d025      	beq.n	8009354 <__lshift+0x98>
 8009308:	2000      	movs	r0, #0
 800930a:	f1c2 0e20 	rsb	lr, r2, #32
 800930e:	468a      	mov	sl, r1
 8009310:	681e      	ldr	r6, [r3, #0]
 8009312:	4096      	lsls	r6, r2
 8009314:	4330      	orrs	r0, r6
 8009316:	f84a 0b04 	str.w	r0, [sl], #4
 800931a:	f853 0b04 	ldr.w	r0, [r3], #4
 800931e:	459c      	cmp	ip, r3
 8009320:	fa20 f00e 	lsr.w	r0, r0, lr
 8009324:	d814      	bhi.n	8009350 <__lshift+0x94>
 8009326:	6048      	str	r0, [r1, #4]
 8009328:	b108      	cbz	r0, 800932e <__lshift+0x72>
 800932a:	f109 0502 	add.w	r5, r9, #2
 800932e:	3d01      	subs	r5, #1
 8009330:	4638      	mov	r0, r7
 8009332:	f8c8 5010 	str.w	r5, [r8, #16]
 8009336:	4621      	mov	r1, r4
 8009338:	f7ff fe33 	bl	8008fa2 <_Bfree>
 800933c:	4640      	mov	r0, r8
 800933e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009342:	3101      	adds	r1, #1
 8009344:	005b      	lsls	r3, r3, #1
 8009346:	e7c7      	b.n	80092d8 <__lshift+0x1c>
 8009348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800934c:	3301      	adds	r3, #1
 800934e:	e7cd      	b.n	80092ec <__lshift+0x30>
 8009350:	4651      	mov	r1, sl
 8009352:	e7dc      	b.n	800930e <__lshift+0x52>
 8009354:	3904      	subs	r1, #4
 8009356:	f853 2b04 	ldr.w	r2, [r3], #4
 800935a:	459c      	cmp	ip, r3
 800935c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009360:	d8f9      	bhi.n	8009356 <__lshift+0x9a>
 8009362:	e7e4      	b.n	800932e <__lshift+0x72>

08009364 <__mcmp>:
 8009364:	6903      	ldr	r3, [r0, #16]
 8009366:	690a      	ldr	r2, [r1, #16]
 8009368:	b530      	push	{r4, r5, lr}
 800936a:	1a9b      	subs	r3, r3, r2
 800936c:	d10c      	bne.n	8009388 <__mcmp+0x24>
 800936e:	0092      	lsls	r2, r2, #2
 8009370:	3014      	adds	r0, #20
 8009372:	3114      	adds	r1, #20
 8009374:	1884      	adds	r4, r0, r2
 8009376:	4411      	add	r1, r2
 8009378:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800937c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009380:	4295      	cmp	r5, r2
 8009382:	d003      	beq.n	800938c <__mcmp+0x28>
 8009384:	d305      	bcc.n	8009392 <__mcmp+0x2e>
 8009386:	2301      	movs	r3, #1
 8009388:	4618      	mov	r0, r3
 800938a:	bd30      	pop	{r4, r5, pc}
 800938c:	42a0      	cmp	r0, r4
 800938e:	d3f3      	bcc.n	8009378 <__mcmp+0x14>
 8009390:	e7fa      	b.n	8009388 <__mcmp+0x24>
 8009392:	f04f 33ff 	mov.w	r3, #4294967295
 8009396:	e7f7      	b.n	8009388 <__mcmp+0x24>

08009398 <__mdiff>:
 8009398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800939c:	460d      	mov	r5, r1
 800939e:	4607      	mov	r7, r0
 80093a0:	4611      	mov	r1, r2
 80093a2:	4628      	mov	r0, r5
 80093a4:	4614      	mov	r4, r2
 80093a6:	f7ff ffdd 	bl	8009364 <__mcmp>
 80093aa:	1e06      	subs	r6, r0, #0
 80093ac:	d108      	bne.n	80093c0 <__mdiff+0x28>
 80093ae:	4631      	mov	r1, r6
 80093b0:	4638      	mov	r0, r7
 80093b2:	f7ff fdc2 	bl	8008f3a <_Balloc>
 80093b6:	2301      	movs	r3, #1
 80093b8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80093bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093c0:	bfa4      	itt	ge
 80093c2:	4623      	movge	r3, r4
 80093c4:	462c      	movge	r4, r5
 80093c6:	4638      	mov	r0, r7
 80093c8:	6861      	ldr	r1, [r4, #4]
 80093ca:	bfa6      	itte	ge
 80093cc:	461d      	movge	r5, r3
 80093ce:	2600      	movge	r6, #0
 80093d0:	2601      	movlt	r6, #1
 80093d2:	f7ff fdb2 	bl	8008f3a <_Balloc>
 80093d6:	f04f 0e00 	mov.w	lr, #0
 80093da:	60c6      	str	r6, [r0, #12]
 80093dc:	692b      	ldr	r3, [r5, #16]
 80093de:	6926      	ldr	r6, [r4, #16]
 80093e0:	f104 0214 	add.w	r2, r4, #20
 80093e4:	f105 0914 	add.w	r9, r5, #20
 80093e8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80093ec:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80093f0:	f100 0114 	add.w	r1, r0, #20
 80093f4:	f852 ab04 	ldr.w	sl, [r2], #4
 80093f8:	f859 5b04 	ldr.w	r5, [r9], #4
 80093fc:	fa1f f38a 	uxth.w	r3, sl
 8009400:	4473      	add	r3, lr
 8009402:	b2ac      	uxth	r4, r5
 8009404:	1b1b      	subs	r3, r3, r4
 8009406:	0c2c      	lsrs	r4, r5, #16
 8009408:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800940c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8009410:	b29b      	uxth	r3, r3
 8009412:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8009416:	45c8      	cmp	r8, r9
 8009418:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800941c:	4694      	mov	ip, r2
 800941e:	f841 4b04 	str.w	r4, [r1], #4
 8009422:	d8e7      	bhi.n	80093f4 <__mdiff+0x5c>
 8009424:	45bc      	cmp	ip, r7
 8009426:	d304      	bcc.n	8009432 <__mdiff+0x9a>
 8009428:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800942c:	b183      	cbz	r3, 8009450 <__mdiff+0xb8>
 800942e:	6106      	str	r6, [r0, #16]
 8009430:	e7c4      	b.n	80093bc <__mdiff+0x24>
 8009432:	f85c 4b04 	ldr.w	r4, [ip], #4
 8009436:	b2a2      	uxth	r2, r4
 8009438:	4472      	add	r2, lr
 800943a:	1413      	asrs	r3, r2, #16
 800943c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009440:	b292      	uxth	r2, r2
 8009442:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009446:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800944a:	f841 2b04 	str.w	r2, [r1], #4
 800944e:	e7e9      	b.n	8009424 <__mdiff+0x8c>
 8009450:	3e01      	subs	r6, #1
 8009452:	e7e9      	b.n	8009428 <__mdiff+0x90>

08009454 <__d2b>:
 8009454:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009458:	461c      	mov	r4, r3
 800945a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800945e:	2101      	movs	r1, #1
 8009460:	4690      	mov	r8, r2
 8009462:	f7ff fd6a 	bl	8008f3a <_Balloc>
 8009466:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800946a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800946e:	4607      	mov	r7, r0
 8009470:	bb34      	cbnz	r4, 80094c0 <__d2b+0x6c>
 8009472:	9201      	str	r2, [sp, #4]
 8009474:	f1b8 0200 	subs.w	r2, r8, #0
 8009478:	d027      	beq.n	80094ca <__d2b+0x76>
 800947a:	a802      	add	r0, sp, #8
 800947c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8009480:	f7ff fe00 	bl	8009084 <__lo0bits>
 8009484:	9900      	ldr	r1, [sp, #0]
 8009486:	b1f0      	cbz	r0, 80094c6 <__d2b+0x72>
 8009488:	9a01      	ldr	r2, [sp, #4]
 800948a:	f1c0 0320 	rsb	r3, r0, #32
 800948e:	fa02 f303 	lsl.w	r3, r2, r3
 8009492:	430b      	orrs	r3, r1
 8009494:	40c2      	lsrs	r2, r0
 8009496:	617b      	str	r3, [r7, #20]
 8009498:	9201      	str	r2, [sp, #4]
 800949a:	9b01      	ldr	r3, [sp, #4]
 800949c:	2b00      	cmp	r3, #0
 800949e:	bf14      	ite	ne
 80094a0:	2102      	movne	r1, #2
 80094a2:	2101      	moveq	r1, #1
 80094a4:	61bb      	str	r3, [r7, #24]
 80094a6:	6139      	str	r1, [r7, #16]
 80094a8:	b1c4      	cbz	r4, 80094dc <__d2b+0x88>
 80094aa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80094ae:	4404      	add	r4, r0
 80094b0:	6034      	str	r4, [r6, #0]
 80094b2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80094b6:	6028      	str	r0, [r5, #0]
 80094b8:	4638      	mov	r0, r7
 80094ba:	b002      	add	sp, #8
 80094bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094c0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80094c4:	e7d5      	b.n	8009472 <__d2b+0x1e>
 80094c6:	6179      	str	r1, [r7, #20]
 80094c8:	e7e7      	b.n	800949a <__d2b+0x46>
 80094ca:	a801      	add	r0, sp, #4
 80094cc:	f7ff fdda 	bl	8009084 <__lo0bits>
 80094d0:	2101      	movs	r1, #1
 80094d2:	9b01      	ldr	r3, [sp, #4]
 80094d4:	6139      	str	r1, [r7, #16]
 80094d6:	617b      	str	r3, [r7, #20]
 80094d8:	3020      	adds	r0, #32
 80094da:	e7e5      	b.n	80094a8 <__d2b+0x54>
 80094dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80094e0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80094e4:	6030      	str	r0, [r6, #0]
 80094e6:	6918      	ldr	r0, [r3, #16]
 80094e8:	f7ff fdad 	bl	8009046 <__hi0bits>
 80094ec:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80094f0:	e7e1      	b.n	80094b6 <__d2b+0x62>

080094f2 <_calloc_r>:
 80094f2:	b538      	push	{r3, r4, r5, lr}
 80094f4:	fb02 f401 	mul.w	r4, r2, r1
 80094f8:	4621      	mov	r1, r4
 80094fa:	f000 f855 	bl	80095a8 <_malloc_r>
 80094fe:	4605      	mov	r5, r0
 8009500:	b118      	cbz	r0, 800950a <_calloc_r+0x18>
 8009502:	4622      	mov	r2, r4
 8009504:	2100      	movs	r1, #0
 8009506:	f7fd ff35 	bl	8007374 <memset>
 800950a:	4628      	mov	r0, r5
 800950c:	bd38      	pop	{r3, r4, r5, pc}
	...

08009510 <_free_r>:
 8009510:	b538      	push	{r3, r4, r5, lr}
 8009512:	4605      	mov	r5, r0
 8009514:	2900      	cmp	r1, #0
 8009516:	d043      	beq.n	80095a0 <_free_r+0x90>
 8009518:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800951c:	1f0c      	subs	r4, r1, #4
 800951e:	2b00      	cmp	r3, #0
 8009520:	bfb8      	it	lt
 8009522:	18e4      	addlt	r4, r4, r3
 8009524:	f000 fa94 	bl	8009a50 <__malloc_lock>
 8009528:	4a1e      	ldr	r2, [pc, #120]	; (80095a4 <_free_r+0x94>)
 800952a:	6813      	ldr	r3, [r2, #0]
 800952c:	4610      	mov	r0, r2
 800952e:	b933      	cbnz	r3, 800953e <_free_r+0x2e>
 8009530:	6063      	str	r3, [r4, #4]
 8009532:	6014      	str	r4, [r2, #0]
 8009534:	4628      	mov	r0, r5
 8009536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800953a:	f000 ba8a 	b.w	8009a52 <__malloc_unlock>
 800953e:	42a3      	cmp	r3, r4
 8009540:	d90b      	bls.n	800955a <_free_r+0x4a>
 8009542:	6821      	ldr	r1, [r4, #0]
 8009544:	1862      	adds	r2, r4, r1
 8009546:	4293      	cmp	r3, r2
 8009548:	bf01      	itttt	eq
 800954a:	681a      	ldreq	r2, [r3, #0]
 800954c:	685b      	ldreq	r3, [r3, #4]
 800954e:	1852      	addeq	r2, r2, r1
 8009550:	6022      	streq	r2, [r4, #0]
 8009552:	6063      	str	r3, [r4, #4]
 8009554:	6004      	str	r4, [r0, #0]
 8009556:	e7ed      	b.n	8009534 <_free_r+0x24>
 8009558:	4613      	mov	r3, r2
 800955a:	685a      	ldr	r2, [r3, #4]
 800955c:	b10a      	cbz	r2, 8009562 <_free_r+0x52>
 800955e:	42a2      	cmp	r2, r4
 8009560:	d9fa      	bls.n	8009558 <_free_r+0x48>
 8009562:	6819      	ldr	r1, [r3, #0]
 8009564:	1858      	adds	r0, r3, r1
 8009566:	42a0      	cmp	r0, r4
 8009568:	d10b      	bne.n	8009582 <_free_r+0x72>
 800956a:	6820      	ldr	r0, [r4, #0]
 800956c:	4401      	add	r1, r0
 800956e:	1858      	adds	r0, r3, r1
 8009570:	4282      	cmp	r2, r0
 8009572:	6019      	str	r1, [r3, #0]
 8009574:	d1de      	bne.n	8009534 <_free_r+0x24>
 8009576:	6810      	ldr	r0, [r2, #0]
 8009578:	6852      	ldr	r2, [r2, #4]
 800957a:	4401      	add	r1, r0
 800957c:	6019      	str	r1, [r3, #0]
 800957e:	605a      	str	r2, [r3, #4]
 8009580:	e7d8      	b.n	8009534 <_free_r+0x24>
 8009582:	d902      	bls.n	800958a <_free_r+0x7a>
 8009584:	230c      	movs	r3, #12
 8009586:	602b      	str	r3, [r5, #0]
 8009588:	e7d4      	b.n	8009534 <_free_r+0x24>
 800958a:	6820      	ldr	r0, [r4, #0]
 800958c:	1821      	adds	r1, r4, r0
 800958e:	428a      	cmp	r2, r1
 8009590:	bf01      	itttt	eq
 8009592:	6811      	ldreq	r1, [r2, #0]
 8009594:	6852      	ldreq	r2, [r2, #4]
 8009596:	1809      	addeq	r1, r1, r0
 8009598:	6021      	streq	r1, [r4, #0]
 800959a:	6062      	str	r2, [r4, #4]
 800959c:	605c      	str	r4, [r3, #4]
 800959e:	e7c9      	b.n	8009534 <_free_r+0x24>
 80095a0:	bd38      	pop	{r3, r4, r5, pc}
 80095a2:	bf00      	nop
 80095a4:	20000244 	.word	0x20000244

080095a8 <_malloc_r>:
 80095a8:	b570      	push	{r4, r5, r6, lr}
 80095aa:	1ccd      	adds	r5, r1, #3
 80095ac:	f025 0503 	bic.w	r5, r5, #3
 80095b0:	3508      	adds	r5, #8
 80095b2:	2d0c      	cmp	r5, #12
 80095b4:	bf38      	it	cc
 80095b6:	250c      	movcc	r5, #12
 80095b8:	2d00      	cmp	r5, #0
 80095ba:	4606      	mov	r6, r0
 80095bc:	db01      	blt.n	80095c2 <_malloc_r+0x1a>
 80095be:	42a9      	cmp	r1, r5
 80095c0:	d903      	bls.n	80095ca <_malloc_r+0x22>
 80095c2:	230c      	movs	r3, #12
 80095c4:	6033      	str	r3, [r6, #0]
 80095c6:	2000      	movs	r0, #0
 80095c8:	bd70      	pop	{r4, r5, r6, pc}
 80095ca:	f000 fa41 	bl	8009a50 <__malloc_lock>
 80095ce:	4a21      	ldr	r2, [pc, #132]	; (8009654 <_malloc_r+0xac>)
 80095d0:	6814      	ldr	r4, [r2, #0]
 80095d2:	4621      	mov	r1, r4
 80095d4:	b991      	cbnz	r1, 80095fc <_malloc_r+0x54>
 80095d6:	4c20      	ldr	r4, [pc, #128]	; (8009658 <_malloc_r+0xb0>)
 80095d8:	6823      	ldr	r3, [r4, #0]
 80095da:	b91b      	cbnz	r3, 80095e4 <_malloc_r+0x3c>
 80095dc:	4630      	mov	r0, r6
 80095de:	f000 f97b 	bl	80098d8 <_sbrk_r>
 80095e2:	6020      	str	r0, [r4, #0]
 80095e4:	4629      	mov	r1, r5
 80095e6:	4630      	mov	r0, r6
 80095e8:	f000 f976 	bl	80098d8 <_sbrk_r>
 80095ec:	1c43      	adds	r3, r0, #1
 80095ee:	d124      	bne.n	800963a <_malloc_r+0x92>
 80095f0:	230c      	movs	r3, #12
 80095f2:	4630      	mov	r0, r6
 80095f4:	6033      	str	r3, [r6, #0]
 80095f6:	f000 fa2c 	bl	8009a52 <__malloc_unlock>
 80095fa:	e7e4      	b.n	80095c6 <_malloc_r+0x1e>
 80095fc:	680b      	ldr	r3, [r1, #0]
 80095fe:	1b5b      	subs	r3, r3, r5
 8009600:	d418      	bmi.n	8009634 <_malloc_r+0x8c>
 8009602:	2b0b      	cmp	r3, #11
 8009604:	d90f      	bls.n	8009626 <_malloc_r+0x7e>
 8009606:	600b      	str	r3, [r1, #0]
 8009608:	18cc      	adds	r4, r1, r3
 800960a:	50cd      	str	r5, [r1, r3]
 800960c:	4630      	mov	r0, r6
 800960e:	f000 fa20 	bl	8009a52 <__malloc_unlock>
 8009612:	f104 000b 	add.w	r0, r4, #11
 8009616:	1d23      	adds	r3, r4, #4
 8009618:	f020 0007 	bic.w	r0, r0, #7
 800961c:	1ac3      	subs	r3, r0, r3
 800961e:	d0d3      	beq.n	80095c8 <_malloc_r+0x20>
 8009620:	425a      	negs	r2, r3
 8009622:	50e2      	str	r2, [r4, r3]
 8009624:	e7d0      	b.n	80095c8 <_malloc_r+0x20>
 8009626:	684b      	ldr	r3, [r1, #4]
 8009628:	428c      	cmp	r4, r1
 800962a:	bf16      	itet	ne
 800962c:	6063      	strne	r3, [r4, #4]
 800962e:	6013      	streq	r3, [r2, #0]
 8009630:	460c      	movne	r4, r1
 8009632:	e7eb      	b.n	800960c <_malloc_r+0x64>
 8009634:	460c      	mov	r4, r1
 8009636:	6849      	ldr	r1, [r1, #4]
 8009638:	e7cc      	b.n	80095d4 <_malloc_r+0x2c>
 800963a:	1cc4      	adds	r4, r0, #3
 800963c:	f024 0403 	bic.w	r4, r4, #3
 8009640:	42a0      	cmp	r0, r4
 8009642:	d005      	beq.n	8009650 <_malloc_r+0xa8>
 8009644:	1a21      	subs	r1, r4, r0
 8009646:	4630      	mov	r0, r6
 8009648:	f000 f946 	bl	80098d8 <_sbrk_r>
 800964c:	3001      	adds	r0, #1
 800964e:	d0cf      	beq.n	80095f0 <_malloc_r+0x48>
 8009650:	6025      	str	r5, [r4, #0]
 8009652:	e7db      	b.n	800960c <_malloc_r+0x64>
 8009654:	20000244 	.word	0x20000244
 8009658:	20000248 	.word	0x20000248

0800965c <__sfputc_r>:
 800965c:	6893      	ldr	r3, [r2, #8]
 800965e:	b410      	push	{r4}
 8009660:	3b01      	subs	r3, #1
 8009662:	2b00      	cmp	r3, #0
 8009664:	6093      	str	r3, [r2, #8]
 8009666:	da07      	bge.n	8009678 <__sfputc_r+0x1c>
 8009668:	6994      	ldr	r4, [r2, #24]
 800966a:	42a3      	cmp	r3, r4
 800966c:	db01      	blt.n	8009672 <__sfputc_r+0x16>
 800966e:	290a      	cmp	r1, #10
 8009670:	d102      	bne.n	8009678 <__sfputc_r+0x1c>
 8009672:	bc10      	pop	{r4}
 8009674:	f7fe bb52 	b.w	8007d1c <__swbuf_r>
 8009678:	6813      	ldr	r3, [r2, #0]
 800967a:	1c58      	adds	r0, r3, #1
 800967c:	6010      	str	r0, [r2, #0]
 800967e:	7019      	strb	r1, [r3, #0]
 8009680:	4608      	mov	r0, r1
 8009682:	bc10      	pop	{r4}
 8009684:	4770      	bx	lr

08009686 <__sfputs_r>:
 8009686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009688:	4606      	mov	r6, r0
 800968a:	460f      	mov	r7, r1
 800968c:	4614      	mov	r4, r2
 800968e:	18d5      	adds	r5, r2, r3
 8009690:	42ac      	cmp	r4, r5
 8009692:	d101      	bne.n	8009698 <__sfputs_r+0x12>
 8009694:	2000      	movs	r0, #0
 8009696:	e007      	b.n	80096a8 <__sfputs_r+0x22>
 8009698:	463a      	mov	r2, r7
 800969a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800969e:	4630      	mov	r0, r6
 80096a0:	f7ff ffdc 	bl	800965c <__sfputc_r>
 80096a4:	1c43      	adds	r3, r0, #1
 80096a6:	d1f3      	bne.n	8009690 <__sfputs_r+0xa>
 80096a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080096ac <_vfiprintf_r>:
 80096ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b0:	460c      	mov	r4, r1
 80096b2:	b09d      	sub	sp, #116	; 0x74
 80096b4:	4617      	mov	r7, r2
 80096b6:	461d      	mov	r5, r3
 80096b8:	4606      	mov	r6, r0
 80096ba:	b118      	cbz	r0, 80096c4 <_vfiprintf_r+0x18>
 80096bc:	6983      	ldr	r3, [r0, #24]
 80096be:	b90b      	cbnz	r3, 80096c4 <_vfiprintf_r+0x18>
 80096c0:	f7ff fb1e 	bl	8008d00 <__sinit>
 80096c4:	4b7c      	ldr	r3, [pc, #496]	; (80098b8 <_vfiprintf_r+0x20c>)
 80096c6:	429c      	cmp	r4, r3
 80096c8:	d158      	bne.n	800977c <_vfiprintf_r+0xd0>
 80096ca:	6874      	ldr	r4, [r6, #4]
 80096cc:	89a3      	ldrh	r3, [r4, #12]
 80096ce:	0718      	lsls	r0, r3, #28
 80096d0:	d55e      	bpl.n	8009790 <_vfiprintf_r+0xe4>
 80096d2:	6923      	ldr	r3, [r4, #16]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d05b      	beq.n	8009790 <_vfiprintf_r+0xe4>
 80096d8:	2300      	movs	r3, #0
 80096da:	9309      	str	r3, [sp, #36]	; 0x24
 80096dc:	2320      	movs	r3, #32
 80096de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096e2:	2330      	movs	r3, #48	; 0x30
 80096e4:	f04f 0b01 	mov.w	fp, #1
 80096e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096ec:	9503      	str	r5, [sp, #12]
 80096ee:	46b8      	mov	r8, r7
 80096f0:	4645      	mov	r5, r8
 80096f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80096f6:	b10b      	cbz	r3, 80096fc <_vfiprintf_r+0x50>
 80096f8:	2b25      	cmp	r3, #37	; 0x25
 80096fa:	d154      	bne.n	80097a6 <_vfiprintf_r+0xfa>
 80096fc:	ebb8 0a07 	subs.w	sl, r8, r7
 8009700:	d00b      	beq.n	800971a <_vfiprintf_r+0x6e>
 8009702:	4653      	mov	r3, sl
 8009704:	463a      	mov	r2, r7
 8009706:	4621      	mov	r1, r4
 8009708:	4630      	mov	r0, r6
 800970a:	f7ff ffbc 	bl	8009686 <__sfputs_r>
 800970e:	3001      	adds	r0, #1
 8009710:	f000 80c2 	beq.w	8009898 <_vfiprintf_r+0x1ec>
 8009714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009716:	4453      	add	r3, sl
 8009718:	9309      	str	r3, [sp, #36]	; 0x24
 800971a:	f898 3000 	ldrb.w	r3, [r8]
 800971e:	2b00      	cmp	r3, #0
 8009720:	f000 80ba 	beq.w	8009898 <_vfiprintf_r+0x1ec>
 8009724:	2300      	movs	r3, #0
 8009726:	f04f 32ff 	mov.w	r2, #4294967295
 800972a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800972e:	9304      	str	r3, [sp, #16]
 8009730:	9307      	str	r3, [sp, #28]
 8009732:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009736:	931a      	str	r3, [sp, #104]	; 0x68
 8009738:	46a8      	mov	r8, r5
 800973a:	2205      	movs	r2, #5
 800973c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009740:	485e      	ldr	r0, [pc, #376]	; (80098bc <_vfiprintf_r+0x210>)
 8009742:	f7ff fbe1 	bl	8008f08 <memchr>
 8009746:	9b04      	ldr	r3, [sp, #16]
 8009748:	bb78      	cbnz	r0, 80097aa <_vfiprintf_r+0xfe>
 800974a:	06d9      	lsls	r1, r3, #27
 800974c:	bf44      	itt	mi
 800974e:	2220      	movmi	r2, #32
 8009750:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009754:	071a      	lsls	r2, r3, #28
 8009756:	bf44      	itt	mi
 8009758:	222b      	movmi	r2, #43	; 0x2b
 800975a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800975e:	782a      	ldrb	r2, [r5, #0]
 8009760:	2a2a      	cmp	r2, #42	; 0x2a
 8009762:	d02a      	beq.n	80097ba <_vfiprintf_r+0x10e>
 8009764:	46a8      	mov	r8, r5
 8009766:	2000      	movs	r0, #0
 8009768:	250a      	movs	r5, #10
 800976a:	9a07      	ldr	r2, [sp, #28]
 800976c:	4641      	mov	r1, r8
 800976e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009772:	3b30      	subs	r3, #48	; 0x30
 8009774:	2b09      	cmp	r3, #9
 8009776:	d969      	bls.n	800984c <_vfiprintf_r+0x1a0>
 8009778:	b360      	cbz	r0, 80097d4 <_vfiprintf_r+0x128>
 800977a:	e024      	b.n	80097c6 <_vfiprintf_r+0x11a>
 800977c:	4b50      	ldr	r3, [pc, #320]	; (80098c0 <_vfiprintf_r+0x214>)
 800977e:	429c      	cmp	r4, r3
 8009780:	d101      	bne.n	8009786 <_vfiprintf_r+0xda>
 8009782:	68b4      	ldr	r4, [r6, #8]
 8009784:	e7a2      	b.n	80096cc <_vfiprintf_r+0x20>
 8009786:	4b4f      	ldr	r3, [pc, #316]	; (80098c4 <_vfiprintf_r+0x218>)
 8009788:	429c      	cmp	r4, r3
 800978a:	bf08      	it	eq
 800978c:	68f4      	ldreq	r4, [r6, #12]
 800978e:	e79d      	b.n	80096cc <_vfiprintf_r+0x20>
 8009790:	4621      	mov	r1, r4
 8009792:	4630      	mov	r0, r6
 8009794:	f7fe fb14 	bl	8007dc0 <__swsetup_r>
 8009798:	2800      	cmp	r0, #0
 800979a:	d09d      	beq.n	80096d8 <_vfiprintf_r+0x2c>
 800979c:	f04f 30ff 	mov.w	r0, #4294967295
 80097a0:	b01d      	add	sp, #116	; 0x74
 80097a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a6:	46a8      	mov	r8, r5
 80097a8:	e7a2      	b.n	80096f0 <_vfiprintf_r+0x44>
 80097aa:	4a44      	ldr	r2, [pc, #272]	; (80098bc <_vfiprintf_r+0x210>)
 80097ac:	4645      	mov	r5, r8
 80097ae:	1a80      	subs	r0, r0, r2
 80097b0:	fa0b f000 	lsl.w	r0, fp, r0
 80097b4:	4318      	orrs	r0, r3
 80097b6:	9004      	str	r0, [sp, #16]
 80097b8:	e7be      	b.n	8009738 <_vfiprintf_r+0x8c>
 80097ba:	9a03      	ldr	r2, [sp, #12]
 80097bc:	1d11      	adds	r1, r2, #4
 80097be:	6812      	ldr	r2, [r2, #0]
 80097c0:	9103      	str	r1, [sp, #12]
 80097c2:	2a00      	cmp	r2, #0
 80097c4:	db01      	blt.n	80097ca <_vfiprintf_r+0x11e>
 80097c6:	9207      	str	r2, [sp, #28]
 80097c8:	e004      	b.n	80097d4 <_vfiprintf_r+0x128>
 80097ca:	4252      	negs	r2, r2
 80097cc:	f043 0302 	orr.w	r3, r3, #2
 80097d0:	9207      	str	r2, [sp, #28]
 80097d2:	9304      	str	r3, [sp, #16]
 80097d4:	f898 3000 	ldrb.w	r3, [r8]
 80097d8:	2b2e      	cmp	r3, #46	; 0x2e
 80097da:	d10e      	bne.n	80097fa <_vfiprintf_r+0x14e>
 80097dc:	f898 3001 	ldrb.w	r3, [r8, #1]
 80097e0:	2b2a      	cmp	r3, #42	; 0x2a
 80097e2:	d138      	bne.n	8009856 <_vfiprintf_r+0x1aa>
 80097e4:	9b03      	ldr	r3, [sp, #12]
 80097e6:	f108 0802 	add.w	r8, r8, #2
 80097ea:	1d1a      	adds	r2, r3, #4
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	9203      	str	r2, [sp, #12]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	bfb8      	it	lt
 80097f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80097f8:	9305      	str	r3, [sp, #20]
 80097fa:	4d33      	ldr	r5, [pc, #204]	; (80098c8 <_vfiprintf_r+0x21c>)
 80097fc:	2203      	movs	r2, #3
 80097fe:	f898 1000 	ldrb.w	r1, [r8]
 8009802:	4628      	mov	r0, r5
 8009804:	f7ff fb80 	bl	8008f08 <memchr>
 8009808:	b140      	cbz	r0, 800981c <_vfiprintf_r+0x170>
 800980a:	2340      	movs	r3, #64	; 0x40
 800980c:	1b40      	subs	r0, r0, r5
 800980e:	fa03 f000 	lsl.w	r0, r3, r0
 8009812:	9b04      	ldr	r3, [sp, #16]
 8009814:	f108 0801 	add.w	r8, r8, #1
 8009818:	4303      	orrs	r3, r0
 800981a:	9304      	str	r3, [sp, #16]
 800981c:	f898 1000 	ldrb.w	r1, [r8]
 8009820:	2206      	movs	r2, #6
 8009822:	482a      	ldr	r0, [pc, #168]	; (80098cc <_vfiprintf_r+0x220>)
 8009824:	f108 0701 	add.w	r7, r8, #1
 8009828:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800982c:	f7ff fb6c 	bl	8008f08 <memchr>
 8009830:	2800      	cmp	r0, #0
 8009832:	d037      	beq.n	80098a4 <_vfiprintf_r+0x1f8>
 8009834:	4b26      	ldr	r3, [pc, #152]	; (80098d0 <_vfiprintf_r+0x224>)
 8009836:	bb1b      	cbnz	r3, 8009880 <_vfiprintf_r+0x1d4>
 8009838:	9b03      	ldr	r3, [sp, #12]
 800983a:	3307      	adds	r3, #7
 800983c:	f023 0307 	bic.w	r3, r3, #7
 8009840:	3308      	adds	r3, #8
 8009842:	9303      	str	r3, [sp, #12]
 8009844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009846:	444b      	add	r3, r9
 8009848:	9309      	str	r3, [sp, #36]	; 0x24
 800984a:	e750      	b.n	80096ee <_vfiprintf_r+0x42>
 800984c:	fb05 3202 	mla	r2, r5, r2, r3
 8009850:	2001      	movs	r0, #1
 8009852:	4688      	mov	r8, r1
 8009854:	e78a      	b.n	800976c <_vfiprintf_r+0xc0>
 8009856:	2300      	movs	r3, #0
 8009858:	250a      	movs	r5, #10
 800985a:	4619      	mov	r1, r3
 800985c:	f108 0801 	add.w	r8, r8, #1
 8009860:	9305      	str	r3, [sp, #20]
 8009862:	4640      	mov	r0, r8
 8009864:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009868:	3a30      	subs	r2, #48	; 0x30
 800986a:	2a09      	cmp	r2, #9
 800986c:	d903      	bls.n	8009876 <_vfiprintf_r+0x1ca>
 800986e:	2b00      	cmp	r3, #0
 8009870:	d0c3      	beq.n	80097fa <_vfiprintf_r+0x14e>
 8009872:	9105      	str	r1, [sp, #20]
 8009874:	e7c1      	b.n	80097fa <_vfiprintf_r+0x14e>
 8009876:	fb05 2101 	mla	r1, r5, r1, r2
 800987a:	2301      	movs	r3, #1
 800987c:	4680      	mov	r8, r0
 800987e:	e7f0      	b.n	8009862 <_vfiprintf_r+0x1b6>
 8009880:	ab03      	add	r3, sp, #12
 8009882:	9300      	str	r3, [sp, #0]
 8009884:	4622      	mov	r2, r4
 8009886:	4b13      	ldr	r3, [pc, #76]	; (80098d4 <_vfiprintf_r+0x228>)
 8009888:	a904      	add	r1, sp, #16
 800988a:	4630      	mov	r0, r6
 800988c:	f7fd fe0c 	bl	80074a8 <_printf_float>
 8009890:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009894:	4681      	mov	r9, r0
 8009896:	d1d5      	bne.n	8009844 <_vfiprintf_r+0x198>
 8009898:	89a3      	ldrh	r3, [r4, #12]
 800989a:	065b      	lsls	r3, r3, #25
 800989c:	f53f af7e 	bmi.w	800979c <_vfiprintf_r+0xf0>
 80098a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098a2:	e77d      	b.n	80097a0 <_vfiprintf_r+0xf4>
 80098a4:	ab03      	add	r3, sp, #12
 80098a6:	9300      	str	r3, [sp, #0]
 80098a8:	4622      	mov	r2, r4
 80098aa:	4b0a      	ldr	r3, [pc, #40]	; (80098d4 <_vfiprintf_r+0x228>)
 80098ac:	a904      	add	r1, sp, #16
 80098ae:	4630      	mov	r0, r6
 80098b0:	f7fe f8a6 	bl	8007a00 <_printf_i>
 80098b4:	e7ec      	b.n	8009890 <_vfiprintf_r+0x1e4>
 80098b6:	bf00      	nop
 80098b8:	08009cb8 	.word	0x08009cb8
 80098bc:	08009df4 	.word	0x08009df4
 80098c0:	08009cd8 	.word	0x08009cd8
 80098c4:	08009c98 	.word	0x08009c98
 80098c8:	08009dfa 	.word	0x08009dfa
 80098cc:	08009dfe 	.word	0x08009dfe
 80098d0:	080074a9 	.word	0x080074a9
 80098d4:	08009687 	.word	0x08009687

080098d8 <_sbrk_r>:
 80098d8:	b538      	push	{r3, r4, r5, lr}
 80098da:	2300      	movs	r3, #0
 80098dc:	4c05      	ldr	r4, [pc, #20]	; (80098f4 <_sbrk_r+0x1c>)
 80098de:	4605      	mov	r5, r0
 80098e0:	4608      	mov	r0, r1
 80098e2:	6023      	str	r3, [r4, #0]
 80098e4:	f7f8 fc96 	bl	8002214 <_sbrk>
 80098e8:	1c43      	adds	r3, r0, #1
 80098ea:	d102      	bne.n	80098f2 <_sbrk_r+0x1a>
 80098ec:	6823      	ldr	r3, [r4, #0]
 80098ee:	b103      	cbz	r3, 80098f2 <_sbrk_r+0x1a>
 80098f0:	602b      	str	r3, [r5, #0]
 80098f2:	bd38      	pop	{r3, r4, r5, pc}
 80098f4:	20000ec4 	.word	0x20000ec4

080098f8 <__sread>:
 80098f8:	b510      	push	{r4, lr}
 80098fa:	460c      	mov	r4, r1
 80098fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009900:	f000 f8a8 	bl	8009a54 <_read_r>
 8009904:	2800      	cmp	r0, #0
 8009906:	bfab      	itete	ge
 8009908:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800990a:	89a3      	ldrhlt	r3, [r4, #12]
 800990c:	181b      	addge	r3, r3, r0
 800990e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009912:	bfac      	ite	ge
 8009914:	6563      	strge	r3, [r4, #84]	; 0x54
 8009916:	81a3      	strhlt	r3, [r4, #12]
 8009918:	bd10      	pop	{r4, pc}

0800991a <__swrite>:
 800991a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800991e:	461f      	mov	r7, r3
 8009920:	898b      	ldrh	r3, [r1, #12]
 8009922:	4605      	mov	r5, r0
 8009924:	05db      	lsls	r3, r3, #23
 8009926:	460c      	mov	r4, r1
 8009928:	4616      	mov	r6, r2
 800992a:	d505      	bpl.n	8009938 <__swrite+0x1e>
 800992c:	2302      	movs	r3, #2
 800992e:	2200      	movs	r2, #0
 8009930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009934:	f000 f868 	bl	8009a08 <_lseek_r>
 8009938:	89a3      	ldrh	r3, [r4, #12]
 800993a:	4632      	mov	r2, r6
 800993c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009940:	81a3      	strh	r3, [r4, #12]
 8009942:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009946:	463b      	mov	r3, r7
 8009948:	4628      	mov	r0, r5
 800994a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800994e:	f000 b817 	b.w	8009980 <_write_r>

08009952 <__sseek>:
 8009952:	b510      	push	{r4, lr}
 8009954:	460c      	mov	r4, r1
 8009956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800995a:	f000 f855 	bl	8009a08 <_lseek_r>
 800995e:	1c43      	adds	r3, r0, #1
 8009960:	89a3      	ldrh	r3, [r4, #12]
 8009962:	bf15      	itete	ne
 8009964:	6560      	strne	r0, [r4, #84]	; 0x54
 8009966:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800996a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800996e:	81a3      	strheq	r3, [r4, #12]
 8009970:	bf18      	it	ne
 8009972:	81a3      	strhne	r3, [r4, #12]
 8009974:	bd10      	pop	{r4, pc}

08009976 <__sclose>:
 8009976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800997a:	f000 b813 	b.w	80099a4 <_close_r>
	...

08009980 <_write_r>:
 8009980:	b538      	push	{r3, r4, r5, lr}
 8009982:	4605      	mov	r5, r0
 8009984:	4608      	mov	r0, r1
 8009986:	4611      	mov	r1, r2
 8009988:	2200      	movs	r2, #0
 800998a:	4c05      	ldr	r4, [pc, #20]	; (80099a0 <_write_r+0x20>)
 800998c:	6022      	str	r2, [r4, #0]
 800998e:	461a      	mov	r2, r3
 8009990:	f7f8 f9b9 	bl	8001d06 <_write>
 8009994:	1c43      	adds	r3, r0, #1
 8009996:	d102      	bne.n	800999e <_write_r+0x1e>
 8009998:	6823      	ldr	r3, [r4, #0]
 800999a:	b103      	cbz	r3, 800999e <_write_r+0x1e>
 800999c:	602b      	str	r3, [r5, #0]
 800999e:	bd38      	pop	{r3, r4, r5, pc}
 80099a0:	20000ec4 	.word	0x20000ec4

080099a4 <_close_r>:
 80099a4:	b538      	push	{r3, r4, r5, lr}
 80099a6:	2300      	movs	r3, #0
 80099a8:	4c05      	ldr	r4, [pc, #20]	; (80099c0 <_close_r+0x1c>)
 80099aa:	4605      	mov	r5, r0
 80099ac:	4608      	mov	r0, r1
 80099ae:	6023      	str	r3, [r4, #0]
 80099b0:	f7f8 fbff 	bl	80021b2 <_close>
 80099b4:	1c43      	adds	r3, r0, #1
 80099b6:	d102      	bne.n	80099be <_close_r+0x1a>
 80099b8:	6823      	ldr	r3, [r4, #0]
 80099ba:	b103      	cbz	r3, 80099be <_close_r+0x1a>
 80099bc:	602b      	str	r3, [r5, #0]
 80099be:	bd38      	pop	{r3, r4, r5, pc}
 80099c0:	20000ec4 	.word	0x20000ec4

080099c4 <_fstat_r>:
 80099c4:	b538      	push	{r3, r4, r5, lr}
 80099c6:	2300      	movs	r3, #0
 80099c8:	4c06      	ldr	r4, [pc, #24]	; (80099e4 <_fstat_r+0x20>)
 80099ca:	4605      	mov	r5, r0
 80099cc:	4608      	mov	r0, r1
 80099ce:	4611      	mov	r1, r2
 80099d0:	6023      	str	r3, [r4, #0]
 80099d2:	f7f8 fbf9 	bl	80021c8 <_fstat>
 80099d6:	1c43      	adds	r3, r0, #1
 80099d8:	d102      	bne.n	80099e0 <_fstat_r+0x1c>
 80099da:	6823      	ldr	r3, [r4, #0]
 80099dc:	b103      	cbz	r3, 80099e0 <_fstat_r+0x1c>
 80099de:	602b      	str	r3, [r5, #0]
 80099e0:	bd38      	pop	{r3, r4, r5, pc}
 80099e2:	bf00      	nop
 80099e4:	20000ec4 	.word	0x20000ec4

080099e8 <_isatty_r>:
 80099e8:	b538      	push	{r3, r4, r5, lr}
 80099ea:	2300      	movs	r3, #0
 80099ec:	4c05      	ldr	r4, [pc, #20]	; (8009a04 <_isatty_r+0x1c>)
 80099ee:	4605      	mov	r5, r0
 80099f0:	4608      	mov	r0, r1
 80099f2:	6023      	str	r3, [r4, #0]
 80099f4:	f7f8 fbf7 	bl	80021e6 <_isatty>
 80099f8:	1c43      	adds	r3, r0, #1
 80099fa:	d102      	bne.n	8009a02 <_isatty_r+0x1a>
 80099fc:	6823      	ldr	r3, [r4, #0]
 80099fe:	b103      	cbz	r3, 8009a02 <_isatty_r+0x1a>
 8009a00:	602b      	str	r3, [r5, #0]
 8009a02:	bd38      	pop	{r3, r4, r5, pc}
 8009a04:	20000ec4 	.word	0x20000ec4

08009a08 <_lseek_r>:
 8009a08:	b538      	push	{r3, r4, r5, lr}
 8009a0a:	4605      	mov	r5, r0
 8009a0c:	4608      	mov	r0, r1
 8009a0e:	4611      	mov	r1, r2
 8009a10:	2200      	movs	r2, #0
 8009a12:	4c05      	ldr	r4, [pc, #20]	; (8009a28 <_lseek_r+0x20>)
 8009a14:	6022      	str	r2, [r4, #0]
 8009a16:	461a      	mov	r2, r3
 8009a18:	f7f8 fbef 	bl	80021fa <_lseek>
 8009a1c:	1c43      	adds	r3, r0, #1
 8009a1e:	d102      	bne.n	8009a26 <_lseek_r+0x1e>
 8009a20:	6823      	ldr	r3, [r4, #0]
 8009a22:	b103      	cbz	r3, 8009a26 <_lseek_r+0x1e>
 8009a24:	602b      	str	r3, [r5, #0]
 8009a26:	bd38      	pop	{r3, r4, r5, pc}
 8009a28:	20000ec4 	.word	0x20000ec4

08009a2c <__ascii_mbtowc>:
 8009a2c:	b082      	sub	sp, #8
 8009a2e:	b901      	cbnz	r1, 8009a32 <__ascii_mbtowc+0x6>
 8009a30:	a901      	add	r1, sp, #4
 8009a32:	b142      	cbz	r2, 8009a46 <__ascii_mbtowc+0x1a>
 8009a34:	b14b      	cbz	r3, 8009a4a <__ascii_mbtowc+0x1e>
 8009a36:	7813      	ldrb	r3, [r2, #0]
 8009a38:	600b      	str	r3, [r1, #0]
 8009a3a:	7812      	ldrb	r2, [r2, #0]
 8009a3c:	1c10      	adds	r0, r2, #0
 8009a3e:	bf18      	it	ne
 8009a40:	2001      	movne	r0, #1
 8009a42:	b002      	add	sp, #8
 8009a44:	4770      	bx	lr
 8009a46:	4610      	mov	r0, r2
 8009a48:	e7fb      	b.n	8009a42 <__ascii_mbtowc+0x16>
 8009a4a:	f06f 0001 	mvn.w	r0, #1
 8009a4e:	e7f8      	b.n	8009a42 <__ascii_mbtowc+0x16>

08009a50 <__malloc_lock>:
 8009a50:	4770      	bx	lr

08009a52 <__malloc_unlock>:
 8009a52:	4770      	bx	lr

08009a54 <_read_r>:
 8009a54:	b538      	push	{r3, r4, r5, lr}
 8009a56:	4605      	mov	r5, r0
 8009a58:	4608      	mov	r0, r1
 8009a5a:	4611      	mov	r1, r2
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	4c05      	ldr	r4, [pc, #20]	; (8009a74 <_read_r+0x20>)
 8009a60:	6022      	str	r2, [r4, #0]
 8009a62:	461a      	mov	r2, r3
 8009a64:	f7f8 fb88 	bl	8002178 <_read>
 8009a68:	1c43      	adds	r3, r0, #1
 8009a6a:	d102      	bne.n	8009a72 <_read_r+0x1e>
 8009a6c:	6823      	ldr	r3, [r4, #0]
 8009a6e:	b103      	cbz	r3, 8009a72 <_read_r+0x1e>
 8009a70:	602b      	str	r3, [r5, #0]
 8009a72:	bd38      	pop	{r3, r4, r5, pc}
 8009a74:	20000ec4 	.word	0x20000ec4

08009a78 <__ascii_wctomb>:
 8009a78:	b149      	cbz	r1, 8009a8e <__ascii_wctomb+0x16>
 8009a7a:	2aff      	cmp	r2, #255	; 0xff
 8009a7c:	bf8b      	itete	hi
 8009a7e:	238a      	movhi	r3, #138	; 0x8a
 8009a80:	700a      	strbls	r2, [r1, #0]
 8009a82:	6003      	strhi	r3, [r0, #0]
 8009a84:	2001      	movls	r0, #1
 8009a86:	bf88      	it	hi
 8009a88:	f04f 30ff 	movhi.w	r0, #4294967295
 8009a8c:	4770      	bx	lr
 8009a8e:	4608      	mov	r0, r1
 8009a90:	4770      	bx	lr
	...

08009a94 <_init>:
 8009a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a96:	bf00      	nop
 8009a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a9a:	bc08      	pop	{r3}
 8009a9c:	469e      	mov	lr, r3
 8009a9e:	4770      	bx	lr

08009aa0 <_fini>:
 8009aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aa2:	bf00      	nop
 8009aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aa6:	bc08      	pop	{r3}
 8009aa8:	469e      	mov	lr, r3
 8009aaa:	4770      	bx	lr
