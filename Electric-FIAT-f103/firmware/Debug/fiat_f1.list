
fiat_f1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5b8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000724  0800d6c8  0800d6c8  0001d6c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ddec  0800ddec  0002025c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ddec  0800ddec  0001ddec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ddf4  0800ddf4  0002025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ddf4  0800ddf4  0001ddf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ddf8  0800ddf8  0001ddf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  0800ddfc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f98  2000025c  0800e058  0002025c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011f4  0800e058  000211f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ab1  00000000  00000000  00020285  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003630  00000000  00000000  00036d36  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001448  00000000  00000000  0003a368  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001290  00000000  00000000  0003b7b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017fb5  00000000  00000000  0003ca40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001135b  00000000  00000000  000549f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007ea4a  00000000  00000000  00065d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e479a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ad8  00000000  00000000  000e4818  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000025c 	.word	0x2000025c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d6b0 	.word	0x0800d6b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000260 	.word	0x20000260
 800014c:	0800d6b0 	.word	0x0800d6b0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <strcmp>:
 8000160:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000164:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000168:	2a01      	cmp	r2, #1
 800016a:	bf28      	it	cs
 800016c:	429a      	cmpcs	r2, r3
 800016e:	d0f7      	beq.n	8000160 <strcmp>
 8000170:	1ad0      	subs	r0, r2, r3
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_ldivmod>:
 8000b3c:	b97b      	cbnz	r3, 8000b5e <__aeabi_ldivmod+0x22>
 8000b3e:	b972      	cbnz	r2, 8000b5e <__aeabi_ldivmod+0x22>
 8000b40:	2900      	cmp	r1, #0
 8000b42:	bfbe      	ittt	lt
 8000b44:	2000      	movlt	r0, #0
 8000b46:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b4a:	e006      	blt.n	8000b5a <__aeabi_ldivmod+0x1e>
 8000b4c:	bf08      	it	eq
 8000b4e:	2800      	cmpeq	r0, #0
 8000b50:	bf1c      	itt	ne
 8000b52:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b56:	f04f 30ff 	movne.w	r0, #4294967295
 8000b5a:	f000 b9a7 	b.w	8000eac <__aeabi_idiv0>
 8000b5e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b62:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b66:	2900      	cmp	r1, #0
 8000b68:	db09      	blt.n	8000b7e <__aeabi_ldivmod+0x42>
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	db1a      	blt.n	8000ba4 <__aeabi_ldivmod+0x68>
 8000b6e:	f000 f835 	bl	8000bdc <__udivmoddi4>
 8000b72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7a:	b004      	add	sp, #16
 8000b7c:	4770      	bx	lr
 8000b7e:	4240      	negs	r0, r0
 8000b80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	db1b      	blt.n	8000bc0 <__aeabi_ldivmod+0x84>
 8000b88:	f000 f828 	bl	8000bdc <__udivmoddi4>
 8000b8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b94:	b004      	add	sp, #16
 8000b96:	4240      	negs	r0, r0
 8000b98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b9c:	4252      	negs	r2, r2
 8000b9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ba2:	4770      	bx	lr
 8000ba4:	4252      	negs	r2, r2
 8000ba6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000baa:	f000 f817 	bl	8000bdc <__udivmoddi4>
 8000bae:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb6:	b004      	add	sp, #16
 8000bb8:	4240      	negs	r0, r0
 8000bba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bbe:	4770      	bx	lr
 8000bc0:	4252      	negs	r2, r2
 8000bc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bc6:	f000 f809 	bl	8000bdc <__udivmoddi4>
 8000bca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd2:	b004      	add	sp, #16
 8000bd4:	4252      	negs	r2, r2
 8000bd6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	468c      	mov	ip, r1
 8000be2:	4604      	mov	r4, r0
 8000be4:	9e08      	ldr	r6, [sp, #32]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d14b      	bne.n	8000c82 <__udivmoddi4+0xa6>
 8000bea:	428a      	cmp	r2, r1
 8000bec:	4615      	mov	r5, r2
 8000bee:	d967      	bls.n	8000cc0 <__udivmoddi4+0xe4>
 8000bf0:	fab2 f282 	clz	r2, r2
 8000bf4:	b14a      	cbz	r2, 8000c0a <__udivmoddi4+0x2e>
 8000bf6:	f1c2 0720 	rsb	r7, r2, #32
 8000bfa:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfe:	fa20 f707 	lsr.w	r7, r0, r7
 8000c02:	4095      	lsls	r5, r2
 8000c04:	ea47 0c03 	orr.w	ip, r7, r3
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0e:	fbbc f7fe 	udiv	r7, ip, lr
 8000c12:	fa1f f885 	uxth.w	r8, r5
 8000c16:	fb0e c317 	mls	r3, lr, r7, ip
 8000c1a:	fb07 f908 	mul.w	r9, r7, r8
 8000c1e:	0c21      	lsrs	r1, r4, #16
 8000c20:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c24:	4599      	cmp	r9, r3
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x60>
 8000c28:	18eb      	adds	r3, r5, r3
 8000c2a:	f107 31ff 	add.w	r1, r7, #4294967295
 8000c2e:	f080 811c 	bcs.w	8000e6a <__udivmoddi4+0x28e>
 8000c32:	4599      	cmp	r9, r3
 8000c34:	f240 8119 	bls.w	8000e6a <__udivmoddi4+0x28e>
 8000c38:	3f02      	subs	r7, #2
 8000c3a:	442b      	add	r3, r5
 8000c3c:	eba3 0309 	sub.w	r3, r3, r9
 8000c40:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c44:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c48:	fb00 f108 	mul.w	r1, r0, r8
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c52:	42a1      	cmp	r1, r4
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0x8e>
 8000c56:	192c      	adds	r4, r5, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 8107 	bcs.w	8000e6e <__udivmoddi4+0x292>
 8000c60:	42a1      	cmp	r1, r4
 8000c62:	f240 8104 	bls.w	8000e6e <__udivmoddi4+0x292>
 8000c66:	3802      	subs	r0, #2
 8000c68:	442c      	add	r4, r5
 8000c6a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c6e:	2700      	movs	r7, #0
 8000c70:	1a64      	subs	r4, r4, r1
 8000c72:	b11e      	cbz	r6, 8000c7c <__udivmoddi4+0xa0>
 8000c74:	2300      	movs	r3, #0
 8000c76:	40d4      	lsrs	r4, r2
 8000c78:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7c:	4639      	mov	r1, r7
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xbe>
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	f000 80ec 	beq.w	8000e64 <__udivmoddi4+0x288>
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c92:	4638      	mov	r0, r7
 8000c94:	4639      	mov	r1, r7
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f783 	clz	r7, r3
 8000c9e:	2f00      	cmp	r7, #0
 8000ca0:	d148      	bne.n	8000d34 <__udivmoddi4+0x158>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd0>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80fb 	bhi.w	8000ea2 <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469c      	mov	ip, r3
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa0>
 8000cba:	e9c6 4c00 	strd	r4, ip, [r6]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xe8>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 808f 	bne.w	8000dec <__udivmoddi4+0x210>
 8000cce:	2701      	movs	r7, #1
 8000cd0:	1b49      	subs	r1, r1, r5
 8000cd2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000cd6:	fa1f f985 	uxth.w	r9, r5
 8000cda:	fbb1 fef8 	udiv	lr, r1, r8
 8000cde:	fb08 111e 	mls	r1, r8, lr, r1
 8000ce2:	fb09 f00e 	mul.w	r0, r9, lr
 8000ce6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000cea:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d907      	bls.n	8000d02 <__udivmoddi4+0x126>
 8000cf2:	18eb      	adds	r3, r5, r3
 8000cf4:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000cf8:	d202      	bcs.n	8000d00 <__udivmoddi4+0x124>
 8000cfa:	4298      	cmp	r0, r3
 8000cfc:	f200 80cd 	bhi.w	8000e9a <__udivmoddi4+0x2be>
 8000d00:	468e      	mov	lr, r1
 8000d02:	1a1b      	subs	r3, r3, r0
 8000d04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d08:	fb08 3310 	mls	r3, r8, r0, r3
 8000d0c:	fb09 f900 	mul.w	r9, r9, r0
 8000d10:	b2a4      	uxth	r4, r4
 8000d12:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d16:	45a1      	cmp	r9, r4
 8000d18:	d907      	bls.n	8000d2a <__udivmoddi4+0x14e>
 8000d1a:	192c      	adds	r4, r5, r4
 8000d1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d20:	d202      	bcs.n	8000d28 <__udivmoddi4+0x14c>
 8000d22:	45a1      	cmp	r9, r4
 8000d24:	f200 80b6 	bhi.w	8000e94 <__udivmoddi4+0x2b8>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	eba4 0409 	sub.w	r4, r4, r9
 8000d2e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000d32:	e79e      	b.n	8000c72 <__udivmoddi4+0x96>
 8000d34:	f1c7 0520 	rsb	r5, r7, #32
 8000d38:	40bb      	lsls	r3, r7
 8000d3a:	fa22 fc05 	lsr.w	ip, r2, r5
 8000d3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d42:	fa21 f405 	lsr.w	r4, r1, r5
 8000d46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d4a:	fbb4 f9fe 	udiv	r9, r4, lr
 8000d4e:	fa1f f88c 	uxth.w	r8, ip
 8000d52:	fb0e 4419 	mls	r4, lr, r9, r4
 8000d56:	fa20 f305 	lsr.w	r3, r0, r5
 8000d5a:	40b9      	lsls	r1, r7
 8000d5c:	fb09 fa08 	mul.w	sl, r9, r8
 8000d60:	4319      	orrs	r1, r3
 8000d62:	0c0b      	lsrs	r3, r1, #16
 8000d64:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d68:	45a2      	cmp	sl, r4
 8000d6a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6e:	fa00 f307 	lsl.w	r3, r0, r7
 8000d72:	d90b      	bls.n	8000d8c <__udivmoddi4+0x1b0>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d7c:	f080 8088 	bcs.w	8000e90 <__udivmoddi4+0x2b4>
 8000d80:	45a2      	cmp	sl, r4
 8000d82:	f240 8085 	bls.w	8000e90 <__udivmoddi4+0x2b4>
 8000d86:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8a:	4464      	add	r4, ip
 8000d8c:	eba4 040a 	sub.w	r4, r4, sl
 8000d90:	fbb4 f0fe 	udiv	r0, r4, lr
 8000d94:	fb0e 4410 	mls	r4, lr, r0, r4
 8000d98:	fb00 fa08 	mul.w	sl, r0, r8
 8000d9c:	b289      	uxth	r1, r1
 8000d9e:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000da2:	45a2      	cmp	sl, r4
 8000da4:	d908      	bls.n	8000db8 <__udivmoddi4+0x1dc>
 8000da6:	eb1c 0404 	adds.w	r4, ip, r4
 8000daa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dae:	d26b      	bcs.n	8000e88 <__udivmoddi4+0x2ac>
 8000db0:	45a2      	cmp	sl, r4
 8000db2:	d969      	bls.n	8000e88 <__udivmoddi4+0x2ac>
 8000db4:	3802      	subs	r0, #2
 8000db6:	4464      	add	r4, ip
 8000db8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dbc:	fba0 8902 	umull	r8, r9, r0, r2
 8000dc0:	eba4 040a 	sub.w	r4, r4, sl
 8000dc4:	454c      	cmp	r4, r9
 8000dc6:	4641      	mov	r1, r8
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	d354      	bcc.n	8000e76 <__udivmoddi4+0x29a>
 8000dcc:	d051      	beq.n	8000e72 <__udivmoddi4+0x296>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d069      	beq.n	8000ea6 <__udivmoddi4+0x2ca>
 8000dd2:	1a5a      	subs	r2, r3, r1
 8000dd4:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd8:	fa04 f505 	lsl.w	r5, r4, r5
 8000ddc:	fa22 f307 	lsr.w	r3, r2, r7
 8000de0:	40fc      	lsrs	r4, r7
 8000de2:	431d      	orrs	r5, r3
 8000de4:	e9c6 5400 	strd	r5, r4, [r6]
 8000de8:	2700      	movs	r7, #0
 8000dea:	e747      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000dec:	4095      	lsls	r5, r2
 8000dee:	f1c2 0320 	rsb	r3, r2, #32
 8000df2:	fa21 f003 	lsr.w	r0, r1, r3
 8000df6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000dfa:	fbb0 f7f8 	udiv	r7, r0, r8
 8000dfe:	fa1f f985 	uxth.w	r9, r5
 8000e02:	fb08 0017 	mls	r0, r8, r7, r0
 8000e06:	fa24 f303 	lsr.w	r3, r4, r3
 8000e0a:	4091      	lsls	r1, r2
 8000e0c:	fb07 fc09 	mul.w	ip, r7, r9
 8000e10:	430b      	orrs	r3, r1
 8000e12:	0c19      	lsrs	r1, r3, #16
 8000e14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e18:	458c      	cmp	ip, r1
 8000e1a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x254>
 8000e20:	1869      	adds	r1, r5, r1
 8000e22:	f107 30ff 	add.w	r0, r7, #4294967295
 8000e26:	d231      	bcs.n	8000e8c <__udivmoddi4+0x2b0>
 8000e28:	458c      	cmp	ip, r1
 8000e2a:	d92f      	bls.n	8000e8c <__udivmoddi4+0x2b0>
 8000e2c:	3f02      	subs	r7, #2
 8000e2e:	4429      	add	r1, r5
 8000e30:	eba1 010c 	sub.w	r1, r1, ip
 8000e34:	fbb1 f0f8 	udiv	r0, r1, r8
 8000e38:	fb08 1c10 	mls	ip, r8, r0, r1
 8000e3c:	fb00 fe09 	mul.w	lr, r0, r9
 8000e40:	b299      	uxth	r1, r3
 8000e42:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e46:	458e      	cmp	lr, r1
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x27e>
 8000e4a:	1869      	adds	r1, r5, r1
 8000e4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e50:	d218      	bcs.n	8000e84 <__udivmoddi4+0x2a8>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d916      	bls.n	8000e84 <__udivmoddi4+0x2a8>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4429      	add	r1, r5
 8000e5a:	eba1 010e 	sub.w	r1, r1, lr
 8000e5e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e62:	e73a      	b.n	8000cda <__udivmoddi4+0xfe>
 8000e64:	4637      	mov	r7, r6
 8000e66:	4630      	mov	r0, r6
 8000e68:	e708      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000e6a:	460f      	mov	r7, r1
 8000e6c:	e6e6      	b.n	8000c3c <__udivmoddi4+0x60>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	e6fb      	b.n	8000c6a <__udivmoddi4+0x8e>
 8000e72:	4543      	cmp	r3, r8
 8000e74:	d2ab      	bcs.n	8000dce <__udivmoddi4+0x1f2>
 8000e76:	ebb8 0102 	subs.w	r1, r8, r2
 8000e7a:	eb69 020c 	sbc.w	r2, r9, ip
 8000e7e:	3801      	subs	r0, #1
 8000e80:	4696      	mov	lr, r2
 8000e82:	e7a4      	b.n	8000dce <__udivmoddi4+0x1f2>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e7e8      	b.n	8000e5a <__udivmoddi4+0x27e>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e795      	b.n	8000db8 <__udivmoddi4+0x1dc>
 8000e8c:	4607      	mov	r7, r0
 8000e8e:	e7cf      	b.n	8000e30 <__udivmoddi4+0x254>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e77b      	b.n	8000d8c <__udivmoddi4+0x1b0>
 8000e94:	3802      	subs	r0, #2
 8000e96:	442c      	add	r4, r5
 8000e98:	e747      	b.n	8000d2a <__udivmoddi4+0x14e>
 8000e9a:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e9e:	442b      	add	r3, r5
 8000ea0:	e72f      	b.n	8000d02 <__udivmoddi4+0x126>
 8000ea2:	4638      	mov	r0, r7
 8000ea4:	e707      	b.n	8000cb6 <__udivmoddi4+0xda>
 8000ea6:	4637      	mov	r7, r6
 8000ea8:	e6e8      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <IMU_config>:
//includes
#include "main.h"
#include "IMU_read.h"


void IMU_config(SPI_HandleTypeDef *hspi){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]

	uint8_t write_words[10];

	//accelerometer config
	write_words[0]=BMX055_RESET_REG;
 8000eb8:	2314      	movs	r3, #20
 8000eba:	733b      	strb	r3, [r7, #12]
	write_words[1]=BMX055_INITIATED_SOFT_RESET; //accelerometer soft reset
 8000ebc:	23b6      	movs	r3, #182	; 0xb6
 8000ebe:	737b      	strb	r3, [r7, #13]
	write_words[2]=BMX055_ACC_PMU_RANGE_REG;
 8000ec0:	230f      	movs	r3, #15
 8000ec2:	73bb      	strb	r3, [r7, #14]
	write_words[3]=BMX055_ACC_RANGE_2;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	73fb      	strb	r3, [r7, #15]
	write_words[4]=BMX055_ACC_PMU_BW_REG;
 8000ec8:	2310      	movs	r3, #16
 8000eca:	743b      	strb	r3, [r7, #16]
	write_words[5]=BMX055_ACC_PMU_BW_7_81;
 8000ecc:	2308      	movs	r3, #8
 8000ece:	747b      	strb	r3, [r7, #17]
	write_words[6]=BMX055_ACC_PMU_LPW_REG;
 8000ed0:	2311      	movs	r3, #17
 8000ed2:	74bb      	strb	r3, [r7, #18]
	write_words[7]=BMX055_ACC_PMU_LPW_MODE_NOMAL|BMX055_ACC_PMU_LPW_SLEEP_DUR_0_5MS;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	74fb      	strb	r3, [r7, #19]

	HAL_GPIO_WritePin(CS_accel_GPIO_Port, CS_accel_Pin, RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ede:	4835      	ldr	r0, [pc, #212]	; (8000fb4 <IMU_config+0x104>)
 8000ee0:	f002 fe00 	bl	8003ae4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, write_words, 8, 2000);
 8000ee4:	f107 010c 	add.w	r1, r7, #12
 8000ee8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000eec:	2208      	movs	r2, #8
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f004 f9f9 	bl	80052e6 <HAL_SPI_Transmit>
	HAL_Delay(100);
 8000ef4:	2064      	movs	r0, #100	; 0x64
 8000ef6:	f002 f865 	bl	8002fc4 <HAL_Delay>
	  	  HAL_Delay(100);
	  	  HAL_SPI_Transmit(&hspi1, write_words+4, 2, 2000);
	  	  HAL_Delay(100);
	  	  HAL_SPI_Transmit(&hspi1, write_words+6, 2, 2000);
	  	  HAL_Delay(100);*/
	HAL_GPIO_WritePin(CS_accel_GPIO_Port, CS_accel_Pin, SET);
 8000efa:	2201      	movs	r2, #1
 8000efc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f00:	482c      	ldr	r0, [pc, #176]	; (8000fb4 <IMU_config+0x104>)
 8000f02:	f002 fdef 	bl	8003ae4 <HAL_GPIO_WritePin>

	// gyroscope config
	write_words[0]=BMX055_RESET_REG;
 8000f06:	2314      	movs	r3, #20
 8000f08:	733b      	strb	r3, [r7, #12]
	write_words[1]=BMX055_INITIATED_SOFT_RESET;
 8000f0a:	23b6      	movs	r3, #182	; 0xb6
 8000f0c:	737b      	strb	r3, [r7, #13]
	write_words[2]=BMX055_GYRO_RANGE_REG;
 8000f0e:	230f      	movs	r3, #15
 8000f10:	73bb      	strb	r3, [r7, #14]
	write_words[3]=BMX055_GYRO_RANGE_262_4; // Select Gyro Range(262.4 LSB/°/s)
 8000f12:	2304      	movs	r3, #4
 8000f14:	73fb      	strb	r3, [r7, #15]
	write_words[4]=BMX055_GYRO_BW_REG;
 8000f16:	2310      	movs	r3, #16
 8000f18:	743b      	strb	r3, [r7, #16]
	write_words[5]=BMX055_GYRO_BW_64; // Select Gyro BW   (32Hz)
 8000f1a:	2306      	movs	r3, #6
 8000f1c:	747b      	strb	r3, [r7, #17]
	write_words[6]=BMX055_GYRO_LPM1_REG;
 8000f1e:	2311      	movs	r3, #17
 8000f20:	74bb      	strb	r3, [r7, #18]
	write_words[7]=BMX055_GYRO_LPM1_MODE_NOMAL|BMX055_GYRO_LPM1_SLEEP_DUR_2MS;
 8000f22:	2300      	movs	r3, #0
 8000f24:	74fb      	strb	r3, [r7, #19]
	HAL_GPIO_WritePin(CS_gyro_GPIO_Port, CS_gyro_Pin, RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f2c:	4821      	ldr	r0, [pc, #132]	; (8000fb4 <IMU_config+0x104>)
 8000f2e:	f002 fdd9 	bl	8003ae4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, write_words, 8, 2000);
 8000f32:	f107 010c 	add.w	r1, r7, #12
 8000f36:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f3a:	2208      	movs	r2, #8
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f004 f9d2 	bl	80052e6 <HAL_SPI_Transmit>
	HAL_Delay(100);
 8000f42:	2064      	movs	r0, #100	; 0x64
 8000f44:	f002 f83e 	bl	8002fc4 <HAL_Delay>
	HAL_GPIO_WritePin(CS_gyro_GPIO_Port, CS_gyro_Pin, SET);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f4e:	4819      	ldr	r0, [pc, #100]	; (8000fb4 <IMU_config+0x104>)
 8000f50:	f002 fdc8 	bl	8003ae4 <HAL_GPIO_WritePin>

	// magnetometer config
	write_words[0]=BMX055_RESET_REG;
 8000f54:	2314      	movs	r3, #20
 8000f56:	733b      	strb	r3, [r7, #12]
	write_words[1]=BMX055_INITIATED_SOFT_RESET;
 8000f58:	23b6      	movs	r3, #182	; 0xb6
 8000f5a:	737b      	strb	r3, [r7, #13]
	write_words[2]=BMX055_MAG_POW_CTL_REG;
 8000f5c:	234b      	movs	r3, #75	; 0x4b
 8000f5e:	73bb      	strb	r3, [r7, #14]
	write_words[3]=BMX055_MAG_POW_CTL_SLEEP_MODE; // Select Sleep mode
 8000f60:	2301      	movs	r3, #1
 8000f62:	73fb      	strb	r3, [r7, #15]
	write_words[4]=BMX055_MAG_ADV_OP_OUTPUT_REG;
 8000f64:	234c      	movs	r3, #76	; 0x4c
 8000f66:	743b      	strb	r3, [r7, #16]
	write_words[5]=BMX055_MAG_DATA_RATE_10; // (NomalMode, ODR 10Hz)
 8000f68:	2300      	movs	r3, #0
 8000f6a:	747b      	strb	r3, [r7, #17]
	write_words[6]=BMX055_MAG_REP_XY_REG;
 8000f6c:	2351      	movs	r3, #81	; 0x51
 8000f6e:	74bb      	strb	r3, [r7, #18]
	write_words[7]=0x04; // Repetitions for X-Y Axis  0x04 -> 0b00000100 -> (1+2(2^2)) = 9
 8000f70:	2304      	movs	r3, #4
 8000f72:	74fb      	strb	r3, [r7, #19]
	write_words[8]=BMX055_MAG_REP_Z_REG;
 8000f74:	2352      	movs	r3, #82	; 0x52
 8000f76:	753b      	strb	r3, [r7, #20]
	write_words[9]= 0x0F; // Repetitions for Z-Axis  0x0F-> 0b00001111-> (1 +(2^0 + 2^1 + 2^2 + 2^3) = 15
 8000f78:	230f      	movs	r3, #15
 8000f7a:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(CS_magnet_GPIO_Port, CS_magnet_Pin, RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f82:	480c      	ldr	r0, [pc, #48]	; (8000fb4 <IMU_config+0x104>)
 8000f84:	f002 fdae 	bl	8003ae4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, write_words, 10, 2000);
 8000f88:	f107 010c 	add.w	r1, r7, #12
 8000f8c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f90:	220a      	movs	r2, #10
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f004 f9a7 	bl	80052e6 <HAL_SPI_Transmit>
	HAL_Delay(100);
 8000f98:	2064      	movs	r0, #100	; 0x64
 8000f9a:	f002 f813 	bl	8002fc4 <HAL_Delay>
	HAL_GPIO_WritePin(CS_magnet_GPIO_Port, CS_magnet_Pin, SET);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fa4:	4803      	ldr	r0, [pc, #12]	; (8000fb4 <IMU_config+0x104>)
 8000fa6:	f002 fd9d 	bl	8003ae4 <HAL_GPIO_WritePin>

}
 8000faa:	bf00      	nop
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40010800 	.word	0x40010800

08000fb8 <IMU_acc_read>:

void IMU_acc_read(SPI_HandleTypeDef *hspi, int *accel_data){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
	uint8_t write_data=BMX055_ACC_DATA_START_REG;
 8000fc2:	2382      	movs	r3, #130	; 0x82
 8000fc4:	74fb      	strb	r3, [r7, #19]
	uint8_t store_data[6];

	HAL_GPIO_WritePin(CS_accel_GPIO_Port, CS_accel_Pin, RESET); //read acceloremeter data
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fcc:	4836      	ldr	r0, [pc, #216]	; (80010a8 <IMU_acc_read+0xf0>)
 8000fce:	f002 fd89 	bl	8003ae4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &write_data, 1, 2000);
 8000fd2:	f107 0113 	add.w	r1, r7, #19
 8000fd6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000fda:	2201      	movs	r2, #1
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f004 f982 	bl	80052e6 <HAL_SPI_Transmit>
	for (int i = 0; i < 6; i++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
 8000fe6:	e00c      	b.n	8001002 <IMU_acc_read+0x4a>
	{
		HAL_SPI_Receive(hspi, store_data+i, 1, 2000);
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	f107 020c 	add.w	r2, r7, #12
 8000fee:	18d1      	adds	r1, r2, r3
 8000ff0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f004 faa9 	bl	800554e <HAL_SPI_Receive>
	for (int i = 0; i < 6; i++)
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	3301      	adds	r3, #1
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	2b05      	cmp	r3, #5
 8001006:	ddef      	ble.n	8000fe8 <IMU_acc_read+0x30>
		//readI2c(accl_addr, BMX055_ACC_DATA_START_REG+i, 1, &accl_data[i]);
	}
	HAL_GPIO_WritePin(CS_accel_GPIO_Port, CS_accel_Pin, SET);
 8001008:	2201      	movs	r2, #1
 800100a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800100e:	4826      	ldr	r0, [pc, #152]	; (80010a8 <IMU_acc_read+0xf0>)
 8001010:	f002 fd68 	bl	8003ae4 <HAL_GPIO_WritePin>
	accel_data[0]=((store_data[1]<<4)+(store_data[0]>>4));
 8001014:	7b7b      	ldrb	r3, [r7, #13]
 8001016:	011b      	lsls	r3, r3, #4
 8001018:	7b3a      	ldrb	r2, [r7, #12]
 800101a:	0912      	lsrs	r2, r2, #4
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	441a      	add	r2, r3
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	601a      	str	r2, [r3, #0]
	accel_data[1]=((store_data[3]<<4)+(store_data[2]>>4));
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	011a      	lsls	r2, r3, #4
 8001028:	7bbb      	ldrb	r3, [r7, #14]
 800102a:	091b      	lsrs	r3, r3, #4
 800102c:	b2db      	uxtb	r3, r3
 800102e:	4619      	mov	r1, r3
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	3304      	adds	r3, #4
 8001034:	440a      	add	r2, r1
 8001036:	601a      	str	r2, [r3, #0]
	accel_data[2]=((store_data[5]<<4)+(store_data[4]>>4));
 8001038:	7c7b      	ldrb	r3, [r7, #17]
 800103a:	011a      	lsls	r2, r3, #4
 800103c:	7c3b      	ldrb	r3, [r7, #16]
 800103e:	091b      	lsrs	r3, r3, #4
 8001040:	b2db      	uxtb	r3, r3
 8001042:	4619      	mov	r1, r3
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	3308      	adds	r3, #8
 8001048:	440a      	add	r2, r1
 800104a:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 800104c:	2064      	movs	r0, #100	; 0x64
 800104e:	f001 ffb9 	bl	8002fc4 <HAL_Delay>

	if (accel_data[0] > 2047)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800105a:	db05      	blt.n	8001068 <IMU_acc_read+0xb0>
	{
		accel_data[0] -= 4096;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f5a3 5280 	sub.w	r2, r3, #4096	; 0x1000
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	601a      	str	r2, [r3, #0]
		//accel_data[0] = accel_data[0]*0.00098;
	}
	if (accel_data[1]> 2047)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	3304      	adds	r3, #4
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001072:	db07      	blt.n	8001084 <IMU_acc_read+0xcc>
	{
		accel_data[1] -= 4096;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	3304      	adds	r3, #4
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	3304      	adds	r3, #4
 800107e:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
 8001082:	601a      	str	r2, [r3, #0]
		//accel_data[1] = accel_data[1]*0.00098;
	}
	if (accel_data[2] > 2047)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	3308      	adds	r3, #8
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800108e:	db07      	blt.n	80010a0 <IMU_acc_read+0xe8>
	{
		accel_data[2] -= 4096;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	3308      	adds	r3, #8
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	3308      	adds	r3, #8
 800109a:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
 800109e:	601a      	str	r2, [r3, #0]
		//accel_data[2] = accel_data[2]*0.00098;
	}
}
 80010a0:	bf00      	nop
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40010800 	.word	0x40010800

080010ac <IMU_gyro_read>:

void IMU_gyro_read(SPI_HandleTypeDef *hspi, int *gyro_data){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
	uint8_t write_data=BMX055_GYRO_DATA_START_REG;
 80010b6:	2382      	movs	r3, #130	; 0x82
 80010b8:	74fb      	strb	r3, [r7, #19]
	uint8_t store_data[6];

	HAL_GPIO_WritePin(CS_gyro_GPIO_Port, CS_gyro_Pin, RESET); //read acceloremeter data
 80010ba:	2200      	movs	r2, #0
 80010bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010c0:	4833      	ldr	r0, [pc, #204]	; (8001190 <IMU_gyro_read+0xe4>)
 80010c2:	f002 fd0f 	bl	8003ae4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &write_data, 1, 2000);
 80010c6:	f107 0113 	add.w	r1, r7, #19
 80010ca:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80010ce:	2201      	movs	r2, #1
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f004 f908 	bl	80052e6 <HAL_SPI_Transmit>
	for (int i = 0; i < 6; i++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
 80010da:	e00c      	b.n	80010f6 <IMU_gyro_read+0x4a>
	{
		HAL_SPI_Receive(hspi, store_data+i, 1, 2000);
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	f107 020c 	add.w	r2, r7, #12
 80010e2:	18d1      	adds	r1, r2, r3
 80010e4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80010e8:	2201      	movs	r2, #1
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f004 fa2f 	bl	800554e <HAL_SPI_Receive>
	for (int i = 0; i < 6; i++)
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	3301      	adds	r3, #1
 80010f4:	617b      	str	r3, [r7, #20]
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	2b05      	cmp	r3, #5
 80010fa:	ddef      	ble.n	80010dc <IMU_gyro_read+0x30>
		//readI2c(accl_addr, BMX055_ACC_DATA_START_REG+i, 1, &accl_data[i]);
	}
	HAL_GPIO_WritePin(CS_gyro_GPIO_Port, CS_gyro_Pin, SET);
 80010fc:	2201      	movs	r2, #1
 80010fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001102:	4823      	ldr	r0, [pc, #140]	; (8001190 <IMU_gyro_read+0xe4>)
 8001104:	f002 fcee 	bl	8003ae4 <HAL_GPIO_WritePin>
	gyro_data[0]=((store_data[1]<<8)+(store_data[0]));
 8001108:	7b7b      	ldrb	r3, [r7, #13]
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	7b3a      	ldrb	r2, [r7, #12]
 800110e:	441a      	add	r2, r3
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	601a      	str	r2, [r3, #0]
	gyro_data[1]=((store_data[3]<<8)+(store_data[2]));
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	021a      	lsls	r2, r3, #8
 8001118:	7bbb      	ldrb	r3, [r7, #14]
 800111a:	4619      	mov	r1, r3
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	3304      	adds	r3, #4
 8001120:	440a      	add	r2, r1
 8001122:	601a      	str	r2, [r3, #0]
	gyro_data[2]=((store_data[5]<<8)+(store_data[4]));
 8001124:	7c7b      	ldrb	r3, [r7, #17]
 8001126:	021a      	lsls	r2, r3, #8
 8001128:	7c3b      	ldrb	r3, [r7, #16]
 800112a:	4619      	mov	r1, r3
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	3308      	adds	r3, #8
 8001130:	440a      	add	r2, r1
 8001132:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8001134:	2064      	movs	r0, #100	; 0x64
 8001136:	f001 ff45 	bl	8002fc4 <HAL_Delay>

	if (gyro_data[0] > 32767)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001142:	db05      	blt.n	8001150 <IMU_gyro_read+0xa4>
	{
		gyro_data[0] -= 65536;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	601a      	str	r2, [r3, #0]
		//accel_data[0] = accel_data[0]*0.00098;
	}
	if (gyro_data[1]> 32767)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	3304      	adds	r3, #4
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800115a:	db07      	blt.n	800116c <IMU_gyro_read+0xc0>
	{
		gyro_data[1] -= 65536;
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	3304      	adds	r3, #4
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	3304      	adds	r3, #4
 8001166:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 800116a:	601a      	str	r2, [r3, #0]
		//accel_data[1] = accel_data[1]*0.00098;
	}
	if (gyro_data[2] > 32767)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	3308      	adds	r3, #8
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001176:	db07      	blt.n	8001188 <IMU_gyro_read+0xdc>
	{
		gyro_data[2] -= 65536;
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	3308      	adds	r3, #8
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	3308      	adds	r3, #8
 8001182:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8001186:	601a      	str	r2, [r3, #0]
		//accel_data[2] = accel_data[2]*0.00098;
	}
}
 8001188:	bf00      	nop
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40010800 	.word	0x40010800

08001194 <IMU_mag_read>:

void IMU_mag_read(SPI_HandleTypeDef *hspi, int *mag_data){
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
	uint8_t write_data=BMX055_MAG_DATA_START_REG;
 800119e:	23c2      	movs	r3, #194	; 0xc2
 80011a0:	74fb      	strb	r3, [r7, #19]
	uint8_t store_data[6];

	HAL_GPIO_WritePin(CS_magnet_GPIO_Port, CS_magnet_Pin, RESET); //read acceloremeter data
 80011a2:	2200      	movs	r2, #0
 80011a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011a8:	4835      	ldr	r0, [pc, #212]	; (8001280 <IMU_mag_read+0xec>)
 80011aa:	f002 fc9b 	bl	8003ae4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &write_data, 1, 2000);
 80011ae:	f107 0113 	add.w	r1, r7, #19
 80011b2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80011b6:	2201      	movs	r2, #1
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f004 f894 	bl	80052e6 <HAL_SPI_Transmit>
	for (int i = 0; i < 6; i++)
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	e00c      	b.n	80011de <IMU_mag_read+0x4a>
	{
		HAL_SPI_Receive(hspi, store_data+i, 1, 2000);
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	f107 020c 	add.w	r2, r7, #12
 80011ca:	18d1      	adds	r1, r2, r3
 80011cc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80011d0:	2201      	movs	r2, #1
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f004 f9bb 	bl	800554e <HAL_SPI_Receive>
	for (int i = 0; i < 6; i++)
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	3301      	adds	r3, #1
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	2b05      	cmp	r3, #5
 80011e2:	ddef      	ble.n	80011c4 <IMU_mag_read+0x30>
			//readI2c(accl_addr, BMX055_ACC_DATA_START_REG+i, 1, &accl_data[i]);
	}
	HAL_GPIO_WritePin(CS_magnet_GPIO_Port, CS_magnet_Pin, SET);
 80011e4:	2201      	movs	r2, #1
 80011e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ea:	4825      	ldr	r0, [pc, #148]	; (8001280 <IMU_mag_read+0xec>)
 80011ec:	f002 fc7a 	bl	8003ae4 <HAL_GPIO_WritePin>
	mag_data[0]=((store_data[1]<<5)+(store_data[0]>>3));
 80011f0:	7b7b      	ldrb	r3, [r7, #13]
 80011f2:	015b      	lsls	r3, r3, #5
 80011f4:	7b3a      	ldrb	r2, [r7, #12]
 80011f6:	08d2      	lsrs	r2, r2, #3
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	441a      	add	r2, r3
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	601a      	str	r2, [r3, #0]
	mag_data[1]=((store_data[3]<<5)+(store_data[2]>>3));
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	015a      	lsls	r2, r3, #5
 8001204:	7bbb      	ldrb	r3, [r7, #14]
 8001206:	08db      	lsrs	r3, r3, #3
 8001208:	b2db      	uxtb	r3, r3
 800120a:	4619      	mov	r1, r3
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	3304      	adds	r3, #4
 8001210:	440a      	add	r2, r1
 8001212:	601a      	str	r2, [r3, #0]
	mag_data[2]=((store_data[5]<<5)+(store_data[4]>>4));
 8001214:	7c7b      	ldrb	r3, [r7, #17]
 8001216:	015a      	lsls	r2, r3, #5
 8001218:	7c3b      	ldrb	r3, [r7, #16]
 800121a:	091b      	lsrs	r3, r3, #4
 800121c:	b2db      	uxtb	r3, r3
 800121e:	4619      	mov	r1, r3
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	3308      	adds	r3, #8
 8001224:	440a      	add	r2, r1
 8001226:	601a      	str	r2, [r3, #0]

	if (mag_data[0] > 4095)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001230:	db05      	blt.n	800123e <IMU_mag_read+0xaa>
	{
		mag_data[0] -= 8192;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f5a3 5200 	sub.w	r2, r3, #8192	; 0x2000
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	601a      	str	r2, [r3, #0]
		//accel_data[0] = accel_data[0]*0.00098;
	}
	if (mag_data[1]> 4095)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	3304      	adds	r3, #4
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001248:	db07      	blt.n	800125a <IMU_mag_read+0xc6>
	{
		mag_data[1] -= 8192;
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	3304      	adds	r3, #4
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	3304      	adds	r3, #4
 8001254:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 8001258:	601a      	str	r2, [r3, #0]
			//accel_data[1] = accel_data[1]*0.00098;
	}
	if (mag_data[2] > 4095)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	3308      	adds	r3, #8
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001264:	db07      	blt.n	8001276 <IMU_mag_read+0xe2>
	{
		mag_data[2] -= 8192;
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	3308      	adds	r3, #8
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	3308      	adds	r3, #8
 8001270:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 8001274:	601a      	str	r2, [r3, #0]
		//accel_data[2] = accel_data[2]*0.00098;
	}
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40010800 	.word	0x40010800
 8001284:	00000000 	.word	0x00000000

08001288 <motorSpeed>:

#include "main.h"
#include "encoderMode.h"


float motorSpeed (uint32_t *cnt1, uint32_t *tick, TIM_HandleTypeDef htim3){
 8001288:	b082      	sub	sp, #8
 800128a:	b5b0      	push	{r4, r5, r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	6039      	str	r1, [r7, #0]
 8001294:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001298:	e881 000c 	stmia.w	r1, {r2, r3}

	uint32_t cnt2 = __HAL_TIM_GET_COUNTER(&htim3);
 800129c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	613b      	str	r3, [r7, #16]
	int diff = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]

	printf("cnt1 = %lu counter2 = %lu\n",*cnt1,cnt2);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4619      	mov	r1, r3
 80012ae:	483a      	ldr	r0, [pc, #232]	; (8001398 <motorSpeed+0x110>)
 80012b0:	f009 f9e2 	bl	800a678 <iprintf>

	if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)){
 80012b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0310 	and.w	r3, r3, #16
 80012bc:	2b10      	cmp	r3, #16
 80012be:	d113      	bne.n	80012e8 <motorSpeed+0x60>
		if(cnt2 < *cnt1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d205      	bcs.n	80012d6 <motorSpeed+0x4e>
			diff = *cnt1 - cnt2;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	e01b      	b.n	800130e <motorSpeed+0x86>
		else
			diff = (65535 - cnt2) + *cnt1;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80012e2:	33ff      	adds	r3, #255	; 0xff
 80012e4:	617b      	str	r3, [r7, #20]
 80012e6:	e012      	b.n	800130e <motorSpeed+0x86>
	} else {
		if(cnt2 > *cnt1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d905      	bls.n	80012fe <motorSpeed+0x76>
			diff = cnt2 - *cnt1;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	e007      	b.n	800130e <motorSpeed+0x86>
		else
			diff = (65535 - *cnt1) + cnt2;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800130a:	33ff      	adds	r3, #255	; 0xff
 800130c:	617b      	str	r3, [r7, #20]
	}



	printf("diff = %d\n", diff);
 800130e:	6979      	ldr	r1, [r7, #20]
 8001310:	4822      	ldr	r0, [pc, #136]	; (800139c <motorSpeed+0x114>)
 8001312:	f009 f9b1 	bl	800a678 <iprintf>
	float speed = ((diff/4)*60)/((HAL_GetTick()-*tick)*0.001);
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	2b00      	cmp	r3, #0
 800131a:	da00      	bge.n	800131e <motorSpeed+0x96>
 800131c:	3303      	adds	r3, #3
 800131e:	109b      	asrs	r3, r3, #2
 8001320:	461a      	mov	r2, r3
 8001322:	4613      	mov	r3, r2
 8001324:	011b      	lsls	r3, r3, #4
 8001326:	1a9b      	subs	r3, r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff f874 	bl	8000418 <__aeabi_i2d>
 8001330:	4604      	mov	r4, r0
 8001332:	460d      	mov	r5, r1
 8001334:	f001 fe3c 	bl	8002fb0 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff f859 	bl	80003f8 <__aeabi_ui2d>
 8001346:	a312      	add	r3, pc, #72	; (adr r3, 8001390 <motorSpeed+0x108>)
 8001348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134c:	f7ff f8ce 	bl	80004ec <__aeabi_dmul>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4620      	mov	r0, r4
 8001356:	4629      	mov	r1, r5
 8001358:	f7ff f9f2 	bl	8000740 <__aeabi_ddiv>
 800135c:	4603      	mov	r3, r0
 800135e:	460c      	mov	r4, r1
 8001360:	4618      	mov	r0, r3
 8001362:	4621      	mov	r1, r4
 8001364:	f7ff fb9a 	bl	8000a9c <__aeabi_d2f>
 8001368:	4603      	mov	r3, r0
 800136a:	60fb      	str	r3, [r7, #12]


	*tick = HAL_GetTick();
 800136c:	f001 fe20 	bl	8002fb0 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	601a      	str	r2, [r3, #0]
	*cnt1 = cnt2;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	601a      	str	r2, [r3, #0]
	//printf("aqui %f\n",speed);
	return speed;
 800137c:	68fb      	ldr	r3, [r7, #12]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001388:	b002      	add	sp, #8
 800138a:	4770      	bx	lr
 800138c:	f3af 8000 	nop.w
 8001390:	d2f1a9fc 	.word	0xd2f1a9fc
 8001394:	3f50624d 	.word	0x3f50624d
 8001398:	0800d6c8 	.word	0x0800d6c8
 800139c:	0800d6e4 	.word	0x0800d6e4

080013a0 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80013a4:	2200      	movs	r2, #0
 80013a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013aa:	4802      	ldr	r0, [pc, #8]	; (80013b4 <SELECT+0x14>)
 80013ac:	f002 fb9a 	bl	8003ae4 <HAL_GPIO_WritePin>
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40010c00 	.word	0x40010c00

080013b8 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80013bc:	2201      	movs	r2, #1
 80013be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013c2:	4802      	ldr	r0, [pc, #8]	; (80013cc <DESELECT+0x14>)
 80013c4:	f002 fb8e 	bl	8003ae4 <HAL_GPIO_WritePin>
}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40010c00 	.word	0x40010c00

080013d0 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 80013da:	bf00      	nop
 80013dc:	4808      	ldr	r0, [pc, #32]	; (8001400 <SPI_TxByte+0x30>)
 80013de:	f004 fb61 	bl	8005aa4 <HAL_SPI_GetState>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d1f9      	bne.n	80013dc <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 80013e8:	1df9      	adds	r1, r7, #7
 80013ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ee:	2201      	movs	r2, #1
 80013f0:	4803      	ldr	r0, [pc, #12]	; (8001400 <SPI_TxByte+0x30>)
 80013f2:	f003 ff78 	bl	80052e6 <HAL_SPI_Transmit>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200002f0 	.word	0x200002f0

08001404 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800140a:	23ff      	movs	r3, #255	; 0xff
 800140c:	71fb      	strb	r3, [r7, #7]
  data = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 8001412:	bf00      	nop
 8001414:	4809      	ldr	r0, [pc, #36]	; (800143c <SPI_RxByte+0x38>)
 8001416:	f004 fb45 	bl	8005aa4 <HAL_SPI_GetState>
 800141a:	4603      	mov	r3, r0
 800141c:	2b01      	cmp	r3, #1
 800141e:	d1f9      	bne.n	8001414 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 8001420:	1dba      	adds	r2, r7, #6
 8001422:	1df9      	adds	r1, r7, #7
 8001424:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	2301      	movs	r3, #1
 800142c:	4803      	ldr	r0, [pc, #12]	; (800143c <SPI_RxByte+0x38>)
 800142e:	f004 f997 	bl	8005760 <HAL_SPI_TransmitReceive>
  
  return data;
 8001432:	79bb      	ldrb	r3, [r7, #6]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	200002f0 	.word	0x200002f0

08001440 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001448:	f7ff ffdc 	bl	8001404 <SPI_RxByte>
 800144c:	4603      	mov	r3, r0
 800144e:	461a      	mov	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	701a      	strb	r2, [r3, #0]
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <SD_ReadyWait+0x34>)
 8001464:	2232      	movs	r2, #50	; 0x32
 8001466:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8001468:	f7ff ffcc 	bl	8001404 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 800146c:	f7ff ffca 	bl	8001404 <SPI_RxByte>
 8001470:	4603      	mov	r3, r0
 8001472:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	2bff      	cmp	r3, #255	; 0xff
 8001478:	d004      	beq.n	8001484 <SD_ReadyWait+0x28>
 800147a:	4b05      	ldr	r3, [pc, #20]	; (8001490 <SD_ReadyWait+0x34>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1f3      	bne.n	800146c <SD_ReadyWait+0x10>
  
  return res;
 8001484:	79fb      	ldrb	r3, [r7, #7]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000d84 	.word	0x20000d84

08001494 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800149a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800149e:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 80014a0:	f7ff ff8a 	bl	80013b8 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 80014a4:	2300      	movs	r3, #0
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	e005      	b.n	80014b6 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80014aa:	20ff      	movs	r0, #255	; 0xff
 80014ac:	f7ff ff90 	bl	80013d0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	3301      	adds	r3, #1
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	2b09      	cmp	r3, #9
 80014ba:	ddf6      	ble.n	80014aa <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 80014bc:	f7ff ff70 	bl	80013a0 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 80014c0:	2340      	movs	r3, #64	; 0x40
 80014c2:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80014d4:	2395      	movs	r3, #149	; 0x95
 80014d6:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 80014d8:	2300      	movs	r3, #0
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	e009      	b.n	80014f2 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80014de:	1d3a      	adds	r2, r7, #4
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4413      	add	r3, r2
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff ff72 	bl	80013d0 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	3301      	adds	r3, #1
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2b05      	cmp	r3, #5
 80014f6:	ddf2      	ble.n	80014de <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 80014f8:	e002      	b.n	8001500 <SD_PowerOn+0x6c>
  {
    Count--;
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	3b01      	subs	r3, #1
 80014fe:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8001500:	f7ff ff80 	bl	8001404 <SPI_RxByte>
 8001504:	4603      	mov	r3, r0
 8001506:	2b01      	cmp	r3, #1
 8001508:	d002      	beq.n	8001510 <SD_PowerOn+0x7c>
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1f4      	bne.n	80014fa <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8001510:	f7ff ff52 	bl	80013b8 <DESELECT>
  SPI_TxByte(0XFF);
 8001514:	20ff      	movs	r0, #255	; 0xff
 8001516:	f7ff ff5b 	bl	80013d0 <SPI_TxByte>
  
  PowerFlag = 1;
 800151a:	4b03      	ldr	r3, [pc, #12]	; (8001528 <SD_PowerOn+0x94>)
 800151c:	2201      	movs	r2, #1
 800151e:	701a      	strb	r2, [r3, #0]
}
 8001520:	bf00      	nop
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000279 	.word	0x20000279

0800152c <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001530:	4b03      	ldr	r3, [pc, #12]	; (8001540 <SD_PowerOff+0x14>)
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]
}
 8001536:	bf00      	nop
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	20000279 	.word	0x20000279

08001544 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001548:	4b02      	ldr	r3, [pc, #8]	; (8001554 <SD_CheckPower+0x10>)
 800154a:	781b      	ldrb	r3, [r3, #0]
}
 800154c:	4618      	mov	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	20000279 	.word	0x20000279

08001558 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8001562:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <SD_RxDataBlock+0x68>)
 8001564:	220a      	movs	r2, #10
 8001566:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8001568:	f7ff ff4c 	bl	8001404 <SPI_RxByte>
 800156c:	4603      	mov	r3, r0
 800156e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	2bff      	cmp	r3, #255	; 0xff
 8001574:	d104      	bne.n	8001580 <SD_RxDataBlock+0x28>
 8001576:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <SD_RxDataBlock+0x68>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1f3      	bne.n	8001568 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	2bfe      	cmp	r3, #254	; 0xfe
 8001584:	d001      	beq.n	800158a <SD_RxDataBlock+0x32>
    return FALSE;
 8001586:	2300      	movs	r3, #0
 8001588:	e016      	b.n	80015b8 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	1c5a      	adds	r2, r3, #1
 800158e:	607a      	str	r2, [r7, #4]
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff55 	bl	8001440 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	1c5a      	adds	r2, r3, #1
 800159a:	607a      	str	r2, [r7, #4]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ff4f 	bl	8001440 <SPI_RxBytePtr>
  } while(btr -= 2);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	3b02      	subs	r3, #2
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1ed      	bne.n	800158a <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 80015ae:	f7ff ff29 	bl	8001404 <SPI_RxByte>
  SPI_RxByte();
 80015b2:	f7ff ff27 	bl	8001404 <SPI_RxByte>
  
  return TRUE;
 80015b6:	2301      	movs	r3, #1
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000d85 	.word	0x20000d85

080015c4 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	460b      	mov	r3, r1
 80015ce:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80015d4:	f7ff ff42 	bl	800145c <SD_ReadyWait>
 80015d8:	4603      	mov	r3, r0
 80015da:	2bff      	cmp	r3, #255	; 0xff
 80015dc:	d001      	beq.n	80015e2 <SD_TxDataBlock+0x1e>
    return FALSE;
 80015de:	2300      	movs	r3, #0
 80015e0:	e040      	b.n	8001664 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 80015e2:	78fb      	ldrb	r3, [r7, #3]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fef3 	bl	80013d0 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 80015ea:	78fb      	ldrb	r3, [r7, #3]
 80015ec:	2bfd      	cmp	r3, #253	; 0xfd
 80015ee:	d031      	beq.n	8001654 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	607a      	str	r2, [r7, #4]
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fee7 	bl	80013d0 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	1c5a      	adds	r2, r3, #1
 8001606:	607a      	str	r2, [r7, #4]
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fee0 	bl	80013d0 <SPI_TxByte>
    } while (--wc);
 8001610:	7bbb      	ldrb	r3, [r7, #14]
 8001612:	3b01      	subs	r3, #1
 8001614:	73bb      	strb	r3, [r7, #14]
 8001616:	7bbb      	ldrb	r3, [r7, #14]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1eb      	bne.n	80015f4 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 800161c:	f7ff fef2 	bl	8001404 <SPI_RxByte>
    SPI_RxByte();
 8001620:	f7ff fef0 	bl	8001404 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8001624:	e00b      	b.n	800163e <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8001626:	f7ff feed 	bl	8001404 <SPI_RxByte>
 800162a:	4603      	mov	r3, r0
 800162c:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	f003 031f 	and.w	r3, r3, #31
 8001634:	2b05      	cmp	r3, #5
 8001636:	d006      	beq.n	8001646 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8001638:	7b7b      	ldrb	r3, [r7, #13]
 800163a:	3301      	adds	r3, #1
 800163c:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 800163e:	7b7b      	ldrb	r3, [r7, #13]
 8001640:	2b40      	cmp	r3, #64	; 0x40
 8001642:	d9f0      	bls.n	8001626 <SD_TxDataBlock+0x62>
 8001644:	e000      	b.n	8001648 <SD_TxDataBlock+0x84>
        break;
 8001646:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001648:	bf00      	nop
 800164a:	f7ff fedb 	bl	8001404 <SPI_RxByte>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0fa      	beq.n	800164a <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8001654:	7bfb      	ldrb	r3, [r7, #15]
 8001656:	f003 031f 	and.w	r3, r3, #31
 800165a:	2b05      	cmp	r3, #5
 800165c:	d101      	bne.n	8001662 <SD_TxDataBlock+0x9e>
    return TRUE;
 800165e:	2301      	movs	r3, #1
 8001660:	e000      	b.n	8001664 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	6039      	str	r1, [r7, #0]
 8001676:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001678:	f7ff fef0 	bl	800145c <SD_ReadyWait>
 800167c:	4603      	mov	r3, r0
 800167e:	2bff      	cmp	r3, #255	; 0xff
 8001680:	d001      	beq.n	8001686 <SD_SendCmd+0x1a>
    return 0xFF;
 8001682:	23ff      	movs	r3, #255	; 0xff
 8001684:	e040      	b.n	8001708 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fea1 	bl	80013d0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	0e1b      	lsrs	r3, r3, #24
 8001692:	b2db      	uxtb	r3, r3
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff fe9b 	bl	80013d0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	0c1b      	lsrs	r3, r3, #16
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fe95 	bl	80013d0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	0a1b      	lsrs	r3, r3, #8
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fe8f 	bl	80013d0 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fe8a 	bl	80013d0 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 80016bc:	2300      	movs	r3, #0
 80016be:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	2b40      	cmp	r3, #64	; 0x40
 80016c4:	d101      	bne.n	80016ca <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80016c6:	2395      	movs	r3, #149	; 0x95
 80016c8:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	2b48      	cmp	r3, #72	; 0x48
 80016ce:	d101      	bne.n	80016d4 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80016d0:	2387      	movs	r3, #135	; 0x87
 80016d2:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fe7a 	bl	80013d0 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	2b4c      	cmp	r3, #76	; 0x4c
 80016e0:	d101      	bne.n	80016e6 <SD_SendCmd+0x7a>
    SPI_RxByte();
 80016e2:	f7ff fe8f 	bl	8001404 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 80016e6:	230a      	movs	r3, #10
 80016e8:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80016ea:	f7ff fe8b 	bl	8001404 <SPI_RxByte>
 80016ee:	4603      	mov	r3, r0
 80016f0:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80016f2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	da05      	bge.n	8001706 <SD_SendCmd+0x9a>
 80016fa:	7bbb      	ldrb	r3, [r7, #14]
 80016fc:	3b01      	subs	r3, #1
 80016fe:	73bb      	strb	r3, [r7, #14]
 8001700:	7bbb      	ldrb	r3, [r7, #14]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f1      	bne.n	80016ea <SD_SendCmd+0x7e>
  
  return res;
 8001706:	7b7b      	ldrb	r3, [r7, #13]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001710:	b590      	push	{r4, r7, lr}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8001720:	2301      	movs	r3, #1
 8001722:	e0d5      	b.n	80018d0 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001724:	4b6c      	ldr	r3, [pc, #432]	; (80018d8 <SD_disk_initialize+0x1c8>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	b2db      	uxtb	r3, r3
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <SD_disk_initialize+0x2a>
    return Stat;        
 8001732:	4b69      	ldr	r3, [pc, #420]	; (80018d8 <SD_disk_initialize+0x1c8>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	b2db      	uxtb	r3, r3
 8001738:	e0ca      	b.n	80018d0 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 800173a:	f7ff feab 	bl	8001494 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 800173e:	f7ff fe2f 	bl	80013a0 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8001746:	2100      	movs	r1, #0
 8001748:	2040      	movs	r0, #64	; 0x40
 800174a:	f7ff ff8f 	bl	800166c <SD_SendCmd>
 800174e:	4603      	mov	r3, r0
 8001750:	2b01      	cmp	r3, #1
 8001752:	f040 80a5 	bne.w	80018a0 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001756:	4b61      	ldr	r3, [pc, #388]	; (80018dc <SD_disk_initialize+0x1cc>)
 8001758:	2264      	movs	r2, #100	; 0x64
 800175a:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 800175c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001760:	2048      	movs	r0, #72	; 0x48
 8001762:	f7ff ff83 	bl	800166c <SD_SendCmd>
 8001766:	4603      	mov	r3, r0
 8001768:	2b01      	cmp	r3, #1
 800176a:	d158      	bne.n	800181e <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 800176c:	2300      	movs	r3, #0
 800176e:	73fb      	strb	r3, [r7, #15]
 8001770:	e00c      	b.n	800178c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001772:	7bfc      	ldrb	r4, [r7, #15]
 8001774:	f7ff fe46 	bl	8001404 <SPI_RxByte>
 8001778:	4603      	mov	r3, r0
 800177a:	461a      	mov	r2, r3
 800177c:	f107 0310 	add.w	r3, r7, #16
 8001780:	4423      	add	r3, r4
 8001782:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001786:	7bfb      	ldrb	r3, [r7, #15]
 8001788:	3301      	adds	r3, #1
 800178a:	73fb      	strb	r3, [r7, #15]
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	2b03      	cmp	r3, #3
 8001790:	d9ef      	bls.n	8001772 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8001792:	7abb      	ldrb	r3, [r7, #10]
 8001794:	2b01      	cmp	r3, #1
 8001796:	f040 8083 	bne.w	80018a0 <SD_disk_initialize+0x190>
 800179a:	7afb      	ldrb	r3, [r7, #11]
 800179c:	2baa      	cmp	r3, #170	; 0xaa
 800179e:	d17f      	bne.n	80018a0 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80017a0:	2100      	movs	r1, #0
 80017a2:	2077      	movs	r0, #119	; 0x77
 80017a4:	f7ff ff62 	bl	800166c <SD_SendCmd>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d807      	bhi.n	80017be <SD_disk_initialize+0xae>
 80017ae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80017b2:	2069      	movs	r0, #105	; 0x69
 80017b4:	f7ff ff5a 	bl	800166c <SD_SendCmd>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d005      	beq.n	80017ca <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80017be:	4b47      	ldr	r3, [pc, #284]	; (80018dc <SD_disk_initialize+0x1cc>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1eb      	bne.n	80017a0 <SD_disk_initialize+0x90>
 80017c8:	e000      	b.n	80017cc <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80017ca:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 80017cc:	4b43      	ldr	r3, [pc, #268]	; (80018dc <SD_disk_initialize+0x1cc>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d064      	beq.n	80018a0 <SD_disk_initialize+0x190>
 80017d6:	2100      	movs	r1, #0
 80017d8:	207a      	movs	r0, #122	; 0x7a
 80017da:	f7ff ff47 	bl	800166c <SD_SendCmd>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d15d      	bne.n	80018a0 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80017e4:	2300      	movs	r3, #0
 80017e6:	73fb      	strb	r3, [r7, #15]
 80017e8:	e00c      	b.n	8001804 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80017ea:	7bfc      	ldrb	r4, [r7, #15]
 80017ec:	f7ff fe0a 	bl	8001404 <SPI_RxByte>
 80017f0:	4603      	mov	r3, r0
 80017f2:	461a      	mov	r2, r3
 80017f4:	f107 0310 	add.w	r3, r7, #16
 80017f8:	4423      	add	r3, r4
 80017fa:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
 8001800:	3301      	adds	r3, #1
 8001802:	73fb      	strb	r3, [r7, #15]
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	2b03      	cmp	r3, #3
 8001808:	d9ef      	bls.n	80017ea <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 800180a:	7a3b      	ldrb	r3, [r7, #8]
 800180c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <SD_disk_initialize+0x108>
 8001814:	2306      	movs	r3, #6
 8001816:	e000      	b.n	800181a <SD_disk_initialize+0x10a>
 8001818:	2302      	movs	r3, #2
 800181a:	73bb      	strb	r3, [r7, #14]
 800181c:	e040      	b.n	80018a0 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800181e:	2100      	movs	r1, #0
 8001820:	2077      	movs	r0, #119	; 0x77
 8001822:	f7ff ff23 	bl	800166c <SD_SendCmd>
 8001826:	4603      	mov	r3, r0
 8001828:	2b01      	cmp	r3, #1
 800182a:	d808      	bhi.n	800183e <SD_disk_initialize+0x12e>
 800182c:	2100      	movs	r1, #0
 800182e:	2069      	movs	r0, #105	; 0x69
 8001830:	f7ff ff1c 	bl	800166c <SD_SendCmd>
 8001834:	4603      	mov	r3, r0
 8001836:	2b01      	cmp	r3, #1
 8001838:	d801      	bhi.n	800183e <SD_disk_initialize+0x12e>
 800183a:	2302      	movs	r3, #2
 800183c:	e000      	b.n	8001840 <SD_disk_initialize+0x130>
 800183e:	2301      	movs	r3, #1
 8001840:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8001842:	7bbb      	ldrb	r3, [r7, #14]
 8001844:	2b02      	cmp	r3, #2
 8001846:	d10e      	bne.n	8001866 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001848:	2100      	movs	r1, #0
 800184a:	2077      	movs	r0, #119	; 0x77
 800184c:	f7ff ff0e 	bl	800166c <SD_SendCmd>
 8001850:	4603      	mov	r3, r0
 8001852:	2b01      	cmp	r3, #1
 8001854:	d80e      	bhi.n	8001874 <SD_disk_initialize+0x164>
 8001856:	2100      	movs	r1, #0
 8001858:	2069      	movs	r0, #105	; 0x69
 800185a:	f7ff ff07 	bl	800166c <SD_SendCmd>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d107      	bne.n	8001874 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001864:	e00d      	b.n	8001882 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001866:	2100      	movs	r1, #0
 8001868:	2041      	movs	r0, #65	; 0x41
 800186a:	f7ff feff 	bl	800166c <SD_SendCmd>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d005      	beq.n	8001880 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001874:	4b19      	ldr	r3, [pc, #100]	; (80018dc <SD_disk_initialize+0x1cc>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1e1      	bne.n	8001842 <SD_disk_initialize+0x132>
 800187e:	e000      	b.n	8001882 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001880:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8001882:	4b16      	ldr	r3, [pc, #88]	; (80018dc <SD_disk_initialize+0x1cc>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b00      	cmp	r3, #0
 800188a:	d007      	beq.n	800189c <SD_disk_initialize+0x18c>
 800188c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001890:	2050      	movs	r0, #80	; 0x50
 8001892:	f7ff feeb 	bl	800166c <SD_SendCmd>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 80018a0:	4a0f      	ldr	r2, [pc, #60]	; (80018e0 <SD_disk_initialize+0x1d0>)
 80018a2:	7bbb      	ldrb	r3, [r7, #14]
 80018a4:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 80018a6:	f7ff fd87 	bl	80013b8 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80018aa:	f7ff fdab 	bl	8001404 <SPI_RxByte>
  
  if (type) 
 80018ae:	7bbb      	ldrb	r3, [r7, #14]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d008      	beq.n	80018c6 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <SD_disk_initialize+0x1c8>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	f023 0301 	bic.w	r3, r3, #1
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <SD_disk_initialize+0x1c8>)
 80018c2:	701a      	strb	r2, [r3, #0]
 80018c4:	e001      	b.n	80018ca <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80018c6:	f7ff fe31 	bl	800152c <SD_PowerOff>
  }
  
  return Stat;
 80018ca:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <SD_disk_initialize+0x1c8>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	b2db      	uxtb	r3, r3
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd90      	pop	{r4, r7, pc}
 80018d8:	20000000 	.word	0x20000000
 80018dc:	20000d85 	.word	0x20000d85
 80018e0:	20000278 	.word	0x20000278

080018e4 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <SD_disk_status+0x14>
    return STA_NOINIT; 
 80018f4:	2301      	movs	r3, #1
 80018f6:	e002      	b.n	80018fe <SD_disk_status+0x1a>
  
  return Stat;
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <SD_disk_status+0x24>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	b2db      	uxtb	r3, r3
}
 80018fe:	4618      	mov	r0, r3
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr
 8001908:	20000000 	.word	0x20000000

0800190c <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	4603      	mov	r3, r0
 800191a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 800191c:	7bfb      	ldrb	r3, [r7, #15]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d102      	bne.n	8001928 <SD_disk_read+0x1c>
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <SD_disk_read+0x20>
    return RES_PARERR;
 8001928:	2304      	movs	r3, #4
 800192a:	e051      	b.n	80019d0 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 800192c:	4b2a      	ldr	r3, [pc, #168]	; (80019d8 <SD_disk_read+0xcc>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <SD_disk_read+0x32>
    return RES_NOTRDY;
 800193a:	2303      	movs	r3, #3
 800193c:	e048      	b.n	80019d0 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 800193e:	4b27      	ldr	r3, [pc, #156]	; (80019dc <SD_disk_read+0xd0>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	2b00      	cmp	r3, #0
 8001948:	d102      	bne.n	8001950 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	025b      	lsls	r3, r3, #9
 800194e:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001950:	f7ff fd26 	bl	80013a0 <SELECT>
  
  if (count == 1) 
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d111      	bne.n	800197e <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	2051      	movs	r0, #81	; 0x51
 800195e:	f7ff fe85 	bl	800166c <SD_SendCmd>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d129      	bne.n	80019bc <SD_disk_read+0xb0>
 8001968:	f44f 7100 	mov.w	r1, #512	; 0x200
 800196c:	68b8      	ldr	r0, [r7, #8]
 800196e:	f7ff fdf3 	bl	8001558 <SD_RxDataBlock>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d021      	beq.n	80019bc <SD_disk_read+0xb0>
      count = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	603b      	str	r3, [r7, #0]
 800197c:	e01e      	b.n	80019bc <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	2052      	movs	r0, #82	; 0x52
 8001982:	f7ff fe73 	bl	800166c <SD_SendCmd>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d117      	bne.n	80019bc <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 800198c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001990:	68b8      	ldr	r0, [r7, #8]
 8001992:	f7ff fde1 	bl	8001558 <SD_RxDataBlock>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00a      	beq.n	80019b2 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80019a2:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	603b      	str	r3, [r7, #0]
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1ed      	bne.n	800198c <SD_disk_read+0x80>
 80019b0:	e000      	b.n	80019b4 <SD_disk_read+0xa8>
          break;
 80019b2:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 80019b4:	2100      	movs	r1, #0
 80019b6:	204c      	movs	r0, #76	; 0x4c
 80019b8:	f7ff fe58 	bl	800166c <SD_SendCmd>
    }
  }
  
  DESELECT();
 80019bc:	f7ff fcfc 	bl	80013b8 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80019c0:	f7ff fd20 	bl	8001404 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	bf14      	ite	ne
 80019ca:	2301      	movne	r3, #1
 80019cc:	2300      	moveq	r3, #0
 80019ce:	b2db      	uxtb	r3, r3
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000000 	.word	0x20000000
 80019dc:	20000278 	.word	0x20000278

080019e0 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60b9      	str	r1, [r7, #8]
 80019e8:	607a      	str	r2, [r7, #4]
 80019ea:	603b      	str	r3, [r7, #0]
 80019ec:	4603      	mov	r3, r0
 80019ee:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d102      	bne.n	80019fc <SD_disk_write+0x1c>
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <SD_disk_write+0x20>
    return RES_PARERR;
 80019fc:	2304      	movs	r3, #4
 80019fe:	e06b      	b.n	8001ad8 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8001a00:	4b37      	ldr	r3, [pc, #220]	; (8001ae0 <SD_disk_write+0x100>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e062      	b.n	8001ad8 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8001a12:	4b33      	ldr	r3, [pc, #204]	; (8001ae0 <SD_disk_write+0x100>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001a20:	2302      	movs	r3, #2
 8001a22:	e059      	b.n	8001ad8 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8001a24:	4b2f      	ldr	r3, [pc, #188]	; (8001ae4 <SD_disk_write+0x104>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d102      	bne.n	8001a36 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	025b      	lsls	r3, r3, #9
 8001a34:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001a36:	f7ff fcb3 	bl	80013a0 <SELECT>
  
  if (count == 1) 
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d110      	bne.n	8001a62 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	2058      	movs	r0, #88	; 0x58
 8001a44:	f7ff fe12 	bl	800166c <SD_SendCmd>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d13a      	bne.n	8001ac4 <SD_disk_write+0xe4>
 8001a4e:	21fe      	movs	r1, #254	; 0xfe
 8001a50:	68b8      	ldr	r0, [r7, #8]
 8001a52:	f7ff fdb7 	bl	80015c4 <SD_TxDataBlock>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d033      	beq.n	8001ac4 <SD_disk_write+0xe4>
      count = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	e030      	b.n	8001ac4 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8001a62:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <SD_disk_write+0x104>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d007      	beq.n	8001a7e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001a6e:	2100      	movs	r1, #0
 8001a70:	2077      	movs	r0, #119	; 0x77
 8001a72:	f7ff fdfb 	bl	800166c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001a76:	6839      	ldr	r1, [r7, #0]
 8001a78:	2057      	movs	r0, #87	; 0x57
 8001a7a:	f7ff fdf7 	bl	800166c <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	2059      	movs	r0, #89	; 0x59
 8001a82:	f7ff fdf3 	bl	800166c <SD_SendCmd>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d11b      	bne.n	8001ac4 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001a8c:	21fc      	movs	r1, #252	; 0xfc
 8001a8e:	68b8      	ldr	r0, [r7, #8]
 8001a90:	f7ff fd98 	bl	80015c4 <SD_TxDataBlock>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00a      	beq.n	8001ab0 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001aa0:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	603b      	str	r3, [r7, #0]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1ee      	bne.n	8001a8c <SD_disk_write+0xac>
 8001aae:	e000      	b.n	8001ab2 <SD_disk_write+0xd2>
          break;
 8001ab0:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8001ab2:	21fd      	movs	r1, #253	; 0xfd
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	f7ff fd85 	bl	80015c4 <SD_TxDataBlock>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <SD_disk_write+0xe4>
      {        
        count = 1;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8001ac4:	f7ff fc78 	bl	80013b8 <DESELECT>
  SPI_RxByte();
 8001ac8:	f7ff fc9c 	bl	8001404 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	bf14      	ite	ne
 8001ad2:	2301      	movne	r3, #1
 8001ad4:	2300      	moveq	r3, #0
 8001ad6:	b2db      	uxtb	r3, r3
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000000 	.word	0x20000000
 8001ae4:	20000278 	.word	0x20000278

08001ae8 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b08b      	sub	sp, #44	; 0x2c
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	603a      	str	r2, [r7, #0]
 8001af2:	71fb      	strb	r3, [r7, #7]
 8001af4:	460b      	mov	r3, r1
 8001af6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001b02:	2304      	movs	r3, #4
 8001b04:	e117      	b.n	8001d36 <SD_disk_ioctl+0x24e>
  
  res = RES_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8001b0c:	79bb      	ldrb	r3, [r7, #6]
 8001b0e:	2b05      	cmp	r3, #5
 8001b10:	d126      	bne.n	8001b60 <SD_disk_ioctl+0x78>
  {
    switch (*ptr) 
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d00e      	beq.n	8001b38 <SD_disk_ioctl+0x50>
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d012      	beq.n	8001b44 <SD_disk_ioctl+0x5c>
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d11a      	bne.n	8001b58 <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 8001b22:	f7ff fd0f 	bl	8001544 <SD_CheckPower>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 8001b2c:	f7ff fcfe 	bl	800152c <SD_PowerOff>
      res = RES_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001b36:	e0fc      	b.n	8001d32 <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 8001b38:	f7ff fcac 	bl	8001494 <SD_PowerOn>
      res = RES_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001b42:	e0f6      	b.n	8001d32 <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001b44:	6a3b      	ldr	r3, [r7, #32]
 8001b46:	1c5c      	adds	r4, r3, #1
 8001b48:	f7ff fcfc 	bl	8001544 <SD_CheckPower>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001b50:	2300      	movs	r3, #0
 8001b52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001b56:	e0ec      	b.n	8001d32 <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 8001b58:	2304      	movs	r3, #4
 8001b5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b5e:	e0e8      	b.n	8001d32 <SD_disk_ioctl+0x24a>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8001b60:	4b77      	ldr	r3, [pc, #476]	; (8001d40 <SD_disk_ioctl+0x258>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e0e1      	b.n	8001d36 <SD_disk_ioctl+0x24e>
    
    SELECT();
 8001b72:	f7ff fc15 	bl	80013a0 <SELECT>
    
    switch (ctrl) 
 8001b76:	79bb      	ldrb	r3, [r7, #6]
 8001b78:	2b0d      	cmp	r3, #13
 8001b7a:	f200 80cb 	bhi.w	8001d14 <SD_disk_ioctl+0x22c>
 8001b7e:	a201      	add	r2, pc, #4	; (adr r2, 8001b84 <SD_disk_ioctl+0x9c>)
 8001b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b84:	08001c7f 	.word	0x08001c7f
 8001b88:	08001bbd 	.word	0x08001bbd
 8001b8c:	08001c6f 	.word	0x08001c6f
 8001b90:	08001d15 	.word	0x08001d15
 8001b94:	08001d15 	.word	0x08001d15
 8001b98:	08001d15 	.word	0x08001d15
 8001b9c:	08001d15 	.word	0x08001d15
 8001ba0:	08001d15 	.word	0x08001d15
 8001ba4:	08001d15 	.word	0x08001d15
 8001ba8:	08001d15 	.word	0x08001d15
 8001bac:	08001d15 	.word	0x08001d15
 8001bb0:	08001c91 	.word	0x08001c91
 8001bb4:	08001cb5 	.word	0x08001cb5
 8001bb8:	08001cd9 	.word	0x08001cd9
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	2049      	movs	r0, #73	; 0x49
 8001bc0:	f7ff fd54 	bl	800166c <SD_SendCmd>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f040 80a8 	bne.w	8001d1c <SD_disk_ioctl+0x234>
 8001bcc:	f107 030c 	add.w	r3, r7, #12
 8001bd0:	2110      	movs	r1, #16
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff fcc0 	bl	8001558 <SD_RxDataBlock>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 809e 	beq.w	8001d1c <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1) 
 8001be0:	7b3b      	ldrb	r3, [r7, #12]
 8001be2:	099b      	lsrs	r3, r3, #6
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d10e      	bne.n	8001c08 <SD_disk_ioctl+0x120>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001bea:	7d7b      	ldrb	r3, [r7, #21]
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	7d3b      	ldrb	r3, [r7, #20]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	021b      	lsls	r3, r3, #8
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	4413      	add	r3, r2
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001bfe:	8bfb      	ldrh	r3, [r7, #30]
 8001c00:	029a      	lsls	r2, r3, #10
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	e02e      	b.n	8001c66 <SD_disk_ioctl+0x17e>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001c08:	7c7b      	ldrb	r3, [r7, #17]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	7dbb      	ldrb	r3, [r7, #22]
 8001c12:	09db      	lsrs	r3, r3, #7
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	4413      	add	r3, r2
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	7d7b      	ldrb	r3, [r7, #21]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	f003 0306 	and.w	r3, r3, #6
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	4413      	add	r3, r2
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	3302      	adds	r3, #2
 8001c2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001c30:	7d3b      	ldrb	r3, [r7, #20]
 8001c32:	099b      	lsrs	r3, r3, #6
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	7cfb      	ldrb	r3, [r7, #19]
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	4413      	add	r3, r2
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	7cbb      	ldrb	r3, [r7, #18]
 8001c46:	029b      	lsls	r3, r3, #10
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	4413      	add	r3, r2
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	3301      	adds	r3, #1
 8001c56:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001c58:	8bfa      	ldrh	r2, [r7, #30]
 8001c5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c5e:	3b09      	subs	r3, #9
 8001c60:	409a      	lsls	r2, r3
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001c6c:	e056      	b.n	8001d1c <SD_disk_ioctl+0x234>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c74:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001c7c:	e055      	b.n	8001d2a <SD_disk_ioctl+0x242>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001c7e:	f7ff fbed 	bl	800145c <SD_ReadyWait>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2bff      	cmp	r3, #255	; 0xff
 8001c86:	d14b      	bne.n	8001d20 <SD_disk_ioctl+0x238>
        res = RES_OK;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001c8e:	e047      	b.n	8001d20 <SD_disk_ioctl+0x238>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001c90:	2100      	movs	r1, #0
 8001c92:	2049      	movs	r0, #73	; 0x49
 8001c94:	f7ff fcea 	bl	800166c <SD_SendCmd>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d142      	bne.n	8001d24 <SD_disk_ioctl+0x23c>
 8001c9e:	2110      	movs	r1, #16
 8001ca0:	6a38      	ldr	r0, [r7, #32]
 8001ca2:	f7ff fc59 	bl	8001558 <SD_RxDataBlock>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d03b      	beq.n	8001d24 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8001cac:	2300      	movs	r3, #0
 8001cae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001cb2:	e037      	b.n	8001d24 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	204a      	movs	r0, #74	; 0x4a
 8001cb8:	f7ff fcd8 	bl	800166c <SD_SendCmd>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d132      	bne.n	8001d28 <SD_disk_ioctl+0x240>
 8001cc2:	2110      	movs	r1, #16
 8001cc4:	6a38      	ldr	r0, [r7, #32]
 8001cc6:	f7ff fc47 	bl	8001558 <SD_RxDataBlock>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d02b      	beq.n	8001d28 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001cd6:	e027      	b.n	8001d28 <SD_disk_ioctl+0x240>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8001cd8:	2100      	movs	r1, #0
 8001cda:	207a      	movs	r0, #122	; 0x7a
 8001cdc:	f7ff fcc6 	bl	800166c <SD_SendCmd>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d116      	bne.n	8001d14 <SD_disk_ioctl+0x22c>
      {         
        for (n = 0; n < 4; n++)
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001cec:	e00b      	b.n	8001d06 <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 8001cee:	6a3c      	ldr	r4, [r7, #32]
 8001cf0:	1c63      	adds	r3, r4, #1
 8001cf2:	623b      	str	r3, [r7, #32]
 8001cf4:	f7ff fb86 	bl	8001404 <SPI_RxByte>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001cfc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d00:	3301      	adds	r3, #1
 8001d02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001d06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d0a:	2b03      	cmp	r3, #3
 8001d0c:	d9ef      	bls.n	8001cee <SD_disk_ioctl+0x206>
        }
        
        res = RES_OK;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8001d14:	2304      	movs	r3, #4
 8001d16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001d1a:	e006      	b.n	8001d2a <SD_disk_ioctl+0x242>
      break;
 8001d1c:	bf00      	nop
 8001d1e:	e004      	b.n	8001d2a <SD_disk_ioctl+0x242>
      break;
 8001d20:	bf00      	nop
 8001d22:	e002      	b.n	8001d2a <SD_disk_ioctl+0x242>
      break;
 8001d24:	bf00      	nop
 8001d26:	e000      	b.n	8001d2a <SD_disk_ioctl+0x242>
      break;
 8001d28:	bf00      	nop
    }
    
    DESELECT();
 8001d2a:	f7ff fb45 	bl	80013b8 <DESELECT>
    SPI_RxByte();
 8001d2e:	f7ff fb69 	bl	8001404 <SPI_RxByte>
  }
  
  return res;
 8001d32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	372c      	adds	r7, #44	; 0x2c
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd90      	pop	{r4, r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000000 	.word	0x20000000

08001d44 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001d4c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001d50:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d013      	beq.n	8001d84 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001d5c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001d60:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001d64:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d00b      	beq.n	8001d84 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001d6c:	e000      	b.n	8001d70 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001d6e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001d70:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f9      	beq.n	8001d6e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001d7a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001d84:	687b      	ldr	r3, [r7, #4]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr

08001d90 <HAL_TIM_PeriodElapsedCallback>:
/* capacity related variables */
//DWORD fre_clust;
DWORD total, free_space;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d92:	b091      	sub	sp, #68	; 0x44
 8001d94:	af0e      	add	r7, sp, #56	; 0x38
 8001d96:	6078      	str	r0, [r7, #4]

	//UNUSED(htim); será preciso?

	//counter2 = __HAL_TIM_GET_COUNTER(&htim2);
	speed = motorSpeed(&counter1, &tick, htim3);
 8001d98:	4e0d      	ldr	r6, [pc, #52]	; (8001dd0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001d9a:	466d      	mov	r5, sp
 8001d9c:	f106 0408 	add.w	r4, r6, #8
 8001da0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001da2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001da4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001da6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001da8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001daa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001db0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001db4:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001db8:	4906      	ldr	r1, [pc, #24]	; (8001dd4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001dba:	4807      	ldr	r0, [pc, #28]	; (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001dbc:	f7ff fa64 	bl	8001288 <motorSpeed>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001dc4:	601a      	str	r2, [r3, #0]

	/* passa a fazer-se aqui?
	sprintf(str, "%f ", speed);
	update_file("encoder_data.txt", str, get_timestamp(&hrtc, &currentTime, &currentDate), stamp, &(fil[12]), &bw); */

}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000610 	.word	0x20000610
 8001dd4:	2000027c 	.word	0x2000027c
 8001dd8:	20000280 	.word	0x20000280
 8001ddc:	20000284 	.word	0x20000284

08001de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001de0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001de4:	b098      	sub	sp, #96	; 0x60
 8001de6:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001de8:	f001 f88a 	bl	8002f00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dec:	f000 fa22 	bl	8002234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001df0:	f000 fc28 	bl	8002644 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001df4:	f000 fa82 	bl	80022fc <MX_ADC1_Init>
  MX_CAN_Init();
 8001df8:	f000 face 	bl	8002398 <MX_CAN_Init>
  MX_FATFS_Init();
 8001dfc:	f004 fba2 	bl	8006544 <MX_FATFS_Init>
  MX_RTC_Init();
 8001e00:	f000 fafe 	bl	8002400 <MX_RTC_Init>
  MX_SPI2_Init();
 8001e04:	f000 fb46 	bl	8002494 <MX_SPI2_Init>
  MX_TIM3_Init();
 8001e08:	f000 fb7a 	bl	8002500 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001e0c:	f000 fbcc 	bl	80025a8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello!\n");
 8001e10:	48b7      	ldr	r0, [pc, #732]	; (80020f0 <main+0x310>)
 8001e12:	f008 fcb9 	bl	800a788 <puts>
	  HAL_GPIO_WritePin(CS_accel_GPIO_Port, CS_accel_Pin, SET);
 8001e16:	2201      	movs	r2, #1
 8001e18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e1c:	48b5      	ldr	r0, [pc, #724]	; (80020f4 <main+0x314>)
 8001e1e:	f001 fe61 	bl	8003ae4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(CS_gyro_GPIO_Port, CS_gyro_Pin, SET);
 8001e22:	2201      	movs	r2, #1
 8001e24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e28:	48b2      	ldr	r0, [pc, #712]	; (80020f4 <main+0x314>)
 8001e2a:	f001 fe5b 	bl	8003ae4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(CS_magnet_GPIO_Port, CS_magnet_Pin, SET);
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e34:	48af      	ldr	r0, [pc, #700]	; (80020f4 <main+0x314>)
 8001e36:	f001 fe55 	bl	8003ae4 <HAL_GPIO_WritePin>
  fresult=mount_card (&fs);
 8001e3a:	48af      	ldr	r0, [pc, #700]	; (80020f8 <main+0x318>)
 8001e3c:	f000 fcd2 	bl	80027e4 <mount_card>
 8001e40:	4603      	mov	r3, r0
 8001e42:	461a      	mov	r2, r3
 8001e44:	4bad      	ldr	r3, [pc, #692]	; (80020fc <main+0x31c>)
 8001e46:	701a      	strb	r2, [r3, #0]
  card_capacity(&free_space, &total);
 8001e48:	49ad      	ldr	r1, [pc, #692]	; (8002100 <main+0x320>)
 8001e4a:	48ae      	ldr	r0, [pc, #696]	; (8002104 <main+0x324>)
 8001e4c:	f000 fcda 	bl	8002804 <card_capacity>
  printf("Hello!\nFree Space: %10lu KB", free_space/2);
 8001e50:	4bac      	ldr	r3, [pc, #688]	; (8002104 <main+0x324>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	085b      	lsrs	r3, r3, #1
 8001e56:	4619      	mov	r1, r3
 8001e58:	48ab      	ldr	r0, [pc, #684]	; (8002108 <main+0x328>)
 8001e5a:	f008 fc0d 	bl	800a678 <iprintf>
  //update_file("enc.txt", "OLE OLE OLE",  &fil, &bw);
  //update_file("imu_acc.txt", "IMU IMU IMU", &fil2, &bw2);

  MX_CAN_Init();
 8001e5e:	f000 fa9b 	bl	8002398 <MX_CAN_Init>
  HAL_TIM_Base_Start_IT(&htim4);
 8001e62:	48aa      	ldr	r0, [pc, #680]	; (800210c <main+0x32c>)
 8001e64:	f003 ff30 	bl	8005cc8 <HAL_TIM_Base_Start_IT>


  IMU_config(&hspi2);
 8001e68:	48a9      	ldr	r0, [pc, #676]	; (8002110 <main+0x330>)
 8001e6a:	f7ff f821 	bl	8000eb0 <IMU_config>

  char str[20];
//  float speed = 0;
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001e6e:	213c      	movs	r1, #60	; 0x3c
 8001e70:	48a8      	ldr	r0, [pc, #672]	; (8002114 <main+0x334>)
 8001e72:	f003 ffda 	bl	8005e2a <HAL_TIM_Encoder_Start>
 // HAL_TIM_Encoder_Init(&htim3, sConfig)

  counter1 = __HAL_TIM_GET_COUNTER(&htim3);
 8001e76:	4ba7      	ldr	r3, [pc, #668]	; (8002114 <main+0x334>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	4aa6      	ldr	r2, [pc, #664]	; (8002118 <main+0x338>)
 8001e7e:	6013      	str	r3, [r2, #0]
  tick = HAL_GetTick();
 8001e80:	f001 f896 	bl	8002fb0 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	4ba5      	ldr	r3, [pc, #660]	; (800211c <main+0x33c>)
 8001e88:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  printf("counter encoder mode: %lu \n", counter1);
 8001e8a:	4ba3      	ldr	r3, [pc, #652]	; (8002118 <main+0x338>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4619      	mov	r1, r3
 8001e90:	48a3      	ldr	r0, [pc, #652]	; (8002120 <main+0x340>)
 8001e92:	f008 fbf1 	bl	800a678 <iprintf>
		  speed = motorSpeed(&counter, &tick, htim3);
	  } */


	 // speed = motorSpeed(counter, htim3);
	  printf("rpm = %f\n",speed);
 8001e96:	4ba3      	ldr	r3, [pc, #652]	; (8002124 <main+0x344>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7fe face 	bl	800043c <__aeabi_f2d>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	460c      	mov	r4, r1
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4623      	mov	r3, r4
 8001ea8:	489f      	ldr	r0, [pc, #636]	; (8002128 <main+0x348>)
 8001eaa:	f008 fbe5 	bl	800a678 <iprintf>

	  sprintf(str , "%f ", speed);
 8001eae:	4b9d      	ldr	r3, [pc, #628]	; (8002124 <main+0x344>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7fe fac2 	bl	800043c <__aeabi_f2d>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	460c      	mov	r4, r1
 8001ebc:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4623      	mov	r3, r4
 8001ec4:	4999      	ldr	r1, [pc, #612]	; (800212c <main+0x34c>)
 8001ec6:	f008 fc77 	bl	800a7b8 <siprintf>

	  printf("speed %s\n", str);
 8001eca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4897      	ldr	r0, [pc, #604]	; (8002130 <main+0x350>)
 8001ed2:	f008 fbd1 	bl	800a678 <iprintf>
	  fresult=update_file("enc.txt", str, get_timestamp(&hrtc, &currentTime, &currentDate) , &fil, &bw);
 8001ed6:	4a97      	ldr	r2, [pc, #604]	; (8002134 <main+0x354>)
 8001ed8:	4997      	ldr	r1, [pc, #604]	; (8002138 <main+0x358>)
 8001eda:	4898      	ldr	r0, [pc, #608]	; (800213c <main+0x35c>)
 8001edc:	f000 fcf2 	bl	80028c4 <get_timestamp>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001ee6:	4b96      	ldr	r3, [pc, #600]	; (8002140 <main+0x360>)
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	4b96      	ldr	r3, [pc, #600]	; (8002144 <main+0x364>)
 8001eec:	4896      	ldr	r0, [pc, #600]	; (8002148 <main+0x368>)
 8001eee:	f000 fcb1 	bl	8002854 <update_file>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4b81      	ldr	r3, [pc, #516]	; (80020fc <main+0x31c>)
 8001ef8:	701a      	strb	r2, [r3, #0]

	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001efa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001efe:	4893      	ldr	r0, [pc, #588]	; (800214c <main+0x36c>)
 8001f00:	f001 fe08 	bl	8003b14 <HAL_GPIO_TogglePin>
	  //HAL_Delay(500);
	  //printf("hello\n");

	  IMU_acc_read(&hspi2, accel_data);
 8001f04:	4992      	ldr	r1, [pc, #584]	; (8002150 <main+0x370>)
 8001f06:	4882      	ldr	r0, [pc, #520]	; (8002110 <main+0x330>)
 8001f08:	f7ff f856 	bl	8000fb8 <IMU_acc_read>

	  printf("\raccel data x: %d accel data y: %d accel data z: %d ", accel_data[0], accel_data[1], accel_data[2]);
 8001f0c:	4b90      	ldr	r3, [pc, #576]	; (8002150 <main+0x370>)
 8001f0e:	6819      	ldr	r1, [r3, #0]
 8001f10:	4b8f      	ldr	r3, [pc, #572]	; (8002150 <main+0x370>)
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	4b8e      	ldr	r3, [pc, #568]	; (8002150 <main+0x370>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	488e      	ldr	r0, [pc, #568]	; (8002154 <main+0x374>)
 8001f1a:	f008 fbad 	bl	800a678 <iprintf>
	  char acxstr[20];
	  char acystr[20];
	  char aczstr[20];

	  acx = accel_data[0]*0.00098;
 8001f1e:	4b8c      	ldr	r3, [pc, #560]	; (8002150 <main+0x370>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe fa78 	bl	8000418 <__aeabi_i2d>
 8001f28:	a36d      	add	r3, pc, #436	; (adr r3, 80020e0 <main+0x300>)
 8001f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2e:	f7fe fadd 	bl	80004ec <__aeabi_dmul>
 8001f32:	4603      	mov	r3, r0
 8001f34:	460c      	mov	r4, r1
 8001f36:	4618      	mov	r0, r3
 8001f38:	4621      	mov	r1, r4
 8001f3a:	f7fe fdaf 	bl	8000a9c <__aeabi_d2f>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	4b85      	ldr	r3, [pc, #532]	; (8002158 <main+0x378>)
 8001f42:	601a      	str	r2, [r3, #0]
	  acy = accel_data[1]*0.00098;
 8001f44:	4b82      	ldr	r3, [pc, #520]	; (8002150 <main+0x370>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe fa65 	bl	8000418 <__aeabi_i2d>
 8001f4e:	a364      	add	r3, pc, #400	; (adr r3, 80020e0 <main+0x300>)
 8001f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f54:	f7fe faca 	bl	80004ec <__aeabi_dmul>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	460c      	mov	r4, r1
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	4621      	mov	r1, r4
 8001f60:	f7fe fd9c 	bl	8000a9c <__aeabi_d2f>
 8001f64:	4602      	mov	r2, r0
 8001f66:	4b7d      	ldr	r3, [pc, #500]	; (800215c <main+0x37c>)
 8001f68:	601a      	str	r2, [r3, #0]
	  acz = accel_data[2]*0.00098;
 8001f6a:	4b79      	ldr	r3, [pc, #484]	; (8002150 <main+0x370>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe fa52 	bl	8000418 <__aeabi_i2d>
 8001f74:	a35a      	add	r3, pc, #360	; (adr r3, 80020e0 <main+0x300>)
 8001f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7a:	f7fe fab7 	bl	80004ec <__aeabi_dmul>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	460c      	mov	r4, r1
 8001f82:	4618      	mov	r0, r3
 8001f84:	4621      	mov	r1, r4
 8001f86:	f7fe fd89 	bl	8000a9c <__aeabi_d2f>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	4b74      	ldr	r3, [pc, #464]	; (8002160 <main+0x380>)
 8001f8e:	601a      	str	r2, [r3, #0]
	  sprintf(acxstr, "acx - %f ", acx);
 8001f90:	4b71      	ldr	r3, [pc, #452]	; (8002158 <main+0x378>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe fa51 	bl	800043c <__aeabi_f2d>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	460c      	mov	r4, r1
 8001f9e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	4623      	mov	r3, r4
 8001fa6:	496f      	ldr	r1, [pc, #444]	; (8002164 <main+0x384>)
 8001fa8:	f008 fc06 	bl	800a7b8 <siprintf>
	  sprintf(acystr, "acy - %f ", acy);
 8001fac:	4b6b      	ldr	r3, [pc, #428]	; (800215c <main+0x37c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7fe fa43 	bl	800043c <__aeabi_f2d>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	460c      	mov	r4, r1
 8001fba:	f107 0014 	add.w	r0, r7, #20
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4623      	mov	r3, r4
 8001fc2:	4969      	ldr	r1, [pc, #420]	; (8002168 <main+0x388>)
 8001fc4:	f008 fbf8 	bl	800a7b8 <siprintf>
	  sprintf(aczstr, "acz - %f ", acz);
 8001fc8:	4b65      	ldr	r3, [pc, #404]	; (8002160 <main+0x380>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fa35 	bl	800043c <__aeabi_f2d>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	460c      	mov	r4, r1
 8001fd6:	4638      	mov	r0, r7
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4623      	mov	r3, r4
 8001fdc:	4963      	ldr	r1, [pc, #396]	; (800216c <main+0x38c>)
 8001fde:	f008 fbeb 	bl	800a7b8 <siprintf>
	  //HAL_Delay(100);
	  update_file("imu_acc.txt", acxstr, get_timestamp(&hrtc, &currentTime, &currentDate), &fil2, &bw2);
 8001fe2:	4a54      	ldr	r2, [pc, #336]	; (8002134 <main+0x354>)
 8001fe4:	4954      	ldr	r1, [pc, #336]	; (8002138 <main+0x358>)
 8001fe6:	4855      	ldr	r0, [pc, #340]	; (800213c <main+0x35c>)
 8001fe8:	f000 fc6c 	bl	80028c4 <get_timestamp>
 8001fec:	4602      	mov	r2, r0
 8001fee:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001ff2:	4b5f      	ldr	r3, [pc, #380]	; (8002170 <main+0x390>)
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	4b5f      	ldr	r3, [pc, #380]	; (8002174 <main+0x394>)
 8001ff8:	485f      	ldr	r0, [pc, #380]	; (8002178 <main+0x398>)
 8001ffa:	f000 fc2b 	bl	8002854 <update_file>

	  update_file("imu_acc.txt", acystr, get_timestamp(&hrtc, &currentTime, &currentDate), &fil2, &bw2);
 8001ffe:	4a4d      	ldr	r2, [pc, #308]	; (8002134 <main+0x354>)
 8002000:	494d      	ldr	r1, [pc, #308]	; (8002138 <main+0x358>)
 8002002:	484e      	ldr	r0, [pc, #312]	; (800213c <main+0x35c>)
 8002004:	f000 fc5e 	bl	80028c4 <get_timestamp>
 8002008:	4602      	mov	r2, r0
 800200a:	f107 0114 	add.w	r1, r7, #20
 800200e:	4b58      	ldr	r3, [pc, #352]	; (8002170 <main+0x390>)
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	4b58      	ldr	r3, [pc, #352]	; (8002174 <main+0x394>)
 8002014:	4858      	ldr	r0, [pc, #352]	; (8002178 <main+0x398>)
 8002016:	f000 fc1d 	bl	8002854 <update_file>

	  update_file("imu_acc.txt", aczstr, get_timestamp(&hrtc, &currentTime, &currentDate), &fil2, &bw2);
 800201a:	4a46      	ldr	r2, [pc, #280]	; (8002134 <main+0x354>)
 800201c:	4946      	ldr	r1, [pc, #280]	; (8002138 <main+0x358>)
 800201e:	4847      	ldr	r0, [pc, #284]	; (800213c <main+0x35c>)
 8002020:	f000 fc50 	bl	80028c4 <get_timestamp>
 8002024:	4602      	mov	r2, r0
 8002026:	4639      	mov	r1, r7
 8002028:	4b51      	ldr	r3, [pc, #324]	; (8002170 <main+0x390>)
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	4b51      	ldr	r3, [pc, #324]	; (8002174 <main+0x394>)
 800202e:	4852      	ldr	r0, [pc, #328]	; (8002178 <main+0x398>)
 8002030:	f000 fc10 	bl	8002854 <update_file>


	  printf("\rreal value x: %f G real value y: %f G real value z: %f G ", acx, acy, acz);
 8002034:	4b48      	ldr	r3, [pc, #288]	; (8002158 <main+0x378>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe f9ff 	bl	800043c <__aeabi_f2d>
 800203e:	4680      	mov	r8, r0
 8002040:	4689      	mov	r9, r1
 8002042:	4b46      	ldr	r3, [pc, #280]	; (800215c <main+0x37c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe f9f8 	bl	800043c <__aeabi_f2d>
 800204c:	4604      	mov	r4, r0
 800204e:	460d      	mov	r5, r1
 8002050:	4b43      	ldr	r3, [pc, #268]	; (8002160 <main+0x380>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe f9f1 	bl	800043c <__aeabi_f2d>
 800205a:	4602      	mov	r2, r0
 800205c:	460b      	mov	r3, r1
 800205e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002062:	e9cd 4500 	strd	r4, r5, [sp]
 8002066:	4642      	mov	r2, r8
 8002068:	464b      	mov	r3, r9
 800206a:	4844      	ldr	r0, [pc, #272]	; (800217c <main+0x39c>)
 800206c:	f008 fb04 	bl	800a678 <iprintf>

	  IMU_gyro_read(&hspi2, gyro_data);
 8002070:	4943      	ldr	r1, [pc, #268]	; (8002180 <main+0x3a0>)
 8002072:	4827      	ldr	r0, [pc, #156]	; (8002110 <main+0x330>)
 8002074:	f7ff f81a 	bl	80010ac <IMU_gyro_read>

	  printf("\rgyro data x: %d gyro data y: %d gyro data z: %d ", gyro_data[0], gyro_data[1], gyro_data[2]);
 8002078:	4b41      	ldr	r3, [pc, #260]	; (8002180 <main+0x3a0>)
 800207a:	6819      	ldr	r1, [r3, #0]
 800207c:	4b40      	ldr	r3, [pc, #256]	; (8002180 <main+0x3a0>)
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	4b3f      	ldr	r3, [pc, #252]	; (8002180 <main+0x3a0>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	483f      	ldr	r0, [pc, #252]	; (8002184 <main+0x3a4>)
 8002086:	f008 faf7 	bl	800a678 <iprintf>

	  gyx = (262.4/32767)*gyro_data[0];
 800208a:	4b3d      	ldr	r3, [pc, #244]	; (8002180 <main+0x3a0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe f9c2 	bl	8000418 <__aeabi_i2d>
 8002094:	a314      	add	r3, pc, #80	; (adr r3, 80020e8 <main+0x308>)
 8002096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209a:	f7fe fa27 	bl	80004ec <__aeabi_dmul>
 800209e:	4603      	mov	r3, r0
 80020a0:	460c      	mov	r4, r1
 80020a2:	4618      	mov	r0, r3
 80020a4:	4621      	mov	r1, r4
 80020a6:	f7fe fcf9 	bl	8000a9c <__aeabi_d2f>
 80020aa:	4602      	mov	r2, r0
 80020ac:	4b36      	ldr	r3, [pc, #216]	; (8002188 <main+0x3a8>)
 80020ae:	601a      	str	r2, [r3, #0]
	  gyy = (262.4/32767)*gyro_data[1];
 80020b0:	4b33      	ldr	r3, [pc, #204]	; (8002180 <main+0x3a0>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7fe f9af 	bl	8000418 <__aeabi_i2d>
 80020ba:	a30b      	add	r3, pc, #44	; (adr r3, 80020e8 <main+0x308>)
 80020bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c0:	f7fe fa14 	bl	80004ec <__aeabi_dmul>
 80020c4:	4603      	mov	r3, r0
 80020c6:	460c      	mov	r4, r1
 80020c8:	4618      	mov	r0, r3
 80020ca:	4621      	mov	r1, r4
 80020cc:	f7fe fce6 	bl	8000a9c <__aeabi_d2f>
 80020d0:	4602      	mov	r2, r0
 80020d2:	4b2e      	ldr	r3, [pc, #184]	; (800218c <main+0x3ac>)
 80020d4:	601a      	str	r2, [r3, #0]
	  gyz = (262.4/32767)*gyro_data[2];
 80020d6:	4b2a      	ldr	r3, [pc, #168]	; (8002180 <main+0x3a0>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	4618      	mov	r0, r3
 80020dc:	e058      	b.n	8002190 <main+0x3b0>
 80020de:	bf00      	nop
 80020e0:	fcce1c58 	.word	0xfcce1c58
 80020e4:	3f500e6a 	.word	0x3f500e6a
 80020e8:	3374cd50 	.word	0x3374cd50
 80020ec:	3f806687 	.word	0x3f806687
 80020f0:	0800d6f0 	.word	0x0800d6f0
 80020f4:	40010800 	.word	0x40010800
 80020f8:	20000388 	.word	0x20000388
 80020fc:	200008c8 	.word	0x200008c8
 8002100:	200008d8 	.word	0x200008d8
 8002104:	20000680 	.word	0x20000680
 8002108:	0800d6f8 	.word	0x0800d6f8
 800210c:	20000348 	.word	0x20000348
 8002110:	200002f0 	.word	0x200002f0
 8002114:	20000610 	.word	0x20000610
 8002118:	20000280 	.word	0x20000280
 800211c:	2000027c 	.word	0x2000027c
 8002120:	0800d714 	.word	0x0800d714
 8002124:	20000284 	.word	0x20000284
 8002128:	0800d730 	.word	0x0800d730
 800212c:	0800d73c 	.word	0x0800d73c
 8002130:	0800d740 	.word	0x0800d740
 8002134:	200008dc 	.word	0x200008dc
 8002138:	20000b50 	.word	0x20000b50
 800213c:	2000088c 	.word	0x2000088c
 8002140:	200008c0 	.word	0x200008c0
 8002144:	20000914 	.word	0x20000914
 8002148:	0800d74c 	.word	0x0800d74c
 800214c:	40011000 	.word	0x40011000
 8002150:	200008a8 	.word	0x200008a8
 8002154:	0800d754 	.word	0x0800d754
 8002158:	20000b4c 	.word	0x20000b4c
 800215c:	20000688 	.word	0x20000688
 8002160:	200008d4 	.word	0x200008d4
 8002164:	0800d78c 	.word	0x0800d78c
 8002168:	0800d798 	.word	0x0800d798
 800216c:	0800d7a4 	.word	0x0800d7a4
 8002170:	20000684 	.word	0x20000684
 8002174:	20000b58 	.word	0x20000b58
 8002178:	0800d7b0 	.word	0x0800d7b0
 800217c:	0800d7bc 	.word	0x0800d7bc
 8002180:	200008b4 	.word	0x200008b4
 8002184:	0800d7f8 	.word	0x0800d7f8
 8002188:	200005b8 	.word	0x200005b8
 800218c:	200002ec 	.word	0x200002ec
 8002190:	f7fe f942 	bl	8000418 <__aeabi_i2d>
 8002194:	a31e      	add	r3, pc, #120	; (adr r3, 8002210 <main+0x430>)
 8002196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219a:	f7fe f9a7 	bl	80004ec <__aeabi_dmul>
 800219e:	4603      	mov	r3, r0
 80021a0:	460c      	mov	r4, r1
 80021a2:	4618      	mov	r0, r3
 80021a4:	4621      	mov	r1, r4
 80021a6:	f7fe fc79 	bl	8000a9c <__aeabi_d2f>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4b1a      	ldr	r3, [pc, #104]	; (8002218 <main+0x438>)
 80021ae:	601a      	str	r2, [r3, #0]

	  printf("\rgyro real value x: %f gyro real value y: %f gyro real value z: %f  ", gyx, gyy, gyz);
 80021b0:	4b1a      	ldr	r3, [pc, #104]	; (800221c <main+0x43c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7fe f941 	bl	800043c <__aeabi_f2d>
 80021ba:	4680      	mov	r8, r0
 80021bc:	4689      	mov	r9, r1
 80021be:	4b18      	ldr	r3, [pc, #96]	; (8002220 <main+0x440>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe f93a 	bl	800043c <__aeabi_f2d>
 80021c8:	4604      	mov	r4, r0
 80021ca:	460d      	mov	r5, r1
 80021cc:	4b12      	ldr	r3, [pc, #72]	; (8002218 <main+0x438>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe f933 	bl	800043c <__aeabi_f2d>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80021de:	e9cd 4500 	strd	r4, r5, [sp]
 80021e2:	4642      	mov	r2, r8
 80021e4:	464b      	mov	r3, r9
 80021e6:	480f      	ldr	r0, [pc, #60]	; (8002224 <main+0x444>)
 80021e8:	f008 fa46 	bl	800a678 <iprintf>

	  IMU_mag_read(&hspi2, mag_data);
 80021ec:	490e      	ldr	r1, [pc, #56]	; (8002228 <main+0x448>)
 80021ee:	480f      	ldr	r0, [pc, #60]	; (800222c <main+0x44c>)
 80021f0:	f7fe ffd0 	bl	8001194 <IMU_mag_read>

	  printf("\rmag data x: %d mag data y: %d mag data z: %d ", mag_data[0], mag_data[1], mag_data[2]);
 80021f4:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <main+0x448>)
 80021f6:	6819      	ldr	r1, [r3, #0]
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <main+0x448>)
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <main+0x448>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	480b      	ldr	r0, [pc, #44]	; (8002230 <main+0x450>)
 8002202:	f008 fa39 	bl	800a678 <iprintf>
	  printf("\n");
 8002206:	200a      	movs	r0, #10
 8002208:	f008 fa4e 	bl	800a6a8 <putchar>
  {
 800220c:	e63d      	b.n	8001e8a <main+0xaa>
 800220e:	bf00      	nop
 8002210:	3374cd50 	.word	0x3374cd50
 8002214:	3f806687 	.word	0x3f806687
 8002218:	20000b54 	.word	0x20000b54
 800221c:	200005b8 	.word	0x200005b8
 8002220:	200002ec 	.word	0x200002ec
 8002224:	0800d82c 	.word	0x0800d82c
 8002228:	20000b40 	.word	0x20000b40
 800222c:	200002f0 	.word	0x200002f0
 8002230:	0800d874 	.word	0x0800d874

08002234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b094      	sub	sp, #80	; 0x50
 8002238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800223a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800223e:	2228      	movs	r2, #40	; 0x28
 8002240:	2100      	movs	r1, #0
 8002242:	4618      	mov	r0, r3
 8002244:	f007 fa86 	bl	8009754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002248:	f107 0314 	add.w	r3, r7, #20
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	60da      	str	r2, [r3, #12]
 8002256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002258:	1d3b      	adds	r3, r7, #4
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	605a      	str	r2, [r3, #4]
 8002260:	609a      	str	r2, [r3, #8]
 8002262:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002264:	2309      	movs	r3, #9
 8002266:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002268:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800226c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800226e:	2300      	movs	r3, #0
 8002270:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002272:	2301      	movs	r3, #1
 8002274:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002276:	2301      	movs	r3, #1
 8002278:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800227a:	2302      	movs	r3, #2
 800227c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800227e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002282:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8002284:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002288:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800228a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800228e:	4618      	mov	r0, r3
 8002290:	f001 fc64 	bl	8003b5c <HAL_RCC_OscConfig>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800229a:	f000 fa9c 	bl	80027d6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800229e:	230f      	movs	r3, #15
 80022a0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022a2:	2302      	movs	r3, #2
 80022a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022aa:	2300      	movs	r3, #0
 80022ac:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022ae:	2300      	movs	r3, #0
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80022b2:	f107 0314 	add.w	r3, r7, #20
 80022b6:	2100      	movs	r1, #0
 80022b8:	4618      	mov	r0, r3
 80022ba:	f001 fecf 	bl	800405c <HAL_RCC_ClockConfig>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80022c4:	f000 fa87 	bl	80027d6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80022c8:	2303      	movs	r3, #3
 80022ca:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80022cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022d0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022d6:	1d3b      	adds	r3, r7, #4
 80022d8:	4618      	mov	r0, r3
 80022da:	f002 f87f 	bl	80043dc <HAL_RCCEx_PeriphCLKConfig>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80022e4:	f000 fa77 	bl	80027d6 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1);
 80022e8:	2200      	movs	r2, #0
 80022ea:	f04f 61e0 	mov.w	r1, #117440512	; 0x7000000
 80022ee:	2000      	movs	r0, #0
 80022f0:	f001 ff9e 	bl	8004230 <HAL_RCC_MCOConfig>
}
 80022f4:	bf00      	nop
 80022f6:	3750      	adds	r7, #80	; 0x50
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002302:	1d3b      	adds	r3, r7, #4
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800230c:	4b20      	ldr	r3, [pc, #128]	; (8002390 <MX_ADC1_Init+0x94>)
 800230e:	4a21      	ldr	r2, [pc, #132]	; (8002394 <MX_ADC1_Init+0x98>)
 8002310:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002312:	4b1f      	ldr	r3, [pc, #124]	; (8002390 <MX_ADC1_Init+0x94>)
 8002314:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002318:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800231a:	4b1d      	ldr	r3, [pc, #116]	; (8002390 <MX_ADC1_Init+0x94>)
 800231c:	2201      	movs	r2, #1
 800231e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002320:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <MX_ADC1_Init+0x94>)
 8002322:	2200      	movs	r2, #0
 8002324:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002326:	4b1a      	ldr	r3, [pc, #104]	; (8002390 <MX_ADC1_Init+0x94>)
 8002328:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800232c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800232e:	4b18      	ldr	r3, [pc, #96]	; (8002390 <MX_ADC1_Init+0x94>)
 8002330:	2200      	movs	r2, #0
 8002332:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8002334:	4b16      	ldr	r3, [pc, #88]	; (8002390 <MX_ADC1_Init+0x94>)
 8002336:	2202      	movs	r2, #2
 8002338:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800233a:	4815      	ldr	r0, [pc, #84]	; (8002390 <MX_ADC1_Init+0x94>)
 800233c:	f000 fe64 	bl	8003008 <HAL_ADC_Init>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8002346:	f000 fa46 	bl	80027d6 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800234a:	2300      	movs	r3, #0
 800234c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800234e:	2301      	movs	r3, #1
 8002350:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002356:	1d3b      	adds	r3, r7, #4
 8002358:	4619      	mov	r1, r3
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <MX_ADC1_Init+0x94>)
 800235c:	f000 ff2c 	bl	80031b8 <HAL_ADC_ConfigChannel>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002366:	f000 fa36 	bl	80027d6 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800236a:	2301      	movs	r3, #1
 800236c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800236e:	2302      	movs	r3, #2
 8002370:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002372:	1d3b      	adds	r3, r7, #4
 8002374:	4619      	mov	r1, r3
 8002376:	4806      	ldr	r0, [pc, #24]	; (8002390 <MX_ADC1_Init+0x94>)
 8002378:	f000 ff1e 	bl	80031b8 <HAL_ADC_ConfigChannel>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8002382:	f000 fa28 	bl	80027d6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002386:	bf00      	nop
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000650 	.word	0x20000650
 8002394:	40012400 	.word	0x40012400

08002398 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800239c:	4b16      	ldr	r3, [pc, #88]	; (80023f8 <MX_CAN_Init+0x60>)
 800239e:	4a17      	ldr	r2, [pc, #92]	; (80023fc <MX_CAN_Init+0x64>)
 80023a0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80023a2:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <MX_CAN_Init+0x60>)
 80023a4:	2210      	movs	r2, #16
 80023a6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80023a8:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <MX_CAN_Init+0x60>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80023ae:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <MX_CAN_Init+0x60>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80023b4:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <MX_CAN_Init+0x60>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80023ba:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <MX_CAN_Init+0x60>)
 80023bc:	2200      	movs	r2, #0
 80023be:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80023c0:	4b0d      	ldr	r3, [pc, #52]	; (80023f8 <MX_CAN_Init+0x60>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80023c6:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <MX_CAN_Init+0x60>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80023cc:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <MX_CAN_Init+0x60>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80023d2:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <MX_CAN_Init+0x60>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80023d8:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <MX_CAN_Init+0x60>)
 80023da:	2200      	movs	r2, #0
 80023dc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80023de:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <MX_CAN_Init+0x60>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80023e4:	4804      	ldr	r0, [pc, #16]	; (80023f8 <MX_CAN_Init+0x60>)
 80023e6:	f001 f819 	bl	800341c <HAL_CAN_Init>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80023f0:	f000 f9f1 	bl	80027d6 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80023f4:	bf00      	nop
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	200005e4 	.word	0x200005e4
 80023fc:	40006400 	.word	0x40006400

08002400 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002406:	1d3b      	adds	r3, r7, #4
 8002408:	2100      	movs	r1, #0
 800240a:	460a      	mov	r2, r1
 800240c:	801a      	strh	r2, [r3, #0]
 800240e:	460a      	mov	r2, r1
 8002410:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8002412:	2300      	movs	r3, #0
 8002414:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8002416:	4b1d      	ldr	r3, [pc, #116]	; (800248c <MX_RTC_Init+0x8c>)
 8002418:	4a1d      	ldr	r2, [pc, #116]	; (8002490 <MX_RTC_Init+0x90>)
 800241a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800241c:	4b1b      	ldr	r3, [pc, #108]	; (800248c <MX_RTC_Init+0x8c>)
 800241e:	f04f 32ff 	mov.w	r2, #4294967295
 8002422:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8002424:	4b19      	ldr	r3, [pc, #100]	; (800248c <MX_RTC_Init+0x8c>)
 8002426:	f44f 7280 	mov.w	r2, #256	; 0x100
 800242a:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800242c:	4817      	ldr	r0, [pc, #92]	; (800248c <MX_RTC_Init+0x8c>)
 800242e:	f002 f947 	bl	80046c0 <HAL_RTC_Init>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8002438:	f000 f9cd 	bl	80027d6 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x3;
 800243c:	2303      	movs	r3, #3
 800243e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002440:	2300      	movs	r3, #0
 8002442:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002444:	2300      	movs	r3, #0
 8002446:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002448:	1d3b      	adds	r3, r7, #4
 800244a:	2201      	movs	r2, #1
 800244c:	4619      	mov	r1, r3
 800244e:	480f      	ldr	r0, [pc, #60]	; (800248c <MX_RTC_Init+0x8c>)
 8002450:	f002 f9cc 	bl	80047ec <HAL_RTC_SetTime>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 800245a:	f000 f9bc 	bl	80027d6 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 800245e:	2303      	movs	r3, #3
 8002460:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002462:	2301      	movs	r3, #1
 8002464:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x13;
 8002466:	2313      	movs	r3, #19
 8002468:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 800246a:	2300      	movs	r3, #0
 800246c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800246e:	463b      	mov	r3, r7
 8002470:	2201      	movs	r2, #1
 8002472:	4619      	mov	r1, r3
 8002474:	4805      	ldr	r0, [pc, #20]	; (800248c <MX_RTC_Init+0x8c>)
 8002476:	f002 fb29 	bl	8004acc <HAL_RTC_SetDate>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8002480:	f000 f9a9 	bl	80027d6 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002484:	bf00      	nop
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	2000088c 	.word	0x2000088c
 8002490:	40002800 	.word	0x40002800

08002494 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002498:	4b17      	ldr	r3, [pc, #92]	; (80024f8 <MX_SPI2_Init+0x64>)
 800249a:	4a18      	ldr	r2, [pc, #96]	; (80024fc <MX_SPI2_Init+0x68>)
 800249c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800249e:	4b16      	ldr	r3, [pc, #88]	; (80024f8 <MX_SPI2_Init+0x64>)
 80024a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80024a6:	4b14      	ldr	r3, [pc, #80]	; (80024f8 <MX_SPI2_Init+0x64>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80024ac:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <MX_SPI2_Init+0x64>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024b2:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <MX_SPI2_Init+0x64>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024b8:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <MX_SPI2_Init+0x64>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80024be:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <MX_SPI2_Init+0x64>)
 80024c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024c4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024c6:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <MX_SPI2_Init+0x64>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024cc:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <MX_SPI2_Init+0x64>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80024d2:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <MX_SPI2_Init+0x64>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024d8:	4b07      	ldr	r3, [pc, #28]	; (80024f8 <MX_SPI2_Init+0x64>)
 80024da:	2200      	movs	r2, #0
 80024dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80024de:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <MX_SPI2_Init+0x64>)
 80024e0:	220a      	movs	r2, #10
 80024e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80024e4:	4804      	ldr	r0, [pc, #16]	; (80024f8 <MX_SPI2_Init+0x64>)
 80024e6:	f002 fe9d 	bl	8005224 <HAL_SPI_Init>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80024f0:	f000 f971 	bl	80027d6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80024f4:	bf00      	nop
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	200002f0 	.word	0x200002f0
 80024fc:	40003800 	.word	0x40003800

08002500 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08c      	sub	sp, #48	; 0x30
 8002504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002506:	f107 030c 	add.w	r3, r7, #12
 800250a:	2224      	movs	r2, #36	; 0x24
 800250c:	2100      	movs	r1, #0
 800250e:	4618      	mov	r0, r3
 8002510:	f007 f920 	bl	8009754 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002514:	1d3b      	adds	r3, r7, #4
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800251c:	4b20      	ldr	r3, [pc, #128]	; (80025a0 <MX_TIM3_Init+0xa0>)
 800251e:	4a21      	ldr	r2, [pc, #132]	; (80025a4 <MX_TIM3_Init+0xa4>)
 8002520:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002522:	4b1f      	ldr	r3, [pc, #124]	; (80025a0 <MX_TIM3_Init+0xa0>)
 8002524:	2200      	movs	r2, #0
 8002526:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002528:	4b1d      	ldr	r3, [pc, #116]	; (80025a0 <MX_TIM3_Init+0xa0>)
 800252a:	2200      	movs	r2, #0
 800252c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800252e:	4b1c      	ldr	r3, [pc, #112]	; (80025a0 <MX_TIM3_Init+0xa0>)
 8002530:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002534:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002536:	4b1a      	ldr	r3, [pc, #104]	; (80025a0 <MX_TIM3_Init+0xa0>)
 8002538:	2200      	movs	r2, #0
 800253a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800253c:	4b18      	ldr	r3, [pc, #96]	; (80025a0 <MX_TIM3_Init+0xa0>)
 800253e:	2200      	movs	r2, #0
 8002540:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002542:	2303      	movs	r3, #3
 8002544:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800254a:	2301      	movs	r3, #1
 800254c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800254e:	2300      	movs	r3, #0
 8002550:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002552:	230a      	movs	r3, #10
 8002554:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002556:	2300      	movs	r3, #0
 8002558:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800255a:	2301      	movs	r3, #1
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800255e:	2300      	movs	r3, #0
 8002560:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002566:	f107 030c 	add.w	r3, r7, #12
 800256a:	4619      	mov	r1, r3
 800256c:	480c      	ldr	r0, [pc, #48]	; (80025a0 <MX_TIM3_Init+0xa0>)
 800256e:	f003 fbce 	bl	8005d0e <HAL_TIM_Encoder_Init>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002578:	f000 f92d 	bl	80027d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800257c:	2300      	movs	r3, #0
 800257e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002580:	2300      	movs	r3, #0
 8002582:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002584:	1d3b      	adds	r3, r7, #4
 8002586:	4619      	mov	r1, r3
 8002588:	4805      	ldr	r0, [pc, #20]	; (80025a0 <MX_TIM3_Init+0xa0>)
 800258a:	f003 ff85 	bl	8006498 <HAL_TIMEx_MasterConfigSynchronization>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002594:	f000 f91f 	bl	80027d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002598:	bf00      	nop
 800259a:	3730      	adds	r7, #48	; 0x30
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	20000610 	.word	0x20000610
 80025a4:	40000400 	.word	0x40000400

080025a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ae:	f107 0308 	add.w	r3, r7, #8
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	605a      	str	r2, [r3, #4]
 80025b8:	609a      	str	r2, [r3, #8]
 80025ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025bc:	463b      	mov	r3, r7
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025c4:	4b1d      	ldr	r3, [pc, #116]	; (800263c <MX_TIM4_Init+0x94>)
 80025c6:	4a1e      	ldr	r2, [pc, #120]	; (8002640 <MX_TIM4_Init+0x98>)
 80025c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48000;
 80025ca:	4b1c      	ldr	r3, [pc, #112]	; (800263c <MX_TIM4_Init+0x94>)
 80025cc:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80025d0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d2:	4b1a      	ldr	r3, [pc, #104]	; (800263c <MX_TIM4_Init+0x94>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 125;
 80025d8:	4b18      	ldr	r3, [pc, #96]	; (800263c <MX_TIM4_Init+0x94>)
 80025da:	227d      	movs	r2, #125	; 0x7d
 80025dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025de:	4b17      	ldr	r3, [pc, #92]	; (800263c <MX_TIM4_Init+0x94>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e4:	4b15      	ldr	r3, [pc, #84]	; (800263c <MX_TIM4_Init+0x94>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80025ea:	4814      	ldr	r0, [pc, #80]	; (800263c <MX_TIM4_Init+0x94>)
 80025ec:	f003 fb41 	bl	8005c72 <HAL_TIM_Base_Init>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80025f6:	f000 f8ee 	bl	80027d6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002600:	f107 0308 	add.w	r3, r7, #8
 8002604:	4619      	mov	r1, r3
 8002606:	480d      	ldr	r0, [pc, #52]	; (800263c <MX_TIM4_Init+0x94>)
 8002608:	f003 fd4e 	bl	80060a8 <HAL_TIM_ConfigClockSource>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002612:	f000 f8e0 	bl	80027d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002616:	2320      	movs	r3, #32
 8002618:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800261a:	2300      	movs	r3, #0
 800261c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800261e:	463b      	mov	r3, r7
 8002620:	4619      	mov	r1, r3
 8002622:	4806      	ldr	r0, [pc, #24]	; (800263c <MX_TIM4_Init+0x94>)
 8002624:	f003 ff38 	bl	8006498 <HAL_TIMEx_MasterConfigSynchronization>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800262e:	f000 f8d2 	bl	80027d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002632:	bf00      	nop
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000348 	.word	0x20000348
 8002640:	40000800 	.word	0x40000800

08002644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264a:	f107 0310 	add.w	r3, r7, #16
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	605a      	str	r2, [r3, #4]
 8002654:	609a      	str	r2, [r3, #8]
 8002656:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002658:	4b46      	ldr	r3, [pc, #280]	; (8002774 <MX_GPIO_Init+0x130>)
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	4a45      	ldr	r2, [pc, #276]	; (8002774 <MX_GPIO_Init+0x130>)
 800265e:	f043 0310 	orr.w	r3, r3, #16
 8002662:	6193      	str	r3, [r2, #24]
 8002664:	4b43      	ldr	r3, [pc, #268]	; (8002774 <MX_GPIO_Init+0x130>)
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	f003 0310 	and.w	r3, r3, #16
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002670:	4b40      	ldr	r3, [pc, #256]	; (8002774 <MX_GPIO_Init+0x130>)
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	4a3f      	ldr	r2, [pc, #252]	; (8002774 <MX_GPIO_Init+0x130>)
 8002676:	f043 0320 	orr.w	r3, r3, #32
 800267a:	6193      	str	r3, [r2, #24]
 800267c:	4b3d      	ldr	r3, [pc, #244]	; (8002774 <MX_GPIO_Init+0x130>)
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	f003 0320 	and.w	r3, r3, #32
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002688:	4b3a      	ldr	r3, [pc, #232]	; (8002774 <MX_GPIO_Init+0x130>)
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	4a39      	ldr	r2, [pc, #228]	; (8002774 <MX_GPIO_Init+0x130>)
 800268e:	f043 0304 	orr.w	r3, r3, #4
 8002692:	6193      	str	r3, [r2, #24]
 8002694:	4b37      	ldr	r3, [pc, #220]	; (8002774 <MX_GPIO_Init+0x130>)
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	607b      	str	r3, [r7, #4]
 800269e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a0:	4b34      	ldr	r3, [pc, #208]	; (8002774 <MX_GPIO_Init+0x130>)
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	4a33      	ldr	r2, [pc, #204]	; (8002774 <MX_GPIO_Init+0x130>)
 80026a6:	f043 0308 	orr.w	r3, r3, #8
 80026aa:	6193      	str	r3, [r2, #24]
 80026ac:	4b31      	ldr	r3, [pc, #196]	; (8002774 <MX_GPIO_Init+0x130>)
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	f003 0308 	and.w	r3, r3, #8
 80026b4:	603b      	str	r3, [r7, #0]
 80026b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80026b8:	2200      	movs	r2, #0
 80026ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026be:	482e      	ldr	r0, [pc, #184]	; (8002778 <MX_GPIO_Init+0x134>)
 80026c0:	f001 fa10 	bl	8003ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDCard_CS_GPIO_Port, SDCard_CS_Pin, GPIO_PIN_RESET);
 80026c4:	2200      	movs	r2, #0
 80026c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026ca:	482c      	ldr	r0, [pc, #176]	; (800277c <MX_GPIO_Init+0x138>)
 80026cc:	f001 fa0a 	bl	8003ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FOC_CS_Pin|CS_magnet_Pin|CS_gyro_Pin|CS_accel_Pin 
 80026d0:	2200      	movs	r2, #0
 80026d2:	f44f 411e 	mov.w	r1, #40448	; 0x9e00
 80026d6:	482a      	ldr	r0, [pc, #168]	; (8002780 <MX_GPIO_Init+0x13c>)
 80026d8:	f001 fa04 	bl	8003ae4 <HAL_GPIO_WritePin>
                          |CAN_Stand_By_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80026dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026e2:	2301      	movs	r3, #1
 80026e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ea:	2302      	movs	r3, #2
 80026ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80026ee:	f107 0310 	add.w	r3, r7, #16
 80026f2:	4619      	mov	r1, r3
 80026f4:	4820      	ldr	r0, [pc, #128]	; (8002778 <MX_GPIO_Init+0x134>)
 80026f6:	f001 f89b 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDCard_CS_Pin */
  GPIO_InitStruct.Pin = SDCard_CS_Pin;
 80026fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002700:	2301      	movs	r3, #1
 8002702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002708:	2302      	movs	r3, #2
 800270a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDCard_CS_GPIO_Port, &GPIO_InitStruct);
 800270c:	f107 0310 	add.w	r3, r7, #16
 8002710:	4619      	mov	r1, r3
 8002712:	481a      	ldr	r0, [pc, #104]	; (800277c <MX_GPIO_Init+0x138>)
 8002714:	f001 f88c 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDCard_Detect_Pin */
  GPIO_InitStruct.Pin = SDCard_Detect_Pin;
 8002718:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800271c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SDCard_Detect_GPIO_Port, &GPIO_InitStruct);
 8002726:	f107 0310 	add.w	r3, r7, #16
 800272a:	4619      	mov	r1, r3
 800272c:	4813      	ldr	r0, [pc, #76]	; (800277c <MX_GPIO_Init+0x138>)
 800272e:	f001 f87f 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pin : Clock_Output_Pin */
  GPIO_InitStruct.Pin = Clock_Output_Pin;
 8002732:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002736:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002738:	2302      	movs	r3, #2
 800273a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273c:	2302      	movs	r3, #2
 800273e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Clock_Output_GPIO_Port, &GPIO_InitStruct);
 8002740:	f107 0310 	add.w	r3, r7, #16
 8002744:	4619      	mov	r1, r3
 8002746:	480e      	ldr	r0, [pc, #56]	; (8002780 <MX_GPIO_Init+0x13c>)
 8002748:	f001 f872 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pins : FOC_CS_Pin CS_magnet_Pin CS_gyro_Pin CS_accel_Pin 
                           CAN_Stand_By_Pin */
  GPIO_InitStruct.Pin = FOC_CS_Pin|CS_magnet_Pin|CS_gyro_Pin|CS_accel_Pin 
 800274c:	f44f 431e 	mov.w	r3, #40448	; 0x9e00
 8002750:	613b      	str	r3, [r7, #16]
                          |CAN_Stand_By_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002752:	2301      	movs	r3, #1
 8002754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002756:	2300      	movs	r3, #0
 8002758:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275a:	2302      	movs	r3, #2
 800275c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800275e:	f107 0310 	add.w	r3, r7, #16
 8002762:	4619      	mov	r1, r3
 8002764:	4806      	ldr	r0, [pc, #24]	; (8002780 <MX_GPIO_Init+0x13c>)
 8002766:	f001 f863 	bl	8003830 <HAL_GPIO_Init>

}
 800276a:	bf00      	nop
 800276c:	3720      	adds	r7, #32
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40021000 	.word	0x40021000
 8002778:	40011000 	.word	0x40011000
 800277c:	40010c00 	.word	0x40010c00
 8002780:	40010800 	.word	0x40010800

08002784 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch){
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff fad8 	bl	8001d44 <ITM_SendChar>
	return ch;
 8002794:	687b      	ldr	r3, [r7, #4]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <_write>:

int _write(int file, char *ptr, int len){
 800279e:	b580      	push	{r7, lr}
 80027a0:	b086      	sub	sp, #24
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	60f8      	str	r0, [r7, #12]
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for(DataIdx = 0; DataIdx < len; DataIdx++){
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	e009      	b.n	80027c4 <_write+0x26>
		__io_putchar(*ptr++);
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	60ba      	str	r2, [r7, #8]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff ffe3 	bl	8002784 <__io_putchar>
	for(DataIdx = 0; DataIdx < len; DataIdx++){
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	3301      	adds	r3, #1
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	dbf1      	blt.n	80027b0 <_write+0x12>
	}
	return len;
 80027cc:	687b      	ldr	r3, [r7, #4]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027d6:	b480      	push	{r7}
 80027d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80027da:	bf00      	nop
 80027dc:	46bd      	mov	sp, r7
 80027de:	bc80      	pop	{r7}
 80027e0:	4770      	bx	lr
	...

080027e4 <mount_card>:
	}
}

/* Mount SD Card */
FRESULT mount_card (FATFS *fs)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
      return f_mount(fs, "", 0);
 80027ec:	2200      	movs	r2, #0
 80027ee:	4904      	ldr	r1, [pc, #16]	; (8002800 <mount_card+0x1c>)
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f005 fd9d 	bl	8008330 <f_mount>
 80027f6:	4603      	mov	r3, r0
      //if fresult <>
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	0800d8a4 	.word	0x0800d8a4

08002804 <card_capacity>:
}

/*************** Card capacity details ********************/

void card_capacity (DWORD *free_space, DWORD *total_space)//, DWORD *fre_clust)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
	FATFS *pfs;
	DWORD fre_clust;

	/* Check free space */
	f_getfree("", &fre_clust, &pfs);
 800280e:	f107 020c 	add.w	r2, r7, #12
 8002812:	f107 0308 	add.w	r3, r7, #8
 8002816:	4619      	mov	r1, r3
 8002818:	480d      	ldr	r0, [pc, #52]	; (8002850 <card_capacity+0x4c>)
 800281a:	f006 fcc9 	bl	80091b0 <f_getfree>
	*total_space = ((pfs->n_fatent - 2) * (pfs->csize)); //total number of sectors
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002824:	3b02      	subs	r3, #2
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800282c:	fb02 f203 	mul.w	r2, r2, r3
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	601a      	str	r2, [r3, #0]
	*free_space = (fre_clust * (pfs->csize)); //number of free sectors
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800283a:	461a      	mov	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	fb03 f202 	mul.w	r2, r3, r2
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	601a      	str	r2, [r3, #0]
}
 8002846:	bf00      	nop
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	0800d8a4 	.word	0x0800d8a4

08002854 <update_file>:
	return fresult;
}

/*********************UPDATING an existing file ***************************/
FRESULT update_file(char *filename, char *data, char *timestamp, FIL *fil, UINT *bw)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
 8002860:	603b      	str	r3, [r7, #0]
	FRESULT fresult;

	strcat(data,timestamp);
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	68b8      	ldr	r0, [r7, #8]
 8002866:	f007 ffc7 	bl	800a7f8 <strcat>
	strcat(data,"\n");
 800286a:	68b8      	ldr	r0, [r7, #8]
 800286c:	f7fd fc70 	bl	8000150 <strlen>
 8002870:	4603      	mov	r3, r0
 8002872:	461a      	mov	r2, r3
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	4413      	add	r3, r2
 8002878:	4911      	ldr	r1, [pc, #68]	; (80028c0 <update_file+0x6c>)
 800287a:	461a      	mov	r2, r3
 800287c:	460b      	mov	r3, r1
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	8013      	strh	r3, [r2, #0]

	/* Open the file with write access */
	fresult = f_open(fil, filename, FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8002882:	2213      	movs	r2, #19
 8002884:	68f9      	ldr	r1, [r7, #12]
 8002886:	6838      	ldr	r0, [r7, #0]
 8002888:	f005 fd9a 	bl	80083c0 <f_open>
 800288c:	4603      	mov	r3, r0
 800288e:	75fb      	strb	r3, [r7, #23]


	/* Move to offset to the end of the file */
	fresult = f_lseek(fil, fil->fsize);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002896:	4619      	mov	r1, r3
 8002898:	6838      	ldr	r0, [r7, #0]
 800289a:	f006 fa2b 	bl	8008cf4 <f_lseek>
 800289e:	4603      	mov	r3, r0
 80028a0:	75fb      	strb	r3, [r7, #23]

	/* write the string to the file */
	fresult = f_puts(data, fil); //pode precisar de um "\n"
 80028a2:	6839      	ldr	r1, [r7, #0]
 80028a4:	68b8      	ldr	r0, [r7, #8]
 80028a6:	f006 fd8d 	bl	80093c4 <f_puts>
 80028aa:	4603      	mov	r3, r0
 80028ac:	75fb      	strb	r3, [r7, #23]

	f_close (fil);
 80028ae:	6838      	ldr	r0, [r7, #0]
 80028b0:	f006 f9f8 	bl	8008ca4 <f_close>
	return fresult;
 80028b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	0800d8a8 	.word	0x0800d8a8

080028c4 <get_timestamp>:

char *get_timestamp(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currentTime, RTC_DateTypeDef *currentDate){
 80028c4:	b590      	push	{r4, r7, lr}
 80028c6:	b091      	sub	sp, #68	; 0x44
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]

	time_t timestamp;
	struct tm currTime;

	HAL_RTC_GetTime(hrtc, currentTime, RTC_FORMAT_BIN);
 80028d0:	2200      	movs	r2, #0
 80028d2:	68b9      	ldr	r1, [r7, #8]
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f002 f821 	bl	800491c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currentDate, RTC_FORMAT_BIN);
 80028da:	2200      	movs	r2, #0
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f002 f9aa 	bl	8004c38 <HAL_RTC_GetDate>


	currTime.tm_year = currentDate->Year-16;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	78db      	ldrb	r3, [r3, #3]
 80028e8:	3b10      	subs	r3, #16
 80028ea:	62bb      	str	r3, [r7, #40]	; 0x28
	currTime.tm_mday = currentDate->Date-6;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	789b      	ldrb	r3, [r3, #2]
 80028f0:	3b06      	subs	r3, #6
 80028f2:	623b      	str	r3, [r7, #32]
	currTime.tm_mon  = currentDate->Month-2;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	785b      	ldrb	r3, [r3, #1]
 80028f8:	3b02      	subs	r3, #2
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
	currTime.tm_hour = currentTime->Hours+8;
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	3308      	adds	r3, #8
 8002902:	61fb      	str	r3, [r7, #28]
	currTime.tm_min  = currentTime->Minutes-23;
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	785b      	ldrb	r3, [r3, #1]
 8002908:	3b17      	subs	r3, #23
 800290a:	61bb      	str	r3, [r7, #24]
	currTime.tm_sec  = currentTime->Seconds;
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	789b      	ldrb	r3, [r3, #2]
 8002910:	617b      	str	r3, [r7, #20]

	timestamp = mktime(&currTime);
 8002912:	f107 0314 	add.w	r3, r7, #20
 8002916:	4618      	mov	r0, r3
 8002918:	f006 fffe 	bl	8009918 <mktime>
 800291c:	4603      	mov	r3, r0
 800291e:	460c      	mov	r4, r1
 8002920:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	return asctime(gmtime(&timestamp));
 8002924:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002928:	4618      	mov	r0, r3
 800292a:	f006 fe21 	bl	8009570 <gmtime>
 800292e:	4603      	mov	r3, r0
 8002930:	4618      	mov	r0, r3
 8002932:	f006 fddb 	bl	80094ec <asctime>
 8002936:	4603      	mov	r3, r0

}
 8002938:	4618      	mov	r0, r3
 800293a:	3744      	adds	r7, #68	; 0x44
 800293c:	46bd      	mov	sp, r7
 800293e:	bd90      	pop	{r4, r7, pc}

08002940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002946:	4b15      	ldr	r3, [pc, #84]	; (800299c <HAL_MspInit+0x5c>)
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	4a14      	ldr	r2, [pc, #80]	; (800299c <HAL_MspInit+0x5c>)
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	6193      	str	r3, [r2, #24]
 8002952:	4b12      	ldr	r3, [pc, #72]	; (800299c <HAL_MspInit+0x5c>)
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	60bb      	str	r3, [r7, #8]
 800295c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800295e:	4b0f      	ldr	r3, [pc, #60]	; (800299c <HAL_MspInit+0x5c>)
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	4a0e      	ldr	r2, [pc, #56]	; (800299c <HAL_MspInit+0x5c>)
 8002964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002968:	61d3      	str	r3, [r2, #28]
 800296a:	4b0c      	ldr	r3, [pc, #48]	; (800299c <HAL_MspInit+0x5c>)
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002972:	607b      	str	r3, [r7, #4]
 8002974:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002976:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <HAL_MspInit+0x60>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	4a04      	ldr	r2, [pc, #16]	; (80029a0 <HAL_MspInit+0x60>)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002992:	bf00      	nop
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr
 800299c:	40021000 	.word	0x40021000
 80029a0:	40010000 	.word	0x40010000

080029a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ac:	f107 0310 	add.w	r3, r7, #16
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a14      	ldr	r2, [pc, #80]	; (8002a10 <HAL_ADC_MspInit+0x6c>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d121      	bne.n	8002a08 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029c4:	4b13      	ldr	r3, [pc, #76]	; (8002a14 <HAL_ADC_MspInit+0x70>)
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	4a12      	ldr	r2, [pc, #72]	; (8002a14 <HAL_ADC_MspInit+0x70>)
 80029ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029ce:	6193      	str	r3, [r2, #24]
 80029d0:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <HAL_ADC_MspInit+0x70>)
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029dc:	4b0d      	ldr	r3, [pc, #52]	; (8002a14 <HAL_ADC_MspInit+0x70>)
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	4a0c      	ldr	r2, [pc, #48]	; (8002a14 <HAL_ADC_MspInit+0x70>)
 80029e2:	f043 0304 	orr.w	r3, r3, #4
 80029e6:	6193      	str	r3, [r2, #24]
 80029e8:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <HAL_ADC_MspInit+0x70>)
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80029f4:	2303      	movs	r3, #3
 80029f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029f8:	2303      	movs	r3, #3
 80029fa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029fc:	f107 0310 	add.w	r3, r7, #16
 8002a00:	4619      	mov	r1, r3
 8002a02:	4805      	ldr	r0, [pc, #20]	; (8002a18 <HAL_ADC_MspInit+0x74>)
 8002a04:	f000 ff14 	bl	8003830 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a08:	bf00      	nop
 8002a0a:	3720      	adds	r7, #32
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40012400 	.word	0x40012400
 8002a14:	40021000 	.word	0x40021000
 8002a18:	40010800 	.word	0x40010800

08002a1c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08a      	sub	sp, #40	; 0x28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a24:	f107 0314 	add.w	r3, r7, #20
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a25      	ldr	r2, [pc, #148]	; (8002acc <HAL_CAN_MspInit+0xb0>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d143      	bne.n	8002ac4 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002a3c:	4b24      	ldr	r3, [pc, #144]	; (8002ad0 <HAL_CAN_MspInit+0xb4>)
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	4a23      	ldr	r2, [pc, #140]	; (8002ad0 <HAL_CAN_MspInit+0xb4>)
 8002a42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a46:	61d3      	str	r3, [r2, #28]
 8002a48:	4b21      	ldr	r3, [pc, #132]	; (8002ad0 <HAL_CAN_MspInit+0xb4>)
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a54:	4b1e      	ldr	r3, [pc, #120]	; (8002ad0 <HAL_CAN_MspInit+0xb4>)
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	4a1d      	ldr	r2, [pc, #116]	; (8002ad0 <HAL_CAN_MspInit+0xb4>)
 8002a5a:	f043 0308 	orr.w	r3, r3, #8
 8002a5e:	6193      	str	r3, [r2, #24]
 8002a60:	4b1b      	ldr	r3, [pc, #108]	; (8002ad0 <HAL_CAN_MspInit+0xb4>)
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a72:	2300      	movs	r3, #0
 8002a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a7a:	f107 0314 	add.w	r3, r7, #20
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4814      	ldr	r0, [pc, #80]	; (8002ad4 <HAL_CAN_MspInit+0xb8>)
 8002a82:	f000 fed5 	bl	8003830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a90:	2303      	movs	r3, #3
 8002a92:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a94:	f107 0314 	add.w	r3, r7, #20
 8002a98:	4619      	mov	r1, r3
 8002a9a:	480e      	ldr	r0, [pc, #56]	; (8002ad4 <HAL_CAN_MspInit+0xb8>)
 8002a9c:	f000 fec8 	bl	8003830 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8002aa0:	4b0d      	ldr	r3, [pc, #52]	; (8002ad8 <HAL_CAN_MspInit+0xbc>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
 8002abe:	4a06      	ldr	r2, [pc, #24]	; (8002ad8 <HAL_CAN_MspInit+0xbc>)
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002ac4:	bf00      	nop
 8002ac6:	3728      	adds	r7, #40	; 0x28
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40006400 	.word	0x40006400
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	40010c00 	.word	0x40010c00
 8002ad8:	40010000 	.word	0x40010000

08002adc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a0b      	ldr	r2, [pc, #44]	; (8002b18 <HAL_RTC_MspInit+0x3c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d110      	bne.n	8002b10 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002aee:	f001 f829 	bl	8003b44 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8002af2:	4b0a      	ldr	r3, [pc, #40]	; (8002b1c <HAL_RTC_MspInit+0x40>)
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	4a09      	ldr	r2, [pc, #36]	; (8002b1c <HAL_RTC_MspInit+0x40>)
 8002af8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002afc:	61d3      	str	r3, [r2, #28]
 8002afe:	4b07      	ldr	r3, [pc, #28]	; (8002b1c <HAL_RTC_MspInit+0x40>)
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002b0a:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <HAL_RTC_MspInit+0x44>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002b10:	bf00      	nop
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40002800 	.word	0x40002800
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	4242043c 	.word	0x4242043c

08002b24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b088      	sub	sp, #32
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b2c:	f107 0310 	add.w	r3, r7, #16
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	605a      	str	r2, [r3, #4]
 8002b36:	609a      	str	r2, [r3, #8]
 8002b38:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a1c      	ldr	r2, [pc, #112]	; (8002bb0 <HAL_SPI_MspInit+0x8c>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d131      	bne.n	8002ba8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b44:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <HAL_SPI_MspInit+0x90>)
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	4a1a      	ldr	r2, [pc, #104]	; (8002bb4 <HAL_SPI_MspInit+0x90>)
 8002b4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b4e:	61d3      	str	r3, [r2, #28]
 8002b50:	4b18      	ldr	r3, [pc, #96]	; (8002bb4 <HAL_SPI_MspInit+0x90>)
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b5c:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <HAL_SPI_MspInit+0x90>)
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	4a14      	ldr	r2, [pc, #80]	; (8002bb4 <HAL_SPI_MspInit+0x90>)
 8002b62:	f043 0308 	orr.w	r3, r3, #8
 8002b66:	6193      	str	r3, [r2, #24]
 8002b68:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <HAL_SPI_MspInit+0x90>)
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	f003 0308 	and.w	r3, r3, #8
 8002b70:	60bb      	str	r3, [r7, #8]
 8002b72:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002b74:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002b78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b82:	f107 0310 	add.w	r3, r7, #16
 8002b86:	4619      	mov	r1, r3
 8002b88:	480b      	ldr	r0, [pc, #44]	; (8002bb8 <HAL_SPI_MspInit+0x94>)
 8002b8a:	f000 fe51 	bl	8003830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002b8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b9c:	f107 0310 	add.w	r3, r7, #16
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4805      	ldr	r0, [pc, #20]	; (8002bb8 <HAL_SPI_MspInit+0x94>)
 8002ba4:	f000 fe44 	bl	8003830 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002ba8:	bf00      	nop
 8002baa:	3720      	adds	r7, #32
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40003800 	.word	0x40003800
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	40010c00 	.word	0x40010c00

08002bbc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b088      	sub	sp, #32
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc4:	f107 0310 	add.w	r3, r7, #16
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	605a      	str	r2, [r3, #4]
 8002bce:	609a      	str	r2, [r3, #8]
 8002bd0:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a15      	ldr	r2, [pc, #84]	; (8002c2c <HAL_TIM_Encoder_MspInit+0x70>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d123      	bne.n	8002c24 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bdc:	4b14      	ldr	r3, [pc, #80]	; (8002c30 <HAL_TIM_Encoder_MspInit+0x74>)
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	4a13      	ldr	r2, [pc, #76]	; (8002c30 <HAL_TIM_Encoder_MspInit+0x74>)
 8002be2:	f043 0302 	orr.w	r3, r3, #2
 8002be6:	61d3      	str	r3, [r2, #28]
 8002be8:	4b11      	ldr	r3, [pc, #68]	; (8002c30 <HAL_TIM_Encoder_MspInit+0x74>)
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf4:	4b0e      	ldr	r3, [pc, #56]	; (8002c30 <HAL_TIM_Encoder_MspInit+0x74>)
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	4a0d      	ldr	r2, [pc, #52]	; (8002c30 <HAL_TIM_Encoder_MspInit+0x74>)
 8002bfa:	f043 0304 	orr.w	r3, r3, #4
 8002bfe:	6193      	str	r3, [r2, #24]
 8002c00:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <HAL_TIM_Encoder_MspInit+0x74>)
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	60bb      	str	r3, [r7, #8]
 8002c0a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = encoder_va_Pin|encoder_vb_Pin;
 8002c0c:	23c0      	movs	r3, #192	; 0xc0
 8002c0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c18:	f107 0310 	add.w	r3, r7, #16
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4805      	ldr	r0, [pc, #20]	; (8002c34 <HAL_TIM_Encoder_MspInit+0x78>)
 8002c20:	f000 fe06 	bl	8003830 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002c24:	bf00      	nop
 8002c26:	3720      	adds	r7, #32
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40000400 	.word	0x40000400
 8002c30:	40021000 	.word	0x40021000
 8002c34:	40010800 	.word	0x40010800

08002c38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a0d      	ldr	r2, [pc, #52]	; (8002c7c <HAL_TIM_Base_MspInit+0x44>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d113      	bne.n	8002c72 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c4a:	4b0d      	ldr	r3, [pc, #52]	; (8002c80 <HAL_TIM_Base_MspInit+0x48>)
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	4a0c      	ldr	r2, [pc, #48]	; (8002c80 <HAL_TIM_Base_MspInit+0x48>)
 8002c50:	f043 0304 	orr.w	r3, r3, #4
 8002c54:	61d3      	str	r3, [r2, #28]
 8002c56:	4b0a      	ldr	r3, [pc, #40]	; (8002c80 <HAL_TIM_Base_MspInit+0x48>)
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002c62:	2200      	movs	r2, #0
 8002c64:	2100      	movs	r1, #0
 8002c66:	201e      	movs	r0, #30
 8002c68:	f000 fdab 	bl	80037c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002c6c:	201e      	movs	r0, #30
 8002c6e:	f000 fdc4 	bl	80037fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002c72:	bf00      	nop
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40000800 	.word	0x40000800
 8002c80:	40021000 	.word	0x40021000

08002c84 <SDTimer_handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8002c88:	4b0d      	ldr	r3, [pc, #52]	; (8002cc0 <SDTimer_handler+0x3c>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d006      	beq.n	8002ca0 <SDTimer_handler+0x1c>
		Timer1--;
 8002c92:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <SDTimer_handler+0x3c>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	4b08      	ldr	r3, [pc, #32]	; (8002cc0 <SDTimer_handler+0x3c>)
 8002c9e:	701a      	strb	r2, [r3, #0]
	if(Timer2 > 0)
 8002ca0:	4b08      	ldr	r3, [pc, #32]	; (8002cc4 <SDTimer_handler+0x40>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d006      	beq.n	8002cb8 <SDTimer_handler+0x34>
		Timer2--;
 8002caa:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <SDTimer_handler+0x40>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	4b03      	ldr	r3, [pc, #12]	; (8002cc4 <SDTimer_handler+0x40>)
 8002cb6:	701a      	strb	r2, [r3, #0]
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr
 8002cc0:	20000d85 	.word	0x20000d85
 8002cc4:	20000d84 	.word	0x20000d84

08002cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cd8:	e7fe      	b.n	8002cd8 <HardFault_Handler+0x4>

08002cda <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cde:	e7fe      	b.n	8002cde <MemManage_Handler+0x4>

08002ce0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ce4:	e7fe      	b.n	8002ce4 <BusFault_Handler+0x4>

08002ce6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cea:	e7fe      	b.n	8002cea <UsageFault_Handler+0x4>

08002cec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cf0:	bf00      	nop
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr

08002cf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cfc:	bf00      	nop
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr

08002d04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d08:	bf00      	nop
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr

08002d10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFsCnt++;
 8002d14:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <SysTick_Handler+0x30>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <SysTick_Handler+0x30>)
 8002d20:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt > 10){
 8002d22:	4b07      	ldr	r3, [pc, #28]	; (8002d40 <SysTick_Handler+0x30>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b0a      	cmp	r3, #10
 8002d2a:	d904      	bls.n	8002d36 <SysTick_Handler+0x26>
		FatFsCnt=0;
 8002d2c:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <SysTick_Handler+0x30>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	701a      	strb	r2, [r3, #0]
		SDTimer_handler();
 8002d32:	f7ff ffa7 	bl	8002c84 <SDTimer_handler>
	}


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d36:	f000 f929 	bl	8002f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000288 	.word	0x20000288

08002d44 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002d48:	4802      	ldr	r0, [pc, #8]	; (8002d54 <TIM4_IRQHandler+0x10>)
 8002d4a:	f003 f8a5 	bl	8005e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000348 	.word	0x20000348

08002d58 <_read>:
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	e00a      	b.n	8002d80 <_read+0x28>
 8002d6a:	f3af 8000 	nop.w
 8002d6e:	4601      	mov	r1, r0
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	1c5a      	adds	r2, r3, #1
 8002d74:	60ba      	str	r2, [r7, #8]
 8002d76:	b2ca      	uxtb	r2, r1
 8002d78:	701a      	strb	r2, [r3, #0]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	dbf0      	blt.n	8002d6a <_read+0x12>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <_close>:
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
 8002d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr

08002da8 <_fstat>:
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002db8:	605a      	str	r2, [r3, #4]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr

08002dc6 <_isatty>:
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	2301      	movs	r3, #1
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr

08002dda <_lseek>:
 8002dda:	b480      	push	{r7}
 8002ddc:	b085      	sub	sp, #20
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	607a      	str	r2, [r7, #4]
 8002de6:	2300      	movs	r3, #0
 8002de8:	4618      	mov	r0, r3
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr
	...

08002df4 <_sbrk>:
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	4b11      	ldr	r3, [pc, #68]	; (8002e44 <_sbrk+0x50>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d102      	bne.n	8002e0a <_sbrk+0x16>
 8002e04:	4b0f      	ldr	r3, [pc, #60]	; (8002e44 <_sbrk+0x50>)
 8002e06:	4a10      	ldr	r2, [pc, #64]	; (8002e48 <_sbrk+0x54>)
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	4b0e      	ldr	r3, [pc, #56]	; (8002e44 <_sbrk+0x50>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <_sbrk+0x50>)
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4413      	add	r3, r2
 8002e18:	466a      	mov	r2, sp
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d907      	bls.n	8002e2e <_sbrk+0x3a>
 8002e1e:	f006 fba1 	bl	8009564 <__errno>
 8002e22:	4602      	mov	r2, r0
 8002e24:	230c      	movs	r3, #12
 8002e26:	6013      	str	r3, [r2, #0]
 8002e28:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2c:	e006      	b.n	8002e3c <_sbrk+0x48>
 8002e2e:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <_sbrk+0x50>)
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4413      	add	r3, r2
 8002e36:	4a03      	ldr	r2, [pc, #12]	; (8002e44 <_sbrk+0x50>)
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	20000290 	.word	0x20000290
 8002e48:	200011f8 	.word	0x200011f8

08002e4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002e50:	4b15      	ldr	r3, [pc, #84]	; (8002ea8 <SystemInit+0x5c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a14      	ldr	r2, [pc, #80]	; (8002ea8 <SystemInit+0x5c>)
 8002e56:	f043 0301 	orr.w	r3, r3, #1
 8002e5a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002e5c:	4b12      	ldr	r3, [pc, #72]	; (8002ea8 <SystemInit+0x5c>)
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	4911      	ldr	r1, [pc, #68]	; (8002ea8 <SystemInit+0x5c>)
 8002e62:	4b12      	ldr	r3, [pc, #72]	; (8002eac <SystemInit+0x60>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002e68:	4b0f      	ldr	r3, [pc, #60]	; (8002ea8 <SystemInit+0x5c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a0e      	ldr	r2, [pc, #56]	; (8002ea8 <SystemInit+0x5c>)
 8002e6e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e76:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e78:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <SystemInit+0x5c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a0a      	ldr	r2, [pc, #40]	; (8002ea8 <SystemInit+0x5c>)
 8002e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e82:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002e84:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <SystemInit+0x5c>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	4a07      	ldr	r2, [pc, #28]	; (8002ea8 <SystemInit+0x5c>)
 8002e8a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002e8e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002e90:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <SystemInit+0x5c>)
 8002e92:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002e96:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002e98:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <SystemInit+0x64>)
 8002e9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e9e:	609a      	str	r2, [r3, #8]
#endif 
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	f8ff0000 	.word	0xf8ff0000
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <Reset_Handler>:
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	e003      	b.n	8002ec0 <LoopCopyDataInit>

08002eb8 <CopyDataInit>:
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <LoopFillZerobss+0x14>)
 8002eba:	585b      	ldr	r3, [r3, r1]
 8002ebc:	5043      	str	r3, [r0, r1]
 8002ebe:	3104      	adds	r1, #4

08002ec0 <LoopCopyDataInit>:
 8002ec0:	480a      	ldr	r0, [pc, #40]	; (8002eec <LoopFillZerobss+0x18>)
 8002ec2:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <LoopFillZerobss+0x1c>)
 8002ec4:	1842      	adds	r2, r0, r1
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d3f6      	bcc.n	8002eb8 <CopyDataInit>
 8002eca:	4a0a      	ldr	r2, [pc, #40]	; (8002ef4 <LoopFillZerobss+0x20>)
 8002ecc:	e002      	b.n	8002ed4 <LoopFillZerobss>

08002ece <FillZerobss>:
 8002ece:	2300      	movs	r3, #0
 8002ed0:	f842 3b04 	str.w	r3, [r2], #4

08002ed4 <LoopFillZerobss>:
 8002ed4:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <LoopFillZerobss+0x24>)
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d3f9      	bcc.n	8002ece <FillZerobss>
 8002eda:	f7ff ffb7 	bl	8002e4c <SystemInit>
 8002ede:	f006 fc05 	bl	80096ec <__libc_init_array>
 8002ee2:	f7fe ff7d 	bl	8001de0 <main>
 8002ee6:	4770      	bx	lr
 8002ee8:	0800ddfc 	.word	0x0800ddfc
 8002eec:	20000000 	.word	0x20000000
 8002ef0:	2000025c 	.word	0x2000025c
 8002ef4:	2000025c 	.word	0x2000025c
 8002ef8:	200011f4 	.word	0x200011f4

08002efc <ADC1_2_IRQHandler>:
 8002efc:	e7fe      	b.n	8002efc <ADC1_2_IRQHandler>
	...

08002f00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f04:	4b08      	ldr	r3, [pc, #32]	; (8002f28 <HAL_Init+0x28>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a07      	ldr	r2, [pc, #28]	; (8002f28 <HAL_Init+0x28>)
 8002f0a:	f043 0310 	orr.w	r3, r3, #16
 8002f0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f10:	2003      	movs	r0, #3
 8002f12:	f000 fc4b 	bl	80037ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f16:	2000      	movs	r0, #0
 8002f18:	f000 f808 	bl	8002f2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f1c:	f7ff fd10 	bl	8002940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40022000 	.word	0x40022000

08002f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f34:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <HAL_InitTick+0x54>)
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	4b12      	ldr	r3, [pc, #72]	; (8002f84 <HAL_InitTick+0x58>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 fc63 	bl	8003816 <HAL_SYSTICK_Config>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e00e      	b.n	8002f78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b0f      	cmp	r3, #15
 8002f5e:	d80a      	bhi.n	8002f76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f60:	2200      	movs	r2, #0
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	f04f 30ff 	mov.w	r0, #4294967295
 8002f68:	f000 fc2b 	bl	80037c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f6c:	4a06      	ldr	r2, [pc, #24]	; (8002f88 <HAL_InitTick+0x5c>)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	e000      	b.n	8002f78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	20000008 	.word	0x20000008
 8002f84:	20000010 	.word	0x20000010
 8002f88:	2000000c 	.word	0x2000000c

08002f8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f90:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <HAL_IncTick+0x1c>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	461a      	mov	r2, r3
 8002f96:	4b05      	ldr	r3, [pc, #20]	; (8002fac <HAL_IncTick+0x20>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	4a03      	ldr	r2, [pc, #12]	; (8002fac <HAL_IncTick+0x20>)
 8002f9e:	6013      	str	r3, [r2, #0]
}
 8002fa0:	bf00      	nop
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr
 8002fa8:	20000010 	.word	0x20000010
 8002fac:	20000d88 	.word	0x20000d88

08002fb0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fb4:	4b02      	ldr	r3, [pc, #8]	; (8002fc0 <HAL_GetTick+0x10>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr
 8002fc0:	20000d88 	.word	0x20000d88

08002fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fcc:	f7ff fff0 	bl	8002fb0 <HAL_GetTick>
 8002fd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fdc:	d005      	beq.n	8002fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fde:	4b09      	ldr	r3, [pc, #36]	; (8003004 <HAL_Delay+0x40>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fea:	bf00      	nop
 8002fec:	f7ff ffe0 	bl	8002fb0 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d8f7      	bhi.n	8002fec <HAL_Delay+0x28>
  {
  }
}
 8002ffc:	bf00      	nop
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	20000010 	.word	0x20000010

08003008 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003010:	2300      	movs	r3, #0
 8003012:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003018:	2300      	movs	r3, #0
 800301a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800301c:	2300      	movs	r3, #0
 800301e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e0be      	b.n	80031a8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003034:	2b00      	cmp	r3, #0
 8003036:	d109      	bne.n	800304c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7ff fcac 	bl	80029a4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 f9ab 	bl	80033a8 <ADC_ConversionStop_Disable>
 8003052:	4603      	mov	r3, r0
 8003054:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305a:	f003 0310 	and.w	r3, r3, #16
 800305e:	2b00      	cmp	r3, #0
 8003060:	f040 8099 	bne.w	8003196 <HAL_ADC_Init+0x18e>
 8003064:	7dfb      	ldrb	r3, [r7, #23]
 8003066:	2b00      	cmp	r3, #0
 8003068:	f040 8095 	bne.w	8003196 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003070:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003074:	f023 0302 	bic.w	r3, r3, #2
 8003078:	f043 0202 	orr.w	r2, r3, #2
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003088:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	7b1b      	ldrb	r3, [r3, #12]
 800308e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003090:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	4313      	orrs	r3, r2
 8003096:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030a0:	d003      	beq.n	80030aa <HAL_ADC_Init+0xa2>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d102      	bne.n	80030b0 <HAL_ADC_Init+0xa8>
 80030aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030ae:	e000      	b.n	80030b2 <HAL_ADC_Init+0xaa>
 80030b0:	2300      	movs	r3, #0
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	7d1b      	ldrb	r3, [r3, #20]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d119      	bne.n	80030f4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	7b1b      	ldrb	r3, [r3, #12]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d109      	bne.n	80030dc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	3b01      	subs	r3, #1
 80030ce:	035a      	lsls	r2, r3, #13
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030d8:	613b      	str	r3, [r7, #16]
 80030da:	e00b      	b.n	80030f4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e0:	f043 0220 	orr.w	r2, r3, #32
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ec:	f043 0201 	orr.w	r2, r3, #1
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	430a      	orrs	r2, r1
 8003106:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	4b28      	ldr	r3, [pc, #160]	; (80031b0 <HAL_ADC_Init+0x1a8>)
 8003110:	4013      	ands	r3, r2
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6812      	ldr	r2, [r2, #0]
 8003116:	68b9      	ldr	r1, [r7, #8]
 8003118:	430b      	orrs	r3, r1
 800311a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003124:	d003      	beq.n	800312e <HAL_ADC_Init+0x126>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d104      	bne.n	8003138 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	3b01      	subs	r3, #1
 8003134:	051b      	lsls	r3, r3, #20
 8003136:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	430a      	orrs	r2, r1
 800314a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	4b18      	ldr	r3, [pc, #96]	; (80031b4 <HAL_ADC_Init+0x1ac>)
 8003154:	4013      	ands	r3, r2
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	429a      	cmp	r2, r3
 800315a:	d10b      	bne.n	8003174 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003166:	f023 0303 	bic.w	r3, r3, #3
 800316a:	f043 0201 	orr.w	r2, r3, #1
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003172:	e018      	b.n	80031a6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003178:	f023 0312 	bic.w	r3, r3, #18
 800317c:	f043 0210 	orr.w	r2, r3, #16
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	f043 0201 	orr.w	r2, r3, #1
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003194:	e007      	b.n	80031a6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319a:	f043 0210 	orr.w	r2, r3, #16
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80031a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	ffe1f7fd 	.word	0xffe1f7fd
 80031b4:	ff1f0efe 	.word	0xff1f0efe

080031b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031c2:	2300      	movs	r3, #0
 80031c4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d101      	bne.n	80031d8 <HAL_ADC_ConfigChannel+0x20>
 80031d4:	2302      	movs	r3, #2
 80031d6:	e0dc      	b.n	8003392 <HAL_ADC_ConfigChannel+0x1da>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b06      	cmp	r3, #6
 80031e6:	d81c      	bhi.n	8003222 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	3b05      	subs	r3, #5
 80031fa:	221f      	movs	r2, #31
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	4019      	ands	r1, r3
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	6818      	ldr	r0, [r3, #0]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	3b05      	subs	r3, #5
 8003214:	fa00 f203 	lsl.w	r2, r0, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	635a      	str	r2, [r3, #52]	; 0x34
 8003220:	e03c      	b.n	800329c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b0c      	cmp	r3, #12
 8003228:	d81c      	bhi.n	8003264 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	4613      	mov	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	3b23      	subs	r3, #35	; 0x23
 800323c:	221f      	movs	r2, #31
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	43db      	mvns	r3, r3
 8003244:	4019      	ands	r1, r3
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	6818      	ldr	r0, [r3, #0]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	3b23      	subs	r3, #35	; 0x23
 8003256:	fa00 f203 	lsl.w	r2, r0, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	631a      	str	r2, [r3, #48]	; 0x30
 8003262:	e01b      	b.n	800329c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	3b41      	subs	r3, #65	; 0x41
 8003276:	221f      	movs	r2, #31
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	43db      	mvns	r3, r3
 800327e:	4019      	ands	r1, r3
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	6818      	ldr	r0, [r3, #0]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	3b41      	subs	r3, #65	; 0x41
 8003290:	fa00 f203 	lsl.w	r2, r0, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b09      	cmp	r3, #9
 80032a2:	d91c      	bls.n	80032de <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68d9      	ldr	r1, [r3, #12]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	4613      	mov	r3, r2
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	4413      	add	r3, r2
 80032b4:	3b1e      	subs	r3, #30
 80032b6:	2207      	movs	r2, #7
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	4019      	ands	r1, r3
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	6898      	ldr	r0, [r3, #8]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	4613      	mov	r3, r2
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	4413      	add	r3, r2
 80032ce:	3b1e      	subs	r3, #30
 80032d0:	fa00 f203 	lsl.w	r2, r0, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	60da      	str	r2, [r3, #12]
 80032dc:	e019      	b.n	8003312 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6919      	ldr	r1, [r3, #16]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	4613      	mov	r3, r2
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	4413      	add	r3, r2
 80032ee:	2207      	movs	r2, #7
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	4019      	ands	r1, r3
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	6898      	ldr	r0, [r3, #8]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4613      	mov	r3, r2
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	4413      	add	r3, r2
 8003306:	fa00 f203 	lsl.w	r2, r0, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b10      	cmp	r3, #16
 8003318:	d003      	beq.n	8003322 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800331e:	2b11      	cmp	r3, #17
 8003320:	d132      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a1d      	ldr	r2, [pc, #116]	; (800339c <HAL_ADC_ConfigChannel+0x1e4>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d125      	bne.n	8003378 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d126      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003348:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2b10      	cmp	r3, #16
 8003350:	d11a      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003352:	4b13      	ldr	r3, [pc, #76]	; (80033a0 <HAL_ADC_ConfigChannel+0x1e8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a13      	ldr	r2, [pc, #76]	; (80033a4 <HAL_ADC_ConfigChannel+0x1ec>)
 8003358:	fba2 2303 	umull	r2, r3, r2, r3
 800335c:	0c9a      	lsrs	r2, r3, #18
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003368:	e002      	b.n	8003370 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	3b01      	subs	r3, #1
 800336e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1f9      	bne.n	800336a <HAL_ADC_ConfigChannel+0x1b2>
 8003376:	e007      	b.n	8003388 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337c:	f043 0220 	orr.w	r2, r3, #32
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003390:	7bfb      	ldrb	r3, [r7, #15]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr
 800339c:	40012400 	.word	0x40012400
 80033a0:	20000008 	.word	0x20000008
 80033a4:	431bde83 	.word	0x431bde83

080033a8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d127      	bne.n	8003412 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0201 	bic.w	r2, r2, #1
 80033d0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033d2:	f7ff fded 	bl	8002fb0 <HAL_GetTick>
 80033d6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80033d8:	e014      	b.n	8003404 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033da:	f7ff fde9 	bl	8002fb0 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d90d      	bls.n	8003404 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ec:	f043 0210 	orr.w	r2, r3, #16
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	f043 0201 	orr.w	r2, r3, #1
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e007      	b.n	8003414 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b01      	cmp	r3, #1
 8003410:	d0e3      	beq.n	80033da <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e0ed      	b.n	800360a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d102      	bne.n	8003440 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7ff faee 	bl	8002a1c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0202 	bic.w	r2, r2, #2
 800344e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003450:	f7ff fdae 	bl	8002fb0 <HAL_GetTick>
 8003454:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003456:	e012      	b.n	800347e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003458:	f7ff fdaa 	bl	8002fb0 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b0a      	cmp	r3, #10
 8003464:	d90b      	bls.n	800347e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2205      	movs	r2, #5
 8003476:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e0c5      	b.n	800360a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1e5      	bne.n	8003458 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0201 	orr.w	r2, r2, #1
 800349a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800349c:	f7ff fd88 	bl	8002fb0 <HAL_GetTick>
 80034a0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80034a2:	e012      	b.n	80034ca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034a4:	f7ff fd84 	bl	8002fb0 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b0a      	cmp	r3, #10
 80034b0:	d90b      	bls.n	80034ca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2205      	movs	r2, #5
 80034c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e09f      	b.n	800360a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0e5      	beq.n	80034a4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	7e1b      	ldrb	r3, [r3, #24]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d108      	bne.n	80034f2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	e007      	b.n	8003502 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003500:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	7e5b      	ldrb	r3, [r3, #25]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d108      	bne.n	800351c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	e007      	b.n	800352c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800352a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	7e9b      	ldrb	r3, [r3, #26]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d108      	bne.n	8003546 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0220 	orr.w	r2, r2, #32
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	e007      	b.n	8003556 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0220 	bic.w	r2, r2, #32
 8003554:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	7edb      	ldrb	r3, [r3, #27]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d108      	bne.n	8003570 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0210 	bic.w	r2, r2, #16
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	e007      	b.n	8003580 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f042 0210 	orr.w	r2, r2, #16
 800357e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	7f1b      	ldrb	r3, [r3, #28]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d108      	bne.n	800359a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0208 	orr.w	r2, r2, #8
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	e007      	b.n	80035aa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0208 	bic.w	r2, r2, #8
 80035a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	7f5b      	ldrb	r3, [r3, #29]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d108      	bne.n	80035c4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f042 0204 	orr.w	r2, r2, #4
 80035c0:	601a      	str	r2, [r3, #0]
 80035c2:	e007      	b.n	80035d4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0204 	bic.w	r2, r2, #4
 80035d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	431a      	orrs	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	ea42 0103 	orr.w	r1, r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	1e5a      	subs	r2, r3, #1
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
	...

08003614 <__NVIC_SetPriorityGrouping>:
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003624:	4b0c      	ldr	r3, [pc, #48]	; (8003658 <__NVIC_SetPriorityGrouping+0x44>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003630:	4013      	ands	r3, r2
 8003632:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800363c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003646:	4a04      	ldr	r2, [pc, #16]	; (8003658 <__NVIC_SetPriorityGrouping+0x44>)
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	60d3      	str	r3, [r2, #12]
}
 800364c:	bf00      	nop
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	bc80      	pop	{r7}
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	e000ed00 	.word	0xe000ed00

0800365c <__NVIC_GetPriorityGrouping>:
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003660:	4b04      	ldr	r3, [pc, #16]	; (8003674 <__NVIC_GetPriorityGrouping+0x18>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	0a1b      	lsrs	r3, r3, #8
 8003666:	f003 0307 	and.w	r3, r3, #7
}
 800366a:	4618      	mov	r0, r3
 800366c:	46bd      	mov	sp, r7
 800366e:	bc80      	pop	{r7}
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	e000ed00 	.word	0xe000ed00

08003678 <__NVIC_EnableIRQ>:
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	4603      	mov	r3, r0
 8003680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003686:	2b00      	cmp	r3, #0
 8003688:	db0b      	blt.n	80036a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800368a:	79fb      	ldrb	r3, [r7, #7]
 800368c:	f003 021f 	and.w	r2, r3, #31
 8003690:	4906      	ldr	r1, [pc, #24]	; (80036ac <__NVIC_EnableIRQ+0x34>)
 8003692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003696:	095b      	lsrs	r3, r3, #5
 8003698:	2001      	movs	r0, #1
 800369a:	fa00 f202 	lsl.w	r2, r0, r2
 800369e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80036a2:	bf00      	nop
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr
 80036ac:	e000e100 	.word	0xe000e100

080036b0 <__NVIC_SetPriority>:
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	4603      	mov	r3, r0
 80036b8:	6039      	str	r1, [r7, #0]
 80036ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	db0a      	blt.n	80036da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	490c      	ldr	r1, [pc, #48]	; (80036fc <__NVIC_SetPriority+0x4c>)
 80036ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ce:	0112      	lsls	r2, r2, #4
 80036d0:	b2d2      	uxtb	r2, r2
 80036d2:	440b      	add	r3, r1
 80036d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80036d8:	e00a      	b.n	80036f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	4908      	ldr	r1, [pc, #32]	; (8003700 <__NVIC_SetPriority+0x50>)
 80036e0:	79fb      	ldrb	r3, [r7, #7]
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	3b04      	subs	r3, #4
 80036e8:	0112      	lsls	r2, r2, #4
 80036ea:	b2d2      	uxtb	r2, r2
 80036ec:	440b      	add	r3, r1
 80036ee:	761a      	strb	r2, [r3, #24]
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bc80      	pop	{r7}
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	e000e100 	.word	0xe000e100
 8003700:	e000ed00 	.word	0xe000ed00

08003704 <NVIC_EncodePriority>:
{
 8003704:	b480      	push	{r7}
 8003706:	b089      	sub	sp, #36	; 0x24
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f1c3 0307 	rsb	r3, r3, #7
 800371e:	2b04      	cmp	r3, #4
 8003720:	bf28      	it	cs
 8003722:	2304      	movcs	r3, #4
 8003724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	3304      	adds	r3, #4
 800372a:	2b06      	cmp	r3, #6
 800372c:	d902      	bls.n	8003734 <NVIC_EncodePriority+0x30>
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	3b03      	subs	r3, #3
 8003732:	e000      	b.n	8003736 <NVIC_EncodePriority+0x32>
 8003734:	2300      	movs	r3, #0
 8003736:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003738:	f04f 32ff 	mov.w	r2, #4294967295
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	43da      	mvns	r2, r3
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	401a      	ands	r2, r3
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800374c:	f04f 31ff 	mov.w	r1, #4294967295
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	fa01 f303 	lsl.w	r3, r1, r3
 8003756:	43d9      	mvns	r1, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800375c:	4313      	orrs	r3, r2
}
 800375e:	4618      	mov	r0, r3
 8003760:	3724      	adds	r7, #36	; 0x24
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr

08003768 <SysTick_Config>:
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3b01      	subs	r3, #1
 8003774:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003778:	d301      	bcc.n	800377e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800377a:	2301      	movs	r3, #1
 800377c:	e00f      	b.n	800379e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800377e:	4a0a      	ldr	r2, [pc, #40]	; (80037a8 <SysTick_Config+0x40>)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3b01      	subs	r3, #1
 8003784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003786:	210f      	movs	r1, #15
 8003788:	f04f 30ff 	mov.w	r0, #4294967295
 800378c:	f7ff ff90 	bl	80036b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003790:	4b05      	ldr	r3, [pc, #20]	; (80037a8 <SysTick_Config+0x40>)
 8003792:	2200      	movs	r2, #0
 8003794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003796:	4b04      	ldr	r3, [pc, #16]	; (80037a8 <SysTick_Config+0x40>)
 8003798:	2207      	movs	r2, #7
 800379a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	e000e010 	.word	0xe000e010

080037ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7ff ff2d 	bl	8003614 <__NVIC_SetPriorityGrouping>
}
 80037ba:	bf00      	nop
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b086      	sub	sp, #24
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	4603      	mov	r3, r0
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	607a      	str	r2, [r7, #4]
 80037ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037d4:	f7ff ff42 	bl	800365c <__NVIC_GetPriorityGrouping>
 80037d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	68b9      	ldr	r1, [r7, #8]
 80037de:	6978      	ldr	r0, [r7, #20]
 80037e0:	f7ff ff90 	bl	8003704 <NVIC_EncodePriority>
 80037e4:	4602      	mov	r2, r0
 80037e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ea:	4611      	mov	r1, r2
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7ff ff5f 	bl	80036b0 <__NVIC_SetPriority>
}
 80037f2:	bf00      	nop
 80037f4:	3718      	adds	r7, #24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b082      	sub	sp, #8
 80037fe:	af00      	add	r7, sp, #0
 8003800:	4603      	mov	r3, r0
 8003802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff ff35 	bl	8003678 <__NVIC_EnableIRQ>
}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b082      	sub	sp, #8
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7ff ffa2 	bl	8003768 <SysTick_Config>
 8003824:	4603      	mov	r3, r0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003830:	b480      	push	{r7}
 8003832:	b08b      	sub	sp, #44	; 0x2c
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800383a:	2300      	movs	r3, #0
 800383c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800383e:	2300      	movs	r3, #0
 8003840:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003842:	e127      	b.n	8003a94 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003844:	2201      	movs	r2, #1
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	69fa      	ldr	r2, [r7, #28]
 8003854:	4013      	ands	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	429a      	cmp	r2, r3
 800385e:	f040 8116 	bne.w	8003a8e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b12      	cmp	r3, #18
 8003868:	d034      	beq.n	80038d4 <HAL_GPIO_Init+0xa4>
 800386a:	2b12      	cmp	r3, #18
 800386c:	d80d      	bhi.n	800388a <HAL_GPIO_Init+0x5a>
 800386e:	2b02      	cmp	r3, #2
 8003870:	d02b      	beq.n	80038ca <HAL_GPIO_Init+0x9a>
 8003872:	2b02      	cmp	r3, #2
 8003874:	d804      	bhi.n	8003880 <HAL_GPIO_Init+0x50>
 8003876:	2b00      	cmp	r3, #0
 8003878:	d031      	beq.n	80038de <HAL_GPIO_Init+0xae>
 800387a:	2b01      	cmp	r3, #1
 800387c:	d01c      	beq.n	80038b8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800387e:	e048      	b.n	8003912 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003880:	2b03      	cmp	r3, #3
 8003882:	d043      	beq.n	800390c <HAL_GPIO_Init+0xdc>
 8003884:	2b11      	cmp	r3, #17
 8003886:	d01b      	beq.n	80038c0 <HAL_GPIO_Init+0x90>
          break;
 8003888:	e043      	b.n	8003912 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800388a:	4a89      	ldr	r2, [pc, #548]	; (8003ab0 <HAL_GPIO_Init+0x280>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d026      	beq.n	80038de <HAL_GPIO_Init+0xae>
 8003890:	4a87      	ldr	r2, [pc, #540]	; (8003ab0 <HAL_GPIO_Init+0x280>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d806      	bhi.n	80038a4 <HAL_GPIO_Init+0x74>
 8003896:	4a87      	ldr	r2, [pc, #540]	; (8003ab4 <HAL_GPIO_Init+0x284>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d020      	beq.n	80038de <HAL_GPIO_Init+0xae>
 800389c:	4a86      	ldr	r2, [pc, #536]	; (8003ab8 <HAL_GPIO_Init+0x288>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d01d      	beq.n	80038de <HAL_GPIO_Init+0xae>
          break;
 80038a2:	e036      	b.n	8003912 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80038a4:	4a85      	ldr	r2, [pc, #532]	; (8003abc <HAL_GPIO_Init+0x28c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d019      	beq.n	80038de <HAL_GPIO_Init+0xae>
 80038aa:	4a85      	ldr	r2, [pc, #532]	; (8003ac0 <HAL_GPIO_Init+0x290>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d016      	beq.n	80038de <HAL_GPIO_Init+0xae>
 80038b0:	4a84      	ldr	r2, [pc, #528]	; (8003ac4 <HAL_GPIO_Init+0x294>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d013      	beq.n	80038de <HAL_GPIO_Init+0xae>
          break;
 80038b6:	e02c      	b.n	8003912 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	623b      	str	r3, [r7, #32]
          break;
 80038be:	e028      	b.n	8003912 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	3304      	adds	r3, #4
 80038c6:	623b      	str	r3, [r7, #32]
          break;
 80038c8:	e023      	b.n	8003912 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	3308      	adds	r3, #8
 80038d0:	623b      	str	r3, [r7, #32]
          break;
 80038d2:	e01e      	b.n	8003912 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	330c      	adds	r3, #12
 80038da:	623b      	str	r3, [r7, #32]
          break;
 80038dc:	e019      	b.n	8003912 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d102      	bne.n	80038ec <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80038e6:	2304      	movs	r3, #4
 80038e8:	623b      	str	r3, [r7, #32]
          break;
 80038ea:	e012      	b.n	8003912 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d105      	bne.n	8003900 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80038f4:	2308      	movs	r3, #8
 80038f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	69fa      	ldr	r2, [r7, #28]
 80038fc:	611a      	str	r2, [r3, #16]
          break;
 80038fe:	e008      	b.n	8003912 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003900:	2308      	movs	r3, #8
 8003902:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	69fa      	ldr	r2, [r7, #28]
 8003908:	615a      	str	r2, [r3, #20]
          break;
 800390a:	e002      	b.n	8003912 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800390c:	2300      	movs	r3, #0
 800390e:	623b      	str	r3, [r7, #32]
          break;
 8003910:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	2bff      	cmp	r3, #255	; 0xff
 8003916:	d801      	bhi.n	800391c <HAL_GPIO_Init+0xec>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	e001      	b.n	8003920 <HAL_GPIO_Init+0xf0>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3304      	adds	r3, #4
 8003920:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	2bff      	cmp	r3, #255	; 0xff
 8003926:	d802      	bhi.n	800392e <HAL_GPIO_Init+0xfe>
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	e002      	b.n	8003934 <HAL_GPIO_Init+0x104>
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	3b08      	subs	r3, #8
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	210f      	movs	r1, #15
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	fa01 f303 	lsl.w	r3, r1, r3
 8003942:	43db      	mvns	r3, r3
 8003944:	401a      	ands	r2, r3
 8003946:	6a39      	ldr	r1, [r7, #32]
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	fa01 f303 	lsl.w	r3, r1, r3
 800394e:	431a      	orrs	r2, r3
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 8096 	beq.w	8003a8e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003962:	4b59      	ldr	r3, [pc, #356]	; (8003ac8 <HAL_GPIO_Init+0x298>)
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	4a58      	ldr	r2, [pc, #352]	; (8003ac8 <HAL_GPIO_Init+0x298>)
 8003968:	f043 0301 	orr.w	r3, r3, #1
 800396c:	6193      	str	r3, [r2, #24]
 800396e:	4b56      	ldr	r3, [pc, #344]	; (8003ac8 <HAL_GPIO_Init+0x298>)
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	60bb      	str	r3, [r7, #8]
 8003978:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800397a:	4a54      	ldr	r2, [pc, #336]	; (8003acc <HAL_GPIO_Init+0x29c>)
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	089b      	lsrs	r3, r3, #2
 8003980:	3302      	adds	r3, #2
 8003982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003986:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	220f      	movs	r2, #15
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	43db      	mvns	r3, r3
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	4013      	ands	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a4b      	ldr	r2, [pc, #300]	; (8003ad0 <HAL_GPIO_Init+0x2a0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d013      	beq.n	80039ce <HAL_GPIO_Init+0x19e>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a4a      	ldr	r2, [pc, #296]	; (8003ad4 <HAL_GPIO_Init+0x2a4>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d00d      	beq.n	80039ca <HAL_GPIO_Init+0x19a>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a49      	ldr	r2, [pc, #292]	; (8003ad8 <HAL_GPIO_Init+0x2a8>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d007      	beq.n	80039c6 <HAL_GPIO_Init+0x196>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a48      	ldr	r2, [pc, #288]	; (8003adc <HAL_GPIO_Init+0x2ac>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d101      	bne.n	80039c2 <HAL_GPIO_Init+0x192>
 80039be:	2303      	movs	r3, #3
 80039c0:	e006      	b.n	80039d0 <HAL_GPIO_Init+0x1a0>
 80039c2:	2304      	movs	r3, #4
 80039c4:	e004      	b.n	80039d0 <HAL_GPIO_Init+0x1a0>
 80039c6:	2302      	movs	r3, #2
 80039c8:	e002      	b.n	80039d0 <HAL_GPIO_Init+0x1a0>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <HAL_GPIO_Init+0x1a0>
 80039ce:	2300      	movs	r3, #0
 80039d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d2:	f002 0203 	and.w	r2, r2, #3
 80039d6:	0092      	lsls	r2, r2, #2
 80039d8:	4093      	lsls	r3, r2
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	4313      	orrs	r3, r2
 80039de:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80039e0:	493a      	ldr	r1, [pc, #232]	; (8003acc <HAL_GPIO_Init+0x29c>)
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	089b      	lsrs	r3, r3, #2
 80039e6:	3302      	adds	r3, #2
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d006      	beq.n	8003a08 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80039fa:	4b39      	ldr	r3, [pc, #228]	; (8003ae0 <HAL_GPIO_Init+0x2b0>)
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	4938      	ldr	r1, [pc, #224]	; (8003ae0 <HAL_GPIO_Init+0x2b0>)
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	600b      	str	r3, [r1, #0]
 8003a06:	e006      	b.n	8003a16 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003a08:	4b35      	ldr	r3, [pc, #212]	; (8003ae0 <HAL_GPIO_Init+0x2b0>)
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	4933      	ldr	r1, [pc, #204]	; (8003ae0 <HAL_GPIO_Init+0x2b0>)
 8003a12:	4013      	ands	r3, r2
 8003a14:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d006      	beq.n	8003a30 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003a22:	4b2f      	ldr	r3, [pc, #188]	; (8003ae0 <HAL_GPIO_Init+0x2b0>)
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	492e      	ldr	r1, [pc, #184]	; (8003ae0 <HAL_GPIO_Init+0x2b0>)
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	604b      	str	r3, [r1, #4]
 8003a2e:	e006      	b.n	8003a3e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003a30:	4b2b      	ldr	r3, [pc, #172]	; (8003ae0 <HAL_GPIO_Init+0x2b0>)
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	43db      	mvns	r3, r3
 8003a38:	4929      	ldr	r1, [pc, #164]	; (8003ae0 <HAL_GPIO_Init+0x2b0>)
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d006      	beq.n	8003a58 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003a4a:	4b25      	ldr	r3, [pc, #148]	; (8003ae0 <HAL_GPIO_Init+0x2b0>)
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	4924      	ldr	r1, [pc, #144]	; (8003ae0 <HAL_GPIO_Init+0x2b0>)
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	608b      	str	r3, [r1, #8]
 8003a56:	e006      	b.n	8003a66 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003a58:	4b21      	ldr	r3, [pc, #132]	; (8003ae0 <HAL_GPIO_Init+0x2b0>)
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	491f      	ldr	r1, [pc, #124]	; (8003ae0 <HAL_GPIO_Init+0x2b0>)
 8003a62:	4013      	ands	r3, r2
 8003a64:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d006      	beq.n	8003a80 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a72:	4b1b      	ldr	r3, [pc, #108]	; (8003ae0 <HAL_GPIO_Init+0x2b0>)
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	491a      	ldr	r1, [pc, #104]	; (8003ae0 <HAL_GPIO_Init+0x2b0>)
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60cb      	str	r3, [r1, #12]
 8003a7e:	e006      	b.n	8003a8e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003a80:	4b17      	ldr	r3, [pc, #92]	; (8003ae0 <HAL_GPIO_Init+0x2b0>)
 8003a82:	68da      	ldr	r2, [r3, #12]
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	43db      	mvns	r3, r3
 8003a88:	4915      	ldr	r1, [pc, #84]	; (8003ae0 <HAL_GPIO_Init+0x2b0>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	3301      	adds	r3, #1
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f47f aed0 	bne.w	8003844 <HAL_GPIO_Init+0x14>
  }
}
 8003aa4:	bf00      	nop
 8003aa6:	372c      	adds	r7, #44	; 0x2c
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bc80      	pop	{r7}
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	10210000 	.word	0x10210000
 8003ab4:	10110000 	.word	0x10110000
 8003ab8:	10120000 	.word	0x10120000
 8003abc:	10310000 	.word	0x10310000
 8003ac0:	10320000 	.word	0x10320000
 8003ac4:	10220000 	.word	0x10220000
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	40010000 	.word	0x40010000
 8003ad0:	40010800 	.word	0x40010800
 8003ad4:	40010c00 	.word	0x40010c00
 8003ad8:	40011000 	.word	0x40011000
 8003adc:	40011400 	.word	0x40011400
 8003ae0:	40010400 	.word	0x40010400

08003ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	460b      	mov	r3, r1
 8003aee:	807b      	strh	r3, [r7, #2]
 8003af0:	4613      	mov	r3, r2
 8003af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003af4:	787b      	ldrb	r3, [r7, #1]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003afa:	887a      	ldrh	r2, [r7, #2]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003b00:	e003      	b.n	8003b0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003b02:	887b      	ldrh	r3, [r7, #2]
 8003b04:	041a      	lsls	r2, r3, #16
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	611a      	str	r2, [r3, #16]
}
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bc80      	pop	{r7}
 8003b12:	4770      	bx	lr

08003b14 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68da      	ldr	r2, [r3, #12]
 8003b24:	887b      	ldrh	r3, [r7, #2]
 8003b26:	4013      	ands	r3, r2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b2c:	887a      	ldrh	r2, [r7, #2]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003b32:	e002      	b.n	8003b3a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b34:	887a      	ldrh	r2, [r7, #2]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	611a      	str	r2, [r3, #16]
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bc80      	pop	{r7}
 8003b42:	4770      	bx	lr

08003b44 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003b48:	4b03      	ldr	r3, [pc, #12]	; (8003b58 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	601a      	str	r2, [r3, #0]
}
 8003b4e:	bf00      	nop
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bc80      	pop	{r7}
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	420e0020 	.word	0x420e0020

08003b5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e26c      	b.n	8004048 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 8087 	beq.w	8003c8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b7c:	4b92      	ldr	r3, [pc, #584]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f003 030c 	and.w	r3, r3, #12
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d00c      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b88:	4b8f      	ldr	r3, [pc, #572]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f003 030c 	and.w	r3, r3, #12
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d112      	bne.n	8003bba <HAL_RCC_OscConfig+0x5e>
 8003b94:	4b8c      	ldr	r3, [pc, #560]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba0:	d10b      	bne.n	8003bba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba2:	4b89      	ldr	r3, [pc, #548]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d06c      	beq.n	8003c88 <HAL_RCC_OscConfig+0x12c>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d168      	bne.n	8003c88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e246      	b.n	8004048 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bc2:	d106      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x76>
 8003bc4:	4b80      	ldr	r3, [pc, #512]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a7f      	ldr	r2, [pc, #508]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bce:	6013      	str	r3, [r2, #0]
 8003bd0:	e02e      	b.n	8003c30 <HAL_RCC_OscConfig+0xd4>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10c      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x98>
 8003bda:	4b7b      	ldr	r3, [pc, #492]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a7a      	ldr	r2, [pc, #488]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	4b78      	ldr	r3, [pc, #480]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a77      	ldr	r2, [pc, #476]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003bec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bf0:	6013      	str	r3, [r2, #0]
 8003bf2:	e01d      	b.n	8003c30 <HAL_RCC_OscConfig+0xd4>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bfc:	d10c      	bne.n	8003c18 <HAL_RCC_OscConfig+0xbc>
 8003bfe:	4b72      	ldr	r3, [pc, #456]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a71      	ldr	r2, [pc, #452]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	4b6f      	ldr	r3, [pc, #444]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a6e      	ldr	r2, [pc, #440]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	e00b      	b.n	8003c30 <HAL_RCC_OscConfig+0xd4>
 8003c18:	4b6b      	ldr	r3, [pc, #428]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a6a      	ldr	r2, [pc, #424]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c22:	6013      	str	r3, [r2, #0]
 8003c24:	4b68      	ldr	r3, [pc, #416]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a67      	ldr	r2, [pc, #412]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d013      	beq.n	8003c60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c38:	f7ff f9ba 	bl	8002fb0 <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c40:	f7ff f9b6 	bl	8002fb0 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b64      	cmp	r3, #100	; 0x64
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e1fa      	b.n	8004048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c52:	4b5d      	ldr	r3, [pc, #372]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0f0      	beq.n	8003c40 <HAL_RCC_OscConfig+0xe4>
 8003c5e:	e014      	b.n	8003c8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c60:	f7ff f9a6 	bl	8002fb0 <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c68:	f7ff f9a2 	bl	8002fb0 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b64      	cmp	r3, #100	; 0x64
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e1e6      	b.n	8004048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c7a:	4b53      	ldr	r3, [pc, #332]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1f0      	bne.n	8003c68 <HAL_RCC_OscConfig+0x10c>
 8003c86:	e000      	b.n	8003c8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d063      	beq.n	8003d5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c96:	4b4c      	ldr	r3, [pc, #304]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f003 030c 	and.w	r3, r3, #12
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00b      	beq.n	8003cba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ca2:	4b49      	ldr	r3, [pc, #292]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f003 030c 	and.w	r3, r3, #12
 8003caa:	2b08      	cmp	r3, #8
 8003cac:	d11c      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x18c>
 8003cae:	4b46      	ldr	r3, [pc, #280]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d116      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cba:	4b43      	ldr	r3, [pc, #268]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d005      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x176>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d001      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e1ba      	b.n	8004048 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd2:	4b3d      	ldr	r3, [pc, #244]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	4939      	ldr	r1, [pc, #228]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ce6:	e03a      	b.n	8003d5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d020      	beq.n	8003d32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cf0:	4b36      	ldr	r3, [pc, #216]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf6:	f7ff f95b 	bl	8002fb0 <HAL_GetTick>
 8003cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cfc:	e008      	b.n	8003d10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cfe:	f7ff f957 	bl	8002fb0 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e19b      	b.n	8004048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d10:	4b2d      	ldr	r3, [pc, #180]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0f0      	beq.n	8003cfe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d1c:	4b2a      	ldr	r3, [pc, #168]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	4927      	ldr	r1, [pc, #156]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	600b      	str	r3, [r1, #0]
 8003d30:	e015      	b.n	8003d5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d32:	4b26      	ldr	r3, [pc, #152]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d38:	f7ff f93a 	bl	8002fb0 <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d40:	f7ff f936 	bl	8002fb0 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e17a      	b.n	8004048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d52:	4b1d      	ldr	r3, [pc, #116]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1f0      	bne.n	8003d40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0308 	and.w	r3, r3, #8
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d03a      	beq.n	8003de0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d019      	beq.n	8003da6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d72:	4b17      	ldr	r3, [pc, #92]	; (8003dd0 <HAL_RCC_OscConfig+0x274>)
 8003d74:	2201      	movs	r2, #1
 8003d76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d78:	f7ff f91a 	bl	8002fb0 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d80:	f7ff f916 	bl	8002fb0 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e15a      	b.n	8004048 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d92:	4b0d      	ldr	r3, [pc, #52]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0f0      	beq.n	8003d80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d9e:	2001      	movs	r0, #1
 8003da0:	f000 fafe 	bl	80043a0 <RCC_Delay>
 8003da4:	e01c      	b.n	8003de0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003da6:	4b0a      	ldr	r3, [pc, #40]	; (8003dd0 <HAL_RCC_OscConfig+0x274>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dac:	f7ff f900 	bl	8002fb0 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003db2:	e00f      	b.n	8003dd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003db4:	f7ff f8fc 	bl	8002fb0 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d908      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e140      	b.n	8004048 <HAL_RCC_OscConfig+0x4ec>
 8003dc6:	bf00      	nop
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	42420000 	.word	0x42420000
 8003dd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dd4:	4b9e      	ldr	r3, [pc, #632]	; (8004050 <HAL_RCC_OscConfig+0x4f4>)
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1e9      	bne.n	8003db4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 80a6 	beq.w	8003f3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dee:	2300      	movs	r3, #0
 8003df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003df2:	4b97      	ldr	r3, [pc, #604]	; (8004050 <HAL_RCC_OscConfig+0x4f4>)
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10d      	bne.n	8003e1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dfe:	4b94      	ldr	r3, [pc, #592]	; (8004050 <HAL_RCC_OscConfig+0x4f4>)
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	4a93      	ldr	r2, [pc, #588]	; (8004050 <HAL_RCC_OscConfig+0x4f4>)
 8003e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e08:	61d3      	str	r3, [r2, #28]
 8003e0a:	4b91      	ldr	r3, [pc, #580]	; (8004050 <HAL_RCC_OscConfig+0x4f4>)
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e12:	60bb      	str	r3, [r7, #8]
 8003e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e16:	2301      	movs	r3, #1
 8003e18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1a:	4b8e      	ldr	r3, [pc, #568]	; (8004054 <HAL_RCC_OscConfig+0x4f8>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d118      	bne.n	8003e58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e26:	4b8b      	ldr	r3, [pc, #556]	; (8004054 <HAL_RCC_OscConfig+0x4f8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a8a      	ldr	r2, [pc, #552]	; (8004054 <HAL_RCC_OscConfig+0x4f8>)
 8003e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e32:	f7ff f8bd 	bl	8002fb0 <HAL_GetTick>
 8003e36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e38:	e008      	b.n	8003e4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e3a:	f7ff f8b9 	bl	8002fb0 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b64      	cmp	r3, #100	; 0x64
 8003e46:	d901      	bls.n	8003e4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e0fd      	b.n	8004048 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e4c:	4b81      	ldr	r3, [pc, #516]	; (8004054 <HAL_RCC_OscConfig+0x4f8>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d0f0      	beq.n	8003e3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d106      	bne.n	8003e6e <HAL_RCC_OscConfig+0x312>
 8003e60:	4b7b      	ldr	r3, [pc, #492]	; (8004050 <HAL_RCC_OscConfig+0x4f4>)
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	4a7a      	ldr	r2, [pc, #488]	; (8004050 <HAL_RCC_OscConfig+0x4f4>)
 8003e66:	f043 0301 	orr.w	r3, r3, #1
 8003e6a:	6213      	str	r3, [r2, #32]
 8003e6c:	e02d      	b.n	8003eca <HAL_RCC_OscConfig+0x36e>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10c      	bne.n	8003e90 <HAL_RCC_OscConfig+0x334>
 8003e76:	4b76      	ldr	r3, [pc, #472]	; (8004050 <HAL_RCC_OscConfig+0x4f4>)
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	4a75      	ldr	r2, [pc, #468]	; (8004050 <HAL_RCC_OscConfig+0x4f4>)
 8003e7c:	f023 0301 	bic.w	r3, r3, #1
 8003e80:	6213      	str	r3, [r2, #32]
 8003e82:	4b73      	ldr	r3, [pc, #460]	; (8004050 <HAL_RCC_OscConfig+0x4f4>)
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	4a72      	ldr	r2, [pc, #456]	; (8004050 <HAL_RCC_OscConfig+0x4f4>)
 8003e88:	f023 0304 	bic.w	r3, r3, #4
 8003e8c:	6213      	str	r3, [r2, #32]
 8003e8e:	e01c      	b.n	8003eca <HAL_RCC_OscConfig+0x36e>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	2b05      	cmp	r3, #5
 8003e96:	d10c      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x356>
 8003e98:	4b6d      	ldr	r3, [pc, #436]	; (8004050 <HAL_RCC_OscConfig+0x4f4>)
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	4a6c      	ldr	r2, [pc, #432]	; (8004050 <HAL_RCC_OscConfig+0x4f4>)
 8003e9e:	f043 0304 	orr.w	r3, r3, #4
 8003ea2:	6213      	str	r3, [r2, #32]
 8003ea4:	4b6a      	ldr	r3, [pc, #424]	; (8004050 <HAL_RCC_OscConfig+0x4f4>)
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	4a69      	ldr	r2, [pc, #420]	; (8004050 <HAL_RCC_OscConfig+0x4f4>)
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	6213      	str	r3, [r2, #32]
 8003eb0:	e00b      	b.n	8003eca <HAL_RCC_OscConfig+0x36e>
 8003eb2:	4b67      	ldr	r3, [pc, #412]	; (8004050 <HAL_RCC_OscConfig+0x4f4>)
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	4a66      	ldr	r2, [pc, #408]	; (8004050 <HAL_RCC_OscConfig+0x4f4>)
 8003eb8:	f023 0301 	bic.w	r3, r3, #1
 8003ebc:	6213      	str	r3, [r2, #32]
 8003ebe:	4b64      	ldr	r3, [pc, #400]	; (8004050 <HAL_RCC_OscConfig+0x4f4>)
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	4a63      	ldr	r2, [pc, #396]	; (8004050 <HAL_RCC_OscConfig+0x4f4>)
 8003ec4:	f023 0304 	bic.w	r3, r3, #4
 8003ec8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d015      	beq.n	8003efe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ed2:	f7ff f86d 	bl	8002fb0 <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed8:	e00a      	b.n	8003ef0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eda:	f7ff f869 	bl	8002fb0 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e0ab      	b.n	8004048 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef0:	4b57      	ldr	r3, [pc, #348]	; (8004050 <HAL_RCC_OscConfig+0x4f4>)
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0ee      	beq.n	8003eda <HAL_RCC_OscConfig+0x37e>
 8003efc:	e014      	b.n	8003f28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003efe:	f7ff f857 	bl	8002fb0 <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f04:	e00a      	b.n	8003f1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f06:	f7ff f853 	bl	8002fb0 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e095      	b.n	8004048 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f1c:	4b4c      	ldr	r3, [pc, #304]	; (8004050 <HAL_RCC_OscConfig+0x4f4>)
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1ee      	bne.n	8003f06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f28:	7dfb      	ldrb	r3, [r7, #23]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d105      	bne.n	8003f3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f2e:	4b48      	ldr	r3, [pc, #288]	; (8004050 <HAL_RCC_OscConfig+0x4f4>)
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	4a47      	ldr	r2, [pc, #284]	; (8004050 <HAL_RCC_OscConfig+0x4f4>)
 8003f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 8081 	beq.w	8004046 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f44:	4b42      	ldr	r3, [pc, #264]	; (8004050 <HAL_RCC_OscConfig+0x4f4>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f003 030c 	and.w	r3, r3, #12
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d061      	beq.n	8004014 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d146      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f58:	4b3f      	ldr	r3, [pc, #252]	; (8004058 <HAL_RCC_OscConfig+0x4fc>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f5e:	f7ff f827 	bl	8002fb0 <HAL_GetTick>
 8003f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f64:	e008      	b.n	8003f78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f66:	f7ff f823 	bl	8002fb0 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e067      	b.n	8004048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f78:	4b35      	ldr	r3, [pc, #212]	; (8004050 <HAL_RCC_OscConfig+0x4f4>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1f0      	bne.n	8003f66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f8c:	d108      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f8e:	4b30      	ldr	r3, [pc, #192]	; (8004050 <HAL_RCC_OscConfig+0x4f4>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	492d      	ldr	r1, [pc, #180]	; (8004050 <HAL_RCC_OscConfig+0x4f4>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fa0:	4b2b      	ldr	r3, [pc, #172]	; (8004050 <HAL_RCC_OscConfig+0x4f4>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a19      	ldr	r1, [r3, #32]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	430b      	orrs	r3, r1
 8003fb2:	4927      	ldr	r1, [pc, #156]	; (8004050 <HAL_RCC_OscConfig+0x4f4>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fb8:	4b27      	ldr	r3, [pc, #156]	; (8004058 <HAL_RCC_OscConfig+0x4fc>)
 8003fba:	2201      	movs	r2, #1
 8003fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fbe:	f7fe fff7 	bl	8002fb0 <HAL_GetTick>
 8003fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fc4:	e008      	b.n	8003fd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc6:	f7fe fff3 	bl	8002fb0 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e037      	b.n	8004048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fd8:	4b1d      	ldr	r3, [pc, #116]	; (8004050 <HAL_RCC_OscConfig+0x4f4>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0f0      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x46a>
 8003fe4:	e02f      	b.n	8004046 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fe6:	4b1c      	ldr	r3, [pc, #112]	; (8004058 <HAL_RCC_OscConfig+0x4fc>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fec:	f7fe ffe0 	bl	8002fb0 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff4:	f7fe ffdc 	bl	8002fb0 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e020      	b.n	8004048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004006:	4b12      	ldr	r3, [pc, #72]	; (8004050 <HAL_RCC_OscConfig+0x4f4>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1f0      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x498>
 8004012:	e018      	b.n	8004046 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e013      	b.n	8004048 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004020:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <HAL_RCC_OscConfig+0x4f4>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	429a      	cmp	r2, r3
 8004032:	d106      	bne.n	8004042 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800403e:	429a      	cmp	r2, r3
 8004040:	d001      	beq.n	8004046 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e000      	b.n	8004048 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	40021000 	.word	0x40021000
 8004054:	40007000 	.word	0x40007000
 8004058:	42420060 	.word	0x42420060

0800405c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e0d0      	b.n	8004212 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004070:	4b6a      	ldr	r3, [pc, #424]	; (800421c <HAL_RCC_ClockConfig+0x1c0>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d910      	bls.n	80040a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800407e:	4b67      	ldr	r3, [pc, #412]	; (800421c <HAL_RCC_ClockConfig+0x1c0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f023 0207 	bic.w	r2, r3, #7
 8004086:	4965      	ldr	r1, [pc, #404]	; (800421c <HAL_RCC_ClockConfig+0x1c0>)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	4313      	orrs	r3, r2
 800408c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800408e:	4b63      	ldr	r3, [pc, #396]	; (800421c <HAL_RCC_ClockConfig+0x1c0>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d001      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e0b8      	b.n	8004212 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d020      	beq.n	80040ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d005      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040b8:	4b59      	ldr	r3, [pc, #356]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	4a58      	ldr	r2, [pc, #352]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 80040be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80040c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0308 	and.w	r3, r3, #8
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040d0:	4b53      	ldr	r3, [pc, #332]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	4a52      	ldr	r2, [pc, #328]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 80040d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80040da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040dc:	4b50      	ldr	r3, [pc, #320]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	494d      	ldr	r1, [pc, #308]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d040      	beq.n	800417c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d107      	bne.n	8004112 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004102:	4b47      	ldr	r3, [pc, #284]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d115      	bne.n	800413a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e07f      	b.n	8004212 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2b02      	cmp	r3, #2
 8004118:	d107      	bne.n	800412a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800411a:	4b41      	ldr	r3, [pc, #260]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d109      	bne.n	800413a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e073      	b.n	8004212 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800412a:	4b3d      	ldr	r3, [pc, #244]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e06b      	b.n	8004212 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800413a:	4b39      	ldr	r3, [pc, #228]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f023 0203 	bic.w	r2, r3, #3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	4936      	ldr	r1, [pc, #216]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 8004148:	4313      	orrs	r3, r2
 800414a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800414c:	f7fe ff30 	bl	8002fb0 <HAL_GetTick>
 8004150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004152:	e00a      	b.n	800416a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004154:	f7fe ff2c 	bl	8002fb0 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004162:	4293      	cmp	r3, r2
 8004164:	d901      	bls.n	800416a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e053      	b.n	8004212 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800416a:	4b2d      	ldr	r3, [pc, #180]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f003 020c 	and.w	r2, r3, #12
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	429a      	cmp	r2, r3
 800417a:	d1eb      	bne.n	8004154 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800417c:	4b27      	ldr	r3, [pc, #156]	; (800421c <HAL_RCC_ClockConfig+0x1c0>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	429a      	cmp	r2, r3
 8004188:	d210      	bcs.n	80041ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800418a:	4b24      	ldr	r3, [pc, #144]	; (800421c <HAL_RCC_ClockConfig+0x1c0>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f023 0207 	bic.w	r2, r3, #7
 8004192:	4922      	ldr	r1, [pc, #136]	; (800421c <HAL_RCC_ClockConfig+0x1c0>)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	4313      	orrs	r3, r2
 8004198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800419a:	4b20      	ldr	r3, [pc, #128]	; (800421c <HAL_RCC_ClockConfig+0x1c0>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d001      	beq.n	80041ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e032      	b.n	8004212 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d008      	beq.n	80041ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041b8:	4b19      	ldr	r3, [pc, #100]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	4916      	ldr	r1, [pc, #88]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d009      	beq.n	80041ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041d6:	4b12      	ldr	r3, [pc, #72]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	490e      	ldr	r1, [pc, #56]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041ea:	f000 f859 	bl	80042a0 <HAL_RCC_GetSysClockFreq>
 80041ee:	4601      	mov	r1, r0
 80041f0:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	091b      	lsrs	r3, r3, #4
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	4a0a      	ldr	r2, [pc, #40]	; (8004224 <HAL_RCC_ClockConfig+0x1c8>)
 80041fc:	5cd3      	ldrb	r3, [r2, r3]
 80041fe:	fa21 f303 	lsr.w	r3, r1, r3
 8004202:	4a09      	ldr	r2, [pc, #36]	; (8004228 <HAL_RCC_ClockConfig+0x1cc>)
 8004204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004206:	4b09      	ldr	r3, [pc, #36]	; (800422c <HAL_RCC_ClockConfig+0x1d0>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f7fe fe8e 	bl	8002f2c <HAL_InitTick>

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	40022000 	.word	0x40022000
 8004220:	40021000 	.word	0x40021000
 8004224:	0800d924 	.word	0x0800d924
 8004228:	20000008 	.word	0x20000008
 800422c:	2000000c 	.word	0x2000000c

08004230 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b08a      	sub	sp, #40	; 0x28
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 800423c:	f107 0318 	add.w	r3, r7, #24
 8004240:	2200      	movs	r2, #0
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	605a      	str	r2, [r3, #4]
 8004246:	609a      	str	r2, [r3, #8]
 8004248:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 800424a:	2302      	movs	r3, #2
 800424c:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800424e:	2303      	movs	r3, #3
 8004250:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 8004252:	2300      	movs	r3, #0
 8004254:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8004256:	f44f 7380 	mov.w	r3, #256	; 0x100
 800425a:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 800425c:	4b0e      	ldr	r3, [pc, #56]	; (8004298 <HAL_RCC_MCOConfig+0x68>)
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	4a0d      	ldr	r2, [pc, #52]	; (8004298 <HAL_RCC_MCOConfig+0x68>)
 8004262:	f043 0304 	orr.w	r3, r3, #4
 8004266:	6193      	str	r3, [r2, #24]
 8004268:	4b0b      	ldr	r3, [pc, #44]	; (8004298 <HAL_RCC_MCOConfig+0x68>)
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	617b      	str	r3, [r7, #20]
 8004272:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8004274:	f107 0318 	add.w	r3, r7, #24
 8004278:	4619      	mov	r1, r3
 800427a:	4808      	ldr	r0, [pc, #32]	; (800429c <HAL_RCC_MCOConfig+0x6c>)
 800427c:	f7ff fad8 	bl	8003830 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8004280:	4b05      	ldr	r3, [pc, #20]	; (8004298 <HAL_RCC_MCOConfig+0x68>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004288:	4903      	ldr	r1, [pc, #12]	; (8004298 <HAL_RCC_MCOConfig+0x68>)
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	4313      	orrs	r3, r2
 800428e:	604b      	str	r3, [r1, #4]
}
 8004290:	bf00      	nop
 8004292:	3728      	adds	r7, #40	; 0x28
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40021000 	.word	0x40021000
 800429c:	40010800 	.word	0x40010800

080042a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042a0:	b490      	push	{r4, r7}
 80042a2:	b08a      	sub	sp, #40	; 0x28
 80042a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80042a6:	4b2a      	ldr	r3, [pc, #168]	; (8004350 <HAL_RCC_GetSysClockFreq+0xb0>)
 80042a8:	1d3c      	adds	r4, r7, #4
 80042aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80042ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80042b0:	4b28      	ldr	r3, [pc, #160]	; (8004354 <HAL_RCC_GetSysClockFreq+0xb4>)
 80042b2:	881b      	ldrh	r3, [r3, #0]
 80042b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042b6:	2300      	movs	r3, #0
 80042b8:	61fb      	str	r3, [r7, #28]
 80042ba:	2300      	movs	r3, #0
 80042bc:	61bb      	str	r3, [r7, #24]
 80042be:	2300      	movs	r3, #0
 80042c0:	627b      	str	r3, [r7, #36]	; 0x24
 80042c2:	2300      	movs	r3, #0
 80042c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80042c6:	2300      	movs	r3, #0
 80042c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80042ca:	4b23      	ldr	r3, [pc, #140]	; (8004358 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	f003 030c 	and.w	r3, r3, #12
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d002      	beq.n	80042e0 <HAL_RCC_GetSysClockFreq+0x40>
 80042da:	2b08      	cmp	r3, #8
 80042dc:	d003      	beq.n	80042e6 <HAL_RCC_GetSysClockFreq+0x46>
 80042de:	e02d      	b.n	800433c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042e0:	4b1e      	ldr	r3, [pc, #120]	; (800435c <HAL_RCC_GetSysClockFreq+0xbc>)
 80042e2:	623b      	str	r3, [r7, #32]
      break;
 80042e4:	e02d      	b.n	8004342 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	0c9b      	lsrs	r3, r3, #18
 80042ea:	f003 030f 	and.w	r3, r3, #15
 80042ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80042f2:	4413      	add	r3, r2
 80042f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80042f8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d013      	beq.n	800432c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004304:	4b14      	ldr	r3, [pc, #80]	; (8004358 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	0c5b      	lsrs	r3, r3, #17
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004312:	4413      	add	r3, r2
 8004314:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004318:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	4a0f      	ldr	r2, [pc, #60]	; (800435c <HAL_RCC_GetSysClockFreq+0xbc>)
 800431e:	fb02 f203 	mul.w	r2, r2, r3
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	fbb2 f3f3 	udiv	r3, r2, r3
 8004328:	627b      	str	r3, [r7, #36]	; 0x24
 800432a:	e004      	b.n	8004336 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	4a0c      	ldr	r2, [pc, #48]	; (8004360 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004330:	fb02 f303 	mul.w	r3, r2, r3
 8004334:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	623b      	str	r3, [r7, #32]
      break;
 800433a:	e002      	b.n	8004342 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800433c:	4b07      	ldr	r3, [pc, #28]	; (800435c <HAL_RCC_GetSysClockFreq+0xbc>)
 800433e:	623b      	str	r3, [r7, #32]
      break;
 8004340:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004342:	6a3b      	ldr	r3, [r7, #32]
}
 8004344:	4618      	mov	r0, r3
 8004346:	3728      	adds	r7, #40	; 0x28
 8004348:	46bd      	mov	sp, r7
 800434a:	bc90      	pop	{r4, r7}
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	0800d8ac 	.word	0x0800d8ac
 8004354:	0800d8bc 	.word	0x0800d8bc
 8004358:	40021000 	.word	0x40021000
 800435c:	007a1200 	.word	0x007a1200
 8004360:	003d0900 	.word	0x003d0900

08004364 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004368:	4b02      	ldr	r3, [pc, #8]	; (8004374 <HAL_RCC_GetHCLKFreq+0x10>)
 800436a:	681b      	ldr	r3, [r3, #0]
}
 800436c:	4618      	mov	r0, r3
 800436e:	46bd      	mov	sp, r7
 8004370:	bc80      	pop	{r7}
 8004372:	4770      	bx	lr
 8004374:	20000008 	.word	0x20000008

08004378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800437c:	f7ff fff2 	bl	8004364 <HAL_RCC_GetHCLKFreq>
 8004380:	4601      	mov	r1, r0
 8004382:	4b05      	ldr	r3, [pc, #20]	; (8004398 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	0adb      	lsrs	r3, r3, #11
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	4a03      	ldr	r2, [pc, #12]	; (800439c <HAL_RCC_GetPCLK2Freq+0x24>)
 800438e:	5cd3      	ldrb	r3, [r2, r3]
 8004390:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004394:	4618      	mov	r0, r3
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40021000 	.word	0x40021000
 800439c:	0800d934 	.word	0x0800d934

080043a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80043a8:	4b0a      	ldr	r3, [pc, #40]	; (80043d4 <RCC_Delay+0x34>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a0a      	ldr	r2, [pc, #40]	; (80043d8 <RCC_Delay+0x38>)
 80043ae:	fba2 2303 	umull	r2, r3, r2, r3
 80043b2:	0a5b      	lsrs	r3, r3, #9
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	fb02 f303 	mul.w	r3, r2, r3
 80043ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80043bc:	bf00      	nop
  }
  while (Delay --);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	1e5a      	subs	r2, r3, #1
 80043c2:	60fa      	str	r2, [r7, #12]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1f9      	bne.n	80043bc <RCC_Delay+0x1c>
}
 80043c8:	bf00      	nop
 80043ca:	3714      	adds	r7, #20
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bc80      	pop	{r7}
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	20000008 	.word	0x20000008
 80043d8:	10624dd3 	.word	0x10624dd3

080043dc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	613b      	str	r3, [r7, #16]
 80043e8:	2300      	movs	r3, #0
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d07d      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80043f8:	2300      	movs	r3, #0
 80043fa:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043fc:	4b4f      	ldr	r3, [pc, #316]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10d      	bne.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004408:	4b4c      	ldr	r3, [pc, #304]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	4a4b      	ldr	r2, [pc, #300]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800440e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004412:	61d3      	str	r3, [r2, #28]
 8004414:	4b49      	ldr	r3, [pc, #292]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800441c:	60bb      	str	r3, [r7, #8]
 800441e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004420:	2301      	movs	r3, #1
 8004422:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004424:	4b46      	ldr	r3, [pc, #280]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442c:	2b00      	cmp	r3, #0
 800442e:	d118      	bne.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004430:	4b43      	ldr	r3, [pc, #268]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a42      	ldr	r2, [pc, #264]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800443a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800443c:	f7fe fdb8 	bl	8002fb0 <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004442:	e008      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004444:	f7fe fdb4 	bl	8002fb0 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b64      	cmp	r3, #100	; 0x64
 8004450:	d901      	bls.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e06d      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004456:	4b3a      	ldr	r3, [pc, #232]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0f0      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004462:	4b36      	ldr	r3, [pc, #216]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800446a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d02e      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	429a      	cmp	r2, r3
 800447e:	d027      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004480:	4b2e      	ldr	r3, [pc, #184]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004488:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800448a:	4b2e      	ldr	r3, [pc, #184]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800448c:	2201      	movs	r2, #1
 800448e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004490:	4b2c      	ldr	r3, [pc, #176]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004496:	4a29      	ldr	r2, [pc, #164]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d014      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a6:	f7fe fd83 	bl	8002fb0 <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ac:	e00a      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ae:	f7fe fd7f 	bl	8002fb0 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044bc:	4293      	cmp	r3, r2
 80044be:	d901      	bls.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e036      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044c4:	4b1d      	ldr	r3, [pc, #116]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0ee      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044d0:	4b1a      	ldr	r3, [pc, #104]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	4917      	ldr	r1, [pc, #92]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80044e2:	7dfb      	ldrb	r3, [r7, #23]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d105      	bne.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044e8:	4b14      	ldr	r3, [pc, #80]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ea:	69db      	ldr	r3, [r3, #28]
 80044ec:	4a13      	ldr	r2, [pc, #76]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d008      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004500:	4b0e      	ldr	r3, [pc, #56]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	490b      	ldr	r1, [pc, #44]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800450e:	4313      	orrs	r3, r2
 8004510:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0310 	and.w	r3, r3, #16
 800451a:	2b00      	cmp	r3, #0
 800451c:	d008      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800451e:	4b07      	ldr	r3, [pc, #28]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	4904      	ldr	r1, [pc, #16]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800452c:	4313      	orrs	r3, r2
 800452e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3718      	adds	r7, #24
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	40021000 	.word	0x40021000
 8004540:	40007000 	.word	0x40007000
 8004544:	42420440 	.word	0x42420440

08004548 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004548:	b590      	push	{r4, r7, lr}
 800454a:	b08d      	sub	sp, #52	; 0x34
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004550:	4b55      	ldr	r3, [pc, #340]	; (80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004552:	f107 040c 	add.w	r4, r7, #12
 8004556:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004558:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800455c:	4b53      	ldr	r3, [pc, #332]	; (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800455e:	881b      	ldrh	r3, [r3, #0]
 8004560:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004562:	2300      	movs	r3, #0
 8004564:	627b      	str	r3, [r7, #36]	; 0x24
 8004566:	2300      	movs	r3, #0
 8004568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800456a:	2300      	movs	r3, #0
 800456c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	61fb      	str	r3, [r7, #28]
 8004572:	2300      	movs	r3, #0
 8004574:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b02      	cmp	r3, #2
 800457a:	d07f      	beq.n	800467c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800457c:	2b10      	cmp	r3, #16
 800457e:	d002      	beq.n	8004586 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8004580:	2b01      	cmp	r3, #1
 8004582:	d048      	beq.n	8004616 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004584:	e08b      	b.n	800469e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8004586:	4b4a      	ldr	r3, [pc, #296]	; (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800458c:	4b48      	ldr	r3, [pc, #288]	; (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d07f      	beq.n	8004698 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	0c9b      	lsrs	r3, r3, #18
 800459c:	f003 030f 	and.w	r3, r3, #15
 80045a0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80045a4:	4413      	add	r3, r2
 80045a6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80045aa:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d018      	beq.n	80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80045b6:	4b3e      	ldr	r3, [pc, #248]	; (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	0c5b      	lsrs	r3, r3, #17
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80045c4:	4413      	add	r3, r2
 80045c6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80045ca:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00d      	beq.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80045d6:	4a37      	ldr	r2, [pc, #220]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045da:	fbb2 f2f3 	udiv	r2, r2, r3
 80045de:	6a3b      	ldr	r3, [r7, #32]
 80045e0:	fb02 f303 	mul.w	r3, r2, r3
 80045e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045e6:	e004      	b.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80045e8:	6a3b      	ldr	r3, [r7, #32]
 80045ea:	4a33      	ldr	r2, [pc, #204]	; (80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80045ec:	fb02 f303 	mul.w	r3, r2, r3
 80045f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80045f2:	4b2f      	ldr	r3, [pc, #188]	; (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045fe:	d102      	bne.n	8004606 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8004600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004602:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004604:	e048      	b.n	8004698 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8004606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	4a2c      	ldr	r2, [pc, #176]	; (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800460c:	fba2 2303 	umull	r2, r3, r2, r3
 8004610:	085b      	lsrs	r3, r3, #1
 8004612:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004614:	e040      	b.n	8004698 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8004616:	4b26      	ldr	r3, [pc, #152]	; (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004626:	d108      	bne.n	800463a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8004632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004636:	62bb      	str	r3, [r7, #40]	; 0x28
 8004638:	e01f      	b.n	800467a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004644:	d109      	bne.n	800465a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8004646:	4b1a      	ldr	r3, [pc, #104]	; (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8004652:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004656:	62bb      	str	r3, [r7, #40]	; 0x28
 8004658:	e00f      	b.n	800467a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004660:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004664:	d11a      	bne.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004666:	4b12      	ldr	r3, [pc, #72]	; (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d014      	beq.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8004672:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004676:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004678:	e010      	b.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800467a:	e00f      	b.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800467c:	f7ff fe7c 	bl	8004378 <HAL_RCC_GetPCLK2Freq>
 8004680:	4602      	mov	r2, r0
 8004682:	4b0b      	ldr	r3, [pc, #44]	; (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	0b9b      	lsrs	r3, r3, #14
 8004688:	f003 0303 	and.w	r3, r3, #3
 800468c:	3301      	adds	r3, #1
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	fbb2 f3f3 	udiv	r3, r2, r3
 8004694:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004696:	e002      	b.n	800469e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8004698:	bf00      	nop
 800469a:	e000      	b.n	800469e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 800469c:	bf00      	nop
    }
  }
  return (frequency);
 800469e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3734      	adds	r7, #52	; 0x34
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd90      	pop	{r4, r7, pc}
 80046a8:	0800d8c0 	.word	0x0800d8c0
 80046ac:	0800d8d0 	.word	0x0800d8d0
 80046b0:	40021000 	.word	0x40021000
 80046b4:	007a1200 	.word	0x007a1200
 80046b8:	003d0900 	.word	0x003d0900
 80046bc:	aaaaaaab 	.word	0xaaaaaaab

080046c0 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e084      	b.n	80047e0 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	7c5b      	ldrb	r3, [r3, #17]
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d105      	bne.n	80046ec <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7fe f9f8 	bl	8002adc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 faf4 	bl	8004ce0 <HAL_RTC_WaitForSynchro>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d004      	beq.n	8004708 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2204      	movs	r2, #4
 8004702:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e06b      	b.n	80047e0 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 fbad 	bl	8004e68 <RTC_EnterInitMode>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d004      	beq.n	800471e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2204      	movs	r2, #4
 8004718:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e060      	b.n	80047e0 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0207 	bic.w	r2, r2, #7
 800472c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d005      	beq.n	8004742 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004736:	4b2c      	ldr	r3, [pc, #176]	; (80047e8 <HAL_RTC_Init+0x128>)
 8004738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473a:	4a2b      	ldr	r2, [pc, #172]	; (80047e8 <HAL_RTC_Init+0x128>)
 800473c:	f023 0301 	bic.w	r3, r3, #1
 8004740:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004742:	4b29      	ldr	r3, [pc, #164]	; (80047e8 <HAL_RTC_Init+0x128>)
 8004744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004746:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	4926      	ldr	r1, [pc, #152]	; (80047e8 <HAL_RTC_Init+0x128>)
 8004750:	4313      	orrs	r3, r2
 8004752:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475c:	d003      	beq.n	8004766 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	e00e      	b.n	8004784 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004766:	2001      	movs	r0, #1
 8004768:	f7ff feee 	bl	8004548 <HAL_RCCEx_GetPeriphCLKFreq>
 800476c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d104      	bne.n	800477e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2204      	movs	r2, #4
 8004778:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e030      	b.n	80047e0 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	3b01      	subs	r3, #1
 8004782:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f023 010f 	bic.w	r1, r3, #15
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	0c1a      	lsrs	r2, r3, #16
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	0c1b      	lsrs	r3, r3, #16
 80047a2:	041b      	lsls	r3, r3, #16
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	b291      	uxth	r1, r2
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	6812      	ldr	r2, [r2, #0]
 80047ac:	430b      	orrs	r3, r1
 80047ae:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 fb81 	bl	8004eb8 <RTC_ExitInitMode>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d004      	beq.n	80047c6 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2204      	movs	r2, #4
 80047c0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e00c      	b.n	80047e0 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80047de:	2300      	movs	r3, #0
  }
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	40006c00 	.word	0x40006c00

080047ec <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80047ec:	b590      	push	{r4, r7, lr}
 80047ee:	b087      	sub	sp, #28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	617b      	str	r3, [r7, #20]
 80047fc:	2300      	movs	r3, #0
 80047fe:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d002      	beq.n	800480c <HAL_RTC_SetTime+0x20>
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e080      	b.n	8004912 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	7c1b      	ldrb	r3, [r3, #16]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_RTC_SetTime+0x30>
 8004818:	2302      	movs	r3, #2
 800481a:	e07a      	b.n	8004912 <HAL_RTC_SetTime+0x126>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2201      	movs	r2, #1
 8004820:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2202      	movs	r2, #2
 8004826:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d113      	bne.n	8004856 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	461a      	mov	r2, r3
 8004834:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004838:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	785b      	ldrb	r3, [r3, #1]
 8004840:	4619      	mov	r1, r3
 8004842:	460b      	mov	r3, r1
 8004844:	011b      	lsls	r3, r3, #4
 8004846:	1a5b      	subs	r3, r3, r1
 8004848:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800484a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004850:	4413      	add	r3, r2
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	e01e      	b.n	8004894 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	4618      	mov	r0, r3
 800485c:	f000 fb71 	bl	8004f42 <RTC_Bcd2ToByte>
 8004860:	4603      	mov	r3, r0
 8004862:	461a      	mov	r2, r3
 8004864:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004868:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	785b      	ldrb	r3, [r3, #1]
 8004870:	4618      	mov	r0, r3
 8004872:	f000 fb66 	bl	8004f42 <RTC_Bcd2ToByte>
 8004876:	4603      	mov	r3, r0
 8004878:	461a      	mov	r2, r3
 800487a:	4613      	mov	r3, r2
 800487c:	011b      	lsls	r3, r3, #4
 800487e:	1a9b      	subs	r3, r3, r2
 8004880:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004882:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	789b      	ldrb	r3, [r3, #2]
 8004888:	4618      	mov	r0, r3
 800488a:	f000 fb5a 	bl	8004f42 <RTC_Bcd2ToByte>
 800488e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004890:	4423      	add	r3, r4
 8004892:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004894:	6979      	ldr	r1, [r7, #20]
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 fa7f 	bl	8004d9a <RTC_WriteTimeCounter>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d007      	beq.n	80048b2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2204      	movs	r2, #4
 80048a6:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e02f      	b.n	8004912 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 0205 	bic.w	r2, r2, #5
 80048c0:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 fa90 	bl	8004de8 <RTC_ReadAlarmCounter>
 80048c8:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d0:	d018      	beq.n	8004904 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d214      	bcs.n	8004904 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80048e0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80048e4:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80048e6:	6939      	ldr	r1, [r7, #16]
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 fa96 	bl	8004e1a <RTC_WriteAlarmCounter>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d007      	beq.n	8004904 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2204      	movs	r2, #4
 80048f8:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e006      	b.n	8004912 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2201      	movs	r2, #1
 8004908:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004910:	2300      	movs	r3, #0
  }
}
 8004912:	4618      	mov	r0, r3
 8004914:	371c      	adds	r7, #28
 8004916:	46bd      	mov	sp, r7
 8004918:	bd90      	pop	{r4, r7, pc}
	...

0800491c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b088      	sub	sp, #32
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8004928:	2300      	movs	r3, #0
 800492a:	61bb      	str	r3, [r7, #24]
 800492c:	2300      	movs	r3, #0
 800492e:	61fb      	str	r3, [r7, #28]
 8004930:	2300      	movs	r3, #0
 8004932:	617b      	str	r3, [r7, #20]
 8004934:	2300      	movs	r3, #0
 8004936:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d002      	beq.n	8004944 <HAL_RTC_GetTime+0x28>
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e0b5      	b.n	8004ab4 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f003 0304 	and.w	r3, r3, #4
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e0ac      	b.n	8004ab4 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 f9ed 	bl	8004d3a <RTC_ReadTimeCounter>
 8004960:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	4a55      	ldr	r2, [pc, #340]	; (8004abc <HAL_RTC_GetTime+0x1a0>)
 8004966:	fba2 2303 	umull	r2, r3, r2, r3
 800496a:	0adb      	lsrs	r3, r3, #11
 800496c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	4b52      	ldr	r3, [pc, #328]	; (8004abc <HAL_RTC_GetTime+0x1a0>)
 8004972:	fba3 1302 	umull	r1, r3, r3, r2
 8004976:	0adb      	lsrs	r3, r3, #11
 8004978:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800497c:	fb01 f303 	mul.w	r3, r1, r3
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	4a4f      	ldr	r2, [pc, #316]	; (8004ac0 <HAL_RTC_GetTime+0x1a4>)
 8004984:	fba2 2303 	umull	r2, r3, r2, r3
 8004988:	095b      	lsrs	r3, r3, #5
 800498a:	b2da      	uxtb	r2, r3
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	4a4a      	ldr	r2, [pc, #296]	; (8004abc <HAL_RTC_GetTime+0x1a0>)
 8004994:	fba2 1203 	umull	r1, r2, r2, r3
 8004998:	0ad2      	lsrs	r2, r2, #11
 800499a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800499e:	fb01 f202 	mul.w	r2, r1, r2
 80049a2:	1a9a      	subs	r2, r3, r2
 80049a4:	4b46      	ldr	r3, [pc, #280]	; (8004ac0 <HAL_RTC_GetTime+0x1a4>)
 80049a6:	fba3 1302 	umull	r1, r3, r3, r2
 80049aa:	0959      	lsrs	r1, r3, #5
 80049ac:	460b      	mov	r3, r1
 80049ae:	011b      	lsls	r3, r3, #4
 80049b0:	1a5b      	subs	r3, r3, r1
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	1ad1      	subs	r1, r2, r3
 80049b6:	b2ca      	uxtb	r2, r1
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	2b17      	cmp	r3, #23
 80049c0:	d955      	bls.n	8004a6e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	4a3f      	ldr	r2, [pc, #252]	; (8004ac4 <HAL_RTC_GetTime+0x1a8>)
 80049c6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ca:	091b      	lsrs	r3, r3, #4
 80049cc:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80049ce:	6939      	ldr	r1, [r7, #16]
 80049d0:	4b3c      	ldr	r3, [pc, #240]	; (8004ac4 <HAL_RTC_GetTime+0x1a8>)
 80049d2:	fba3 2301 	umull	r2, r3, r3, r1
 80049d6:	091a      	lsrs	r2, r3, #4
 80049d8:	4613      	mov	r3, r2
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	4413      	add	r3, r2
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	1aca      	subs	r2, r1, r3
 80049e2:	b2d2      	uxtb	r2, r2
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f000 f9fd 	bl	8004de8 <RTC_ReadAlarmCounter>
 80049ee:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f6:	d008      	beq.n	8004a0a <HAL_RTC_GetTime+0xee>
 80049f8:	69fa      	ldr	r2, [r7, #28]
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d904      	bls.n	8004a0a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8004a00:	69fa      	ldr	r2, [r7, #28]
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	61fb      	str	r3, [r7, #28]
 8004a08:	e002      	b.n	8004a10 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8004a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a0e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	4a2d      	ldr	r2, [pc, #180]	; (8004ac8 <HAL_RTC_GetTime+0x1ac>)
 8004a14:	fb02 f303 	mul.w	r3, r2, r3
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004a1e:	69b9      	ldr	r1, [r7, #24]
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 f9ba 	bl	8004d9a <RTC_WriteTimeCounter>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e041      	b.n	8004ab4 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a36:	d00c      	beq.n	8004a52 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8004a38:	69fa      	ldr	r2, [r7, #28]
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004a40:	69f9      	ldr	r1, [r7, #28]
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 f9e9 	bl	8004e1a <RTC_WriteAlarmCounter>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00a      	beq.n	8004a64 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e030      	b.n	8004ab4 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004a52:	69f9      	ldr	r1, [r7, #28]
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 f9e0 	bl	8004e1a <RTC_WriteAlarmCounter>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e027      	b.n	8004ab4 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8004a64:	6979      	ldr	r1, [r7, #20]
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f000 fa88 	bl	8004f7c <RTC_DateUpdate>
 8004a6c:	e003      	b.n	8004a76 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d01a      	beq.n	8004ab2 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 fa41 	bl	8004f08 <RTC_ByteToBcd2>
 8004a86:	4603      	mov	r3, r0
 8004a88:	461a      	mov	r2, r3
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	785b      	ldrb	r3, [r3, #1]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 fa38 	bl	8004f08 <RTC_ByteToBcd2>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	789b      	ldrb	r3, [r3, #2]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 fa2f 	bl	8004f08 <RTC_ByteToBcd2>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	461a      	mov	r2, r3
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3720      	adds	r7, #32
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	91a2b3c5 	.word	0x91a2b3c5
 8004ac0:	88888889 	.word	0x88888889
 8004ac4:	aaaaaaab 	.word	0xaaaaaaab
 8004ac8:	00015180 	.word	0x00015180

08004acc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b088      	sub	sp, #32
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	61fb      	str	r3, [r7, #28]
 8004adc:	2300      	movs	r3, #0
 8004ade:	61bb      	str	r3, [r7, #24]
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d002      	beq.n	8004af0 <HAL_RTC_SetDate+0x24>
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e097      	b.n	8004c24 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	7c1b      	ldrb	r3, [r3, #16]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d101      	bne.n	8004b00 <HAL_RTC_SetDate+0x34>
 8004afc:	2302      	movs	r3, #2
 8004afe:	e091      	b.n	8004c24 <HAL_RTC_SetDate+0x158>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2201      	movs	r2, #1
 8004b04:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2202      	movs	r2, #2
 8004b0a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10c      	bne.n	8004b2c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	78da      	ldrb	r2, [r3, #3]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	785a      	ldrb	r2, [r3, #1]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	789a      	ldrb	r2, [r3, #2]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	739a      	strb	r2, [r3, #14]
 8004b2a:	e01a      	b.n	8004b62 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	78db      	ldrb	r3, [r3, #3]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 fa06 	bl	8004f42 <RTC_Bcd2ToByte>
 8004b36:	4603      	mov	r3, r0
 8004b38:	461a      	mov	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	785b      	ldrb	r3, [r3, #1]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 f9fd 	bl	8004f42 <RTC_Bcd2ToByte>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	789b      	ldrb	r3, [r3, #2]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 f9f4 	bl	8004f42 <RTC_Bcd2ToByte>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	7bdb      	ldrb	r3, [r3, #15]
 8004b66:	4618      	mov	r0, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	7b59      	ldrb	r1, [r3, #13]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	7b9b      	ldrb	r3, [r3, #14]
 8004b70:	461a      	mov	r2, r3
 8004b72:	f000 fadf 	bl	8005134 <RTC_WeekDayNum>
 8004b76:	4603      	mov	r3, r0
 8004b78:	461a      	mov	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	7b1a      	ldrb	r2, [r3, #12]
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 f8d7 	bl	8004d3a <RTC_ReadTimeCounter>
 8004b8c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	4a26      	ldr	r2, [pc, #152]	; (8004c2c <HAL_RTC_SetDate+0x160>)
 8004b92:	fba2 2303 	umull	r2, r3, r2, r3
 8004b96:	0adb      	lsrs	r3, r3, #11
 8004b98:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	2b18      	cmp	r3, #24
 8004b9e:	d93a      	bls.n	8004c16 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	4a23      	ldr	r2, [pc, #140]	; (8004c30 <HAL_RTC_SetDate+0x164>)
 8004ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba8:	091b      	lsrs	r3, r3, #4
 8004baa:	4a22      	ldr	r2, [pc, #136]	; (8004c34 <HAL_RTC_SetDate+0x168>)
 8004bac:	fb02 f303 	mul.w	r3, r2, r3
 8004bb0:	69fa      	ldr	r2, [r7, #28]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004bb6:	69f9      	ldr	r1, [r7, #28]
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f000 f8ee 	bl	8004d9a <RTC_WriteTimeCounter>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d007      	beq.n	8004bd4 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2204      	movs	r2, #4
 8004bc8:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e027      	b.n	8004c24 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 f907 	bl	8004de8 <RTC_ReadAlarmCounter>
 8004bda:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be2:	d018      	beq.n	8004c16 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d214      	bcs.n	8004c16 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004bf2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004bf6:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004bf8:	69b9      	ldr	r1, [r7, #24]
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f000 f90d 	bl	8004e1a <RTC_WriteAlarmCounter>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d007      	beq.n	8004c16 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2204      	movs	r2, #4
 8004c0a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e006      	b.n	8004c24 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3720      	adds	r7, #32
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	91a2b3c5 	.word	0x91a2b3c5
 8004c30:	aaaaaaab 	.word	0xaaaaaaab
 8004c34:	00015180 	.word	0x00015180

08004c38 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8004c44:	f107 0314 	add.w	r3, r7, #20
 8004c48:	2100      	movs	r1, #0
 8004c4a:	460a      	mov	r2, r1
 8004c4c:	801a      	strh	r2, [r3, #0]
 8004c4e:	460a      	mov	r2, r1
 8004c50:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d002      	beq.n	8004c5e <HAL_RTC_GetDate+0x26>
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e03a      	b.n	8004cd8 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8004c62:	f107 0314 	add.w	r3, r7, #20
 8004c66:	2200      	movs	r2, #0
 8004c68:	4619      	mov	r1, r3
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f7ff fe56 	bl	800491c <HAL_RTC_GetTime>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e02e      	b.n	8004cd8 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	7b1a      	ldrb	r2, [r3, #12]
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	7bda      	ldrb	r2, [r3, #15]
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	7b5a      	ldrb	r2, [r3, #13]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	7b9a      	ldrb	r2, [r3, #14]
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d01a      	beq.n	8004cd6 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	78db      	ldrb	r3, [r3, #3]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f000 f92f 	bl	8004f08 <RTC_ByteToBcd2>
 8004caa:	4603      	mov	r3, r0
 8004cac:	461a      	mov	r2, r3
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	785b      	ldrb	r3, [r3, #1]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 f926 	bl	8004f08 <RTC_ByteToBcd2>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	789b      	ldrb	r3, [r3, #2]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f000 f91d 	bl	8004f08 <RTC_ByteToBcd2>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e01d      	b.n	8004d32 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 0208 	bic.w	r2, r2, #8
 8004d04:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004d06:	f7fe f953 	bl	8002fb0 <HAL_GetTick>
 8004d0a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004d0c:	e009      	b.n	8004d22 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004d0e:	f7fe f94f 	bl	8002fb0 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d1c:	d901      	bls.n	8004d22 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e007      	b.n	8004d32 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f003 0308 	and.w	r3, r3, #8
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d0ee      	beq.n	8004d0e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b087      	sub	sp, #28
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	827b      	strh	r3, [r7, #18]
 8004d46:	2300      	movs	r3, #0
 8004d48:	823b      	strh	r3, [r7, #16]
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004d6a:	8a7a      	ldrh	r2, [r7, #18]
 8004d6c:	8a3b      	ldrh	r3, [r7, #16]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d008      	beq.n	8004d84 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004d72:	8a3b      	ldrh	r3, [r7, #16]
 8004d74:	041a      	lsls	r2, r3, #16
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	617b      	str	r3, [r7, #20]
 8004d82:	e004      	b.n	8004d8e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004d84:	8a7b      	ldrh	r3, [r7, #18]
 8004d86:	041a      	lsls	r2, r3, #16
 8004d88:	89fb      	ldrh	r3, [r7, #14]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8004d8e:	697b      	ldr	r3, [r7, #20]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	371c      	adds	r7, #28
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bc80      	pop	{r7}
 8004d98:	4770      	bx	lr

08004d9a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b084      	sub	sp, #16
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
 8004da2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004da4:	2300      	movs	r3, #0
 8004da6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f85d 	bl	8004e68 <RTC_EnterInitMode>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	73fb      	strb	r3, [r7, #15]
 8004db8:	e011      	b.n	8004dde <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	0c12      	lsrs	r2, r2, #16
 8004dc2:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	b292      	uxth	r2, r2
 8004dcc:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f872 	bl	8004eb8 <RTC_ExitInitMode>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004df0:	2300      	movs	r3, #0
 8004df2:	81fb      	strh	r3, [r7, #14]
 8004df4:	2300      	movs	r3, #0
 8004df6:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004e08:	89fb      	ldrh	r3, [r7, #14]
 8004e0a:	041a      	lsls	r2, r3, #16
 8004e0c:	89bb      	ldrh	r3, [r7, #12]
 8004e0e:	4313      	orrs	r3, r2
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3714      	adds	r7, #20
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bc80      	pop	{r7}
 8004e18:	4770      	bx	lr

08004e1a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b084      	sub	sp, #16
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
 8004e22:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e24:	2300      	movs	r3, #0
 8004e26:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 f81d 	bl	8004e68 <RTC_EnterInitMode>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d002      	beq.n	8004e3a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	73fb      	strb	r3, [r7, #15]
 8004e38:	e011      	b.n	8004e5e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	0c12      	lsrs	r2, r2, #16
 8004e42:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	b292      	uxth	r2, r2
 8004e4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f832 	bl	8004eb8 <RTC_ExitInitMode>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e70:	2300      	movs	r3, #0
 8004e72:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004e74:	f7fe f89c 	bl	8002fb0 <HAL_GetTick>
 8004e78:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004e7a:	e009      	b.n	8004e90 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004e7c:	f7fe f898 	bl	8002fb0 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e8a:	d901      	bls.n	8004e90 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e00f      	b.n	8004eb0 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f003 0320 	and.w	r3, r3, #32
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0ee      	beq.n	8004e7c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f042 0210 	orr.w	r2, r2, #16
 8004eac:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f022 0210 	bic.w	r2, r2, #16
 8004ed2:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004ed4:	f7fe f86c 	bl	8002fb0 <HAL_GetTick>
 8004ed8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004eda:	e009      	b.n	8004ef0 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004edc:	f7fe f868 	bl	8002fb0 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004eea:	d901      	bls.n	8004ef0 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e007      	b.n	8004f00 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f003 0320 	and.w	r3, r3, #32
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d0ee      	beq.n	8004edc <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	4603      	mov	r3, r0
 8004f10:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8004f16:	e005      	b.n	8004f24 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004f1e:	79fb      	ldrb	r3, [r7, #7]
 8004f20:	3b0a      	subs	r3, #10
 8004f22:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8004f24:	79fb      	ldrb	r3, [r7, #7]
 8004f26:	2b09      	cmp	r3, #9
 8004f28:	d8f6      	bhi.n	8004f18 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	011b      	lsls	r3, r3, #4
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	79fb      	ldrb	r3, [r7, #7]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	b2db      	uxtb	r3, r3
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3714      	adds	r7, #20
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bc80      	pop	{r7}
 8004f40:	4770      	bx	lr

08004f42 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b085      	sub	sp, #20
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	4603      	mov	r3, r0
 8004f4a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004f50:	79fb      	ldrb	r3, [r7, #7]
 8004f52:	091b      	lsrs	r3, r3, #4
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	461a      	mov	r2, r3
 8004f58:	4613      	mov	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004f62:	79fb      	ldrb	r3, [r7, #7]
 8004f64:	f003 030f 	and.w	r3, r3, #15
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	4413      	add	r3, r2
 8004f70:	b2db      	uxtb	r3, r3
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bc80      	pop	{r7}
 8004f7a:	4770      	bx	lr

08004f7c <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8004f86:	2300      	movs	r3, #0
 8004f88:	617b      	str	r3, [r7, #20]
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	613b      	str	r3, [r7, #16]
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8004f92:	2300      	movs	r3, #0
 8004f94:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	7bdb      	ldrb	r3, [r3, #15]
 8004f9a:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	7b5b      	ldrb	r3, [r3, #13]
 8004fa0:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	7b9b      	ldrb	r3, [r3, #14]
 8004fa6:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8004fa8:	2300      	movs	r3, #0
 8004faa:	60bb      	str	r3, [r7, #8]
 8004fac:	e06f      	b.n	800508e <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d011      	beq.n	8004fd8 <RTC_DateUpdate+0x5c>
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	2b03      	cmp	r3, #3
 8004fb8:	d00e      	beq.n	8004fd8 <RTC_DateUpdate+0x5c>
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	2b05      	cmp	r3, #5
 8004fbe:	d00b      	beq.n	8004fd8 <RTC_DateUpdate+0x5c>
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	2b07      	cmp	r3, #7
 8004fc4:	d008      	beq.n	8004fd8 <RTC_DateUpdate+0x5c>
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	d005      	beq.n	8004fd8 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	2b0a      	cmp	r3, #10
 8004fd0:	d002      	beq.n	8004fd8 <RTC_DateUpdate+0x5c>
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	2b0c      	cmp	r3, #12
 8004fd6:	d117      	bne.n	8005008 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2b1e      	cmp	r3, #30
 8004fdc:	d803      	bhi.n	8004fe6 <RTC_DateUpdate+0x6a>
      {
        day++;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004fe4:	e050      	b.n	8005088 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	2b0c      	cmp	r3, #12
 8004fea:	d005      	beq.n	8004ff8 <RTC_DateUpdate+0x7c>
        {
          month++;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004ff6:	e047      	b.n	8005088 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	60fb      	str	r3, [r7, #12]
          year++;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	3301      	adds	r3, #1
 8005004:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8005006:	e03f      	b.n	8005088 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	2b04      	cmp	r3, #4
 800500c:	d008      	beq.n	8005020 <RTC_DateUpdate+0xa4>
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	2b06      	cmp	r3, #6
 8005012:	d005      	beq.n	8005020 <RTC_DateUpdate+0xa4>
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	2b09      	cmp	r3, #9
 8005018:	d002      	beq.n	8005020 <RTC_DateUpdate+0xa4>
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	2b0b      	cmp	r3, #11
 800501e:	d10c      	bne.n	800503a <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2b1d      	cmp	r3, #29
 8005024:	d803      	bhi.n	800502e <RTC_DateUpdate+0xb2>
      {
        day++;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	3301      	adds	r3, #1
 800502a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800502c:	e02c      	b.n	8005088 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	3301      	adds	r3, #1
 8005032:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005034:	2301      	movs	r3, #1
 8005036:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005038:	e026      	b.n	8005088 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	2b02      	cmp	r3, #2
 800503e:	d123      	bne.n	8005088 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2b1b      	cmp	r3, #27
 8005044:	d803      	bhi.n	800504e <RTC_DateUpdate+0xd2>
      {
        day++;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	3301      	adds	r3, #1
 800504a:	60fb      	str	r3, [r7, #12]
 800504c:	e01c      	b.n	8005088 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2b1c      	cmp	r3, #28
 8005052:	d111      	bne.n	8005078 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	b29b      	uxth	r3, r3
 8005058:	4618      	mov	r0, r3
 800505a:	f000 f839 	bl	80050d0 <RTC_IsLeapYear>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d003      	beq.n	800506c <RTC_DateUpdate+0xf0>
        {
          day++;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	3301      	adds	r3, #1
 8005068:	60fb      	str	r3, [r7, #12]
 800506a:	e00d      	b.n	8005088 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	3301      	adds	r3, #1
 8005070:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005072:	2301      	movs	r3, #1
 8005074:	60fb      	str	r3, [r7, #12]
 8005076:	e007      	b.n	8005088 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2b1d      	cmp	r3, #29
 800507c:	d104      	bne.n	8005088 <RTC_DateUpdate+0x10c>
      {
        month++;
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	3301      	adds	r3, #1
 8005082:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005084:	2301      	movs	r3, #1
 8005086:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	3301      	adds	r3, #1
 800508c:	60bb      	str	r3, [r7, #8]
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	429a      	cmp	r2, r3
 8005094:	d38b      	bcc.n	8004fae <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	b2da      	uxtb	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	b2da      	uxtb	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	b2d2      	uxtb	r2, r2
 80050b6:	4619      	mov	r1, r3
 80050b8:	6978      	ldr	r0, [r7, #20]
 80050ba:	f000 f83b 	bl	8005134 <RTC_WeekDayNum>
 80050be:	4603      	mov	r3, r0
 80050c0:	461a      	mov	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	731a      	strb	r2, [r3, #12]
}
 80050c6:	bf00      	nop
 80050c8:	3718      	adds	r7, #24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
	...

080050d0 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	4603      	mov	r3, r0
 80050d8:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80050da:	88fb      	ldrh	r3, [r7, #6]
 80050dc:	f003 0303 	and.w	r3, r3, #3
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	e01d      	b.n	8005126 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80050ea:	88fb      	ldrh	r3, [r7, #6]
 80050ec:	4a10      	ldr	r2, [pc, #64]	; (8005130 <RTC_IsLeapYear+0x60>)
 80050ee:	fba2 1203 	umull	r1, r2, r2, r3
 80050f2:	0952      	lsrs	r2, r2, #5
 80050f4:	2164      	movs	r1, #100	; 0x64
 80050f6:	fb01 f202 	mul.w	r2, r1, r2
 80050fa:	1a9b      	subs	r3, r3, r2
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005102:	2301      	movs	r3, #1
 8005104:	e00f      	b.n	8005126 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8005106:	88fb      	ldrh	r3, [r7, #6]
 8005108:	4a09      	ldr	r2, [pc, #36]	; (8005130 <RTC_IsLeapYear+0x60>)
 800510a:	fba2 1203 	umull	r1, r2, r2, r3
 800510e:	09d2      	lsrs	r2, r2, #7
 8005110:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005114:	fb01 f202 	mul.w	r2, r1, r2
 8005118:	1a9b      	subs	r3, r3, r2
 800511a:	b29b      	uxth	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	d101      	bne.n	8005124 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005120:	2301      	movs	r3, #1
 8005122:	e000      	b.n	8005126 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8005124:	2300      	movs	r3, #0
  }
}
 8005126:	4618      	mov	r0, r3
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	bc80      	pop	{r7}
 800512e:	4770      	bx	lr
 8005130:	51eb851f 	.word	0x51eb851f

08005134 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	460b      	mov	r3, r1
 800513e:	70fb      	strb	r3, [r7, #3]
 8005140:	4613      	mov	r3, r2
 8005142:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	60bb      	str	r3, [r7, #8]
 8005148:	2300      	movs	r3, #0
 800514a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005152:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005154:	78fb      	ldrb	r3, [r7, #3]
 8005156:	2b02      	cmp	r3, #2
 8005158:	d82d      	bhi.n	80051b6 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800515a:	78fa      	ldrb	r2, [r7, #3]
 800515c:	4613      	mov	r3, r2
 800515e:	005b      	lsls	r3, r3, #1
 8005160:	4413      	add	r3, r2
 8005162:	00db      	lsls	r3, r3, #3
 8005164:	1a9b      	subs	r3, r3, r2
 8005166:	4a2c      	ldr	r2, [pc, #176]	; (8005218 <RTC_WeekDayNum+0xe4>)
 8005168:	fba2 2303 	umull	r2, r3, r2, r3
 800516c:	085a      	lsrs	r2, r3, #1
 800516e:	78bb      	ldrb	r3, [r7, #2]
 8005170:	441a      	add	r2, r3
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	441a      	add	r2, r3
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	3b01      	subs	r3, #1
 800517a:	089b      	lsrs	r3, r3, #2
 800517c:	441a      	add	r2, r3
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	3b01      	subs	r3, #1
 8005182:	4926      	ldr	r1, [pc, #152]	; (800521c <RTC_WeekDayNum+0xe8>)
 8005184:	fba1 1303 	umull	r1, r3, r1, r3
 8005188:	095b      	lsrs	r3, r3, #5
 800518a:	1ad2      	subs	r2, r2, r3
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	3b01      	subs	r3, #1
 8005190:	4922      	ldr	r1, [pc, #136]	; (800521c <RTC_WeekDayNum+0xe8>)
 8005192:	fba1 1303 	umull	r1, r3, r1, r3
 8005196:	09db      	lsrs	r3, r3, #7
 8005198:	4413      	add	r3, r2
 800519a:	1d1a      	adds	r2, r3, #4
 800519c:	4b20      	ldr	r3, [pc, #128]	; (8005220 <RTC_WeekDayNum+0xec>)
 800519e:	fba3 1302 	umull	r1, r3, r3, r2
 80051a2:	1ad1      	subs	r1, r2, r3
 80051a4:	0849      	lsrs	r1, r1, #1
 80051a6:	440b      	add	r3, r1
 80051a8:	0899      	lsrs	r1, r3, #2
 80051aa:	460b      	mov	r3, r1
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	1a5b      	subs	r3, r3, r1
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	60fb      	str	r3, [r7, #12]
 80051b4:	e029      	b.n	800520a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80051b6:	78fa      	ldrb	r2, [r7, #3]
 80051b8:	4613      	mov	r3, r2
 80051ba:	005b      	lsls	r3, r3, #1
 80051bc:	4413      	add	r3, r2
 80051be:	00db      	lsls	r3, r3, #3
 80051c0:	1a9b      	subs	r3, r3, r2
 80051c2:	4a15      	ldr	r2, [pc, #84]	; (8005218 <RTC_WeekDayNum+0xe4>)
 80051c4:	fba2 2303 	umull	r2, r3, r2, r3
 80051c8:	085a      	lsrs	r2, r3, #1
 80051ca:	78bb      	ldrb	r3, [r7, #2]
 80051cc:	441a      	add	r2, r3
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	441a      	add	r2, r3
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	089b      	lsrs	r3, r3, #2
 80051d6:	441a      	add	r2, r3
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	4910      	ldr	r1, [pc, #64]	; (800521c <RTC_WeekDayNum+0xe8>)
 80051dc:	fba1 1303 	umull	r1, r3, r1, r3
 80051e0:	095b      	lsrs	r3, r3, #5
 80051e2:	1ad2      	subs	r2, r2, r3
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	490d      	ldr	r1, [pc, #52]	; (800521c <RTC_WeekDayNum+0xe8>)
 80051e8:	fba1 1303 	umull	r1, r3, r1, r3
 80051ec:	09db      	lsrs	r3, r3, #7
 80051ee:	4413      	add	r3, r2
 80051f0:	1c9a      	adds	r2, r3, #2
 80051f2:	4b0b      	ldr	r3, [pc, #44]	; (8005220 <RTC_WeekDayNum+0xec>)
 80051f4:	fba3 1302 	umull	r1, r3, r3, r2
 80051f8:	1ad1      	subs	r1, r2, r3
 80051fa:	0849      	lsrs	r1, r1, #1
 80051fc:	440b      	add	r3, r1
 80051fe:	0899      	lsrs	r1, r3, #2
 8005200:	460b      	mov	r3, r1
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	1a5b      	subs	r3, r3, r1
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	b2db      	uxtb	r3, r3
}
 800520e:	4618      	mov	r0, r3
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	bc80      	pop	{r7}
 8005216:	4770      	bx	lr
 8005218:	38e38e39 	.word	0x38e38e39
 800521c:	51eb851f 	.word	0x51eb851f
 8005220:	24924925 	.word	0x24924925

08005224 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e053      	b.n	80052de <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	d106      	bne.n	8005256 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f7fd fc67 	bl	8002b24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2202      	movs	r2, #2
 800525a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800526c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	431a      	orrs	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	431a      	orrs	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	431a      	orrs	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	431a      	orrs	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005292:	431a      	orrs	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	69db      	ldr	r3, [r3, #28]
 8005298:	431a      	orrs	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	ea42 0103 	orr.w	r1, r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	0c1a      	lsrs	r2, r3, #16
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f002 0204 	and.w	r2, r2, #4
 80052bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	69da      	ldr	r2, [r3, #28]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b088      	sub	sp, #32
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	60f8      	str	r0, [r7, #12]
 80052ee:	60b9      	str	r1, [r7, #8]
 80052f0:	603b      	str	r3, [r7, #0]
 80052f2:	4613      	mov	r3, r2
 80052f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052f6:	2300      	movs	r3, #0
 80052f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005300:	2b01      	cmp	r3, #1
 8005302:	d101      	bne.n	8005308 <HAL_SPI_Transmit+0x22>
 8005304:	2302      	movs	r3, #2
 8005306:	e11e      	b.n	8005546 <HAL_SPI_Transmit+0x260>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005310:	f7fd fe4e 	bl	8002fb0 <HAL_GetTick>
 8005314:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005316:	88fb      	ldrh	r3, [r7, #6]
 8005318:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b01      	cmp	r3, #1
 8005324:	d002      	beq.n	800532c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005326:	2302      	movs	r3, #2
 8005328:	77fb      	strb	r3, [r7, #31]
    goto error;
 800532a:	e103      	b.n	8005534 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d002      	beq.n	8005338 <HAL_SPI_Transmit+0x52>
 8005332:	88fb      	ldrh	r3, [r7, #6]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d102      	bne.n	800533e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800533c:	e0fa      	b.n	8005534 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2203      	movs	r2, #3
 8005342:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	88fa      	ldrh	r2, [r7, #6]
 8005356:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	88fa      	ldrh	r2, [r7, #6]
 800535c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005384:	d107      	bne.n	8005396 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005394:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a0:	2b40      	cmp	r3, #64	; 0x40
 80053a2:	d007      	beq.n	80053b4 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053bc:	d14b      	bne.n	8005456 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d002      	beq.n	80053cc <HAL_SPI_Transmit+0xe6>
 80053c6:	8afb      	ldrh	r3, [r7, #22]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d13e      	bne.n	800544a <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d0:	881a      	ldrh	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053dc:	1c9a      	adds	r2, r3, #2
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	3b01      	subs	r3, #1
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80053f0:	e02b      	b.n	800544a <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d112      	bne.n	8005426 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005404:	881a      	ldrh	r2, [r3, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005410:	1c9a      	adds	r2, r3, #2
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800541a:	b29b      	uxth	r3, r3
 800541c:	3b01      	subs	r3, #1
 800541e:	b29a      	uxth	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	86da      	strh	r2, [r3, #54]	; 0x36
 8005424:	e011      	b.n	800544a <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005426:	f7fd fdc3 	bl	8002fb0 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	429a      	cmp	r2, r3
 8005434:	d803      	bhi.n	800543e <HAL_SPI_Transmit+0x158>
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800543c:	d102      	bne.n	8005444 <HAL_SPI_Transmit+0x15e>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d102      	bne.n	800544a <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005448:	e074      	b.n	8005534 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800544e:	b29b      	uxth	r3, r3
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1ce      	bne.n	80053f2 <HAL_SPI_Transmit+0x10c>
 8005454:	e04c      	b.n	80054f0 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d002      	beq.n	8005464 <HAL_SPI_Transmit+0x17e>
 800545e:	8afb      	ldrh	r3, [r7, #22]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d140      	bne.n	80054e6 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	330c      	adds	r3, #12
 800546e:	7812      	ldrb	r2, [r2, #0]
 8005470:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005476:	1c5a      	adds	r2, r3, #1
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005480:	b29b      	uxth	r3, r3
 8005482:	3b01      	subs	r3, #1
 8005484:	b29a      	uxth	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800548a:	e02c      	b.n	80054e6 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	2b02      	cmp	r3, #2
 8005498:	d113      	bne.n	80054c2 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	330c      	adds	r3, #12
 80054a4:	7812      	ldrb	r2, [r2, #0]
 80054a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ac:	1c5a      	adds	r2, r3, #1
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	3b01      	subs	r3, #1
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	86da      	strh	r2, [r3, #54]	; 0x36
 80054c0:	e011      	b.n	80054e6 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054c2:	f7fd fd75 	bl	8002fb0 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	683a      	ldr	r2, [r7, #0]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d803      	bhi.n	80054da <HAL_SPI_Transmit+0x1f4>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d8:	d102      	bne.n	80054e0 <HAL_SPI_Transmit+0x1fa>
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d102      	bne.n	80054e6 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80054e4:	e026      	b.n	8005534 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1cd      	bne.n	800548c <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	6839      	ldr	r1, [r7, #0]
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f000 fb9e 	bl	8005c36 <SPI_EndRxTxTransaction>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d002      	beq.n	8005506 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2220      	movs	r2, #32
 8005504:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10a      	bne.n	8005524 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800550e:	2300      	movs	r3, #0
 8005510:	613b      	str	r3, [r7, #16]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	613b      	str	r3, [r7, #16]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	613b      	str	r3, [r7, #16]
 8005522:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	77fb      	strb	r3, [r7, #31]
 8005530:	e000      	b.n	8005534 <HAL_SPI_Transmit+0x24e>
  }

error:
 8005532:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005544:	7ffb      	ldrb	r3, [r7, #31]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3720      	adds	r7, #32
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b088      	sub	sp, #32
 8005552:	af02      	add	r7, sp, #8
 8005554:	60f8      	str	r0, [r7, #12]
 8005556:	60b9      	str	r1, [r7, #8]
 8005558:	603b      	str	r3, [r7, #0]
 800555a:	4613      	mov	r3, r2
 800555c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800555e:	2300      	movs	r3, #0
 8005560:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800556a:	d112      	bne.n	8005592 <HAL_SPI_Receive+0x44>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10e      	bne.n	8005592 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2204      	movs	r2, #4
 8005578:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800557c:	88fa      	ldrh	r2, [r7, #6]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	4613      	mov	r3, r2
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	68b9      	ldr	r1, [r7, #8]
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f000 f8e9 	bl	8005760 <HAL_SPI_TransmitReceive>
 800558e:	4603      	mov	r3, r0
 8005590:	e0e2      	b.n	8005758 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005598:	2b01      	cmp	r3, #1
 800559a:	d101      	bne.n	80055a0 <HAL_SPI_Receive+0x52>
 800559c:	2302      	movs	r3, #2
 800559e:	e0db      	b.n	8005758 <HAL_SPI_Receive+0x20a>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055a8:	f7fd fd02 	bl	8002fb0 <HAL_GetTick>
 80055ac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d002      	beq.n	80055c0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80055ba:	2302      	movs	r3, #2
 80055bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055be:	e0c2      	b.n	8005746 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d002      	beq.n	80055cc <HAL_SPI_Receive+0x7e>
 80055c6:	88fb      	ldrh	r3, [r7, #6]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d102      	bne.n	80055d2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055d0:	e0b9      	b.n	8005746 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2204      	movs	r2, #4
 80055d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	88fa      	ldrh	r2, [r7, #6]
 80055ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	88fa      	ldrh	r2, [r7, #6]
 80055f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005618:	d107      	bne.n	800562a <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005628:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005634:	2b40      	cmp	r3, #64	; 0x40
 8005636:	d007      	beq.n	8005648 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005646:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d162      	bne.n	8005716 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005650:	e02e      	b.n	80056b0 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	2b01      	cmp	r3, #1
 800565e:	d115      	bne.n	800568c <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f103 020c 	add.w	r2, r3, #12
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566c:	7812      	ldrb	r2, [r2, #0]
 800566e:	b2d2      	uxtb	r2, r2
 8005670:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005676:	1c5a      	adds	r2, r3, #1
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005680:	b29b      	uxth	r3, r3
 8005682:	3b01      	subs	r3, #1
 8005684:	b29a      	uxth	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	87da      	strh	r2, [r3, #62]	; 0x3e
 800568a:	e011      	b.n	80056b0 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800568c:	f7fd fc90 	bl	8002fb0 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	429a      	cmp	r2, r3
 800569a:	d803      	bhi.n	80056a4 <HAL_SPI_Receive+0x156>
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a2:	d102      	bne.n	80056aa <HAL_SPI_Receive+0x15c>
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d102      	bne.n	80056b0 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	75fb      	strb	r3, [r7, #23]
          goto error;
 80056ae:	e04a      	b.n	8005746 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1cb      	bne.n	8005652 <HAL_SPI_Receive+0x104>
 80056ba:	e031      	b.n	8005720 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d113      	bne.n	80056f2 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68da      	ldr	r2, [r3, #12]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d4:	b292      	uxth	r2, r2
 80056d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056dc:	1c9a      	adds	r2, r3, #2
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	3b01      	subs	r3, #1
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056f0:	e011      	b.n	8005716 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056f2:	f7fd fc5d 	bl	8002fb0 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d803      	bhi.n	800570a <HAL_SPI_Receive+0x1bc>
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005708:	d102      	bne.n	8005710 <HAL_SPI_Receive+0x1c2>
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d102      	bne.n	8005716 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005714:	e017      	b.n	8005746 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800571a:	b29b      	uxth	r3, r3
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1cd      	bne.n	80056bc <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	6839      	ldr	r1, [r7, #0]
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 fa34 	bl	8005b92 <SPI_EndRxTransaction>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2220      	movs	r2, #32
 8005734:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800573a:	2b00      	cmp	r3, #0
 800573c:	d002      	beq.n	8005744 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	75fb      	strb	r3, [r7, #23]
 8005742:	e000      	b.n	8005746 <HAL_SPI_Receive+0x1f8>
  }

error :
 8005744:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005756:	7dfb      	ldrb	r3, [r7, #23]
}
 8005758:	4618      	mov	r0, r3
 800575a:	3718      	adds	r7, #24
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b08c      	sub	sp, #48	; 0x30
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
 800576c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800576e:	2301      	movs	r3, #1
 8005770:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005772:	2300      	movs	r3, #0
 8005774:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800577e:	2b01      	cmp	r3, #1
 8005780:	d101      	bne.n	8005786 <HAL_SPI_TransmitReceive+0x26>
 8005782:	2302      	movs	r3, #2
 8005784:	e18a      	b.n	8005a9c <HAL_SPI_TransmitReceive+0x33c>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800578e:	f7fd fc0f 	bl	8002fb0 <HAL_GetTick>
 8005792:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800579a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80057a4:	887b      	ldrh	r3, [r7, #2]
 80057a6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80057a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d00f      	beq.n	80057d0 <HAL_SPI_TransmitReceive+0x70>
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057b6:	d107      	bne.n	80057c8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d103      	bne.n	80057c8 <HAL_SPI_TransmitReceive+0x68>
 80057c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057c4:	2b04      	cmp	r3, #4
 80057c6:	d003      	beq.n	80057d0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80057c8:	2302      	movs	r3, #2
 80057ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80057ce:	e15b      	b.n	8005a88 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d005      	beq.n	80057e2 <HAL_SPI_TransmitReceive+0x82>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <HAL_SPI_TransmitReceive+0x82>
 80057dc:	887b      	ldrh	r3, [r7, #2]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d103      	bne.n	80057ea <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80057e8:	e14e      	b.n	8005a88 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	d003      	beq.n	80057fe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2205      	movs	r2, #5
 80057fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	887a      	ldrh	r2, [r7, #2]
 800580e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	887a      	ldrh	r2, [r7, #2]
 8005814:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	887a      	ldrh	r2, [r7, #2]
 8005820:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	887a      	ldrh	r2, [r7, #2]
 8005826:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583e:	2b40      	cmp	r3, #64	; 0x40
 8005840:	d007      	beq.n	8005852 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005850:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800585a:	d178      	bne.n	800594e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d002      	beq.n	800586a <HAL_SPI_TransmitReceive+0x10a>
 8005864:	8b7b      	ldrh	r3, [r7, #26]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d166      	bne.n	8005938 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586e:	881a      	ldrh	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587a:	1c9a      	adds	r2, r3, #2
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005884:	b29b      	uxth	r3, r3
 8005886:	3b01      	subs	r3, #1
 8005888:	b29a      	uxth	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800588e:	e053      	b.n	8005938 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b02      	cmp	r3, #2
 800589c:	d11b      	bne.n	80058d6 <HAL_SPI_TransmitReceive+0x176>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d016      	beq.n	80058d6 <HAL_SPI_TransmitReceive+0x176>
 80058a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d113      	bne.n	80058d6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b2:	881a      	ldrh	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058be:	1c9a      	adds	r2, r3, #2
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	3b01      	subs	r3, #1
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058d2:	2300      	movs	r3, #0
 80058d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d119      	bne.n	8005918 <HAL_SPI_TransmitReceive+0x1b8>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d014      	beq.n	8005918 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68da      	ldr	r2, [r3, #12]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f8:	b292      	uxth	r2, r2
 80058fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005900:	1c9a      	adds	r2, r3, #2
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800590a:	b29b      	uxth	r3, r3
 800590c:	3b01      	subs	r3, #1
 800590e:	b29a      	uxth	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005914:	2301      	movs	r3, #1
 8005916:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005918:	f7fd fb4a 	bl	8002fb0 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005924:	429a      	cmp	r2, r3
 8005926:	d807      	bhi.n	8005938 <HAL_SPI_TransmitReceive+0x1d8>
 8005928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592e:	d003      	beq.n	8005938 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005936:	e0a7      	b.n	8005a88 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800593c:	b29b      	uxth	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1a6      	bne.n	8005890 <HAL_SPI_TransmitReceive+0x130>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005946:	b29b      	uxth	r3, r3
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1a1      	bne.n	8005890 <HAL_SPI_TransmitReceive+0x130>
 800594c:	e07c      	b.n	8005a48 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d002      	beq.n	800595c <HAL_SPI_TransmitReceive+0x1fc>
 8005956:	8b7b      	ldrh	r3, [r7, #26]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d16b      	bne.n	8005a34 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	330c      	adds	r3, #12
 8005966:	7812      	ldrb	r2, [r2, #0]
 8005968:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596e:	1c5a      	adds	r2, r3, #1
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005978:	b29b      	uxth	r3, r3
 800597a:	3b01      	subs	r3, #1
 800597c:	b29a      	uxth	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005982:	e057      	b.n	8005a34 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b02      	cmp	r3, #2
 8005990:	d11c      	bne.n	80059cc <HAL_SPI_TransmitReceive+0x26c>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005996:	b29b      	uxth	r3, r3
 8005998:	2b00      	cmp	r3, #0
 800599a:	d017      	beq.n	80059cc <HAL_SPI_TransmitReceive+0x26c>
 800599c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d114      	bne.n	80059cc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	330c      	adds	r3, #12
 80059ac:	7812      	ldrb	r2, [r2, #0]
 80059ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059be:	b29b      	uxth	r3, r3
 80059c0:	3b01      	subs	r3, #1
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d119      	bne.n	8005a0e <HAL_SPI_TransmitReceive+0x2ae>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d014      	beq.n	8005a0e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68da      	ldr	r2, [r3, #12]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f6:	1c5a      	adds	r2, r3, #1
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	3b01      	subs	r3, #1
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a0e:	f7fd facf 	bl	8002fb0 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d803      	bhi.n	8005a26 <HAL_SPI_TransmitReceive+0x2c6>
 8005a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a24:	d102      	bne.n	8005a2c <HAL_SPI_TransmitReceive+0x2cc>
 8005a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d103      	bne.n	8005a34 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005a32:	e029      	b.n	8005a88 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1a2      	bne.n	8005984 <HAL_SPI_TransmitReceive+0x224>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d19d      	bne.n	8005984 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f000 f8f2 	bl	8005c36 <SPI_EndRxTxTransaction>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d006      	beq.n	8005a66 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2220      	movs	r2, #32
 8005a62:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005a64:	e010      	b.n	8005a88 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10b      	bne.n	8005a86 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a6e:	2300      	movs	r3, #0
 8005a70:	617b      	str	r3, [r7, #20]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	617b      	str	r3, [r7, #20]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	617b      	str	r3, [r7, #20]
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	e000      	b.n	8005a88 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005a86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3730      	adds	r7, #48	; 0x30
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ab2:	b2db      	uxtb	r3, r3
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bc80      	pop	{r7}
 8005abc:	4770      	bx	lr

08005abe <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b084      	sub	sp, #16
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	60f8      	str	r0, [r7, #12]
 8005ac6:	60b9      	str	r1, [r7, #8]
 8005ac8:	603b      	str	r3, [r7, #0]
 8005aca:	4613      	mov	r3, r2
 8005acc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ace:	e04c      	b.n	8005b6a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad6:	d048      	beq.n	8005b6a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005ad8:	f7fd fa6a 	bl	8002fb0 <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d902      	bls.n	8005aee <SPI_WaitFlagStateUntilTimeout+0x30>
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d13d      	bne.n	8005b6a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	685a      	ldr	r2, [r3, #4]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005afc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b06:	d111      	bne.n	8005b2c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b10:	d004      	beq.n	8005b1c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b1a:	d107      	bne.n	8005b2c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b34:	d10f      	bne.n	8005b56 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b44:	601a      	str	r2, [r3, #0]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e00f      	b.n	8005b8a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	4013      	ands	r3, r2
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	bf0c      	ite	eq
 8005b7a:	2301      	moveq	r3, #1
 8005b7c:	2300      	movne	r3, #0
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	461a      	mov	r2, r3
 8005b82:	79fb      	ldrb	r3, [r7, #7]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d1a3      	bne.n	8005ad0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b086      	sub	sp, #24
 8005b96:	af02      	add	r7, sp, #8
 8005b98:	60f8      	str	r0, [r7, #12]
 8005b9a:	60b9      	str	r1, [r7, #8]
 8005b9c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ba6:	d111      	bne.n	8005bcc <SPI_EndRxTransaction+0x3a>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bb0:	d004      	beq.n	8005bbc <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bba:	d107      	bne.n	8005bcc <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bca:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bd4:	d117      	bne.n	8005c06 <SPI_EndRxTransaction+0x74>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bde:	d112      	bne.n	8005c06 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	2200      	movs	r2, #0
 8005be8:	2101      	movs	r1, #1
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f7ff ff67 	bl	8005abe <SPI_WaitFlagStateUntilTimeout>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d01a      	beq.n	8005c2c <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bfa:	f043 0220 	orr.w	r2, r3, #32
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e013      	b.n	8005c2e <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	2180      	movs	r1, #128	; 0x80
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f7ff ff54 	bl	8005abe <SPI_WaitFlagStateUntilTimeout>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d007      	beq.n	8005c2c <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c20:	f043 0220 	orr.w	r2, r3, #32
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e000      	b.n	8005c2e <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b086      	sub	sp, #24
 8005c3a:	af02      	add	r7, sp, #8
 8005c3c:	60f8      	str	r0, [r7, #12]
 8005c3e:	60b9      	str	r1, [r7, #8]
 8005c40:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	2180      	movs	r1, #128	; 0x80
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f7ff ff36 	bl	8005abe <SPI_WaitFlagStateUntilTimeout>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d007      	beq.n	8005c68 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5c:	f043 0220 	orr.w	r2, r3, #32
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e000      	b.n	8005c6a <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b082      	sub	sp, #8
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e01d      	b.n	8005cc0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d106      	bne.n	8005c9e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f7fc ffcd 	bl	8002c38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2202      	movs	r2, #2
 8005ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	3304      	adds	r3, #4
 8005cae:	4619      	mov	r1, r3
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	f000 fad5 	bl	8006260 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3708      	adds	r7, #8
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68da      	ldr	r2, [r3, #12]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f042 0201 	orr.w	r2, r2, #1
 8005cde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f003 0307 	and.w	r3, r3, #7
 8005cea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2b06      	cmp	r3, #6
 8005cf0:	d007      	beq.n	8005d02 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f042 0201 	orr.w	r2, r2, #1
 8005d00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3714      	adds	r7, #20
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bc80      	pop	{r7}
 8005d0c:	4770      	bx	lr

08005d0e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b086      	sub	sp, #24
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
 8005d16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d101      	bne.n	8005d22 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e07f      	b.n	8005e22 <HAL_TIM_Encoder_Init+0x114>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d106      	bne.n	8005d3c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f7fc ff40 	bl	8002bbc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	6812      	ldr	r2, [r2, #0]
 8005d4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d52:	f023 0307 	bic.w	r3, r3, #7
 8005d56:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	3304      	adds	r3, #4
 8005d60:	4619      	mov	r1, r3
 8005d62:	4610      	mov	r0, r2
 8005d64:	f000 fa7c 	bl	8006260 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d90:	f023 0303 	bic.w	r3, r3, #3
 8005d94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	689a      	ldr	r2, [r3, #8]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	021b      	lsls	r3, r3, #8
 8005da0:	4313      	orrs	r3, r2
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005dae:	f023 030c 	bic.w	r3, r3, #12
 8005db2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	68da      	ldr	r2, [r3, #12]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	69db      	ldr	r3, [r3, #28]
 8005dc8:	021b      	lsls	r3, r3, #8
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	011a      	lsls	r2, r3, #4
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	031b      	lsls	r3, r3, #12
 8005dde:	4313      	orrs	r3, r2
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005dec:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	685a      	ldr	r2, [r3, #4]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	011b      	lsls	r3, r3, #4
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3718      	adds	r7, #24
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b082      	sub	sp, #8
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
 8005e32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d002      	beq.n	8005e40 <HAL_TIM_Encoder_Start+0x16>
 8005e3a:	2b04      	cmp	r3, #4
 8005e3c:	d008      	beq.n	8005e50 <HAL_TIM_Encoder_Start+0x26>
 8005e3e:	e00f      	b.n	8005e60 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2201      	movs	r2, #1
 8005e46:	2100      	movs	r1, #0
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 fb01 	bl	8006450 <TIM_CCxChannelCmd>
      break;
 8005e4e:	e016      	b.n	8005e7e <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2201      	movs	r2, #1
 8005e56:	2104      	movs	r1, #4
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f000 faf9 	bl	8006450 <TIM_CCxChannelCmd>
      break;
 8005e5e:	e00e      	b.n	8005e7e <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2201      	movs	r2, #1
 8005e66:	2100      	movs	r1, #0
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f000 faf1 	bl	8006450 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2201      	movs	r2, #1
 8005e74:	2104      	movs	r1, #4
 8005e76:	4618      	mov	r0, r3
 8005e78:	f000 faea 	bl	8006450 <TIM_CCxChannelCmd>
      break;
 8005e7c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f042 0201 	orr.w	r2, r2, #1
 8005e8c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3708      	adds	r7, #8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d122      	bne.n	8005ef4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	f003 0302 	and.w	r3, r3, #2
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d11b      	bne.n	8005ef4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f06f 0202 	mvn.w	r2, #2
 8005ec4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	f003 0303 	and.w	r3, r3, #3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d003      	beq.n	8005ee2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f9a4 	bl	8006228 <HAL_TIM_IC_CaptureCallback>
 8005ee0:	e005      	b.n	8005eee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f997 	bl	8006216 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 f9a6 	bl	800623a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	f003 0304 	and.w	r3, r3, #4
 8005efe:	2b04      	cmp	r3, #4
 8005f00:	d122      	bne.n	8005f48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f003 0304 	and.w	r3, r3, #4
 8005f0c:	2b04      	cmp	r3, #4
 8005f0e:	d11b      	bne.n	8005f48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f06f 0204 	mvn.w	r2, #4
 8005f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d003      	beq.n	8005f36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f97a 	bl	8006228 <HAL_TIM_IC_CaptureCallback>
 8005f34:	e005      	b.n	8005f42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f96d 	bl	8006216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f97c 	bl	800623a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f003 0308 	and.w	r3, r3, #8
 8005f52:	2b08      	cmp	r3, #8
 8005f54:	d122      	bne.n	8005f9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	f003 0308 	and.w	r3, r3, #8
 8005f60:	2b08      	cmp	r3, #8
 8005f62:	d11b      	bne.n	8005f9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f06f 0208 	mvn.w	r2, #8
 8005f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2204      	movs	r2, #4
 8005f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	f003 0303 	and.w	r3, r3, #3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d003      	beq.n	8005f8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f950 	bl	8006228 <HAL_TIM_IC_CaptureCallback>
 8005f88:	e005      	b.n	8005f96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f943 	bl	8006216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 f952 	bl	800623a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	f003 0310 	and.w	r3, r3, #16
 8005fa6:	2b10      	cmp	r3, #16
 8005fa8:	d122      	bne.n	8005ff0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f003 0310 	and.w	r3, r3, #16
 8005fb4:	2b10      	cmp	r3, #16
 8005fb6:	d11b      	bne.n	8005ff0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f06f 0210 	mvn.w	r2, #16
 8005fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2208      	movs	r2, #8
 8005fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f926 	bl	8006228 <HAL_TIM_IC_CaptureCallback>
 8005fdc:	e005      	b.n	8005fea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f919 	bl	8006216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 f928 	bl	800623a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d10e      	bne.n	800601c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	2b01      	cmp	r3, #1
 800600a:	d107      	bne.n	800601c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f06f 0201 	mvn.w	r2, #1
 8006014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7fb feba 	bl	8001d90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006026:	2b80      	cmp	r3, #128	; 0x80
 8006028:	d10e      	bne.n	8006048 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006034:	2b80      	cmp	r3, #128	; 0x80
 8006036:	d107      	bne.n	8006048 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fa75 	bl	8006532 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006052:	2b40      	cmp	r3, #64	; 0x40
 8006054:	d10e      	bne.n	8006074 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006060:	2b40      	cmp	r3, #64	; 0x40
 8006062:	d107      	bne.n	8006074 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800606c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f8ec 	bl	800624c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	f003 0320 	and.w	r3, r3, #32
 800607e:	2b20      	cmp	r3, #32
 8006080:	d10e      	bne.n	80060a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	f003 0320 	and.w	r3, r3, #32
 800608c:	2b20      	cmp	r3, #32
 800608e:	d107      	bne.n	80060a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f06f 0220 	mvn.w	r2, #32
 8006098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fa40 	bl	8006520 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060a0:	bf00      	nop
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d101      	bne.n	80060c0 <HAL_TIM_ConfigClockSource+0x18>
 80060bc:	2302      	movs	r3, #2
 80060be:	e0a6      	b.n	800620e <HAL_TIM_ConfigClockSource+0x166>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2202      	movs	r2, #2
 80060cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80060de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2b40      	cmp	r3, #64	; 0x40
 80060f6:	d067      	beq.n	80061c8 <HAL_TIM_ConfigClockSource+0x120>
 80060f8:	2b40      	cmp	r3, #64	; 0x40
 80060fa:	d80b      	bhi.n	8006114 <HAL_TIM_ConfigClockSource+0x6c>
 80060fc:	2b10      	cmp	r3, #16
 80060fe:	d073      	beq.n	80061e8 <HAL_TIM_ConfigClockSource+0x140>
 8006100:	2b10      	cmp	r3, #16
 8006102:	d802      	bhi.n	800610a <HAL_TIM_ConfigClockSource+0x62>
 8006104:	2b00      	cmp	r3, #0
 8006106:	d06f      	beq.n	80061e8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006108:	e078      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800610a:	2b20      	cmp	r3, #32
 800610c:	d06c      	beq.n	80061e8 <HAL_TIM_ConfigClockSource+0x140>
 800610e:	2b30      	cmp	r3, #48	; 0x30
 8006110:	d06a      	beq.n	80061e8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006112:	e073      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006114:	2b70      	cmp	r3, #112	; 0x70
 8006116:	d00d      	beq.n	8006134 <HAL_TIM_ConfigClockSource+0x8c>
 8006118:	2b70      	cmp	r3, #112	; 0x70
 800611a:	d804      	bhi.n	8006126 <HAL_TIM_ConfigClockSource+0x7e>
 800611c:	2b50      	cmp	r3, #80	; 0x50
 800611e:	d033      	beq.n	8006188 <HAL_TIM_ConfigClockSource+0xe0>
 8006120:	2b60      	cmp	r3, #96	; 0x60
 8006122:	d041      	beq.n	80061a8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006124:	e06a      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800612a:	d066      	beq.n	80061fa <HAL_TIM_ConfigClockSource+0x152>
 800612c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006130:	d017      	beq.n	8006162 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006132:	e063      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6818      	ldr	r0, [r3, #0]
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	6899      	ldr	r1, [r3, #8]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	685a      	ldr	r2, [r3, #4]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f000 f965 	bl	8006412 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006156:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	609a      	str	r2, [r3, #8]
      break;
 8006160:	e04c      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6818      	ldr	r0, [r3, #0]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	6899      	ldr	r1, [r3, #8]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	f000 f94e 	bl	8006412 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	689a      	ldr	r2, [r3, #8]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006184:	609a      	str	r2, [r3, #8]
      break;
 8006186:	e039      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6818      	ldr	r0, [r3, #0]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	6859      	ldr	r1, [r3, #4]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	461a      	mov	r2, r3
 8006196:	f000 f8c5 	bl	8006324 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2150      	movs	r1, #80	; 0x50
 80061a0:	4618      	mov	r0, r3
 80061a2:	f000 f91c 	bl	80063de <TIM_ITRx_SetConfig>
      break;
 80061a6:	e029      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6818      	ldr	r0, [r3, #0]
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	6859      	ldr	r1, [r3, #4]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	461a      	mov	r2, r3
 80061b6:	f000 f8e3 	bl	8006380 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2160      	movs	r1, #96	; 0x60
 80061c0:	4618      	mov	r0, r3
 80061c2:	f000 f90c 	bl	80063de <TIM_ITRx_SetConfig>
      break;
 80061c6:	e019      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6818      	ldr	r0, [r3, #0]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	6859      	ldr	r1, [r3, #4]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	461a      	mov	r2, r3
 80061d6:	f000 f8a5 	bl	8006324 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2140      	movs	r1, #64	; 0x40
 80061e0:	4618      	mov	r0, r3
 80061e2:	f000 f8fc 	bl	80063de <TIM_ITRx_SetConfig>
      break;
 80061e6:	e009      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4619      	mov	r1, r3
 80061f2:	4610      	mov	r0, r2
 80061f4:	f000 f8f3 	bl	80063de <TIM_ITRx_SetConfig>
      break;
 80061f8:	e000      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80061fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006216:	b480      	push	{r7}
 8006218:	b083      	sub	sp, #12
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800621e:	bf00      	nop
 8006220:	370c      	adds	r7, #12
 8006222:	46bd      	mov	sp, r7
 8006224:	bc80      	pop	{r7}
 8006226:	4770      	bx	lr

08006228 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	bc80      	pop	{r7}
 8006238:	4770      	bx	lr

0800623a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800623a:	b480      	push	{r7}
 800623c:	b083      	sub	sp, #12
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006242:	bf00      	nop
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	bc80      	pop	{r7}
 800624a:	4770      	bx	lr

0800624c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	bc80      	pop	{r7}
 800625c:	4770      	bx	lr
	...

08006260 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a29      	ldr	r2, [pc, #164]	; (8006318 <TIM_Base_SetConfig+0xb8>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d00b      	beq.n	8006290 <TIM_Base_SetConfig+0x30>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800627e:	d007      	beq.n	8006290 <TIM_Base_SetConfig+0x30>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a26      	ldr	r2, [pc, #152]	; (800631c <TIM_Base_SetConfig+0xbc>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d003      	beq.n	8006290 <TIM_Base_SetConfig+0x30>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a25      	ldr	r2, [pc, #148]	; (8006320 <TIM_Base_SetConfig+0xc0>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d108      	bne.n	80062a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	4313      	orrs	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a1c      	ldr	r2, [pc, #112]	; (8006318 <TIM_Base_SetConfig+0xb8>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d00b      	beq.n	80062c2 <TIM_Base_SetConfig+0x62>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062b0:	d007      	beq.n	80062c2 <TIM_Base_SetConfig+0x62>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a19      	ldr	r2, [pc, #100]	; (800631c <TIM_Base_SetConfig+0xbc>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d003      	beq.n	80062c2 <TIM_Base_SetConfig+0x62>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a18      	ldr	r2, [pc, #96]	; (8006320 <TIM_Base_SetConfig+0xc0>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d108      	bne.n	80062d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	4313      	orrs	r3, r2
 80062e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	689a      	ldr	r2, [r3, #8]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a07      	ldr	r2, [pc, #28]	; (8006318 <TIM_Base_SetConfig+0xb8>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d103      	bne.n	8006308 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	691a      	ldr	r2, [r3, #16]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	615a      	str	r2, [r3, #20]
}
 800630e:	bf00      	nop
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	bc80      	pop	{r7}
 8006316:	4770      	bx	lr
 8006318:	40012c00 	.word	0x40012c00
 800631c:	40000400 	.word	0x40000400
 8006320:	40000800 	.word	0x40000800

08006324 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006324:	b480      	push	{r7}
 8006326:	b087      	sub	sp, #28
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6a1b      	ldr	r3, [r3, #32]
 8006334:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	f023 0201 	bic.w	r2, r3, #1
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800634e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	011b      	lsls	r3, r3, #4
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	4313      	orrs	r3, r2
 8006358:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f023 030a 	bic.w	r3, r3, #10
 8006360:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	4313      	orrs	r3, r2
 8006368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	621a      	str	r2, [r3, #32]
}
 8006376:	bf00      	nop
 8006378:	371c      	adds	r7, #28
 800637a:	46bd      	mov	sp, r7
 800637c:	bc80      	pop	{r7}
 800637e:	4770      	bx	lr

08006380 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006380:	b480      	push	{r7}
 8006382:	b087      	sub	sp, #28
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6a1b      	ldr	r3, [r3, #32]
 8006390:	f023 0210 	bic.w	r2, r3, #16
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	031b      	lsls	r3, r3, #12
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	011b      	lsls	r3, r3, #4
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	693a      	ldr	r2, [r7, #16]
 80063d2:	621a      	str	r2, [r3, #32]
}
 80063d4:	bf00      	nop
 80063d6:	371c      	adds	r7, #28
 80063d8:	46bd      	mov	sp, r7
 80063da:	bc80      	pop	{r7}
 80063dc:	4770      	bx	lr

080063de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063de:	b480      	push	{r7}
 80063e0:	b085      	sub	sp, #20
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
 80063e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063f6:	683a      	ldr	r2, [r7, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	f043 0307 	orr.w	r3, r3, #7
 8006400:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	609a      	str	r2, [r3, #8]
}
 8006408:	bf00      	nop
 800640a:	3714      	adds	r7, #20
 800640c:	46bd      	mov	sp, r7
 800640e:	bc80      	pop	{r7}
 8006410:	4770      	bx	lr

08006412 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006412:	b480      	push	{r7}
 8006414:	b087      	sub	sp, #28
 8006416:	af00      	add	r7, sp, #0
 8006418:	60f8      	str	r0, [r7, #12]
 800641a:	60b9      	str	r1, [r7, #8]
 800641c:	607a      	str	r2, [r7, #4]
 800641e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800642c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	021a      	lsls	r2, r3, #8
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	431a      	orrs	r2, r3
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	4313      	orrs	r3, r2
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	4313      	orrs	r3, r2
 800643e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	609a      	str	r2, [r3, #8]
}
 8006446:	bf00      	nop
 8006448:	371c      	adds	r7, #28
 800644a:	46bd      	mov	sp, r7
 800644c:	bc80      	pop	{r7}
 800644e:	4770      	bx	lr

08006450 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006450:	b480      	push	{r7}
 8006452:	b087      	sub	sp, #28
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	f003 031f 	and.w	r3, r3, #31
 8006462:	2201      	movs	r2, #1
 8006464:	fa02 f303 	lsl.w	r3, r2, r3
 8006468:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6a1a      	ldr	r2, [r3, #32]
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	43db      	mvns	r3, r3
 8006472:	401a      	ands	r2, r3
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6a1a      	ldr	r2, [r3, #32]
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	f003 031f 	and.w	r3, r3, #31
 8006482:	6879      	ldr	r1, [r7, #4]
 8006484:	fa01 f303 	lsl.w	r3, r1, r3
 8006488:	431a      	orrs	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	621a      	str	r2, [r3, #32]
}
 800648e:	bf00      	nop
 8006490:	371c      	adds	r7, #28
 8006492:	46bd      	mov	sp, r7
 8006494:	bc80      	pop	{r7}
 8006496:	4770      	bx	lr

08006498 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d101      	bne.n	80064b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064ac:	2302      	movs	r3, #2
 80064ae:	e032      	b.n	8006516 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	4313      	orrs	r3, r2
 80064e0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064e8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	68ba      	ldr	r2, [r7, #8]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	bc80      	pop	{r7}
 800651e:	4770      	bx	lr

08006520 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	bc80      	pop	{r7}
 8006530:	4770      	bx	lr

08006532 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006532:	b480      	push	{r7}
 8006534:	b083      	sub	sp, #12
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800653a:	bf00      	nop
 800653c:	370c      	adds	r7, #12
 800653e:	46bd      	mov	sp, r7
 8006540:	bc80      	pop	{r7}
 8006542:	4770      	bx	lr

08006544 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8006544:	b580      	push	{r7, lr}
 8006546:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006548:	4904      	ldr	r1, [pc, #16]	; (800655c <MX_FATFS_Init+0x18>)
 800654a:	4805      	ldr	r0, [pc, #20]	; (8006560 <MX_FATFS_Init+0x1c>)
 800654c:	f002 ffbe 	bl	80094cc <FATFS_LinkDriver>
 8006550:	4603      	mov	r3, r0
 8006552:	461a      	mov	r2, r3
 8006554:	4b03      	ldr	r3, [pc, #12]	; (8006564 <MX_FATFS_Init+0x20>)
 8006556:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8006558:	bf00      	nop
 800655a:	bd80      	pop	{r7, pc}
 800655c:	20000d8c 	.word	0x20000d8c
 8006560:	20000014 	.word	0x20000014
 8006564:	20000d90 	.word	0x20000d90

08006568 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006568:	b480      	push	{r7}
 800656a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800656c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800656e:	4618      	mov	r0, r3
 8006570:	46bd      	mov	sp, r7
 8006572:	bc80      	pop	{r7}
 8006574:	4770      	bx	lr

08006576 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b082      	sub	sp, #8
 800657a:	af00      	add	r7, sp, #0
 800657c:	4603      	mov	r3, r0
 800657e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8006580:	79fb      	ldrb	r3, [r7, #7]
 8006582:	4618      	mov	r0, r3
 8006584:	f7fb f8c4 	bl	8001710 <SD_disk_initialize>
 8006588:	4603      	mov	r3, r0
 800658a:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800658c:	4618      	mov	r0, r3
 800658e:	3708      	adds	r7, #8
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	4603      	mov	r3, r0
 800659c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800659e:	79fb      	ldrb	r3, [r7, #7]
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7fb f99f 	bl	80018e4 <SD_disk_status>
 80065a6:	4603      	mov	r3, r0
 80065a8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b084      	sub	sp, #16
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
 80065bc:	603b      	str	r3, [r7, #0]
 80065be:	4603      	mov	r3, r0
 80065c0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 80065c2:	7bf8      	ldrb	r0, [r7, #15]
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	68b9      	ldr	r1, [r7, #8]
 80065ca:	f7fb f99f 	bl	800190c <SD_disk_read>
 80065ce:	4603      	mov	r3, r0
 80065d0:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 80065da:	b580      	push	{r7, lr}
 80065dc:	b084      	sub	sp, #16
 80065de:	af00      	add	r7, sp, #0
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
 80065e4:	603b      	str	r3, [r7, #0]
 80065e6:	4603      	mov	r3, r0
 80065e8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80065ea:	7bf8      	ldrb	r0, [r7, #15]
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	68b9      	ldr	r1, [r7, #8]
 80065f2:	f7fb f9f5 	bl	80019e0 <SD_disk_write>
 80065f6:	4603      	mov	r3, r0
 80065f8:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b082      	sub	sp, #8
 8006606:	af00      	add	r7, sp, #0
 8006608:	4603      	mov	r3, r0
 800660a:	603a      	str	r2, [r7, #0]
 800660c:	71fb      	strb	r3, [r7, #7]
 800660e:	460b      	mov	r3, r1
 8006610:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8006612:	79fb      	ldrb	r3, [r7, #7]
 8006614:	79b9      	ldrb	r1, [r7, #6]
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	4618      	mov	r0, r3
 800661a:	f7fb fa65 	bl	8001ae8 <SD_disk_ioctl>
 800661e:	4603      	mov	r3, r0
 8006620:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8006622:	4618      	mov	r0, r3
 8006624:	3708      	adds	r7, #8
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
	...

0800662c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	4603      	mov	r3, r0
 8006634:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006636:	79fb      	ldrb	r3, [r7, #7]
 8006638:	4a08      	ldr	r2, [pc, #32]	; (800665c <disk_status+0x30>)
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	79fa      	ldrb	r2, [r7, #7]
 8006644:	4905      	ldr	r1, [pc, #20]	; (800665c <disk_status+0x30>)
 8006646:	440a      	add	r2, r1
 8006648:	7a12      	ldrb	r2, [r2, #8]
 800664a:	4610      	mov	r0, r2
 800664c:	4798      	blx	r3
 800664e:	4603      	mov	r3, r0
 8006650:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006652:	7bfb      	ldrb	r3, [r7, #15]
}
 8006654:	4618      	mov	r0, r3
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	200002b4 	.word	0x200002b4

08006660 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	4603      	mov	r3, r0
 8006668:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800666a:	2300      	movs	r3, #0
 800666c:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800666e:	79fb      	ldrb	r3, [r7, #7]
 8006670:	4a0d      	ldr	r2, [pc, #52]	; (80066a8 <disk_initialize+0x48>)
 8006672:	5cd3      	ldrb	r3, [r2, r3]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d111      	bne.n	800669c <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8006678:	79fb      	ldrb	r3, [r7, #7]
 800667a:	4a0b      	ldr	r2, [pc, #44]	; (80066a8 <disk_initialize+0x48>)
 800667c:	2101      	movs	r1, #1
 800667e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006680:	79fb      	ldrb	r3, [r7, #7]
 8006682:	4a09      	ldr	r2, [pc, #36]	; (80066a8 <disk_initialize+0x48>)
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4413      	add	r3, r2
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	79fa      	ldrb	r2, [r7, #7]
 800668e:	4906      	ldr	r1, [pc, #24]	; (80066a8 <disk_initialize+0x48>)
 8006690:	440a      	add	r2, r1
 8006692:	7a12      	ldrb	r2, [r2, #8]
 8006694:	4610      	mov	r0, r2
 8006696:	4798      	blx	r3
 8006698:	4603      	mov	r3, r0
 800669a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800669c:	7bfb      	ldrb	r3, [r7, #15]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	200002b4 	.word	0x200002b4

080066ac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80066ac:	b590      	push	{r4, r7, lr}
 80066ae:	b087      	sub	sp, #28
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60b9      	str	r1, [r7, #8]
 80066b4:	607a      	str	r2, [r7, #4]
 80066b6:	603b      	str	r3, [r7, #0]
 80066b8:	4603      	mov	r3, r0
 80066ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
 80066be:	4a0a      	ldr	r2, [pc, #40]	; (80066e8 <disk_read+0x3c>)
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4413      	add	r3, r2
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	689c      	ldr	r4, [r3, #8]
 80066c8:	7bfb      	ldrb	r3, [r7, #15]
 80066ca:	4a07      	ldr	r2, [pc, #28]	; (80066e8 <disk_read+0x3c>)
 80066cc:	4413      	add	r3, r2
 80066ce:	7a18      	ldrb	r0, [r3, #8]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	68b9      	ldr	r1, [r7, #8]
 80066d6:	47a0      	blx	r4
 80066d8:	4603      	mov	r3, r0
 80066da:	75fb      	strb	r3, [r7, #23]
  return res;
 80066dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80066de:	4618      	mov	r0, r3
 80066e0:	371c      	adds	r7, #28
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd90      	pop	{r4, r7, pc}
 80066e6:	bf00      	nop
 80066e8:	200002b4 	.word	0x200002b4

080066ec <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80066ec:	b590      	push	{r4, r7, lr}
 80066ee:	b087      	sub	sp, #28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60b9      	str	r1, [r7, #8]
 80066f4:	607a      	str	r2, [r7, #4]
 80066f6:	603b      	str	r3, [r7, #0]
 80066f8:	4603      	mov	r3, r0
 80066fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80066fc:	7bfb      	ldrb	r3, [r7, #15]
 80066fe:	4a0a      	ldr	r2, [pc, #40]	; (8006728 <disk_write+0x3c>)
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	68dc      	ldr	r4, [r3, #12]
 8006708:	7bfb      	ldrb	r3, [r7, #15]
 800670a:	4a07      	ldr	r2, [pc, #28]	; (8006728 <disk_write+0x3c>)
 800670c:	4413      	add	r3, r2
 800670e:	7a18      	ldrb	r0, [r3, #8]
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	68b9      	ldr	r1, [r7, #8]
 8006716:	47a0      	blx	r4
 8006718:	4603      	mov	r3, r0
 800671a:	75fb      	strb	r3, [r7, #23]
  return res;
 800671c:	7dfb      	ldrb	r3, [r7, #23]
}
 800671e:	4618      	mov	r0, r3
 8006720:	371c      	adds	r7, #28
 8006722:	46bd      	mov	sp, r7
 8006724:	bd90      	pop	{r4, r7, pc}
 8006726:	bf00      	nop
 8006728:	200002b4 	.word	0x200002b4

0800672c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	4603      	mov	r3, r0
 8006734:	603a      	str	r2, [r7, #0]
 8006736:	71fb      	strb	r3, [r7, #7]
 8006738:	460b      	mov	r3, r1
 800673a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800673c:	79fb      	ldrb	r3, [r7, #7]
 800673e:	4a09      	ldr	r2, [pc, #36]	; (8006764 <disk_ioctl+0x38>)
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	79fa      	ldrb	r2, [r7, #7]
 800674a:	4906      	ldr	r1, [pc, #24]	; (8006764 <disk_ioctl+0x38>)
 800674c:	440a      	add	r2, r1
 800674e:	7a10      	ldrb	r0, [r2, #8]
 8006750:	79b9      	ldrb	r1, [r7, #6]
 8006752:	683a      	ldr	r2, [r7, #0]
 8006754:	4798      	blx	r3
 8006756:	4603      	mov	r3, r0
 8006758:	73fb      	strb	r3, [r7, #15]
  return res;
 800675a:	7bfb      	ldrb	r3, [r7, #15]
}
 800675c:	4618      	mov	r0, r3
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	200002b4 	.word	0x200002b4

08006768 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006768:	b480      	push	{r7}
 800676a:	b087      	sub	sp, #28
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800677c:	e007      	b.n	800678e <mem_cpy+0x26>
		*d++ = *s++;
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	1c53      	adds	r3, r2, #1
 8006782:	613b      	str	r3, [r7, #16]
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	1c59      	adds	r1, r3, #1
 8006788:	6179      	str	r1, [r7, #20]
 800678a:	7812      	ldrb	r2, [r2, #0]
 800678c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	1e5a      	subs	r2, r3, #1
 8006792:	607a      	str	r2, [r7, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1f2      	bne.n	800677e <mem_cpy+0x16>
}
 8006798:	bf00      	nop
 800679a:	371c      	adds	r7, #28
 800679c:	46bd      	mov	sp, r7
 800679e:	bc80      	pop	{r7}
 80067a0:	4770      	bx	lr

080067a2 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80067a2:	b480      	push	{r7}
 80067a4:	b087      	sub	sp, #28
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	60f8      	str	r0, [r7, #12]
 80067aa:	60b9      	str	r1, [r7, #8]
 80067ac:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80067b2:	e005      	b.n	80067c0 <mem_set+0x1e>
		*d++ = (BYTE)val;
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	1c5a      	adds	r2, r3, #1
 80067b8:	617a      	str	r2, [r7, #20]
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	b2d2      	uxtb	r2, r2
 80067be:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	1e5a      	subs	r2, r3, #1
 80067c4:	607a      	str	r2, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1f4      	bne.n	80067b4 <mem_set+0x12>
}
 80067ca:	bf00      	nop
 80067cc:	371c      	adds	r7, #28
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bc80      	pop	{r7}
 80067d2:	4770      	bx	lr

080067d4 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80067d4:	b480      	push	{r7}
 80067d6:	b089      	sub	sp, #36	; 0x24
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	61fb      	str	r3, [r7, #28]
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80067e8:	2300      	movs	r3, #0
 80067ea:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80067ec:	bf00      	nop
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	1e5a      	subs	r2, r3, #1
 80067f2:	607a      	str	r2, [r7, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00d      	beq.n	8006814 <mem_cmp+0x40>
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	1c5a      	adds	r2, r3, #1
 80067fc:	61fa      	str	r2, [r7, #28]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	4619      	mov	r1, r3
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	1c5a      	adds	r2, r3, #1
 8006806:	61ba      	str	r2, [r7, #24]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	1acb      	subs	r3, r1, r3
 800680c:	617b      	str	r3, [r7, #20]
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d0ec      	beq.n	80067ee <mem_cmp+0x1a>
	return r;
 8006814:	697b      	ldr	r3, [r7, #20]
}
 8006816:	4618      	mov	r0, r3
 8006818:	3724      	adds	r7, #36	; 0x24
 800681a:	46bd      	mov	sp, r7
 800681c:	bc80      	pop	{r7}
 800681e:	4770      	bx	lr

08006820 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800682a:	e002      	b.n	8006832 <chk_chr+0x12>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	3301      	adds	r3, #1
 8006830:	607b      	str	r3, [r7, #4]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d005      	beq.n	8006846 <chk_chr+0x26>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	461a      	mov	r2, r3
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	4293      	cmp	r3, r2
 8006844:	d1f2      	bne.n	800682c <chk_chr+0xc>
	return *str;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	781b      	ldrb	r3, [r3, #0]
}
 800684a:	4618      	mov	r0, r3
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	bc80      	pop	{r7}
 8006852:	4770      	bx	lr

08006854 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800685e:	2300      	movs	r3, #0
 8006860:	60bb      	str	r3, [r7, #8]
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	60fb      	str	r3, [r7, #12]
 8006866:	e038      	b.n	80068da <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8006868:	492f      	ldr	r1, [pc, #188]	; (8006928 <chk_lock+0xd4>)
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	4613      	mov	r3, r2
 800686e:	005b      	lsls	r3, r3, #1
 8006870:	4413      	add	r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	440b      	add	r3, r1
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d029      	beq.n	80068d0 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800687c:	492a      	ldr	r1, [pc, #168]	; (8006928 <chk_lock+0xd4>)
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	4613      	mov	r3, r2
 8006882:	005b      	lsls	r3, r3, #1
 8006884:	4413      	add	r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	440b      	add	r3, r1
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006892:	429a      	cmp	r2, r3
 8006894:	d11e      	bne.n	80068d4 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8006896:	4924      	ldr	r1, [pc, #144]	; (8006928 <chk_lock+0xd4>)
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	4613      	mov	r3, r2
 800689c:	005b      	lsls	r3, r3, #1
 800689e:	4413      	add	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	440b      	add	r3, r1
 80068a4:	3304      	adds	r3, #4
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d110      	bne.n	80068d4 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80068b2:	491d      	ldr	r1, [pc, #116]	; (8006928 <chk_lock+0xd4>)
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	4613      	mov	r3, r2
 80068b8:	005b      	lsls	r3, r3, #1
 80068ba:	4413      	add	r3, r2
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	440b      	add	r3, r1
 80068c0:	3308      	adds	r3, #8
 80068c2:	881a      	ldrh	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d102      	bne.n	80068d4 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80068ce:	e007      	b.n	80068e0 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 80068d0:	2301      	movs	r3, #1
 80068d2:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	3301      	adds	r3, #1
 80068d8:	60fb      	str	r3, [r7, #12]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d9c3      	bls.n	8006868 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d109      	bne.n	80068fa <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d102      	bne.n	80068f2 <chk_lock+0x9e>
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d101      	bne.n	80068f6 <chk_lock+0xa2>
 80068f2:	2300      	movs	r3, #0
 80068f4:	e013      	b.n	800691e <chk_lock+0xca>
 80068f6:	2312      	movs	r3, #18
 80068f8:	e011      	b.n	800691e <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d10b      	bne.n	8006918 <chk_lock+0xc4>
 8006900:	4909      	ldr	r1, [pc, #36]	; (8006928 <chk_lock+0xd4>)
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	4613      	mov	r3, r2
 8006906:	005b      	lsls	r3, r3, #1
 8006908:	4413      	add	r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	440b      	add	r3, r1
 800690e:	330a      	adds	r3, #10
 8006910:	881b      	ldrh	r3, [r3, #0]
 8006912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006916:	d101      	bne.n	800691c <chk_lock+0xc8>
 8006918:	2310      	movs	r3, #16
 800691a:	e000      	b.n	800691e <chk_lock+0xca>
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3714      	adds	r7, #20
 8006922:	46bd      	mov	sp, r7
 8006924:	bc80      	pop	{r7}
 8006926:	4770      	bx	lr
 8006928:	2000029c 	.word	0x2000029c

0800692c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006932:	2300      	movs	r3, #0
 8006934:	607b      	str	r3, [r7, #4]
 8006936:	e002      	b.n	800693e <enq_lock+0x12>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	3301      	adds	r3, #1
 800693c:	607b      	str	r3, [r7, #4]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d809      	bhi.n	8006958 <enq_lock+0x2c>
 8006944:	490a      	ldr	r1, [pc, #40]	; (8006970 <enq_lock+0x44>)
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	4613      	mov	r3, r2
 800694a:	005b      	lsls	r3, r3, #1
 800694c:	4413      	add	r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	440b      	add	r3, r1
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1ef      	bne.n	8006938 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2b02      	cmp	r3, #2
 800695c:	bf14      	ite	ne
 800695e:	2301      	movne	r3, #1
 8006960:	2300      	moveq	r3, #0
 8006962:	b2db      	uxtb	r3, r3
}
 8006964:	4618      	mov	r0, r3
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	bc80      	pop	{r7}
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	2000029c 	.word	0x2000029c

08006974 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800697e:	2300      	movs	r3, #0
 8006980:	60fb      	str	r3, [r7, #12]
 8006982:	e02b      	b.n	80069dc <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8006984:	4955      	ldr	r1, [pc, #340]	; (8006adc <inc_lock+0x168>)
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	4613      	mov	r3, r2
 800698a:	005b      	lsls	r3, r3, #1
 800698c:	4413      	add	r3, r2
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	440b      	add	r3, r1
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800699a:	429a      	cmp	r2, r3
 800699c:	d11b      	bne.n	80069d6 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800699e:	494f      	ldr	r1, [pc, #316]	; (8006adc <inc_lock+0x168>)
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	4613      	mov	r3, r2
 80069a4:	005b      	lsls	r3, r3, #1
 80069a6:	4413      	add	r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	440b      	add	r3, r1
 80069ac:	3304      	adds	r3, #4
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d10d      	bne.n	80069d6 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 80069ba:	4948      	ldr	r1, [pc, #288]	; (8006adc <inc_lock+0x168>)
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	4613      	mov	r3, r2
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	4413      	add	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	440b      	add	r3, r1
 80069c8:	3308      	adds	r3, #8
 80069ca:	881a      	ldrh	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d006      	beq.n	80069e4 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	3301      	adds	r3, #1
 80069da:	60fb      	str	r3, [r7, #12]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d9d0      	bls.n	8006984 <inc_lock+0x10>
 80069e2:	e000      	b.n	80069e6 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 80069e4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d145      	bne.n	8006a78 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80069ec:	2300      	movs	r3, #0
 80069ee:	60fb      	str	r3, [r7, #12]
 80069f0:	e002      	b.n	80069f8 <inc_lock+0x84>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	3301      	adds	r3, #1
 80069f6:	60fb      	str	r3, [r7, #12]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d809      	bhi.n	8006a12 <inc_lock+0x9e>
 80069fe:	4937      	ldr	r1, [pc, #220]	; (8006adc <inc_lock+0x168>)
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	4613      	mov	r3, r2
 8006a04:	005b      	lsls	r3, r3, #1
 8006a06:	4413      	add	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	440b      	add	r3, r1
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1ef      	bne.n	80069f2 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d101      	bne.n	8006a1c <inc_lock+0xa8>
 8006a18:	2300      	movs	r3, #0
 8006a1a:	e05a      	b.n	8006ad2 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8006a22:	482e      	ldr	r0, [pc, #184]	; (8006adc <inc_lock+0x168>)
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	4613      	mov	r3, r2
 8006a28:	005b      	lsls	r3, r3, #1
 8006a2a:	4413      	add	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4403      	add	r3, r0
 8006a30:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8006a38:	4828      	ldr	r0, [pc, #160]	; (8006adc <inc_lock+0x168>)
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	005b      	lsls	r3, r3, #1
 8006a40:	4413      	add	r3, r2
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	4403      	add	r3, r0
 8006a46:	3304      	adds	r3, #4
 8006a48:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8006a50:	4922      	ldr	r1, [pc, #136]	; (8006adc <inc_lock+0x168>)
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	4613      	mov	r3, r2
 8006a56:	005b      	lsls	r3, r3, #1
 8006a58:	4413      	add	r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	440b      	add	r3, r1
 8006a5e:	3308      	adds	r3, #8
 8006a60:	4602      	mov	r2, r0
 8006a62:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8006a64:	491d      	ldr	r1, [pc, #116]	; (8006adc <inc_lock+0x168>)
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	4613      	mov	r3, r2
 8006a6a:	005b      	lsls	r3, r3, #1
 8006a6c:	4413      	add	r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	440b      	add	r3, r1
 8006a72:	330a      	adds	r3, #10
 8006a74:	2200      	movs	r2, #0
 8006a76:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00c      	beq.n	8006a98 <inc_lock+0x124>
 8006a7e:	4917      	ldr	r1, [pc, #92]	; (8006adc <inc_lock+0x168>)
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	4613      	mov	r3, r2
 8006a84:	005b      	lsls	r3, r3, #1
 8006a86:	4413      	add	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	440b      	add	r3, r1
 8006a8c:	330a      	adds	r3, #10
 8006a8e:	881b      	ldrh	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d001      	beq.n	8006a98 <inc_lock+0x124>
 8006a94:	2300      	movs	r3, #0
 8006a96:	e01c      	b.n	8006ad2 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10b      	bne.n	8006ab6 <inc_lock+0x142>
 8006a9e:	490f      	ldr	r1, [pc, #60]	; (8006adc <inc_lock+0x168>)
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	005b      	lsls	r3, r3, #1
 8006aa6:	4413      	add	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	440b      	add	r3, r1
 8006aac:	330a      	adds	r3, #10
 8006aae:	881b      	ldrh	r3, [r3, #0]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	b299      	uxth	r1, r3
 8006ab4:	e001      	b.n	8006aba <inc_lock+0x146>
 8006ab6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006aba:	4808      	ldr	r0, [pc, #32]	; (8006adc <inc_lock+0x168>)
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	005b      	lsls	r3, r3, #1
 8006ac2:	4413      	add	r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4403      	add	r3, r0
 8006ac8:	330a      	adds	r3, #10
 8006aca:	460a      	mov	r2, r1
 8006acc:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	3301      	adds	r3, #1
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bc80      	pop	{r7}
 8006ada:	4770      	bx	lr
 8006adc:	2000029c 	.word	0x2000029c

08006ae0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	3b01      	subs	r3, #1
 8006aec:	607b      	str	r3, [r7, #4]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d82e      	bhi.n	8006b52 <dec_lock+0x72>
		n = Files[i].ctr;
 8006af4:	491b      	ldr	r1, [pc, #108]	; (8006b64 <dec_lock+0x84>)
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	4613      	mov	r3, r2
 8006afa:	005b      	lsls	r3, r3, #1
 8006afc:	4413      	add	r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	440b      	add	r3, r1
 8006b02:	330a      	adds	r3, #10
 8006b04:	881b      	ldrh	r3, [r3, #0]
 8006b06:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006b08:	89fb      	ldrh	r3, [r7, #14]
 8006b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b0e:	d101      	bne.n	8006b14 <dec_lock+0x34>
 8006b10:	2300      	movs	r3, #0
 8006b12:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8006b14:	89fb      	ldrh	r3, [r7, #14]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d002      	beq.n	8006b20 <dec_lock+0x40>
 8006b1a:	89fb      	ldrh	r3, [r7, #14]
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006b20:	4910      	ldr	r1, [pc, #64]	; (8006b64 <dec_lock+0x84>)
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	4613      	mov	r3, r2
 8006b26:	005b      	lsls	r3, r3, #1
 8006b28:	4413      	add	r3, r2
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	440b      	add	r3, r1
 8006b2e:	330a      	adds	r3, #10
 8006b30:	89fa      	ldrh	r2, [r7, #14]
 8006b32:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006b34:	89fb      	ldrh	r3, [r7, #14]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d108      	bne.n	8006b4c <dec_lock+0x6c>
 8006b3a:	490a      	ldr	r1, [pc, #40]	; (8006b64 <dec_lock+0x84>)
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	005b      	lsls	r3, r3, #1
 8006b42:	4413      	add	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	440b      	add	r3, r1
 8006b48:	2200      	movs	r2, #0
 8006b4a:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	737b      	strb	r3, [r7, #13]
 8006b50:	e001      	b.n	8006b56 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006b52:	2302      	movs	r3, #2
 8006b54:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006b56:	7b7b      	ldrb	r3, [r7, #13]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3714      	adds	r7, #20
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bc80      	pop	{r7}
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	2000029c 	.word	0x2000029c

08006b68 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006b70:	2300      	movs	r3, #0
 8006b72:	60fb      	str	r3, [r7, #12]
 8006b74:	e016      	b.n	8006ba4 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006b76:	490f      	ldr	r1, [pc, #60]	; (8006bb4 <clear_lock+0x4c>)
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	005b      	lsls	r3, r3, #1
 8006b7e:	4413      	add	r3, r2
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	440b      	add	r3, r1
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d108      	bne.n	8006b9e <clear_lock+0x36>
 8006b8c:	4909      	ldr	r1, [pc, #36]	; (8006bb4 <clear_lock+0x4c>)
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	4613      	mov	r3, r2
 8006b92:	005b      	lsls	r3, r3, #1
 8006b94:	4413      	add	r3, r2
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	440b      	add	r3, r1
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	60fb      	str	r3, [r7, #12]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d9e5      	bls.n	8006b76 <clear_lock+0xe>
	}
}
 8006baa:	bf00      	nop
 8006bac:	3714      	adds	r7, #20
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bc80      	pop	{r7}
 8006bb2:	4770      	bx	lr
 8006bb4:	2000029c 	.word	0x2000029c

08006bb8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d038      	beq.n	8006c40 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8006bd4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006bdc:	6879      	ldr	r1, [r7, #4]
 8006bde:	2301      	movs	r3, #1
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	f7ff fd83 	bl	80066ec <disk_write>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d002      	beq.n	8006bf2 <sync_window+0x3a>
			res = FR_DISK_ERR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	73fb      	strb	r3, [r7, #15]
 8006bf0:	e026      	b.n	8006c40 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	1ad2      	subs	r2, r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d218      	bcs.n	8006c40 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8006c14:	613b      	str	r3, [r7, #16]
 8006c16:	e010      	b.n	8006c3a <sync_window+0x82>
					wsect += fs->fsize;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	4413      	add	r3, r2
 8006c22:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006c2a:	6879      	ldr	r1, [r7, #4]
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	f7ff fd5c 	bl	80066ec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	3b01      	subs	r3, #1
 8006c38:	613b      	str	r3, [r7, #16]
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d8eb      	bhi.n	8006c18 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8006c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3718      	adds	r7, #24
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b084      	sub	sp, #16
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
 8006c52:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006c54:	2300      	movs	r3, #0
 8006c56:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d01b      	beq.n	8006c9c <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7ff ffa7 	bl	8006bb8 <sync_window>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006c6e:	7bfb      	ldrb	r3, [r7, #15]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d113      	bne.n	8006c9c <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006c7a:	6879      	ldr	r1, [r7, #4]
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	f7ff fd14 	bl	80066ac <disk_read>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d004      	beq.n	8006c94 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c8e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	683a      	ldr	r2, [r7, #0]
 8006c98:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8006c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b084      	sub	sp, #16
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f7ff ff82 	bl	8006bb8 <sync_window>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f040 809b 	bne.w	8006df6 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006cc6:	2b03      	cmp	r3, #3
 8006cc8:	f040 8088 	bne.w	8006ddc <sync_fs+0x136>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	f040 8082 	bne.w	8006ddc <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cde:	2100      	movs	r1, #0
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f7ff fd5e 	bl	80067a2 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2255      	movs	r2, #85	; 0x55
 8006cea:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	22aa      	movs	r2, #170	; 0xaa
 8006cf2:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2252      	movs	r2, #82	; 0x52
 8006cfa:	701a      	strb	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2252      	movs	r2, #82	; 0x52
 8006d00:	705a      	strb	r2, [r3, #1]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2261      	movs	r2, #97	; 0x61
 8006d06:	709a      	strb	r2, [r3, #2]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2241      	movs	r2, #65	; 0x41
 8006d0c:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2272      	movs	r2, #114	; 0x72
 8006d12:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2272      	movs	r2, #114	; 0x72
 8006d1a:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2241      	movs	r2, #65	; 0x41
 8006d22:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2261      	movs	r2, #97	; 0x61
 8006d2a:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006d34:	b2da      	uxtb	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	0a1b      	lsrs	r3, r3, #8
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	b2da      	uxtb	r2, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006d56:	0c1b      	lsrs	r3, r3, #16
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006d66:	0e1b      	lsrs	r3, r3, #24
 8006d68:	b2da      	uxtb	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006d76:	b2da      	uxtb	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	0a1b      	lsrs	r3, r3, #8
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	b2da      	uxtb	r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006d98:	0c1b      	lsrs	r3, r3, #16
 8006d9a:	b2da      	uxtb	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006da8:	0e1b      	lsrs	r3, r3, #24
 8006daa:	b2da      	uxtb	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006db8:	1c5a      	adds	r2, r3, #1
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006dc6:	6879      	ldr	r1, [r7, #4]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8006dce:	2301      	movs	r3, #1
 8006dd0:	f7ff fc8c 	bl	80066ec <disk_write>
			fs->fsi_flag = 0;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006de2:	2200      	movs	r2, #0
 8006de4:	2100      	movs	r1, #0
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7ff fca0 	bl	800672c <disk_ioctl>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d001      	beq.n	8006df6 <sync_fs+0x150>
			res = FR_DISK_ERR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	3b02      	subs	r3, #2
 8006e0e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e16:	3b02      	subs	r3, #2
 8006e18:	683a      	ldr	r2, [r7, #0]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d301      	bcc.n	8006e22 <clust2sect+0x22>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	e00a      	b.n	8006e38 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006e28:	461a      	mov	r2, r3
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	fb03 f202 	mul.w	r2, r3, r2
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8006e36:	4413      	add	r3, r2
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bc80      	pop	{r7}
 8006e40:	4770      	bx	lr

08006e42 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b086      	sub	sp, #24
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
 8006e4a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d905      	bls.n	8006e5e <get_fat+0x1c>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e58:	683a      	ldr	r2, [r7, #0]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d302      	bcc.n	8006e64 <get_fat+0x22>
		val = 1;	/* Internal error */
 8006e5e:	2301      	movs	r3, #1
 8006e60:	617b      	str	r3, [r7, #20]
 8006e62:	e0a0      	b.n	8006fa6 <get_fat+0x164>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006e64:	f04f 33ff 	mov.w	r3, #4294967295
 8006e68:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d044      	beq.n	8006efe <get_fat+0xbc>
 8006e74:	2b03      	cmp	r3, #3
 8006e76:	d063      	beq.n	8006f40 <get_fat+0xfe>
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	f040 808a 	bne.w	8006f92 <get_fat+0x150>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	60fb      	str	r3, [r7, #12]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	085b      	lsrs	r3, r3, #1
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	4413      	add	r3, r2
 8006e8a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	0a5b      	lsrs	r3, r3, #9
 8006e96:	4413      	add	r3, r2
 8006e98:	4619      	mov	r1, r3
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7ff fed5 	bl	8006c4a <move_window>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d178      	bne.n	8006f98 <get_fat+0x156>
			wc = fs->win.d8[bc++ % SS(fs)];
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	1c5a      	adds	r2, r3, #1
 8006eaa:	60fa      	str	r2, [r7, #12]
 8006eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	5cd3      	ldrb	r3, [r2, r3]
 8006eb4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	0a5b      	lsrs	r3, r3, #9
 8006ec0:	4413      	add	r3, r2
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f7ff fec0 	bl	8006c4a <move_window>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d165      	bne.n	8006f9c <get_fat+0x15a>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	5cd3      	ldrb	r3, [r2, r3]
 8006eda:	021b      	lsls	r3, r3, #8
 8006edc:	461a      	mov	r2, r3
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	f003 0301 	and.w	r3, r3, #1
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d002      	beq.n	8006ef4 <get_fat+0xb2>
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	091b      	lsrs	r3, r3, #4
 8006ef2:	e002      	b.n	8006efa <get_fat+0xb8>
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006efa:	617b      	str	r3, [r7, #20]
			break;
 8006efc:	e053      	b.n	8006fa6 <get_fat+0x164>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	0a1b      	lsrs	r3, r3, #8
 8006f08:	4413      	add	r3, r2
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f7ff fe9c 	bl	8006c4a <move_window>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d143      	bne.n	8006fa0 <get_fat+0x15e>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	005b      	lsls	r3, r3, #1
 8006f1c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	4413      	add	r3, r2
 8006f24:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	021b      	lsls	r3, r3, #8
 8006f2e:	b21a      	sxth	r2, r3
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	b21b      	sxth	r3, r3
 8006f36:	4313      	orrs	r3, r2
 8006f38:	b21b      	sxth	r3, r3
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	617b      	str	r3, [r7, #20]
			break;
 8006f3e:	e032      	b.n	8006fa6 <get_fat+0x164>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	09db      	lsrs	r3, r3, #7
 8006f4a:	4413      	add	r3, r2
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f7ff fe7b 	bl	8006c4a <move_window>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d124      	bne.n	8006fa4 <get_fat+0x162>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	4413      	add	r3, r2
 8006f66:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	3303      	adds	r3, #3
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	061a      	lsls	r2, r3, #24
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	3302      	adds	r3, #2
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	041b      	lsls	r3, r3, #16
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	3201      	adds	r2, #1
 8006f7e:	7812      	ldrb	r2, [r2, #0]
 8006f80:	0212      	lsls	r2, r2, #8
 8006f82:	4313      	orrs	r3, r2
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	7812      	ldrb	r2, [r2, #0]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006f8e:	617b      	str	r3, [r7, #20]
			break;
 8006f90:	e009      	b.n	8006fa6 <get_fat+0x164>

		default:
			val = 1;	/* Internal error */
 8006f92:	2301      	movs	r3, #1
 8006f94:	617b      	str	r3, [r7, #20]
 8006f96:	e006      	b.n	8006fa6 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006f98:	bf00      	nop
 8006f9a:	e004      	b.n	8006fa6 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006f9c:	bf00      	nop
 8006f9e:	e002      	b.n	8006fa6 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006fa0:	bf00      	nop
 8006fa2:	e000      	b.n	8006fa6 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006fa4:	bf00      	nop
		}
	}

	return val;
 8006fa6:	697b      	ldr	r3, [r7, #20]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3718      	adds	r7, #24
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b088      	sub	sp, #32
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d905      	bls.n	8006fce <put_fat+0x1e>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d302      	bcc.n	8006fd4 <put_fat+0x24>
		res = FR_INT_ERR;
 8006fce:	2302      	movs	r3, #2
 8006fd0:	77fb      	strb	r3, [r7, #31]
 8006fd2:	e0f3      	b.n	80071bc <put_fat+0x20c>

	} else {
		switch (fs->fs_type) {
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006fda:	2b02      	cmp	r3, #2
 8006fdc:	d074      	beq.n	80070c8 <put_fat+0x118>
 8006fde:	2b03      	cmp	r3, #3
 8006fe0:	f000 8099 	beq.w	8007116 <put_fat+0x166>
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	f040 80df 	bne.w	80071a8 <put_fat+0x1f8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	617b      	str	r3, [r7, #20]
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	085b      	lsrs	r3, r3, #1
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	0a5b      	lsrs	r3, r3, #9
 8007002:	4413      	add	r3, r2
 8007004:	4619      	mov	r1, r3
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f7ff fe1f 	bl	8006c4a <move_window>
 800700c:	4603      	mov	r3, r0
 800700e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007010:	7ffb      	ldrb	r3, [r7, #31]
 8007012:	2b00      	cmp	r3, #0
 8007014:	f040 80cb 	bne.w	80071ae <put_fat+0x1fe>
			p = &fs->win.d8[bc++ % SS(fs)];
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	1c5a      	adds	r2, r3, #1
 800701c:	617a      	str	r2, [r7, #20]
 800701e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	4413      	add	r3, r2
 8007026:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	f003 0301 	and.w	r3, r3, #1
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00d      	beq.n	800704e <put_fat+0x9e>
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	b25b      	sxtb	r3, r3
 8007038:	f003 030f 	and.w	r3, r3, #15
 800703c:	b25a      	sxtb	r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	b2db      	uxtb	r3, r3
 8007042:	011b      	lsls	r3, r3, #4
 8007044:	b25b      	sxtb	r3, r3
 8007046:	4313      	orrs	r3, r2
 8007048:	b25b      	sxtb	r3, r3
 800704a:	b2db      	uxtb	r3, r3
 800704c:	e001      	b.n	8007052 <put_fat+0xa2>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	b2db      	uxtb	r3, r3
 8007052:	69ba      	ldr	r2, [r7, #24]
 8007054:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2201      	movs	r2, #1
 800705a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	0a5b      	lsrs	r3, r3, #9
 8007068:	4413      	add	r3, r2
 800706a:	4619      	mov	r1, r3
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f7ff fdec 	bl	8006c4a <move_window>
 8007072:	4603      	mov	r3, r0
 8007074:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007076:	7ffb      	ldrb	r3, [r7, #31]
 8007078:	2b00      	cmp	r3, #0
 800707a:	f040 809a 	bne.w	80071b2 <put_fat+0x202>
			p = &fs->win.d8[bc % SS(fs)];
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	4413      	add	r3, r2
 8007088:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	f003 0301 	and.w	r3, r3, #1
 8007090:	2b00      	cmp	r3, #0
 8007092:	d003      	beq.n	800709c <put_fat+0xec>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	091b      	lsrs	r3, r3, #4
 8007098:	b2db      	uxtb	r3, r3
 800709a:	e00e      	b.n	80070ba <put_fat+0x10a>
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	b25b      	sxtb	r3, r3
 80070a2:	f023 030f 	bic.w	r3, r3, #15
 80070a6:	b25a      	sxtb	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	0a1b      	lsrs	r3, r3, #8
 80070ac:	b25b      	sxtb	r3, r3
 80070ae:	f003 030f 	and.w	r3, r3, #15
 80070b2:	b25b      	sxtb	r3, r3
 80070b4:	4313      	orrs	r3, r2
 80070b6:	b25b      	sxtb	r3, r3
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	69ba      	ldr	r2, [r7, #24]
 80070bc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80070c6:	e079      	b.n	80071bc <put_fat+0x20c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	0a1b      	lsrs	r3, r3, #8
 80070d2:	4413      	add	r3, r2
 80070d4:	4619      	mov	r1, r3
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f7ff fdb7 	bl	8006c4a <move_window>
 80070dc:	4603      	mov	r3, r0
 80070de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80070e0:	7ffb      	ldrb	r3, [r7, #31]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d167      	bne.n	80071b6 <put_fat+0x206>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	005b      	lsls	r3, r3, #1
 80070ea:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	4413      	add	r3, r2
 80070f2:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	b2da      	uxtb	r2, r3
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	701a      	strb	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	b29b      	uxth	r3, r3
 8007100:	0a1b      	lsrs	r3, r3, #8
 8007102:	b29a      	uxth	r2, r3
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	3301      	adds	r3, #1
 8007108:	b2d2      	uxtb	r2, r2
 800710a:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8007114:	e052      	b.n	80071bc <put_fat+0x20c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	09db      	lsrs	r3, r3, #7
 8007120:	4413      	add	r3, r2
 8007122:	4619      	mov	r1, r3
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f7ff fd90 	bl	8006c4a <move_window>
 800712a:	4603      	mov	r3, r0
 800712c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800712e:	7ffb      	ldrb	r3, [r7, #31]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d142      	bne.n	80071ba <put_fat+0x20a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	4413      	add	r3, r2
 8007140:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	3303      	adds	r3, #3
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	061a      	lsls	r2, r3, #24
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	3302      	adds	r3, #2
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	041b      	lsls	r3, r3, #16
 8007152:	4313      	orrs	r3, r2
 8007154:	69ba      	ldr	r2, [r7, #24]
 8007156:	3201      	adds	r2, #1
 8007158:	7812      	ldrb	r2, [r2, #0]
 800715a:	0212      	lsls	r2, r2, #8
 800715c:	4313      	orrs	r3, r2
 800715e:	69ba      	ldr	r2, [r7, #24]
 8007160:	7812      	ldrb	r2, [r2, #0]
 8007162:	4313      	orrs	r3, r2
 8007164:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	4313      	orrs	r3, r2
 800716c:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	b2da      	uxtb	r2, r3
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	701a      	strb	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	b29b      	uxth	r3, r3
 800717a:	0a1b      	lsrs	r3, r3, #8
 800717c:	b29a      	uxth	r2, r3
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	3301      	adds	r3, #1
 8007182:	b2d2      	uxtb	r2, r2
 8007184:	701a      	strb	r2, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	0c1a      	lsrs	r2, r3, #16
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	3302      	adds	r3, #2
 800718e:	b2d2      	uxtb	r2, r2
 8007190:	701a      	strb	r2, [r3, #0]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	0e1a      	lsrs	r2, r3, #24
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	3303      	adds	r3, #3
 800719a:	b2d2      	uxtb	r2, r2
 800719c:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80071a6:	e009      	b.n	80071bc <put_fat+0x20c>

		default :
			res = FR_INT_ERR;
 80071a8:	2302      	movs	r3, #2
 80071aa:	77fb      	strb	r3, [r7, #31]
 80071ac:	e006      	b.n	80071bc <put_fat+0x20c>
			if (res != FR_OK) break;
 80071ae:	bf00      	nop
 80071b0:	e004      	b.n	80071bc <put_fat+0x20c>
			if (res != FR_OK) break;
 80071b2:	bf00      	nop
 80071b4:	e002      	b.n	80071bc <put_fat+0x20c>
			if (res != FR_OK) break;
 80071b6:	bf00      	nop
 80071b8:	e000      	b.n	80071bc <put_fat+0x20c>
			if (res != FR_OK) break;
 80071ba:	bf00      	nop
		}
	}

	return res;
 80071bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3720      	adds	r7, #32
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b084      	sub	sp, #16
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
 80071ce:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d905      	bls.n	80071e2 <remove_chain+0x1c>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80071dc:	683a      	ldr	r2, [r7, #0]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d302      	bcc.n	80071e8 <remove_chain+0x22>
		res = FR_INT_ERR;
 80071e2:	2302      	movs	r3, #2
 80071e4:	73fb      	strb	r3, [r7, #15]
 80071e6:	e043      	b.n	8007270 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 80071e8:	2300      	movs	r3, #0
 80071ea:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80071ec:	e036      	b.n	800725c <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80071ee:	6839      	ldr	r1, [r7, #0]
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f7ff fe26 	bl	8006e42 <get_fat>
 80071f6:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d035      	beq.n	800726a <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d102      	bne.n	800720a <remove_chain+0x44>
 8007204:	2302      	movs	r3, #2
 8007206:	73fb      	strb	r3, [r7, #15]
 8007208:	e032      	b.n	8007270 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007210:	d102      	bne.n	8007218 <remove_chain+0x52>
 8007212:	2301      	movs	r3, #1
 8007214:	73fb      	strb	r3, [r7, #15]
 8007216:	e02b      	b.n	8007270 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8007218:	2200      	movs	r2, #0
 800721a:	6839      	ldr	r1, [r7, #0]
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f7ff fec7 	bl	8006fb0 <put_fat>
 8007222:	4603      	mov	r3, r0
 8007224:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007226:	7bfb      	ldrb	r3, [r7, #15]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d120      	bne.n	800726e <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007236:	d00f      	beq.n	8007258 <remove_chain+0x92>
				fs->free_clust++;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800723e:	1c5a      	adds	r2, r3, #1
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800724c:	f043 0301 	orr.w	r3, r3, #1
 8007250:	b2da      	uxtb	r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007262:	683a      	ldr	r2, [r7, #0]
 8007264:	429a      	cmp	r2, r3
 8007266:	d3c2      	bcc.n	80071ee <remove_chain+0x28>
 8007268:	e002      	b.n	8007270 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800726a:	bf00      	nop
 800726c:	e000      	b.n	8007270 <remove_chain+0xaa>
			if (res != FR_OK) break;
 800726e:	bf00      	nop
		}
	}

	return res;
 8007270:	7bfb      	ldrb	r3, [r7, #15]
}
 8007272:	4618      	mov	r0, r3
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b086      	sub	sp, #24
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
 8007282:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10f      	bne.n	80072aa <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007290:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d005      	beq.n	80072a4 <create_chain+0x2a>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800729e:	693a      	ldr	r2, [r7, #16]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d31c      	bcc.n	80072de <create_chain+0x64>
 80072a4:	2301      	movs	r3, #1
 80072a6:	613b      	str	r3, [r7, #16]
 80072a8:	e019      	b.n	80072de <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80072aa:	6839      	ldr	r1, [r7, #0]
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f7ff fdc8 	bl	8006e42 <get_fat>
 80072b2:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d801      	bhi.n	80072be <create_chain+0x44>
 80072ba:	2301      	movs	r3, #1
 80072bc:	e076      	b.n	80073ac <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c4:	d101      	bne.n	80072ca <create_chain+0x50>
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	e070      	b.n	80073ac <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d201      	bcs.n	80072da <create_chain+0x60>
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	e068      	b.n	80073ac <create_chain+0x132>
		scl = clst;
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	3301      	adds	r3, #1
 80072e6:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d307      	bcc.n	8007304 <create_chain+0x8a>
			ncl = 2;
 80072f4:	2302      	movs	r3, #2
 80072f6:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d901      	bls.n	8007304 <create_chain+0x8a>
 8007300:	2300      	movs	r3, #0
 8007302:	e053      	b.n	80073ac <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8007304:	6979      	ldr	r1, [r7, #20]
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f7ff fd9b 	bl	8006e42 <get_fat>
 800730c:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00e      	beq.n	8007332 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800731a:	d002      	beq.n	8007322 <create_chain+0xa8>
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d101      	bne.n	8007326 <create_chain+0xac>
			return cs;
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	e042      	b.n	80073ac <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	429a      	cmp	r2, r3
 800732c:	d1d9      	bne.n	80072e2 <create_chain+0x68>
 800732e:	2300      	movs	r3, #0
 8007330:	e03c      	b.n	80073ac <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8007332:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8007334:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8007338:	6979      	ldr	r1, [r7, #20]
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f7ff fe38 	bl	8006fb0 <put_fat>
 8007340:	4603      	mov	r3, r0
 8007342:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8007344:	7bfb      	ldrb	r3, [r7, #15]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d109      	bne.n	800735e <create_chain+0xe4>
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d006      	beq.n	800735e <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8007350:	697a      	ldr	r2, [r7, #20]
 8007352:	6839      	ldr	r1, [r7, #0]
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f7ff fe2b 	bl	8006fb0 <put_fat>
 800735a:	4603      	mov	r3, r0
 800735c:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800735e:	7bfb      	ldrb	r3, [r7, #15]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d11a      	bne.n	800739a <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007376:	d018      	beq.n	80073aa <create_chain+0x130>
			fs->free_clust--;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800737e:	1e5a      	subs	r2, r3, #1
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800738c:	f043 0301 	orr.w	r3, r3, #1
 8007390:	b2da      	uxtb	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8007398:	e007      	b.n	80073aa <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800739a:	7bfb      	ldrb	r3, [r7, #15]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d102      	bne.n	80073a6 <create_chain+0x12c>
 80073a0:	f04f 33ff 	mov.w	r3, #4294967295
 80073a4:	e000      	b.n	80073a8 <create_chain+0x12e>
 80073a6:	2301      	movs	r3, #1
 80073a8:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80073aa:	697b      	ldr	r3, [r7, #20]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3718      	adds	r7, #24
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b087      	sub	sp, #28
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80073c4:	3304      	adds	r3, #4
 80073c6:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	0a5b      	lsrs	r3, r3, #9
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80073d2:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80073d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80073da:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	1d1a      	adds	r2, r3, #4
 80073e0:	613a      	str	r2, [r7, #16]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d101      	bne.n	80073f0 <clmt_clust+0x3c>
 80073ec:	2300      	movs	r3, #0
 80073ee:	e010      	b.n	8007412 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 80073f0:	697a      	ldr	r2, [r7, #20]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d307      	bcc.n	8007408 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 80073f8:	697a      	ldr	r2, [r7, #20]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	617b      	str	r3, [r7, #20]
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	3304      	adds	r3, #4
 8007404:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007406:	e7e9      	b.n	80073dc <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8007408:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	4413      	add	r3, r2
}
 8007412:	4618      	mov	r0, r3
 8007414:	371c      	adds	r7, #28
 8007416:	46bd      	mov	sp, r7
 8007418:	bc80      	pop	{r7}
 800741a:	4770      	bx	lr

0800741c <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	b29a      	uxth	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007436:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d007      	beq.n	800744e <dir_sdi+0x32>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007444:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	429a      	cmp	r2, r3
 800744c:	d301      	bcc.n	8007452 <dir_sdi+0x36>
		return FR_INT_ERR;
 800744e:	2302      	movs	r3, #2
 8007450:	e074      	b.n	800753c <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10c      	bne.n	8007472 <dir_sdi+0x56>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800745e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007462:	2b03      	cmp	r3, #3
 8007464:	d105      	bne.n	8007472 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800746c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8007470:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d111      	bne.n	800749c <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800747e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8007482:	461a      	mov	r2, r3
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	4293      	cmp	r3, r2
 8007488:	d301      	bcc.n	800748e <dir_sdi+0x72>
			return FR_INT_ERR;
 800748a:	2302      	movs	r3, #2
 800748c:	e056      	b.n	800753c <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007494:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8007498:	613b      	str	r3, [r7, #16]
 800749a:	e032      	b.n	8007502 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80074a2:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80074a6:	011b      	lsls	r3, r3, #4
 80074a8:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80074aa:	e01e      	b.n	80074ea <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80074b2:	6979      	ldr	r1, [r7, #20]
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7ff fcc4 	bl	8006e42 <get_fat>
 80074ba:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c2:	d101      	bne.n	80074c8 <dir_sdi+0xac>
 80074c4:	2301      	movs	r3, #1
 80074c6:	e039      	b.n	800753c <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d907      	bls.n	80074de <dir_sdi+0xc2>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80074d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80074d8:	697a      	ldr	r2, [r7, #20]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d301      	bcc.n	80074e2 <dir_sdi+0xc6>
				return FR_INT_ERR;
 80074de:	2302      	movs	r3, #2
 80074e0:	e02c      	b.n	800753c <dir_sdi+0x120>
			idx -= ic;
 80074e2:	683a      	ldr	r2, [r7, #0]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	1ad3      	subs	r3, r2, r3
 80074e8:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80074ea:	683a      	ldr	r2, [r7, #0]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d2dc      	bcs.n	80074ac <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80074f8:	6979      	ldr	r1, [r7, #20]
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7ff fc80 	bl	8006e00 <clust2sect>
 8007500:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	697a      	ldr	r2, [r7, #20]
 8007506:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d101      	bne.n	8007514 <dir_sdi+0xf8>
 8007510:	2302      	movs	r3, #2
 8007512:	e013      	b.n	800753c <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	091a      	lsrs	r2, r3, #4
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	441a      	add	r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007528:	461a      	mov	r2, r3
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	f003 030f 	and.w	r3, r3, #15
 8007530:	015b      	lsls	r3, r3, #5
 8007532:	441a      	add	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3718      	adds	r7, #24
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007544:	b590      	push	{r4, r7, lr}
 8007546:	b087      	sub	sp, #28
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8007554:	3301      	adds	r3, #1
 8007556:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	b29b      	uxth	r3, r3
 800755c:	2b00      	cmp	r3, #0
 800755e:	d004      	beq.n	800756a <dir_next+0x26>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007566:	2b00      	cmp	r3, #0
 8007568:	d101      	bne.n	800756e <dir_next+0x2a>
		return FR_NO_FILE;
 800756a:	2304      	movs	r3, #4
 800756c:	e0dd      	b.n	800772a <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f003 030f 	and.w	r3, r3, #15
 8007574:	2b00      	cmp	r3, #0
 8007576:	f040 80c6 	bne.w	8007706 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007580:	1c5a      	adds	r2, r3, #1
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10b      	bne.n	80075aa <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007598:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800759c:	461a      	mov	r2, r3
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	4293      	cmp	r3, r2
 80075a2:	f0c0 80b0 	bcc.w	8007706 <dir_next+0x1c2>
				return FR_NO_FILE;
 80075a6:	2304      	movs	r3, #4
 80075a8:	e0bf      	b.n	800772a <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	091b      	lsrs	r3, r3, #4
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80075b4:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80075b8:	3a01      	subs	r2, #1
 80075ba:	4013      	ands	r3, r2
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f040 80a2 	bne.w	8007706 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80075ce:	4619      	mov	r1, r3
 80075d0:	4610      	mov	r0, r2
 80075d2:	f7ff fc36 	bl	8006e42 <get_fat>
 80075d6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d801      	bhi.n	80075e2 <dir_next+0x9e>
 80075de:	2302      	movs	r3, #2
 80075e0:	e0a3      	b.n	800772a <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e8:	d101      	bne.n	80075ee <dir_next+0xaa>
 80075ea:	2301      	movs	r3, #1
 80075ec:	e09d      	b.n	800772a <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80075f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80075f8:	697a      	ldr	r2, [r7, #20]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d374      	bcc.n	80076e8 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d101      	bne.n	8007608 <dir_next+0xc4>
 8007604:	2304      	movs	r3, #4
 8007606:	e090      	b.n	800772a <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007614:	4619      	mov	r1, r3
 8007616:	4610      	mov	r0, r2
 8007618:	f7ff fe2f 	bl	800727a <create_chain>
 800761c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d101      	bne.n	8007628 <dir_next+0xe4>
 8007624:	2307      	movs	r3, #7
 8007626:	e080      	b.n	800772a <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	2b01      	cmp	r3, #1
 800762c:	d101      	bne.n	8007632 <dir_next+0xee>
 800762e:	2302      	movs	r3, #2
 8007630:	e07b      	b.n	800772a <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007638:	d101      	bne.n	800763e <dir_next+0xfa>
 800763a:	2301      	movs	r3, #1
 800763c:	e075      	b.n	800772a <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007644:	4618      	mov	r0, r3
 8007646:	f7ff fab7 	bl	8006bb8 <sync_window>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d001      	beq.n	8007654 <dir_next+0x110>
 8007650:	2301      	movs	r3, #1
 8007652:	e06a      	b.n	800772a <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800765a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800765e:	2100      	movs	r1, #0
 8007660:	4618      	mov	r0, r3
 8007662:	f7ff f89e 	bl	80067a2 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8007672:	6979      	ldr	r1, [r7, #20]
 8007674:	4610      	mov	r0, r2
 8007676:	f7ff fbc3 	bl	8006e00 <clust2sect>
 800767a:	4603      	mov	r3, r0
 800767c:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007680:	2300      	movs	r3, #0
 8007682:	613b      	str	r3, [r7, #16]
 8007684:	e01b      	b.n	80076be <dir_next+0x17a>
						dp->fs->wflag = 1;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800768c:	2201      	movs	r2, #1
 800768e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007698:	4618      	mov	r0, r3
 800769a:	f7ff fa8d 	bl	8006bb8 <sync_window>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d001      	beq.n	80076a8 <dir_next+0x164>
 80076a4:	2301      	movs	r3, #1
 80076a6:	e040      	b.n	800772a <dir_next+0x1e6>
						dp->fs->winsect++;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80076ae:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80076b2:	3201      	adds	r2, #1
 80076b4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	3301      	adds	r3, #1
 80076bc:	613b      	str	r3, [r7, #16]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80076c4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80076c8:	461a      	mov	r2, r3
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d3da      	bcc.n	8007686 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80076d6:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80076e0:	693a      	ldr	r2, [r7, #16]
 80076e2:	1a8a      	subs	r2, r1, r2
 80076e4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	697a      	ldr	r2, [r7, #20]
 80076ec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80076f6:	6979      	ldr	r1, [r7, #20]
 80076f8:	4618      	mov	r0, r3
 80076fa:	f7ff fb81 	bl	8006e00 <clust2sect>
 80076fe:	4602      	mov	r2, r0
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	b29a      	uxth	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007716:	461a      	mov	r2, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f003 030f 	and.w	r3, r3, #15
 800771e:	015b      	lsls	r3, r3, #5
 8007720:	441a      	add	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	371c      	adds	r7, #28
 800772e:	46bd      	mov	sp, r7
 8007730:	bd90      	pop	{r4, r7, pc}

08007732 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b084      	sub	sp, #16
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
 800773a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800773c:	2100      	movs	r1, #0
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f7ff fe6c 	bl	800741c <dir_sdi>
 8007744:	4603      	mov	r3, r0
 8007746:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007748:	7bfb      	ldrb	r3, [r7, #15]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d131      	bne.n	80077b2 <dir_alloc+0x80>
		n = 0;
 800774e:	2300      	movs	r3, #0
 8007750:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800775e:	4619      	mov	r1, r3
 8007760:	4610      	mov	r0, r2
 8007762:	f7ff fa72 	bl	8006c4a <move_window>
 8007766:	4603      	mov	r3, r0
 8007768:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800776a:	7bfb      	ldrb	r3, [r7, #15]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d11f      	bne.n	80077b0 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	2be5      	cmp	r3, #229	; 0xe5
 800777a:	d005      	beq.n	8007788 <dir_alloc+0x56>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d107      	bne.n	8007798 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	3301      	adds	r3, #1
 800778c:	60bb      	str	r3, [r7, #8]
 800778e:	68ba      	ldr	r2, [r7, #8]
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	429a      	cmp	r2, r3
 8007794:	d102      	bne.n	800779c <dir_alloc+0x6a>
 8007796:	e00c      	b.n	80077b2 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007798:	2300      	movs	r3, #0
 800779a:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800779c:	2101      	movs	r1, #1
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f7ff fed0 	bl	8007544 <dir_next>
 80077a4:	4603      	mov	r3, r0
 80077a6:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80077a8:	7bfb      	ldrb	r3, [r7, #15]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d0d1      	beq.n	8007752 <dir_alloc+0x20>
 80077ae:	e000      	b.n	80077b2 <dir_alloc+0x80>
			if (res != FR_OK) break;
 80077b0:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80077b2:	7bfb      	ldrb	r3, [r7, #15]
 80077b4:	2b04      	cmp	r3, #4
 80077b6:	d101      	bne.n	80077bc <dir_alloc+0x8a>
 80077b8:	2307      	movs	r3, #7
 80077ba:	73fb      	strb	r3, [r7, #15]
	return res;
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80077c6:	b480      	push	{r7}
 80077c8:	b085      	sub	sp, #20
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	331b      	adds	r3, #27
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	021b      	lsls	r3, r3, #8
 80077d8:	b21a      	sxth	r2, r3
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	331a      	adds	r3, #26
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	b21b      	sxth	r3, r3
 80077e2:	4313      	orrs	r3, r2
 80077e4:	b21b      	sxth	r3, r3
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80077f0:	2b03      	cmp	r3, #3
 80077f2:	d10f      	bne.n	8007814 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	3315      	adds	r3, #21
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	021b      	lsls	r3, r3, #8
 80077fc:	b21a      	sxth	r2, r3
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	3314      	adds	r3, #20
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	b21b      	sxth	r3, r3
 8007806:	4313      	orrs	r3, r2
 8007808:	b21b      	sxth	r3, r3
 800780a:	b29b      	uxth	r3, r3
 800780c:	041b      	lsls	r3, r3, #16
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	4313      	orrs	r3, r2
 8007812:	60fb      	str	r3, [r7, #12]

	return cl;
 8007814:	68fb      	ldr	r3, [r7, #12]
}
 8007816:	4618      	mov	r0, r3
 8007818:	3714      	adds	r7, #20
 800781a:	46bd      	mov	sp, r7
 800781c:	bc80      	pop	{r7}
 800781e:	4770      	bx	lr

08007820 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	331a      	adds	r3, #26
 800782e:	683a      	ldr	r2, [r7, #0]
 8007830:	b2d2      	uxtb	r2, r2
 8007832:	701a      	strb	r2, [r3, #0]
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	b29b      	uxth	r3, r3
 8007838:	0a1b      	lsrs	r3, r3, #8
 800783a:	b29a      	uxth	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	331b      	adds	r3, #27
 8007840:	b2d2      	uxtb	r2, r2
 8007842:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	0c1a      	lsrs	r2, r3, #16
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	3314      	adds	r3, #20
 800784c:	b2d2      	uxtb	r2, r2
 800784e:	701a      	strb	r2, [r3, #0]
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	0c1b      	lsrs	r3, r3, #16
 8007854:	b29b      	uxth	r3, r3
 8007856:	0a1b      	lsrs	r3, r3, #8
 8007858:	b29a      	uxth	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	3315      	adds	r3, #21
 800785e:	b2d2      	uxtb	r2, r2
 8007860:	701a      	strb	r2, [r3, #0]
}
 8007862:	bf00      	nop
 8007864:	370c      	adds	r7, #12
 8007866:	46bd      	mov	sp, r7
 8007868:	bc80      	pop	{r7}
 800786a:	4770      	bx	lr

0800786c <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b086      	sub	sp, #24
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007874:	2100      	movs	r1, #0
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f7ff fdd0 	bl	800741c <dir_sdi>
 800787c:	4603      	mov	r3, r0
 800787e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007880:	7dfb      	ldrb	r3, [r7, #23]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d001      	beq.n	800788a <dir_find+0x1e>
 8007886:	7dfb      	ldrb	r3, [r7, #23]
 8007888:	e03b      	b.n	8007902 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007896:	4619      	mov	r1, r3
 8007898:	4610      	mov	r0, r2
 800789a:	f7ff f9d6 	bl	8006c4a <move_window>
 800789e:	4603      	mov	r3, r0
 80078a0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80078a2:	7dfb      	ldrb	r3, [r7, #23]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d128      	bne.n	80078fa <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80078ae:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80078b6:	7bfb      	ldrb	r3, [r7, #15]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d102      	bne.n	80078c2 <dir_find+0x56>
 80078bc:	2304      	movs	r3, #4
 80078be:	75fb      	strb	r3, [r7, #23]
 80078c0:	e01e      	b.n	8007900 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	330b      	adds	r3, #11
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	f003 0308 	and.w	r3, r3, #8
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d10a      	bne.n	80078e6 <dir_find+0x7a>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80078d6:	220b      	movs	r2, #11
 80078d8:	4619      	mov	r1, r3
 80078da:	6938      	ldr	r0, [r7, #16]
 80078dc:	f7fe ff7a 	bl	80067d4 <mem_cmp>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00b      	beq.n	80078fe <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80078e6:	2100      	movs	r1, #0
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f7ff fe2b 	bl	8007544 <dir_next>
 80078ee:	4603      	mov	r3, r0
 80078f0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80078f2:	7dfb      	ldrb	r3, [r7, #23]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d0c8      	beq.n	800788a <dir_find+0x1e>
 80078f8:	e002      	b.n	8007900 <dir_find+0x94>
		if (res != FR_OK) break;
 80078fa:	bf00      	nop
 80078fc:	e000      	b.n	8007900 <dir_find+0x94>
			break;
 80078fe:	bf00      	nop

	return res;
 8007900:	7dfb      	ldrb	r3, [r7, #23]
}
 8007902:	4618      	mov	r0, r3
 8007904:	3718      	adds	r7, #24
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b084      	sub	sp, #16
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007912:	2101      	movs	r1, #1
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f7ff ff0c 	bl	8007732 <dir_alloc>
 800791a:	4603      	mov	r3, r0
 800791c:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800791e:	7bfb      	ldrb	r3, [r7, #15]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d126      	bne.n	8007972 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007930:	4619      	mov	r1, r3
 8007932:	4610      	mov	r0, r2
 8007934:	f7ff f989 	bl	8006c4a <move_window>
 8007938:	4603      	mov	r3, r0
 800793a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800793c:	7bfb      	ldrb	r3, [r7, #15]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d117      	bne.n	8007972 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007948:	2220      	movs	r2, #32
 800794a:	2100      	movs	r1, #0
 800794c:	4618      	mov	r0, r3
 800794e:	f7fe ff28 	bl	80067a2 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800795e:	220b      	movs	r2, #11
 8007960:	4619      	mov	r1, r3
 8007962:	f7fe ff01 	bl	8006768 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800796c:	2201      	movs	r2, #1
 800796e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8007972:	7bfb      	ldrb	r3, [r7, #15]
}
 8007974:	4618      	mov	r0, r3
 8007976:	3710      	adds	r7, #16
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b088      	sub	sp, #32
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	60fb      	str	r3, [r7, #12]
 800798c:	e002      	b.n	8007994 <create_name+0x18>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	3301      	adds	r3, #1
 8007992:	60fb      	str	r3, [r7, #12]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	2b2f      	cmp	r3, #47	; 0x2f
 800799a:	d0f8      	beq.n	800798e <create_name+0x12>
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	2b5c      	cmp	r3, #92	; 0x5c
 80079a2:	d0f4      	beq.n	800798e <create_name+0x12>
	sfn = dp->fn;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80079aa:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80079ac:	220b      	movs	r2, #11
 80079ae:	2120      	movs	r1, #32
 80079b0:	68b8      	ldr	r0, [r7, #8]
 80079b2:	f7fe fef6 	bl	80067a2 <mem_set>
	si = i = b = 0; ni = 8;
 80079b6:	2300      	movs	r3, #0
 80079b8:	77fb      	strb	r3, [r7, #31]
 80079ba:	2300      	movs	r3, #0
 80079bc:	613b      	str	r3, [r7, #16]
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	617b      	str	r3, [r7, #20]
 80079c2:	2308      	movs	r3, #8
 80079c4:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	1c5a      	adds	r2, r3, #1
 80079ca:	617a      	str	r2, [r7, #20]
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	4413      	add	r3, r2
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80079d4:	7fbb      	ldrb	r3, [r7, #30]
 80079d6:	2b20      	cmp	r3, #32
 80079d8:	d953      	bls.n	8007a82 <create_name+0x106>
 80079da:	7fbb      	ldrb	r3, [r7, #30]
 80079dc:	2b2f      	cmp	r3, #47	; 0x2f
 80079de:	d050      	beq.n	8007a82 <create_name+0x106>
 80079e0:	7fbb      	ldrb	r3, [r7, #30]
 80079e2:	2b5c      	cmp	r3, #92	; 0x5c
 80079e4:	d04d      	beq.n	8007a82 <create_name+0x106>
		if (c == '.' || i >= ni) {
 80079e6:	7fbb      	ldrb	r3, [r7, #30]
 80079e8:	2b2e      	cmp	r3, #46	; 0x2e
 80079ea:	d003      	beq.n	80079f4 <create_name+0x78>
 80079ec:	693a      	ldr	r2, [r7, #16]
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d30f      	bcc.n	8007a14 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	2b08      	cmp	r3, #8
 80079f8:	d102      	bne.n	8007a00 <create_name+0x84>
 80079fa:	7fbb      	ldrb	r3, [r7, #30]
 80079fc:	2b2e      	cmp	r3, #46	; 0x2e
 80079fe:	d001      	beq.n	8007a04 <create_name+0x88>
 8007a00:	2306      	movs	r3, #6
 8007a02:	e073      	b.n	8007aec <create_name+0x170>
			i = 8; ni = 11;
 8007a04:	2308      	movs	r3, #8
 8007a06:	613b      	str	r3, [r7, #16]
 8007a08:	230b      	movs	r3, #11
 8007a0a:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8007a0c:	7ffb      	ldrb	r3, [r7, #31]
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	77fb      	strb	r3, [r7, #31]
 8007a12:	e035      	b.n	8007a80 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007a14:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	da08      	bge.n	8007a2e <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8007a1c:	7ffb      	ldrb	r3, [r7, #31]
 8007a1e:	f043 0303 	orr.w	r3, r3, #3
 8007a22:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007a24:	7fbb      	ldrb	r3, [r7, #30]
 8007a26:	3b80      	subs	r3, #128	; 0x80
 8007a28:	4a32      	ldr	r2, [pc, #200]	; (8007af4 <create_name+0x178>)
 8007a2a:	5cd3      	ldrb	r3, [r2, r3]
 8007a2c:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8007a2e:	7fbb      	ldrb	r3, [r7, #30]
 8007a30:	4619      	mov	r1, r3
 8007a32:	4831      	ldr	r0, [pc, #196]	; (8007af8 <create_name+0x17c>)
 8007a34:	f7fe fef4 	bl	8006820 <chk_chr>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d001      	beq.n	8007a42 <create_name+0xc6>
				return FR_INVALID_NAME;
 8007a3e:	2306      	movs	r3, #6
 8007a40:	e054      	b.n	8007aec <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8007a42:	7fbb      	ldrb	r3, [r7, #30]
 8007a44:	2b40      	cmp	r3, #64	; 0x40
 8007a46:	d907      	bls.n	8007a58 <create_name+0xdc>
 8007a48:	7fbb      	ldrb	r3, [r7, #30]
 8007a4a:	2b5a      	cmp	r3, #90	; 0x5a
 8007a4c:	d804      	bhi.n	8007a58 <create_name+0xdc>
				b |= 2;
 8007a4e:	7ffb      	ldrb	r3, [r7, #31]
 8007a50:	f043 0302 	orr.w	r3, r3, #2
 8007a54:	77fb      	strb	r3, [r7, #31]
 8007a56:	e00c      	b.n	8007a72 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8007a58:	7fbb      	ldrb	r3, [r7, #30]
 8007a5a:	2b60      	cmp	r3, #96	; 0x60
 8007a5c:	d909      	bls.n	8007a72 <create_name+0xf6>
 8007a5e:	7fbb      	ldrb	r3, [r7, #30]
 8007a60:	2b7a      	cmp	r3, #122	; 0x7a
 8007a62:	d806      	bhi.n	8007a72 <create_name+0xf6>
					b |= 1; c -= 0x20;
 8007a64:	7ffb      	ldrb	r3, [r7, #31]
 8007a66:	f043 0301 	orr.w	r3, r3, #1
 8007a6a:	77fb      	strb	r3, [r7, #31]
 8007a6c:	7fbb      	ldrb	r3, [r7, #30]
 8007a6e:	3b20      	subs	r3, #32
 8007a70:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	1c5a      	adds	r2, r3, #1
 8007a76:	613a      	str	r2, [r7, #16]
 8007a78:	68ba      	ldr	r2, [r7, #8]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	7fba      	ldrb	r2, [r7, #30]
 8007a7e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007a80:	e7a1      	b.n	80079c6 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	441a      	add	r2, r3
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8007a8c:	7fbb      	ldrb	r3, [r7, #30]
 8007a8e:	2b20      	cmp	r3, #32
 8007a90:	d801      	bhi.n	8007a96 <create_name+0x11a>
 8007a92:	2304      	movs	r3, #4
 8007a94:	e000      	b.n	8007a98 <create_name+0x11c>
 8007a96:	2300      	movs	r3, #0
 8007a98:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d101      	bne.n	8007aa4 <create_name+0x128>
 8007aa0:	2306      	movs	r3, #6
 8007aa2:	e023      	b.n	8007aec <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	2be5      	cmp	r3, #229	; 0xe5
 8007aaa:	d102      	bne.n	8007ab2 <create_name+0x136>
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	2205      	movs	r2, #5
 8007ab0:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	2b08      	cmp	r3, #8
 8007ab6:	d102      	bne.n	8007abe <create_name+0x142>
 8007ab8:	7ffb      	ldrb	r3, [r7, #31]
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8007abe:	7ffb      	ldrb	r3, [r7, #31]
 8007ac0:	f003 0303 	and.w	r3, r3, #3
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d103      	bne.n	8007ad0 <create_name+0x154>
 8007ac8:	7fbb      	ldrb	r3, [r7, #30]
 8007aca:	f043 0310 	orr.w	r3, r3, #16
 8007ace:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8007ad0:	7ffb      	ldrb	r3, [r7, #31]
 8007ad2:	f003 030c 	and.w	r3, r3, #12
 8007ad6:	2b04      	cmp	r3, #4
 8007ad8:	d103      	bne.n	8007ae2 <create_name+0x166>
 8007ada:	7fbb      	ldrb	r3, [r7, #30]
 8007adc:	f043 0308 	orr.w	r3, r3, #8
 8007ae0:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	330b      	adds	r3, #11
 8007ae6:	7fba      	ldrb	r2, [r7, #30]
 8007ae8:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007aea:	2300      	movs	r3, #0
#endif
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3720      	adds	r7, #32
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	0800d93c 	.word	0x0800d93c
 8007af8:	0800d8d4 	.word	0x0800d8d4

08007afc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	2b2f      	cmp	r3, #47	; 0x2f
 8007b0c:	d003      	beq.n	8007b16 <follow_path+0x1a>
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	2b5c      	cmp	r3, #92	; 0x5c
 8007b14:	d102      	bne.n	8007b1c <follow_path+0x20>
		path++;
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	2b1f      	cmp	r3, #31
 8007b2a:	d80a      	bhi.n	8007b42 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f7ff fc74 	bl	800741c <dir_sdi>
 8007b34:	4603      	mov	r3, r0
 8007b36:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8007b40:	e045      	b.n	8007bce <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007b42:	463b      	mov	r3, r7
 8007b44:	4619      	mov	r1, r3
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f7ff ff18 	bl	800797c <create_name>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007b50:	7bfb      	ldrb	r3, [r7, #15]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d136      	bne.n	8007bc4 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f7ff fe88 	bl	800786c <dir_find>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007b66:	7adb      	ldrb	r3, [r3, #11]
 8007b68:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8007b6a:	7bfb      	ldrb	r3, [r7, #15]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00a      	beq.n	8007b86 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007b70:	7bfb      	ldrb	r3, [r7, #15]
 8007b72:	2b04      	cmp	r3, #4
 8007b74:	d128      	bne.n	8007bc8 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007b76:	7bbb      	ldrb	r3, [r7, #14]
 8007b78:	f003 0304 	and.w	r3, r3, #4
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d123      	bne.n	8007bc8 <follow_path+0xcc>
 8007b80:	2305      	movs	r3, #5
 8007b82:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8007b84:	e020      	b.n	8007bc8 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007b86:	7bbb      	ldrb	r3, [r7, #14]
 8007b88:	f003 0304 	and.w	r3, r3, #4
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d11d      	bne.n	8007bcc <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b96:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	330b      	adds	r3, #11
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	f003 0310 	and.w	r3, r3, #16
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d102      	bne.n	8007bac <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8007ba6:	2305      	movs	r3, #5
 8007ba8:	73fb      	strb	r3, [r7, #15]
 8007baa:	e010      	b.n	8007bce <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007bb2:	68b9      	ldr	r1, [r7, #8]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7ff fe06 	bl	80077c6 <ld_clust>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007bc2:	e7be      	b.n	8007b42 <follow_path+0x46>
			if (res != FR_OK) break;
 8007bc4:	bf00      	nop
 8007bc6:	e002      	b.n	8007bce <follow_path+0xd2>
				break;
 8007bc8:	bf00      	nop
 8007bca:	e000      	b.n	8007bce <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007bcc:	bf00      	nop
		}
	}

	return res;
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b087      	sub	sp, #28
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007be0:	f04f 33ff 	mov.w	r3, #4294967295
 8007be4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d031      	beq.n	8007c52 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	617b      	str	r3, [r7, #20]
 8007bf4:	e002      	b.n	8007bfc <get_ldnumber+0x24>
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	617b      	str	r3, [r7, #20]
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	2b20      	cmp	r3, #32
 8007c02:	d903      	bls.n	8007c0c <get_ldnumber+0x34>
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	2b3a      	cmp	r3, #58	; 0x3a
 8007c0a:	d1f4      	bne.n	8007bf6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	2b3a      	cmp	r3, #58	; 0x3a
 8007c12:	d11c      	bne.n	8007c4e <get_ldnumber+0x76>
			tp = *path;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	1c5a      	adds	r2, r3, #1
 8007c1e:	60fa      	str	r2, [r7, #12]
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	3b30      	subs	r3, #48	; 0x30
 8007c24:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	2b09      	cmp	r3, #9
 8007c2a:	d80e      	bhi.n	8007c4a <get_ldnumber+0x72>
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d10a      	bne.n	8007c4a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d107      	bne.n	8007c4a <get_ldnumber+0x72>
					vol = (int)i;
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	3301      	adds	r3, #1
 8007c42:	617b      	str	r3, [r7, #20]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	697a      	ldr	r2, [r7, #20]
 8007c48:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	e002      	b.n	8007c54 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007c4e:	2300      	movs	r3, #0
 8007c50:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007c52:	693b      	ldr	r3, [r7, #16]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	371c      	adds	r7, #28
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bc80      	pop	{r7}
 8007c5c:	4770      	bx	lr
	...

08007c60 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f04f 32ff 	mov.w	r2, #4294967295
 8007c78:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f7fe ffe3 	bl	8006c4a <move_window>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d001      	beq.n	8007c8e <check_fs+0x2e>
		return 3;
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	e04a      	b.n	8007d24 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007c94:	3301      	adds	r3, #1
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	021b      	lsls	r3, r3, #8
 8007c9a:	b21a      	sxth	r2, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8007ca2:	b21b      	sxth	r3, r3
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	b21b      	sxth	r3, r3
 8007ca8:	4a20      	ldr	r2, [pc, #128]	; (8007d2c <check_fs+0xcc>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d001      	beq.n	8007cb2 <check_fs+0x52>
		return 2;
 8007cae:	2302      	movs	r3, #2
 8007cb0:	e038      	b.n	8007d24 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	3336      	adds	r3, #54	; 0x36
 8007cb6:	3303      	adds	r3, #3
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	061a      	lsls	r2, r3, #24
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	3336      	adds	r3, #54	; 0x36
 8007cc0:	3302      	adds	r3, #2
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	041b      	lsls	r3, r3, #16
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	3236      	adds	r2, #54	; 0x36
 8007ccc:	3201      	adds	r2, #1
 8007cce:	7812      	ldrb	r2, [r2, #0]
 8007cd0:	0212      	lsls	r2, r2, #8
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007ce0:	4a13      	ldr	r2, [pc, #76]	; (8007d30 <check_fs+0xd0>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d101      	bne.n	8007cea <check_fs+0x8a>
		return 0;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	e01c      	b.n	8007d24 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	3352      	adds	r3, #82	; 0x52
 8007cee:	3303      	adds	r3, #3
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	061a      	lsls	r2, r3, #24
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	3352      	adds	r3, #82	; 0x52
 8007cf8:	3302      	adds	r3, #2
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	041b      	lsls	r3, r3, #16
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	3252      	adds	r2, #82	; 0x52
 8007d04:	3201      	adds	r2, #1
 8007d06:	7812      	ldrb	r2, [r2, #0]
 8007d08:	0212      	lsls	r2, r2, #8
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8007d12:	4313      	orrs	r3, r2
 8007d14:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007d18:	4a05      	ldr	r2, [pc, #20]	; (8007d30 <check_fs+0xd0>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d101      	bne.n	8007d22 <check_fs+0xc2>
		return 0;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	e000      	b.n	8007d24 <check_fs+0xc4>

	return 1;
 8007d22:	2301      	movs	r3, #1
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	ffffaa55 	.word	0xffffaa55
 8007d30:	00544146 	.word	0x00544146

08007d34 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b096      	sub	sp, #88	; 0x58
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2200      	movs	r2, #0
 8007d46:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007d48:	68b8      	ldr	r0, [r7, #8]
 8007d4a:	f7ff ff45 	bl	8007bd8 <get_ldnumber>
 8007d4e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	da01      	bge.n	8007d5a <find_volume+0x26>
 8007d56:	230b      	movs	r3, #11
 8007d58:	e2aa      	b.n	80082b0 <find_volume+0x57c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007d5a:	4a9e      	ldr	r2, [pc, #632]	; (8007fd4 <find_volume+0x2a0>)
 8007d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d62:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d101      	bne.n	8007d6e <find_volume+0x3a>
 8007d6a:	230c      	movs	r3, #12
 8007d6c:	e2a0      	b.n	80082b0 <find_volume+0x57c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d72:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8007d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d76:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d01b      	beq.n	8007db6 <find_volume+0x82>
		stat = disk_status(fs->drv);
 8007d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d80:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7fe fc51 	bl	800662c <disk_status>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007d90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d94:	f003 0301 	and.w	r3, r3, #1
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10c      	bne.n	8007db6 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8007d9c:	79fb      	ldrb	r3, [r7, #7]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d007      	beq.n	8007db2 <find_volume+0x7e>
 8007da2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007da6:	f003 0304 	and.w	r3, r3, #4
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d001      	beq.n	8007db2 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8007dae:	230a      	movs	r3, #10
 8007db0:	e27e      	b.n	80082b0 <find_volume+0x57c>
			return FR_OK;				/* The file system object is valid */
 8007db2:	2300      	movs	r3, #0
 8007db4:	e27c      	b.n	80082b0 <find_volume+0x57c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dc0:	b2da      	uxtb	r2, r3
 8007dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dca:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fe fc46 	bl	8006660 <disk_initialize>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8007dda:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007dde:	f003 0301 	and.w	r3, r3, #1
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d001      	beq.n	8007dea <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007de6:	2303      	movs	r3, #3
 8007de8:	e262      	b.n	80082b0 <find_volume+0x57c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8007dea:	79fb      	ldrb	r3, [r7, #7]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d007      	beq.n	8007e00 <find_volume+0xcc>
 8007df0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007df4:	f003 0304 	and.w	r3, r3, #4
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d001      	beq.n	8007e00 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8007dfc:	230a      	movs	r3, #10
 8007dfe:	e257      	b.n	80082b0 <find_volume+0x57c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8007e00:	2300      	movs	r3, #0
 8007e02:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8007e04:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007e06:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e08:	f7ff ff2a 	bl	8007c60 <check_fs>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8007e12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d155      	bne.n	8007ec6 <find_volume+0x192>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	643b      	str	r3, [r7, #64]	; 0x40
 8007e1e:	e029      	b.n	8007e74 <find_volume+0x140>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8007e20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e24:	011b      	lsls	r3, r3, #4
 8007e26:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007e2a:	4413      	add	r3, r2
 8007e2c:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8007e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e30:	3304      	adds	r3, #4
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d012      	beq.n	8007e5e <find_volume+0x12a>
 8007e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3a:	330b      	adds	r3, #11
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	061a      	lsls	r2, r3, #24
 8007e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e42:	330a      	adds	r3, #10
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	041b      	lsls	r3, r3, #16
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e4c:	3209      	adds	r2, #9
 8007e4e:	7812      	ldrb	r2, [r2, #0]
 8007e50:	0212      	lsls	r2, r2, #8
 8007e52:	4313      	orrs	r3, r2
 8007e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e56:	3208      	adds	r2, #8
 8007e58:	7812      	ldrb	r2, [r2, #0]
 8007e5a:	431a      	orrs	r2, r3
 8007e5c:	e000      	b.n	8007e60 <find_volume+0x12c>
 8007e5e:	2200      	movs	r2, #0
 8007e60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007e68:	440b      	add	r3, r1
 8007e6a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e70:	3301      	adds	r3, #1
 8007e72:	643b      	str	r3, [r7, #64]	; 0x40
 8007e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e76:	2b03      	cmp	r3, #3
 8007e78:	d9d2      	bls.n	8007e20 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007e7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d002      	beq.n	8007e8a <find_volume+0x156>
 8007e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e86:	3b01      	subs	r3, #1
 8007e88:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8007e8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007e92:	4413      	add	r3, r2
 8007e94:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007e98:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8007e9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d005      	beq.n	8007eac <find_volume+0x178>
 8007ea0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007ea2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ea4:	f7ff fedc 	bl	8007c60 <check_fs>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	e000      	b.n	8007eae <find_volume+0x17a>
 8007eac:	2302      	movs	r3, #2
 8007eae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8007eb2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d005      	beq.n	8007ec6 <find_volume+0x192>
 8007eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	643b      	str	r3, [r7, #64]	; 0x40
 8007ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ec2:	2b03      	cmp	r3, #3
 8007ec4:	d9e1      	bls.n	8007e8a <find_volume+0x156>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007ec6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007eca:	2b03      	cmp	r3, #3
 8007ecc:	d101      	bne.n	8007ed2 <find_volume+0x19e>
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e1ee      	b.n	80082b0 <find_volume+0x57c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8007ed2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d001      	beq.n	8007ede <find_volume+0x1aa>
 8007eda:	230d      	movs	r3, #13
 8007edc:	e1e8      	b.n	80082b0 <find_volume+0x57c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee0:	7b1b      	ldrb	r3, [r3, #12]
 8007ee2:	021b      	lsls	r3, r3, #8
 8007ee4:	b21a      	sxth	r2, r3
 8007ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee8:	7adb      	ldrb	r3, [r3, #11]
 8007eea:	b21b      	sxth	r3, r3
 8007eec:	4313      	orrs	r3, r2
 8007eee:	b21b      	sxth	r3, r3
 8007ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ef4:	d001      	beq.n	8007efa <find_volume+0x1c6>
		return FR_NO_FILESYSTEM;
 8007ef6:	230d      	movs	r3, #13
 8007ef8:	e1da      	b.n	80082b0 <find_volume+0x57c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8007efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007efc:	7ddb      	ldrb	r3, [r3, #23]
 8007efe:	021b      	lsls	r3, r3, #8
 8007f00:	b21a      	sxth	r2, r3
 8007f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f04:	7d9b      	ldrb	r3, [r3, #22]
 8007f06:	b21b      	sxth	r3, r3
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	b21b      	sxth	r3, r3
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8007f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d112      	bne.n	8007f3c <find_volume+0x208>
 8007f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f18:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007f1c:	061a      	lsls	r2, r3, #24
 8007f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f20:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007f24:	041b      	lsls	r3, r3, #16
 8007f26:	4313      	orrs	r3, r2
 8007f28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f2a:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8007f2e:	0212      	lsls	r2, r2, #8
 8007f30:	4313      	orrs	r3, r2
 8007f32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f34:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8007f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f40:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8007f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f46:	7c1a      	ldrb	r2, [r3, #16]
 8007f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f4a:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8007f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f50:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d006      	beq.n	8007f66 <find_volume+0x232>
 8007f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5a:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8007f5e:	2b02      	cmp	r3, #2
 8007f60:	d001      	beq.n	8007f66 <find_volume+0x232>
		return FR_NO_FILESYSTEM;
 8007f62:	230d      	movs	r3, #13
 8007f64:	e1a4      	b.n	80082b0 <find_volume+0x57c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8007f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f68:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f70:	fb02 f303 	mul.w	r3, r2, r3
 8007f74:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8007f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f78:	7b5a      	ldrb	r2, [r3, #13]
 8007f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7c:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8007f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f82:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00a      	beq.n	8007fa0 <find_volume+0x26c>
 8007f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007f90:	461a      	mov	r2, r3
 8007f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f94:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d001      	beq.n	8007fa4 <find_volume+0x270>
		return FR_NO_FILESYSTEM;
 8007fa0:	230d      	movs	r3, #13
 8007fa2:	e185      	b.n	80082b0 <find_volume+0x57c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8007fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa6:	7c9b      	ldrb	r3, [r3, #18]
 8007fa8:	021b      	lsls	r3, r3, #8
 8007faa:	b21a      	sxth	r2, r3
 8007fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fae:	7c5b      	ldrb	r3, [r3, #17]
 8007fb0:	b21b      	sxth	r3, r3
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	b21b      	sxth	r3, r3
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fba:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8007fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc0:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8007fc4:	f003 030f 	and.w	r3, r3, #15
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d004      	beq.n	8007fd8 <find_volume+0x2a4>
		return FR_NO_FILESYSTEM;
 8007fce:	230d      	movs	r3, #13
 8007fd0:	e16e      	b.n	80082b0 <find_volume+0x57c>
 8007fd2:	bf00      	nop
 8007fd4:	20000294 	.word	0x20000294

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8007fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fda:	7d1b      	ldrb	r3, [r3, #20]
 8007fdc:	021b      	lsls	r3, r3, #8
 8007fde:	b21a      	sxth	r2, r3
 8007fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe2:	7cdb      	ldrb	r3, [r3, #19]
 8007fe4:	b21b      	sxth	r3, r3
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	b21b      	sxth	r3, r3
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8007fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d112      	bne.n	800801a <find_volume+0x2e6>
 8007ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007ffa:	061a      	lsls	r2, r3, #24
 8007ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffe:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008002:	041b      	lsls	r3, r3, #16
 8008004:	4313      	orrs	r3, r2
 8008006:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008008:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800800c:	0212      	lsls	r2, r2, #8
 800800e:	4313      	orrs	r3, r2
 8008010:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008012:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008016:	4313      	orrs	r3, r2
 8008018:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800801a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800801c:	7bdb      	ldrb	r3, [r3, #15]
 800801e:	021b      	lsls	r3, r3, #8
 8008020:	b21a      	sxth	r2, r3
 8008022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008024:	7b9b      	ldrb	r3, [r3, #14]
 8008026:	b21b      	sxth	r3, r3
 8008028:	4313      	orrs	r3, r2
 800802a:	b21b      	sxth	r3, r3
 800802c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800802e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008030:	2b00      	cmp	r3, #0
 8008032:	d101      	bne.n	8008038 <find_volume+0x304>
 8008034:	230d      	movs	r3, #13
 8008036:	e13b      	b.n	80082b0 <find_volume+0x57c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8008038:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800803a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800803c:	4413      	add	r3, r2
 800803e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008040:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8008044:	0912      	lsrs	r2, r2, #4
 8008046:	b292      	uxth	r2, r2
 8008048:	4413      	add	r3, r2
 800804a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800804c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800804e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008050:	429a      	cmp	r2, r3
 8008052:	d201      	bcs.n	8008058 <find_volume+0x324>
 8008054:	230d      	movs	r3, #13
 8008056:	e12b      	b.n	80082b0 <find_volume+0x57c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8008058:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800805a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805c:	1ad3      	subs	r3, r2, r3
 800805e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008060:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8008064:	fbb3 f3f2 	udiv	r3, r3, r2
 8008068:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800806a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806c:	2b00      	cmp	r3, #0
 800806e:	d101      	bne.n	8008074 <find_volume+0x340>
 8008070:	230d      	movs	r3, #13
 8008072:	e11d      	b.n	80082b0 <find_volume+0x57c>
	fmt = FS_FAT12;
 8008074:	2301      	movs	r3, #1
 8008076:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800807a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008080:	4293      	cmp	r3, r2
 8008082:	d902      	bls.n	800808a <find_volume+0x356>
 8008084:	2302      	movs	r3, #2
 8008086:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800808a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008090:	4293      	cmp	r3, r2
 8008092:	d902      	bls.n	800809a <find_volume+0x366>
 8008094:	2303      	movs	r3, #3
 8008096:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800809a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809c:	1c9a      	adds	r2, r3, #2
 800809e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 80080a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80080a8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80080ac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80080ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080b0:	441a      	add	r2, r3
 80080b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b4:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 80080b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80080ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080bc:	441a      	add	r2, r3
 80080be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c0:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 80080c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080c8:	2b03      	cmp	r3, #3
 80080ca:	d121      	bne.n	8008110 <find_volume+0x3dc>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80080cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ce:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d001      	beq.n	80080da <find_volume+0x3a6>
 80080d6:	230d      	movs	r3, #13
 80080d8:	e0ea      	b.n	80082b0 <find_volume+0x57c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80080da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080dc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80080e0:	061a      	lsls	r2, r3, #24
 80080e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80080e8:	041b      	lsls	r3, r3, #16
 80080ea:	4313      	orrs	r3, r2
 80080ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080ee:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80080f2:	0212      	lsls	r2, r2, #8
 80080f4:	4313      	orrs	r3, r2
 80080f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080f8:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80080fc:	431a      	orrs	r2, r3
 80080fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008100:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8008104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008106:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	647b      	str	r3, [r7, #68]	; 0x44
 800810e:	e025      	b.n	800815c <find_volume+0x428>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8008110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008112:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8008116:	2b00      	cmp	r3, #0
 8008118:	d101      	bne.n	800811e <find_volume+0x3ea>
 800811a:	230d      	movs	r3, #13
 800811c:	e0c8      	b.n	80082b0 <find_volume+0x57c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800811e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008120:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8008124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008126:	441a      	add	r2, r3
 8008128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812a:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800812e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008132:	2b02      	cmp	r3, #2
 8008134:	d104      	bne.n	8008140 <find_volume+0x40c>
 8008136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008138:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800813c:	005b      	lsls	r3, r3, #1
 800813e:	e00c      	b.n	800815a <find_volume+0x426>
 8008140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008142:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8008146:	4613      	mov	r3, r2
 8008148:	005b      	lsls	r3, r3, #1
 800814a:	4413      	add	r3, r2
 800814c:	085a      	lsrs	r2, r3, #1
 800814e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008150:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008154:	f003 0301 	and.w	r3, r3, #1
 8008158:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800815a:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800815c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8008162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008164:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008168:	0a5b      	lsrs	r3, r3, #9
 800816a:	429a      	cmp	r2, r3
 800816c:	d201      	bcs.n	8008172 <find_volume+0x43e>
		return FR_NO_FILESYSTEM;
 800816e:	230d      	movs	r3, #13
 8008170:	e09e      	b.n	80082b0 <find_volume+0x57c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8008172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008174:	f04f 32ff 	mov.w	r2, #4294967295
 8008178:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 800817c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008184:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8008188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818a:	2280      	movs	r2, #128	; 0x80
 800818c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8008190:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008194:	2b03      	cmp	r3, #3
 8008196:	d177      	bne.n	8008288 <find_volume+0x554>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8008198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800819a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800819e:	021b      	lsls	r3, r3, #8
 80081a0:	b21a      	sxth	r2, r3
 80081a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80081a8:	b21b      	sxth	r3, r3
 80081aa:	4313      	orrs	r3, r2
 80081ac:	b21b      	sxth	r3, r3
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d16a      	bne.n	8008288 <find_volume+0x554>
		&& move_window(fs, bsect + 1) == FR_OK)
 80081b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081b4:	3301      	adds	r3, #1
 80081b6:	4619      	mov	r1, r3
 80081b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80081ba:	f7fe fd46 	bl	8006c4a <move_window>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d161      	bne.n	8008288 <find_volume+0x554>
	{
		fs->fsi_flag = 0;
 80081c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80081cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ce:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80081d2:	021b      	lsls	r3, r3, #8
 80081d4:	b21a      	sxth	r2, r3
 80081d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d8:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80081dc:	b21b      	sxth	r3, r3
 80081de:	4313      	orrs	r3, r2
 80081e0:	b21b      	sxth	r3, r3
 80081e2:	4a35      	ldr	r2, [pc, #212]	; (80082b8 <find_volume+0x584>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d14f      	bne.n	8008288 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80081e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ea:	78db      	ldrb	r3, [r3, #3]
 80081ec:	061a      	lsls	r2, r3, #24
 80081ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f0:	789b      	ldrb	r3, [r3, #2]
 80081f2:	041b      	lsls	r3, r3, #16
 80081f4:	4313      	orrs	r3, r2
 80081f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081f8:	7852      	ldrb	r2, [r2, #1]
 80081fa:	0212      	lsls	r2, r2, #8
 80081fc:	4313      	orrs	r3, r2
 80081fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008200:	7812      	ldrb	r2, [r2, #0]
 8008202:	4313      	orrs	r3, r2
 8008204:	4a2d      	ldr	r2, [pc, #180]	; (80082bc <find_volume+0x588>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d13e      	bne.n	8008288 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800820a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820c:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8008210:	061a      	lsls	r2, r3, #24
 8008212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008214:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8008218:	041b      	lsls	r3, r3, #16
 800821a:	4313      	orrs	r3, r2
 800821c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800821e:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8008222:	0212      	lsls	r2, r2, #8
 8008224:	4313      	orrs	r3, r2
 8008226:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008228:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800822c:	4313      	orrs	r3, r2
 800822e:	4a24      	ldr	r2, [pc, #144]	; (80082c0 <find_volume+0x58c>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d129      	bne.n	8008288 <find_volume+0x554>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8008234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008236:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800823a:	061a      	lsls	r2, r3, #24
 800823c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823e:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8008242:	041b      	lsls	r3, r3, #16
 8008244:	4313      	orrs	r3, r2
 8008246:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008248:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800824c:	0212      	lsls	r2, r2, #8
 800824e:	4313      	orrs	r3, r2
 8008250:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008252:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8008256:	431a      	orrs	r2, r3
 8008258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800825e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008260:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8008264:	061a      	lsls	r2, r3, #24
 8008266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008268:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800826c:	041b      	lsls	r3, r3, #16
 800826e:	4313      	orrs	r3, r2
 8008270:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008272:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8008276:	0212      	lsls	r2, r2, #8
 8008278:	4313      	orrs	r3, r2
 800827a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800827c:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8008280:	431a      	orrs	r2, r3
 8008282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008284:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8008288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800828e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8008292:	4b0c      	ldr	r3, [pc, #48]	; (80082c4 <find_volume+0x590>)
 8008294:	881b      	ldrh	r3, [r3, #0]
 8008296:	3301      	adds	r3, #1
 8008298:	b29a      	uxth	r2, r3
 800829a:	4b0a      	ldr	r3, [pc, #40]	; (80082c4 <find_volume+0x590>)
 800829c:	801a      	strh	r2, [r3, #0]
 800829e:	4b09      	ldr	r3, [pc, #36]	; (80082c4 <find_volume+0x590>)
 80082a0:	881a      	ldrh	r2, [r3, #0]
 80082a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a4:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80082a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80082aa:	f7fe fc5d 	bl	8006b68 <clear_lock>
#endif

	return FR_OK;
 80082ae:	2300      	movs	r3, #0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3758      	adds	r7, #88	; 0x58
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	ffffaa55 	.word	0xffffaa55
 80082bc:	41615252 	.word	0x41615252
 80082c0:	61417272 	.word	0x61417272
 80082c4:	20000298 	.word	0x20000298

080082c8 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d022      	beq.n	8008320 <validate+0x58>
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d01d      	beq.n	8008320 <validate+0x58>
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80082ea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d016      	beq.n	8008320 <validate+0x58>
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80082f8:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8008302:	429a      	cmp	r2, r3
 8008304:	d10c      	bne.n	8008320 <validate+0x58>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800830c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008310:	4618      	mov	r0, r3
 8008312:	f7fe f98b 	bl	800662c <disk_status>
 8008316:	4603      	mov	r3, r0
 8008318:	f003 0301 	and.w	r3, r3, #1
 800831c:	2b00      	cmp	r3, #0
 800831e:	d001      	beq.n	8008324 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8008320:	2309      	movs	r3, #9
 8008322:	e000      	b.n	8008326 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
	...

08008330 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b088      	sub	sp, #32
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	4613      	mov	r3, r2
 800833c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8008342:	f107 0310 	add.w	r3, r7, #16
 8008346:	4618      	mov	r0, r3
 8008348:	f7ff fc46 	bl	8007bd8 <get_ldnumber>
 800834c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	2b00      	cmp	r3, #0
 8008352:	da01      	bge.n	8008358 <f_mount+0x28>
 8008354:	230b      	movs	r3, #11
 8008356:	e02d      	b.n	80083b4 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008358:	4a18      	ldr	r2, [pc, #96]	; (80083bc <f_mount+0x8c>)
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008360:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008362:	69bb      	ldr	r3, [r7, #24]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d006      	beq.n	8008376 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8008368:	69b8      	ldr	r0, [r7, #24]
 800836a:	f7fe fbfd 	bl	8006b68 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	2200      	movs	r2, #0
 8008372:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d003      	beq.n	8008384 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2200      	movs	r2, #0
 8008380:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	490d      	ldr	r1, [pc, #52]	; (80083bc <f_mount+0x8c>)
 8008388:	69fb      	ldr	r3, [r7, #28]
 800838a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d002      	beq.n	800839a <f_mount+0x6a>
 8008394:	79fb      	ldrb	r3, [r7, #7]
 8008396:	2b01      	cmp	r3, #1
 8008398:	d001      	beq.n	800839e <f_mount+0x6e>
 800839a:	2300      	movs	r3, #0
 800839c:	e00a      	b.n	80083b4 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800839e:	f107 0108 	add.w	r1, r7, #8
 80083a2:	f107 030c 	add.w	r3, r7, #12
 80083a6:	2200      	movs	r2, #0
 80083a8:	4618      	mov	r0, r3
 80083aa:	f7ff fcc3 	bl	8007d34 <find_volume>
 80083ae:	4603      	mov	r3, r0
 80083b0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80083b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3720      	adds	r7, #32
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	20000294 	.word	0x20000294

080083c0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	f107 030c 	add.w	r3, r7, #12
 80083cc:	6018      	str	r0, [r3, #0]
 80083ce:	f107 0308 	add.w	r3, r7, #8
 80083d2:	6019      	str	r1, [r3, #0]
 80083d4:	1dfb      	adds	r3, r7, #7
 80083d6:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80083d8:	f107 030c 	add.w	r3, r7, #12
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d101      	bne.n	80083e6 <f_open+0x26>
 80083e2:	2309      	movs	r3, #9
 80083e4:	e1f2      	b.n	80087cc <f_open+0x40c>
	fp->fs = 0;			/* Clear file object */
 80083e6:	f107 030c 	add.w	r3, r7, #12
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2200      	movs	r2, #0
 80083ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80083f2:	1dfb      	adds	r3, r7, #7
 80083f4:	1dfa      	adds	r2, r7, #7
 80083f6:	7812      	ldrb	r2, [r2, #0]
 80083f8:	f002 021f 	and.w	r2, r2, #31
 80083fc:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80083fe:	1dfb      	adds	r3, r7, #7
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	f023 0301 	bic.w	r3, r3, #1
 8008406:	b2da      	uxtb	r2, r3
 8008408:	f107 0108 	add.w	r1, r7, #8
 800840c:	f107 0320 	add.w	r3, r7, #32
 8008410:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008414:	4618      	mov	r0, r3
 8008416:	f7ff fc8d 	bl	8007d34 <find_volume>
 800841a:	4603      	mov	r3, r0
 800841c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8008420:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8008424:	2b00      	cmp	r3, #0
 8008426:	f040 81cf 	bne.w	80087c8 <f_open+0x408>
		INIT_BUF(dj);
 800842a:	f107 0320 	add.w	r3, r7, #32
 800842e:	f107 0214 	add.w	r2, r7, #20
 8008432:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8008436:	f107 0308 	add.w	r3, r7, #8
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	f107 0320 	add.w	r3, r7, #32
 8008440:	4611      	mov	r1, r2
 8008442:	4618      	mov	r0, r3
 8008444:	f7ff fb5a 	bl	8007afc <follow_path>
 8008448:	4603      	mov	r3, r0
 800844a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 800844e:	f107 0320 	add.w	r3, r7, #32
 8008452:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008456:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800845a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800845e:	2b00      	cmp	r3, #0
 8008460:	d11a      	bne.n	8008498 <f_open+0xd8>
			if (!dir)	/* Default directory itself */
 8008462:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008466:	2b00      	cmp	r3, #0
 8008468:	d103      	bne.n	8008472 <f_open+0xb2>
				res = FR_INVALID_NAME;
 800846a:	2306      	movs	r3, #6
 800846c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8008470:	e012      	b.n	8008498 <f_open+0xd8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008472:	1dfb      	adds	r3, r7, #7
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	f023 0301 	bic.w	r3, r3, #1
 800847a:	2b00      	cmp	r3, #0
 800847c:	bf14      	ite	ne
 800847e:	2301      	movne	r3, #1
 8008480:	2300      	moveq	r3, #0
 8008482:	b2db      	uxtb	r3, r3
 8008484:	461a      	mov	r2, r3
 8008486:	f107 0320 	add.w	r3, r7, #32
 800848a:	4611      	mov	r1, r2
 800848c:	4618      	mov	r0, r3
 800848e:	f7fe f9e1 	bl	8006854 <chk_lock>
 8008492:	4603      	mov	r3, r0
 8008494:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008498:	1dfb      	adds	r3, r7, #7
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	f003 031c 	and.w	r3, r3, #28
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f000 80cc 	beq.w	800863e <f_open+0x27e>
			if (res != FR_OK) {					/* No file, create new */
 80084a6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d01f      	beq.n	80084ee <f_open+0x12e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80084ae:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80084b2:	2b04      	cmp	r3, #4
 80084b4:	d10e      	bne.n	80084d4 <f_open+0x114>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80084b6:	f7fe fa39 	bl	800692c <enq_lock>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d006      	beq.n	80084ce <f_open+0x10e>
 80084c0:	f107 0320 	add.w	r3, r7, #32
 80084c4:	4618      	mov	r0, r3
 80084c6:	f7ff fa20 	bl	800790a <dir_register>
 80084ca:	4603      	mov	r3, r0
 80084cc:	e000      	b.n	80084d0 <f_open+0x110>
 80084ce:	2312      	movs	r3, #18
 80084d0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80084d4:	1dfb      	adds	r3, r7, #7
 80084d6:	1dfa      	adds	r2, r7, #7
 80084d8:	7812      	ldrb	r2, [r2, #0]
 80084da:	f042 0208 	orr.w	r2, r2, #8
 80084de:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 80084e0:	f107 0320 	add.w	r3, r7, #32
 80084e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80084e8:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80084ec:	e014      	b.n	8008518 <f_open+0x158>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80084ee:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80084f2:	330b      	adds	r3, #11
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	f003 0311 	and.w	r3, r3, #17
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d003      	beq.n	8008506 <f_open+0x146>
					res = FR_DENIED;
 80084fe:	2307      	movs	r3, #7
 8008500:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8008504:	e008      	b.n	8008518 <f_open+0x158>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8008506:	1dfb      	adds	r3, r7, #7
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	f003 0304 	and.w	r3, r3, #4
 800850e:	2b00      	cmp	r3, #0
 8008510:	d002      	beq.n	8008518 <f_open+0x158>
						res = FR_EXIST;
 8008512:	2308      	movs	r3, #8
 8008514:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008518:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800851c:	2b00      	cmp	r3, #0
 800851e:	f040 80af 	bne.w	8008680 <f_open+0x2c0>
 8008522:	1dfb      	adds	r3, r7, #7
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	f003 0308 	and.w	r3, r3, #8
 800852a:	2b00      	cmp	r3, #0
 800852c:	f000 80a8 	beq.w	8008680 <f_open+0x2c0>
				dw = GET_FATTIME();				/* Created time */
 8008530:	f7fe f81a 	bl	8006568 <get_fattime>
 8008534:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8008538:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800853c:	330e      	adds	r3, #14
 800853e:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008542:	b2d2      	uxtb	r2, r2
 8008544:	701a      	strb	r2, [r3, #0]
 8008546:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800854a:	b29b      	uxth	r3, r3
 800854c:	0a1b      	lsrs	r3, r3, #8
 800854e:	b29a      	uxth	r2, r3
 8008550:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008554:	330f      	adds	r3, #15
 8008556:	b2d2      	uxtb	r2, r2
 8008558:	701a      	strb	r2, [r3, #0]
 800855a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800855e:	0c1a      	lsrs	r2, r3, #16
 8008560:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008564:	3310      	adds	r3, #16
 8008566:	b2d2      	uxtb	r2, r2
 8008568:	701a      	strb	r2, [r3, #0]
 800856a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800856e:	0e1a      	lsrs	r2, r3, #24
 8008570:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008574:	3311      	adds	r3, #17
 8008576:	b2d2      	uxtb	r2, r2
 8008578:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800857a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800857e:	330b      	adds	r3, #11
 8008580:	2200      	movs	r2, #0
 8008582:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8008584:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008588:	331c      	adds	r3, #28
 800858a:	2200      	movs	r2, #0
 800858c:	701a      	strb	r2, [r3, #0]
 800858e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008592:	331d      	adds	r3, #29
 8008594:	2200      	movs	r2, #0
 8008596:	701a      	strb	r2, [r3, #0]
 8008598:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800859c:	331e      	adds	r3, #30
 800859e:	2200      	movs	r2, #0
 80085a0:	701a      	strb	r2, [r3, #0]
 80085a2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80085a6:	331f      	adds	r3, #31
 80085a8:	2200      	movs	r2, #0
 80085aa:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80085ac:	f107 0320 	add.w	r3, r7, #32
 80085b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80085b4:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7ff f904 	bl	80077c6 <ld_clust>
 80085be:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 80085c2:	2100      	movs	r1, #0
 80085c4:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 80085c8:	f7ff f92a 	bl	8007820 <st_clust>
				dj.fs->wflag = 1;
 80085cc:	f107 0320 	add.w	r3, r7, #32
 80085d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80085d4:	2201      	movs	r2, #1
 80085d6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 80085da:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d04e      	beq.n	8008680 <f_open+0x2c0>
					dw = dj.fs->winsect;
 80085e2:	f107 0320 	add.w	r3, r7, #32
 80085e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80085ea:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80085ee:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 80085f2:	f107 0320 	add.w	r3, r7, #32
 80085f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80085fa:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 80085fe:	4618      	mov	r0, r3
 8008600:	f7fe fde1 	bl	80071c6 <remove_chain>
 8008604:	4603      	mov	r3, r0
 8008606:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 800860a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800860e:	2b00      	cmp	r3, #0
 8008610:	d136      	bne.n	8008680 <f_open+0x2c0>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8008612:	f107 0320 	add.w	r3, r7, #32
 8008616:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800861a:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 800861e:	3a01      	subs	r2, #1
 8008620:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8008624:	f107 0320 	add.w	r3, r7, #32
 8008628:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800862c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8008630:	4618      	mov	r0, r3
 8008632:	f7fe fb0a 	bl	8006c4a <move_window>
 8008636:	4603      	mov	r3, r0
 8008638:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800863c:	e020      	b.n	8008680 <f_open+0x2c0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800863e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8008642:	2b00      	cmp	r3, #0
 8008644:	d11c      	bne.n	8008680 <f_open+0x2c0>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8008646:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800864a:	330b      	adds	r3, #11
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	f003 0310 	and.w	r3, r3, #16
 8008652:	2b00      	cmp	r3, #0
 8008654:	d003      	beq.n	800865e <f_open+0x29e>
					res = FR_NO_FILE;
 8008656:	2304      	movs	r3, #4
 8008658:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800865c:	e010      	b.n	8008680 <f_open+0x2c0>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800865e:	1dfb      	adds	r3, r7, #7
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	f003 0302 	and.w	r3, r3, #2
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00a      	beq.n	8008680 <f_open+0x2c0>
 800866a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800866e:	330b      	adds	r3, #11
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	f003 0301 	and.w	r3, r3, #1
 8008676:	2b00      	cmp	r3, #0
 8008678:	d002      	beq.n	8008680 <f_open+0x2c0>
						res = FR_DENIED;
 800867a:	2307      	movs	r3, #7
 800867c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8008680:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8008684:	2b00      	cmp	r3, #0
 8008686:	d13d      	bne.n	8008704 <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008688:	1dfb      	adds	r3, r7, #7
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	f003 0308 	and.w	r3, r3, #8
 8008690:	2b00      	cmp	r3, #0
 8008692:	d005      	beq.n	80086a0 <f_open+0x2e0>
				mode |= FA__WRITTEN;
 8008694:	1dfb      	adds	r3, r7, #7
 8008696:	1dfa      	adds	r2, r7, #7
 8008698:	7812      	ldrb	r2, [r2, #0]
 800869a:	f042 0220 	orr.w	r2, r2, #32
 800869e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80086a0:	f107 0320 	add.w	r3, r7, #32
 80086a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80086a8:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80086ac:	f107 030c 	add.w	r3, r7, #12
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 80086b6:	f107 030c 	add.w	r3, r7, #12
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80086c0:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80086c4:	1dfb      	adds	r3, r7, #7
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	f023 0301 	bic.w	r3, r3, #1
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	bf14      	ite	ne
 80086d0:	2301      	movne	r3, #1
 80086d2:	2300      	moveq	r3, #0
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	461a      	mov	r2, r3
 80086d8:	f107 0320 	add.w	r3, r7, #32
 80086dc:	4611      	mov	r1, r2
 80086de:	4618      	mov	r0, r3
 80086e0:	f7fe f948 	bl	8006974 <inc_lock>
 80086e4:	4602      	mov	r2, r0
 80086e6:	f107 030c 	add.w	r3, r7, #12
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 80086f0:	f107 030c 	add.w	r3, r7, #12
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d102      	bne.n	8008704 <f_open+0x344>
 80086fe:	2302      	movs	r3, #2
 8008700:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8008704:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8008708:	2b00      	cmp	r3, #0
 800870a:	d15d      	bne.n	80087c8 <f_open+0x408>
			fp->flag = mode;					/* File access mode */
 800870c:	f107 030c 	add.w	r3, r7, #12
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	1dfa      	adds	r2, r7, #7
 8008714:	7812      	ldrb	r2, [r2, #0]
 8008716:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 800871a:	f107 030c 	add.w	r3, r7, #12
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2200      	movs	r2, #0
 8008722:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8008726:	f107 0320 	add.w	r3, r7, #32
 800872a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800872e:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8008732:	4618      	mov	r0, r3
 8008734:	f7ff f847 	bl	80077c6 <ld_clust>
 8008738:	4602      	mov	r2, r0
 800873a:	f107 030c 	add.w	r3, r7, #12
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8008744:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008748:	331f      	adds	r3, #31
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	061a      	lsls	r2, r3, #24
 800874e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008752:	331e      	adds	r3, #30
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	041b      	lsls	r3, r3, #16
 8008758:	4313      	orrs	r3, r2
 800875a:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800875e:	321d      	adds	r2, #29
 8008760:	7812      	ldrb	r2, [r2, #0]
 8008762:	0212      	lsls	r2, r2, #8
 8008764:	4313      	orrs	r3, r2
 8008766:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800876a:	321c      	adds	r2, #28
 800876c:	7812      	ldrb	r2, [r2, #0]
 800876e:	431a      	orrs	r2, r3
 8008770:	f107 030c 	add.w	r3, r7, #12
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 800877a:	f107 030c 	add.w	r3, r7, #12
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2200      	movs	r2, #0
 8008782:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8008786:	f107 030c 	add.w	r3, r7, #12
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2200      	movs	r2, #0
 800878e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8008792:	f107 030c 	add.w	r3, r7, #12
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2200      	movs	r2, #0
 800879a:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800879e:	f107 0320 	add.w	r3, r7, #32
 80087a2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80087a6:	f107 030c 	add.w	r3, r7, #12
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 80087b0:	f107 030c 	add.w	r3, r7, #12
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80087ba:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80087be:	f107 030c 	add.w	r3, r7, #12
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 80087c8:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	f507 7714 	add.w	r7, r7, #592	; 0x250
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b08a      	sub	sp, #40	; 0x28
 80087da:	af00      	add	r7, sp, #0
 80087dc:	60f8      	str	r0, [r7, #12]
 80087de:	60b9      	str	r1, [r7, #8]
 80087e0:	607a      	str	r2, [r7, #4]
 80087e2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	2200      	movs	r2, #0
 80087ec:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f7ff fd6a 	bl	80082c8 <validate>
 80087f4:	4603      	mov	r3, r0
 80087f6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80087f8:	7dfb      	ldrb	r3, [r7, #23]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d001      	beq.n	8008802 <f_write+0x2c>
 80087fe:	7dfb      	ldrb	r3, [r7, #23]
 8008800:	e192      	b.n	8008b28 <f_write+0x352>
	if (fp->err)							/* Check error */
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8008808:	2b00      	cmp	r3, #0
 800880a:	d003      	beq.n	8008814 <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8008812:	e189      	b.n	8008b28 <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800881a:	f003 0302 	and.w	r3, r3, #2
 800881e:	2b00      	cmp	r3, #0
 8008820:	d101      	bne.n	8008826 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8008822:	2307      	movs	r3, #7
 8008824:	e180      	b.n	8008b28 <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	441a      	add	r2, r3
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8008836:	429a      	cmp	r2, r3
 8008838:	f080 8158 	bcs.w	8008aec <f_write+0x316>
 800883c:	2300      	movs	r3, #0
 800883e:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8008840:	e154      	b.n	8008aec <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8008848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800884c:	2b00      	cmp	r3, #0
 800884e:	f040 8114 	bne.w	8008a7a <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8008858:	0a5b      	lsrs	r3, r3, #9
 800885a:	b2da      	uxtb	r2, r3
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008862:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8008866:	3b01      	subs	r3, #1
 8008868:	b2db      	uxtb	r3, r3
 800886a:	4013      	ands	r3, r2
 800886c:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800886e:	7dbb      	ldrb	r3, [r7, #22]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d151      	bne.n	8008918 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800887a:	2b00      	cmp	r3, #0
 800887c:	d10f      	bne.n	800889e <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008884:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8008886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008888:	2b00      	cmp	r3, #0
 800888a:	d121      	bne.n	80088d0 <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008892:	2100      	movs	r1, #0
 8008894:	4618      	mov	r0, r3
 8008896:	f7fe fcf0 	bl	800727a <create_chain>
 800889a:	6278      	str	r0, [r7, #36]	; 0x24
 800889c:	e018      	b.n	80088d0 <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d008      	beq.n	80088ba <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80088ae:	4619      	mov	r1, r3
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f7fe fd7f 	bl	80073b4 <clmt_clust>
 80088b6:	6278      	str	r0, [r7, #36]	; 0x24
 80088b8:	e00a      	b.n	80088d0 <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80088c6:	4619      	mov	r1, r3
 80088c8:	4610      	mov	r0, r2
 80088ca:	f7fe fcd6 	bl	800727a <create_chain>
 80088ce:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80088d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	f000 810f 	beq.w	8008af6 <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80088d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d105      	bne.n	80088ea <f_write+0x114>
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2202      	movs	r2, #2
 80088e2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80088e6:	2302      	movs	r3, #2
 80088e8:	e11e      	b.n	8008b28 <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80088ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f0:	d105      	bne.n	80088fe <f_write+0x128>
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2201      	movs	r2, #1
 80088f6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80088fa:	2301      	movs	r3, #1
 80088fc:	e114      	b.n	8008b28 <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008902:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800890c:	2b00      	cmp	r3, #0
 800890e:	d103      	bne.n	8008918 <f_write+0x142>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008914:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800891e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008922:	2b00      	cmp	r3, #0
 8008924:	d01d      	beq.n	8008962 <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800892c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8008930:	68f9      	ldr	r1, [r7, #12]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8008938:	2301      	movs	r3, #1
 800893a:	f7fd fed7 	bl	80066ec <disk_write>
 800893e:	4603      	mov	r3, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	d005      	beq.n	8008950 <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800894c:	2301      	movs	r3, #1
 800894e:	e0eb      	b.n	8008b28 <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008956:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800895a:	b2da      	uxtb	r2, r3
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800896e:	4619      	mov	r1, r3
 8008970:	4610      	mov	r0, r2
 8008972:	f7fe fa45 	bl	8006e00 <clust2sect>
 8008976:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d105      	bne.n	800898a <f_write+0x1b4>
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2202      	movs	r2, #2
 8008982:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008986:	2302      	movs	r3, #2
 8008988:	e0ce      	b.n	8008b28 <f_write+0x352>
			sect += csect;
 800898a:	7dbb      	ldrb	r3, [r7, #22]
 800898c:	693a      	ldr	r2, [r7, #16]
 800898e:	4413      	add	r3, r2
 8008990:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	0a5b      	lsrs	r3, r3, #9
 8008996:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d048      	beq.n	8008a30 <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800899e:	7dba      	ldrb	r2, [r7, #22]
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	4413      	add	r3, r2
 80089a4:	68fa      	ldr	r2, [r7, #12]
 80089a6:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80089aa:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d908      	bls.n	80089c4 <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80089b8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80089bc:	461a      	mov	r2, r3
 80089be:	7dbb      	ldrb	r3, [r7, #22]
 80089c0:	1ad3      	subs	r3, r2, r3
 80089c2:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80089ca:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	693a      	ldr	r2, [r7, #16]
 80089d2:	69b9      	ldr	r1, [r7, #24]
 80089d4:	f7fd fe8a 	bl	80066ec <disk_write>
 80089d8:	4603      	mov	r3, r0
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d005      	beq.n	80089ea <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2201      	movs	r2, #1
 80089e2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80089e6:	2301      	movs	r3, #1
 80089e8:	e09e      	b.n	8008b28 <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	1ad3      	subs	r3, r2, r3
 80089f4:	69fa      	ldr	r2, [r7, #28]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d916      	bls.n	8008a28 <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	025b      	lsls	r3, r3, #9
 8008a08:	69ba      	ldr	r2, [r7, #24]
 8008a0a:	4413      	add	r3, r2
 8008a0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a10:	4619      	mov	r1, r3
 8008a12:	f7fd fea9 	bl	8006768 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008a1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a20:	b2da      	uxtb	r2, r3
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	025b      	lsls	r3, r3, #9
 8008a2c:	623b      	str	r3, [r7, #32]
				continue;
 8008a2e:	e047      	b.n	8008ac0 <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008a36:	693a      	ldr	r2, [r7, #16]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d01a      	beq.n	8008a72 <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d212      	bcs.n	8008a72 <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008a52:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8008a56:	68f9      	ldr	r1, [r7, #12]
 8008a58:	2301      	movs	r3, #1
 8008a5a:	693a      	ldr	r2, [r7, #16]
 8008a5c:	f7fd fe26 	bl	80066ac <disk_read>
 8008a60:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d005      	beq.n	8008a72 <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e05a      	b.n	8008b28 <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	693a      	ldr	r2, [r7, #16]
 8008a76:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8008a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a84:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008a88:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8008a8a:	6a3a      	ldr	r2, [r7, #32]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d901      	bls.n	8008a96 <f_write+0x2c0>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8008a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aa0:	68fa      	ldr	r2, [r7, #12]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	6a3a      	ldr	r2, [r7, #32]
 8008aa6:	69b9      	ldr	r1, [r7, #24]
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7fd fe5d 	bl	8006768 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ab8:	b2da      	uxtb	r2, r3
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8008ac0:	69ba      	ldr	r2, [r7, #24]
 8008ac2:	6a3b      	ldr	r3, [r7, #32]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	61bb      	str	r3, [r7, #24]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008ace:	6a3b      	ldr	r3, [r7, #32]
 8008ad0:	441a      	add	r2, r3
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	6a3b      	ldr	r3, [r7, #32]
 8008ade:	441a      	add	r2, r3
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	601a      	str	r2, [r3, #0]
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	6a3b      	ldr	r3, [r7, #32]
 8008ae8:	1ad3      	subs	r3, r2, r3
 8008aea:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	f47f aea7 	bne.w	8008842 <f_write+0x6c>
 8008af4:	e000      	b.n	8008af8 <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008af6:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d905      	bls.n	8008b14 <f_write+0x33e>
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008b1a:	f043 0320 	orr.w	r3, r3, #32
 8008b1e:	b2da      	uxtb	r2, r3
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3728      	adds	r7, #40	; 0x28
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b086      	sub	sp, #24
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f7ff fbc5 	bl	80082c8 <validate>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008b42:	7dfb      	ldrb	r3, [r7, #23]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	f040 80a8 	bne.w	8008c9a <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008b50:	f003 0320 	and.w	r3, r3, #32
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	f000 80a0 	beq.w	8008c9a <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d019      	beq.n	8008b9c <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008b6e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8008b72:	6879      	ldr	r1, [r7, #4]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	f7fd fdb6 	bl	80066ec <disk_write>
 8008b80:	4603      	mov	r3, r0
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d001      	beq.n	8008b8a <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8008b86:	2301      	movs	r3, #1
 8008b88:	e088      	b.n	8008c9c <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008b90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b94:	b2da      	uxtb	r2, r3
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8008ba8:	4619      	mov	r1, r3
 8008baa:	4610      	mov	r0, r2
 8008bac:	f7fe f84d 	bl	8006c4a <move_window>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8008bb4:	7dfb      	ldrb	r3, [r7, #23]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d16f      	bne.n	8008c9a <f_sync+0x16a>
				dir = fp->dir_ptr;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8008bc0:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	330b      	adds	r3, #11
 8008bc6:	781a      	ldrb	r2, [r3, #0]
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	330b      	adds	r3, #11
 8008bcc:	f042 0220 	orr.w	r2, r2, #32
 8008bd0:	b2d2      	uxtb	r2, r2
 8008bd2:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	331c      	adds	r3, #28
 8008bde:	b2d2      	uxtb	r2, r2
 8008be0:	701a      	strb	r2, [r3, #0]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	0a1b      	lsrs	r3, r3, #8
 8008bec:	b29a      	uxth	r2, r3
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	331d      	adds	r3, #29
 8008bf2:	b2d2      	uxtb	r2, r2
 8008bf4:	701a      	strb	r2, [r3, #0]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008bfc:	0c1a      	lsrs	r2, r3, #16
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	331e      	adds	r3, #30
 8008c02:	b2d2      	uxtb	r2, r2
 8008c04:	701a      	strb	r2, [r3, #0]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008c0c:	0e1a      	lsrs	r2, r3, #24
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	331f      	adds	r3, #31
 8008c12:	b2d2      	uxtb	r2, r2
 8008c14:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	6938      	ldr	r0, [r7, #16]
 8008c20:	f7fe fdfe 	bl	8007820 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8008c24:	f7fd fca0 	bl	8006568 <get_fattime>
 8008c28:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	3316      	adds	r3, #22
 8008c2e:	68fa      	ldr	r2, [r7, #12]
 8008c30:	b2d2      	uxtb	r2, r2
 8008c32:	701a      	strb	r2, [r3, #0]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	0a1b      	lsrs	r3, r3, #8
 8008c3a:	b29a      	uxth	r2, r3
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	3317      	adds	r3, #23
 8008c40:	b2d2      	uxtb	r2, r2
 8008c42:	701a      	strb	r2, [r3, #0]
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	0c1a      	lsrs	r2, r3, #16
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	3318      	adds	r3, #24
 8008c4c:	b2d2      	uxtb	r2, r2
 8008c4e:	701a      	strb	r2, [r3, #0]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	0e1a      	lsrs	r2, r3, #24
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	3319      	adds	r3, #25
 8008c58:	b2d2      	uxtb	r2, r2
 8008c5a:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	3312      	adds	r3, #18
 8008c60:	2200      	movs	r2, #0
 8008c62:	701a      	strb	r2, [r3, #0]
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	3313      	adds	r3, #19
 8008c68:	2200      	movs	r2, #0
 8008c6a:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008c72:	f023 0320 	bic.w	r3, r3, #32
 8008c76:	b2da      	uxtb	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008c84:	2201      	movs	r2, #1
 8008c86:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7fe f808 	bl	8006ca6 <sync_fs>
 8008c96:	4603      	mov	r3, r0
 8008c98:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8008c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3718      	adds	r7, #24
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f7ff ff3f 	bl	8008b30 <f_sync>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008cb6:	7bfb      	ldrb	r3, [r7, #15]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d116      	bne.n	8008cea <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f7ff fb03 	bl	80082c8 <validate>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008cc6:	7bfb      	ldrb	r3, [r7, #15]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d10e      	bne.n	8008cea <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7fd ff04 	bl	8006ae0 <dec_lock>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008cdc:	7bfb      	ldrb	r3, [r7, #15]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d103      	bne.n	8008cea <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3710      	adds	r7, #16
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b090      	sub	sp, #64	; 0x40
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f7ff fae2 	bl	80082c8 <validate>
 8008d04:	4603      	mov	r3, r0
 8008d06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8008d0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d002      	beq.n	8008d18 <f_lseek+0x24>
 8008d12:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008d16:	e247      	b.n	80091a8 <f_lseek+0x4b4>
	if (fp->err)						/* Check error */
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d003      	beq.n	8008d2a <f_lseek+0x36>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8008d28:	e23e      	b.n	80091a8 <f_lseek+0x4b4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	f000 80f2 	beq.w	8008f1a <f_lseek+0x226>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d3c:	d164      	bne.n	8008e08 <f_lseek+0x114>
			tbl = fp->cltbl;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8008d44:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d48:	1d1a      	adds	r2, r3, #4
 8008d4a:	627a      	str	r2, [r7, #36]	; 0x24
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	617b      	str	r3, [r7, #20]
 8008d50:	2302      	movs	r3, #2
 8008d52:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008d5a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8008d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d041      	beq.n	8008de6 <f_lseek+0xf2>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d64:	613b      	str	r3, [r7, #16]
 8008d66:	2300      	movs	r3, #0
 8008d68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6c:	3302      	adds	r3, #2
 8008d6e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8008d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d72:	60fb      	str	r3, [r7, #12]
 8008d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d76:	3301      	adds	r3, #1
 8008d78:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008d80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7fe f85d 	bl	8006e42 <get_fat>
 8008d88:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8008d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d805      	bhi.n	8008d9c <f_lseek+0xa8>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2202      	movs	r2, #2
 8008d94:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008d98:	2302      	movs	r3, #2
 8008d9a:	e205      	b.n	80091a8 <f_lseek+0x4b4>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da2:	d105      	bne.n	8008db0 <f_lseek+0xbc>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2201      	movs	r2, #1
 8008da8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008dac:	2301      	movs	r3, #1
 8008dae:	e1fb      	b.n	80091a8 <f_lseek+0x4b4>
					} while (cl == pcl + 1);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	3301      	adds	r3, #1
 8008db4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d0da      	beq.n	8008d70 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008dba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d809      	bhi.n	8008dd6 <f_lseek+0xe2>
						*tbl++ = ncl; *tbl++ = tcl;
 8008dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc4:	1d1a      	adds	r2, r3, #4
 8008dc6:	627a      	str	r2, [r7, #36]	; 0x24
 8008dc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dca:	601a      	str	r2, [r3, #0]
 8008dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dce:	1d1a      	adds	r2, r3, #4
 8008dd0:	627a      	str	r2, [r7, #36]	; 0x24
 8008dd2:	693a      	ldr	r2, [r7, #16]
 8008dd4:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008ddc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d3bd      	bcc.n	8008d62 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8008dec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dee:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8008df0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d803      	bhi.n	8008e00 <f_lseek+0x10c>
				*tbl = 0;		/* Terminate table */
 8008df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	601a      	str	r2, [r3, #0]
 8008dfe:	e1d1      	b.n	80091a4 <f_lseek+0x4b0>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008e00:	2311      	movs	r3, #17
 8008e02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008e06:	e1cd      	b.n	80091a4 <f_lseek+0x4b0>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008e0e:	683a      	ldr	r2, [r7, #0]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d903      	bls.n	8008e1c <f_lseek+0x128>
				ofs = fp->fsize;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008e1a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	683a      	ldr	r2, [r7, #0]
 8008e20:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			if (ofs) {
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	f000 81bc 	beq.w	80091a4 <f_lseek+0x4b0>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	4619      	mov	r1, r3
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f7fe fabe 	bl	80073b4 <clmt_clust>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				dsc = clust2sect(fp->fs, fp->clust);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	4610      	mov	r0, r2
 8008e50:	f7fd ffd6 	bl	8006e00 <clust2sect>
 8008e54:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d105      	bne.n	8008e68 <f_lseek+0x174>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2202      	movs	r2, #2
 8008e60:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008e64:	2302      	movs	r3, #2
 8008e66:	e19f      	b.n	80091a8 <f_lseek+0x4b4>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	0a5b      	lsrs	r3, r3, #9
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8008e74:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8008e78:	3a01      	subs	r2, #1
 8008e7a:	4013      	ands	r3, r2
 8008e7c:	69ba      	ldr	r2, [r7, #24]
 8008e7e:	4413      	add	r3, r2
 8008e80:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8008e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f000 8189 	beq.w	80091a4 <f_lseek+0x4b0>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008e98:	69ba      	ldr	r2, [r7, #24]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	f000 8182 	beq.w	80091a4 <f_lseek+0x4b0>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d01d      	beq.n	8008eea <f_lseek+0x1f6>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008eb4:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8008eb8:	6879      	ldr	r1, [r7, #4]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	f7fd fc13 	bl	80066ec <disk_write>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d005      	beq.n	8008ed8 <f_lseek+0x1e4>
							ABORT(fp->fs, FR_DISK_ERR);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e167      	b.n	80091a8 <f_lseek+0x4b4>
						fp->flag &= ~FA__DIRTY;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008ede:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ee2:	b2da      	uxtb	r2, r3
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008ef0:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8008ef4:	6879      	ldr	r1, [r7, #4]
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	69ba      	ldr	r2, [r7, #24]
 8008efa:	f7fd fbd7 	bl	80066ac <disk_read>
 8008efe:	4603      	mov	r3, r0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d005      	beq.n	8008f10 <f_lseek+0x21c>
						ABORT(fp->fs, FR_DISK_ERR);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2201      	movs	r2, #1
 8008f08:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e14b      	b.n	80091a8 <f_lseek+0x4b4>
#endif
					fp->dsect = dsc;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	69ba      	ldr	r2, [r7, #24]
 8008f14:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 8008f18:	e144      	b.n	80091a4 <f_lseek+0x4b0>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008f20:	683a      	ldr	r2, [r7, #0]
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d90a      	bls.n	8008f3c <f_lseek+0x248>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008f2c:	f003 0302 	and.w	r3, r3, #2
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d103      	bne.n	8008f3c <f_lseek+0x248>
#endif
			) ofs = fp->fsize;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008f3a:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8008f42:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008f44:	2300      	movs	r3, #0
 8008f46:	637b      	str	r3, [r7, #52]	; 0x34
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f4c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		if (ofs) {
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	f000 80c6 	beq.w	80090e4 <f_lseek+0x3f0>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008f5e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8008f62:	025b      	lsls	r3, r3, #9
 8008f64:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008f66:	6a3b      	ldr	r3, [r7, #32]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d01e      	beq.n	8008faa <f_lseek+0x2b6>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	1e5a      	subs	r2, r3, #1
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	fbb2 f2f3 	udiv	r2, r2, r3
 8008f76:	6a3b      	ldr	r3, [r7, #32]
 8008f78:	1e59      	subs	r1, r3, #1
 8008f7a:	69fb      	ldr	r3, [r7, #28]
 8008f7c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d312      	bcc.n	8008faa <f_lseek+0x2b6>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8008f84:	6a3b      	ldr	r3, [r7, #32]
 8008f86:	1e5a      	subs	r2, r3, #1
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	425b      	negs	r3, r3
 8008f8c:	401a      	ands	r2, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				ofs -= fp->fptr;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8008f9a:	683a      	ldr	r2, [r7, #0]
 8008f9c:	1ad3      	subs	r3, r2, r3
 8008f9e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008fa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008fa8:	e029      	b.n	8008ffe <f_lseek+0x30a>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008fb0:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d11e      	bne.n	8008ff6 <f_lseek+0x302>
					clst = create_chain(fp->fs, 0);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7fe f95a 	bl	800727a <create_chain>
 8008fc6:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8008fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d105      	bne.n	8008fda <f_lseek+0x2e6>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2202      	movs	r2, #2
 8008fd2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008fd6:	2302      	movs	r3, #2
 8008fd8:	e0e6      	b.n	80091a8 <f_lseek+0x4b4>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fe0:	d105      	bne.n	8008fee <f_lseek+0x2fa>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008fea:	2301      	movs	r3, #1
 8008fec:	e0dc      	b.n	80091a8 <f_lseek+0x4b4>
					fp->sclust = clst;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ff2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				}
#endif
				fp->clust = clst;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ffa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			if (clst != 0) {
 8008ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009000:	2b00      	cmp	r3, #0
 8009002:	d06f      	beq.n	80090e4 <f_lseek+0x3f0>
				while (ofs > bcs) {						/* Cluster following loop */
 8009004:	e047      	b.n	8009096 <f_lseek+0x3a2>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800900c:	f003 0302 	and.w	r3, r3, #2
 8009010:	2b00      	cmp	r3, #0
 8009012:	d00d      	beq.n	8009030 <f_lseek+0x33c>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800901a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800901c:	4618      	mov	r0, r3
 800901e:	f7fe f92c 	bl	800727a <create_chain>
 8009022:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8009024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009026:	2b00      	cmp	r3, #0
 8009028:	d10a      	bne.n	8009040 <f_lseek+0x34c>
							ofs = bcs; break;
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	603b      	str	r3, [r7, #0]
 800902e:	e036      	b.n	800909e <f_lseek+0x3aa>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009036:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009038:	4618      	mov	r0, r3
 800903a:	f7fd ff02 	bl	8006e42 <get_fat>
 800903e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009046:	d105      	bne.n	8009054 <f_lseek+0x360>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2201      	movs	r2, #1
 800904c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009050:	2301      	movs	r3, #1
 8009052:	e0a9      	b.n	80091a8 <f_lseek+0x4b4>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8009054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009056:	2b01      	cmp	r3, #1
 8009058:	d907      	bls.n	800906a <f_lseek+0x376>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009060:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009064:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009066:	429a      	cmp	r2, r3
 8009068:	d305      	bcc.n	8009076 <f_lseek+0x382>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2202      	movs	r2, #2
 800906e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009072:	2302      	movs	r3, #2
 8009074:	e098      	b.n	80091a8 <f_lseek+0x4b4>
					fp->clust = clst;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800907a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
					fp->fptr += bcs;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	441a      	add	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
					ofs -= bcs;
 800908e:	683a      	ldr	r2, [r7, #0]
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	1ad3      	subs	r3, r2, r3
 8009094:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8009096:	683a      	ldr	r2, [r7, #0]
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	429a      	cmp	r2, r3
 800909c:	d8b3      	bhi.n	8009006 <f_lseek+0x312>
				}
				fp->fptr += ofs;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	441a      	add	r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d015      	beq.n	80090e4 <f_lseek+0x3f0>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80090be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7fd fe9d 	bl	8006e00 <clust2sect>
 80090c6:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 80090c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d105      	bne.n	80090da <f_lseek+0x3e6>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2202      	movs	r2, #2
 80090d2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80090d6:	2302      	movs	r3, #2
 80090d8:	e066      	b.n	80091a8 <f_lseek+0x4b4>
					nsect += ofs / SS(fp->fs);
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	0a5b      	lsrs	r3, r3, #9
 80090de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090e0:	4413      	add	r3, r2
 80090e2:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80090ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d041      	beq.n	8009176 <f_lseek+0x482>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80090f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d03b      	beq.n	8009176 <f_lseek+0x482>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009108:	2b00      	cmp	r3, #0
 800910a:	d01d      	beq.n	8009148 <f_lseek+0x454>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009112:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009116:	6879      	ldr	r1, [r7, #4]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800911e:	2301      	movs	r3, #1
 8009120:	f7fd fae4 	bl	80066ec <disk_write>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d005      	beq.n	8009136 <f_lseek+0x442>
					ABORT(fp->fs, FR_DISK_ERR);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2201      	movs	r2, #1
 800912e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009132:	2301      	movs	r3, #1
 8009134:	e038      	b.n	80091a8 <f_lseek+0x4b4>
				fp->flag &= ~FA__DIRTY;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800913c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009140:	b2da      	uxtb	r2, r3
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800914e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009152:	6879      	ldr	r1, [r7, #4]
 8009154:	2301      	movs	r3, #1
 8009156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009158:	f7fd faa8 	bl	80066ac <disk_read>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d005      	beq.n	800916e <f_lseek+0x47a>
				ABORT(fp->fs, FR_DISK_ERR);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2201      	movs	r2, #1
 8009166:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800916a:	2301      	movs	r3, #1
 800916c:	e01c      	b.n	80091a8 <f_lseek+0x4b4>
#endif
			fp->dsect = nsect;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009172:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009182:	429a      	cmp	r2, r3
 8009184:	d90e      	bls.n	80091a4 <f_lseek+0x4b0>
			fp->fsize = fp->fptr;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009198:	f043 0320 	orr.w	r3, r3, #32
 800919c:	b2da      	uxtb	r2, r3
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 80091a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3740      	adds	r7, #64	; 0x40
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b08e      	sub	sp, #56	; 0x38
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	60b9      	str	r1, [r7, #8]
 80091ba:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 80091bc:	f107 030c 	add.w	r3, r7, #12
 80091c0:	2200      	movs	r2, #0
 80091c2:	4619      	mov	r1, r3
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f7fe fdb5 	bl	8007d34 <find_volume>
 80091ca:	4603      	mov	r3, r0
 80091cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 80091d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80091da:	2b00      	cmp	r3, #0
 80091dc:	f040 80af 	bne.w	800933e <f_getfree+0x18e>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80091e6:	69fb      	ldr	r3, [r7, #28]
 80091e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80091ec:	3b02      	subs	r3, #2
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d805      	bhi.n	80091fe <f_getfree+0x4e>
			*nclst = fs->free_clust;
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	601a      	str	r2, [r3, #0]
 80091fc:	e09f      	b.n	800933e <f_getfree+0x18e>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009204:	76fb      	strb	r3, [r7, #27]
			n = 0;
 8009206:	2300      	movs	r3, #0
 8009208:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 800920a:	7efb      	ldrb	r3, [r7, #27]
 800920c:	2b01      	cmp	r3, #1
 800920e:	d125      	bne.n	800925c <f_getfree+0xac>
				clst = 2;
 8009210:	2302      	movs	r3, #2
 8009212:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 8009214:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009216:	69f8      	ldr	r0, [r7, #28]
 8009218:	f7fd fe13 	bl	8006e42 <get_fat>
 800921c:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009224:	d103      	bne.n	800922e <f_getfree+0x7e>
 8009226:	2301      	movs	r3, #1
 8009228:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800922c:	e077      	b.n	800931e <f_getfree+0x16e>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	2b01      	cmp	r3, #1
 8009232:	d103      	bne.n	800923c <f_getfree+0x8c>
 8009234:	2302      	movs	r3, #2
 8009236:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800923a:	e070      	b.n	800931e <f_getfree+0x16e>
					if (stat == 0) n++;
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d102      	bne.n	8009248 <f_getfree+0x98>
 8009242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009244:	3301      	adds	r3, #1
 8009246:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 8009248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924a:	3301      	adds	r3, #1
 800924c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800924e:	69fb      	ldr	r3, [r7, #28]
 8009250:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009254:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009256:	429a      	cmp	r2, r3
 8009258:	d3dc      	bcc.n	8009214 <f_getfree+0x64>
 800925a:	e060      	b.n	800931e <f_getfree+0x16e>
			} else {
				clst = fs->n_fatent;
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009262:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 8009264:	69fb      	ldr	r3, [r7, #28]
 8009266:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800926a:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 800926c:	2300      	movs	r3, #0
 800926e:	627b      	str	r3, [r7, #36]	; 0x24
 8009270:	2300      	movs	r3, #0
 8009272:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 8009274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009276:	2b00      	cmp	r3, #0
 8009278:	d112      	bne.n	80092a0 <f_getfree+0xf0>
						res = move_window(fs, sect++);
 800927a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800927c:	1c5a      	adds	r2, r3, #1
 800927e:	62ba      	str	r2, [r7, #40]	; 0x28
 8009280:	4619      	mov	r1, r3
 8009282:	69f8      	ldr	r0, [r7, #28]
 8009284:	f7fd fce1 	bl	8006c4a <move_window>
 8009288:	4603      	mov	r3, r0
 800928a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 800928e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009292:	2b00      	cmp	r3, #0
 8009294:	d142      	bne.n	800931c <f_getfree+0x16c>
						p = fs->win.d8;
 8009296:	69fb      	ldr	r3, [r7, #28]
 8009298:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 800929a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800929e:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 80092a0:	7efb      	ldrb	r3, [r7, #27]
 80092a2:	2b02      	cmp	r3, #2
 80092a4:	d115      	bne.n	80092d2 <f_getfree+0x122>
						if (LD_WORD(p) == 0) n++;
 80092a6:	6a3b      	ldr	r3, [r7, #32]
 80092a8:	3301      	adds	r3, #1
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	021b      	lsls	r3, r3, #8
 80092ae:	b21a      	sxth	r2, r3
 80092b0:	6a3b      	ldr	r3, [r7, #32]
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	b21b      	sxth	r3, r3
 80092b6:	4313      	orrs	r3, r2
 80092b8:	b21b      	sxth	r3, r3
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d102      	bne.n	80092c4 <f_getfree+0x114>
 80092be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c0:	3301      	adds	r3, #1
 80092c2:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 80092c4:	6a3b      	ldr	r3, [r7, #32]
 80092c6:	3302      	adds	r3, #2
 80092c8:	623b      	str	r3, [r7, #32]
 80092ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092cc:	3b02      	subs	r3, #2
 80092ce:	627b      	str	r3, [r7, #36]	; 0x24
 80092d0:	e01d      	b.n	800930e <f_getfree+0x15e>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 80092d2:	6a3b      	ldr	r3, [r7, #32]
 80092d4:	3303      	adds	r3, #3
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	061a      	lsls	r2, r3, #24
 80092da:	6a3b      	ldr	r3, [r7, #32]
 80092dc:	3302      	adds	r3, #2
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	041b      	lsls	r3, r3, #16
 80092e2:	4313      	orrs	r3, r2
 80092e4:	6a3a      	ldr	r2, [r7, #32]
 80092e6:	3201      	adds	r2, #1
 80092e8:	7812      	ldrb	r2, [r2, #0]
 80092ea:	0212      	lsls	r2, r2, #8
 80092ec:	4313      	orrs	r3, r2
 80092ee:	6a3a      	ldr	r2, [r7, #32]
 80092f0:	7812      	ldrb	r2, [r2, #0]
 80092f2:	4313      	orrs	r3, r2
 80092f4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d102      	bne.n	8009302 <f_getfree+0x152>
 80092fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fe:	3301      	adds	r3, #1
 8009300:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 8009302:	6a3b      	ldr	r3, [r7, #32]
 8009304:	3304      	adds	r3, #4
 8009306:	623b      	str	r3, [r7, #32]
 8009308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930a:	3b04      	subs	r3, #4
 800930c:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 800930e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009310:	3b01      	subs	r3, #1
 8009312:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1ac      	bne.n	8009274 <f_getfree+0xc4>
 800931a:	e000      	b.n	800931e <f_getfree+0x16e>
						if (res != FR_OK) break;
 800931c:	bf00      	nop
			}
			fs->free_clust = n;
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009322:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8009326:	69fb      	ldr	r3, [r7, #28]
 8009328:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800932c:	f043 0301 	orr.w	r3, r3, #1
 8009330:	b2da      	uxtb	r2, r3
 8009332:	69fb      	ldr	r3, [r7, #28]
 8009334:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
			*nclst = n;
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800933c:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 800933e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8009342:	4618      	mov	r0, r3
 8009344:	3738      	adds	r7, #56	; 0x38
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800934a:	b580      	push	{r7, lr}
 800934c:	b084      	sub	sp, #16
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
 8009352:	460b      	mov	r3, r1
 8009354:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8009356:	78fb      	ldrb	r3, [r7, #3]
 8009358:	2b0a      	cmp	r3, #10
 800935a:	d103      	bne.n	8009364 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800935c:	210d      	movs	r1, #13
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f7ff fff3 	bl	800934a <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2b00      	cmp	r3, #0
 800936e:	db25      	blt.n	80093bc <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	1c5a      	adds	r2, r3, #1
 8009374:	60fa      	str	r2, [r7, #12]
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	4413      	add	r3, r2
 800937a:	78fa      	ldrb	r2, [r7, #3]
 800937c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2b3c      	cmp	r3, #60	; 0x3c
 8009382:	dd12      	ble.n	80093aa <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6818      	ldr	r0, [r3, #0]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f103 010c 	add.w	r1, r3, #12
 800938e:	68fa      	ldr	r2, [r7, #12]
 8009390:	f107 0308 	add.w	r3, r7, #8
 8009394:	f7ff fa1f 	bl	80087d6 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8009398:	68ba      	ldr	r2, [r7, #8]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	429a      	cmp	r2, r3
 800939e:	d101      	bne.n	80093a4 <putc_bfd+0x5a>
 80093a0:	2300      	movs	r3, #0
 80093a2:	e001      	b.n	80093a8 <putc_bfd+0x5e>
 80093a4:	f04f 33ff 	mov.w	r3, #4294967295
 80093a8:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	68fa      	ldr	r2, [r7, #12]
 80093ae:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	1c5a      	adds	r2, r3, #1
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	609a      	str	r2, [r3, #8]
 80093ba:	e000      	b.n	80093be <putc_bfd+0x74>
	if (i < 0) return;
 80093bc:	bf00      	nop
}
 80093be:	3710      	adds	r7, #16
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80093c4:	b590      	push	{r4, r7, lr}
 80093c6:	b097      	sub	sp, #92	; 0x5c
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 80093d2:	2300      	movs	r3, #0
 80093d4:	613b      	str	r3, [r7, #16]
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 80093da:	e009      	b.n	80093f0 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	1c5a      	adds	r2, r3, #1
 80093e0:	607a      	str	r2, [r7, #4]
 80093e2:	781a      	ldrb	r2, [r3, #0]
 80093e4:	f107 030c 	add.w	r3, r7, #12
 80093e8:	4611      	mov	r1, r2
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7ff ffad 	bl	800934a <putc_bfd>
	while (*str)			/* Put the string */
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1f1      	bne.n	80093dc <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	db16      	blt.n	800942c <f_puts+0x68>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 80093fe:	68f8      	ldr	r0, [r7, #12]
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	461c      	mov	r4, r3
 8009404:	f107 0208 	add.w	r2, r7, #8
 8009408:	f107 030c 	add.w	r3, r7, #12
 800940c:	f103 010c 	add.w	r1, r3, #12
 8009410:	4613      	mov	r3, r2
 8009412:	4622      	mov	r2, r4
 8009414:	f7ff f9df 	bl	80087d6 <f_write>
 8009418:	4603      	mov	r3, r0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d106      	bne.n	800942c <f_puts+0x68>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	461a      	mov	r2, r3
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	429a      	cmp	r2, r3
 8009426:	d101      	bne.n	800942c <f_puts+0x68>
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	e001      	b.n	8009430 <f_puts+0x6c>
	return EOF;
 800942c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009430:	4618      	mov	r0, r3
 8009432:	375c      	adds	r7, #92	; 0x5c
 8009434:	46bd      	mov	sp, r7
 8009436:	bd90      	pop	{r4, r7, pc}

08009438 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009438:	b480      	push	{r7}
 800943a:	b087      	sub	sp, #28
 800943c:	af00      	add	r7, sp, #0
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	4613      	mov	r3, r2
 8009444:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009446:	2301      	movs	r3, #1
 8009448:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800944a:	2300      	movs	r3, #0
 800944c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800944e:	4b1e      	ldr	r3, [pc, #120]	; (80094c8 <FATFS_LinkDriverEx+0x90>)
 8009450:	7a5b      	ldrb	r3, [r3, #9]
 8009452:	b2db      	uxtb	r3, r3
 8009454:	2b01      	cmp	r3, #1
 8009456:	d831      	bhi.n	80094bc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009458:	4b1b      	ldr	r3, [pc, #108]	; (80094c8 <FATFS_LinkDriverEx+0x90>)
 800945a:	7a5b      	ldrb	r3, [r3, #9]
 800945c:	b2db      	uxtb	r3, r3
 800945e:	461a      	mov	r2, r3
 8009460:	4b19      	ldr	r3, [pc, #100]	; (80094c8 <FATFS_LinkDriverEx+0x90>)
 8009462:	2100      	movs	r1, #0
 8009464:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8009466:	4b18      	ldr	r3, [pc, #96]	; (80094c8 <FATFS_LinkDriverEx+0x90>)
 8009468:	7a5b      	ldrb	r3, [r3, #9]
 800946a:	b2db      	uxtb	r3, r3
 800946c:	4a16      	ldr	r2, [pc, #88]	; (80094c8 <FATFS_LinkDriverEx+0x90>)
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	4413      	add	r3, r2
 8009472:	68fa      	ldr	r2, [r7, #12]
 8009474:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8009476:	4b14      	ldr	r3, [pc, #80]	; (80094c8 <FATFS_LinkDriverEx+0x90>)
 8009478:	7a5b      	ldrb	r3, [r3, #9]
 800947a:	b2db      	uxtb	r3, r3
 800947c:	461a      	mov	r2, r3
 800947e:	4b12      	ldr	r3, [pc, #72]	; (80094c8 <FATFS_LinkDriverEx+0x90>)
 8009480:	4413      	add	r3, r2
 8009482:	79fa      	ldrb	r2, [r7, #7]
 8009484:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009486:	4b10      	ldr	r3, [pc, #64]	; (80094c8 <FATFS_LinkDriverEx+0x90>)
 8009488:	7a5b      	ldrb	r3, [r3, #9]
 800948a:	b2db      	uxtb	r3, r3
 800948c:	1c5a      	adds	r2, r3, #1
 800948e:	b2d1      	uxtb	r1, r2
 8009490:	4a0d      	ldr	r2, [pc, #52]	; (80094c8 <FATFS_LinkDriverEx+0x90>)
 8009492:	7251      	strb	r1, [r2, #9]
 8009494:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009496:	7dbb      	ldrb	r3, [r7, #22]
 8009498:	3330      	adds	r3, #48	; 0x30
 800949a:	b2da      	uxtb	r2, r3
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	3301      	adds	r3, #1
 80094a4:	223a      	movs	r2, #58	; 0x3a
 80094a6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	3302      	adds	r3, #2
 80094ac:	222f      	movs	r2, #47	; 0x2f
 80094ae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	3303      	adds	r3, #3
 80094b4:	2200      	movs	r2, #0
 80094b6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80094b8:	2300      	movs	r3, #0
 80094ba:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80094bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80094be:	4618      	mov	r0, r3
 80094c0:	371c      	adds	r7, #28
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bc80      	pop	{r7}
 80094c6:	4770      	bx	lr
 80094c8:	200002b4 	.word	0x200002b4

080094cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b082      	sub	sp, #8
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80094d6:	2200      	movs	r2, #0
 80094d8:	6839      	ldr	r1, [r7, #0]
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f7ff ffac 	bl	8009438 <FATFS_LinkDriverEx>
 80094e0:	4603      	mov	r3, r0
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3708      	adds	r7, #8
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
	...

080094ec <asctime>:
 80094ec:	4b09      	ldr	r3, [pc, #36]	; (8009514 <asctime+0x28>)
 80094ee:	b570      	push	{r4, r5, r6, lr}
 80094f0:	681c      	ldr	r4, [r3, #0]
 80094f2:	4606      	mov	r6, r0
 80094f4:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80094f6:	b93d      	cbnz	r5, 8009508 <asctime+0x1c>
 80094f8:	201a      	movs	r0, #26
 80094fa:	f000 f91b 	bl	8009734 <malloc>
 80094fe:	221a      	movs	r2, #26
 8009500:	6420      	str	r0, [r4, #64]	; 0x40
 8009502:	4629      	mov	r1, r5
 8009504:	f000 f926 	bl	8009754 <memset>
 8009508:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800950a:	4630      	mov	r0, r6
 800950c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009510:	f000 b802 	b.w	8009518 <asctime_r>
 8009514:	20000028 	.word	0x20000028

08009518 <asctime_r>:
 8009518:	b510      	push	{r4, lr}
 800951a:	460c      	mov	r4, r1
 800951c:	6941      	ldr	r1, [r0, #20]
 800951e:	b086      	sub	sp, #24
 8009520:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8009524:	6903      	ldr	r3, [r0, #16]
 8009526:	6982      	ldr	r2, [r0, #24]
 8009528:	9104      	str	r1, [sp, #16]
 800952a:	6801      	ldr	r1, [r0, #0]
 800952c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009530:	9103      	str	r1, [sp, #12]
 8009532:	6841      	ldr	r1, [r0, #4]
 8009534:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009538:	9102      	str	r1, [sp, #8]
 800953a:	6881      	ldr	r1, [r0, #8]
 800953c:	9101      	str	r1, [sp, #4]
 800953e:	68c1      	ldr	r1, [r0, #12]
 8009540:	4620      	mov	r0, r4
 8009542:	9100      	str	r1, [sp, #0]
 8009544:	4904      	ldr	r1, [pc, #16]	; (8009558 <asctime_r+0x40>)
 8009546:	440b      	add	r3, r1
 8009548:	4904      	ldr	r1, [pc, #16]	; (800955c <asctime_r+0x44>)
 800954a:	440a      	add	r2, r1
 800954c:	4904      	ldr	r1, [pc, #16]	; (8009560 <asctime_r+0x48>)
 800954e:	f001 f933 	bl	800a7b8 <siprintf>
 8009552:	4620      	mov	r0, r4
 8009554:	b006      	add	sp, #24
 8009556:	bd10      	pop	{r4, pc}
 8009558:	0800d9f1 	.word	0x0800d9f1
 800955c:	0800d9dc 	.word	0x0800d9dc
 8009560:	0800d9bc 	.word	0x0800d9bc

08009564 <__errno>:
 8009564:	4b01      	ldr	r3, [pc, #4]	; (800956c <__errno+0x8>)
 8009566:	6818      	ldr	r0, [r3, #0]
 8009568:	4770      	bx	lr
 800956a:	bf00      	nop
 800956c:	20000028 	.word	0x20000028

08009570 <gmtime>:
 8009570:	b538      	push	{r3, r4, r5, lr}
 8009572:	4b07      	ldr	r3, [pc, #28]	; (8009590 <gmtime+0x20>)
 8009574:	4605      	mov	r5, r0
 8009576:	681c      	ldr	r4, [r3, #0]
 8009578:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800957a:	b91b      	cbnz	r3, 8009584 <gmtime+0x14>
 800957c:	2024      	movs	r0, #36	; 0x24
 800957e:	f000 f8d9 	bl	8009734 <malloc>
 8009582:	63e0      	str	r0, [r4, #60]	; 0x3c
 8009584:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009586:	4628      	mov	r0, r5
 8009588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800958c:	f000 b802 	b.w	8009594 <gmtime_r>
 8009590:	20000028 	.word	0x20000028

08009594 <gmtime_r>:
 8009594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009598:	e9d0 8900 	ldrd	r8, r9, [r0]
 800959c:	460c      	mov	r4, r1
 800959e:	4a4f      	ldr	r2, [pc, #316]	; (80096dc <gmtime_r+0x148>)
 80095a0:	2300      	movs	r3, #0
 80095a2:	4640      	mov	r0, r8
 80095a4:	4649      	mov	r1, r9
 80095a6:	f7f7 fac9 	bl	8000b3c <__aeabi_ldivmod>
 80095aa:	4a4c      	ldr	r2, [pc, #304]	; (80096dc <gmtime_r+0x148>)
 80095ac:	f500 262f 	add.w	r6, r0, #716800	; 0xaf000
 80095b0:	2300      	movs	r3, #0
 80095b2:	4640      	mov	r0, r8
 80095b4:	4649      	mov	r1, r9
 80095b6:	f7f7 fac1 	bl	8000b3c <__aeabi_ldivmod>
 80095ba:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80095be:	2a00      	cmp	r2, #0
 80095c0:	bfbc      	itt	lt
 80095c2:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80095c6:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80095ca:	fb92 f3f1 	sdiv	r3, r2, r1
 80095ce:	fb01 2213 	mls	r2, r1, r3, r2
 80095d2:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80095d6:	60a3      	str	r3, [r4, #8]
 80095d8:	fb92 f3f1 	sdiv	r3, r2, r1
 80095dc:	fb01 2213 	mls	r2, r1, r3, r2
 80095e0:	6022      	str	r2, [r4, #0]
 80095e2:	f04f 0207 	mov.w	r2, #7
 80095e6:	f606 256c 	addw	r5, r6, #2668	; 0xa6c
 80095ea:	bfb8      	it	lt
 80095ec:	f606 256b 	addwlt	r5, r6, #2667	; 0xa6b
 80095f0:	6063      	str	r3, [r4, #4]
 80095f2:	1ceb      	adds	r3, r5, #3
 80095f4:	fb93 f2f2 	sdiv	r2, r3, r2
 80095f8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80095fc:	1a9b      	subs	r3, r3, r2
 80095fe:	bf48      	it	mi
 8009600:	3307      	addmi	r3, #7
 8009602:	2d00      	cmp	r5, #0
 8009604:	4836      	ldr	r0, [pc, #216]	; (80096e0 <gmtime_r+0x14c>)
 8009606:	61a3      	str	r3, [r4, #24]
 8009608:	bfbd      	ittte	lt
 800960a:	f5a5 330e 	sublt.w	r3, r5, #145408	; 0x23800
 800960e:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8009612:	fb93 f0f0 	sdivlt	r0, r3, r0
 8009616:	fb95 f0f0 	sdivge	r0, r5, r0
 800961a:	f648 61ac 	movw	r1, #36524	; 0x8eac
 800961e:	f240 57b4 	movw	r7, #1460	; 0x5b4
 8009622:	4b30      	ldr	r3, [pc, #192]	; (80096e4 <gmtime_r+0x150>)
 8009624:	f240 166d 	movw	r6, #365	; 0x16d
 8009628:	fb03 5300 	mla	r3, r3, r0, r5
 800962c:	fbb3 f1f1 	udiv	r1, r3, r1
 8009630:	fbb3 f2f7 	udiv	r2, r3, r7
 8009634:	4419      	add	r1, r3
 8009636:	1a89      	subs	r1, r1, r2
 8009638:	4a2b      	ldr	r2, [pc, #172]	; (80096e8 <gmtime_r+0x154>)
 800963a:	fbb3 f2f2 	udiv	r2, r3, r2
 800963e:	1a8a      	subs	r2, r1, r2
 8009640:	f648 6194 	movw	r1, #36500	; 0x8e94
 8009644:	fbb2 f1f1 	udiv	r1, r2, r1
 8009648:	fbb2 f5f6 	udiv	r5, r2, r6
 800964c:	fbb2 f2f7 	udiv	r2, r2, r7
 8009650:	440b      	add	r3, r1
 8009652:	2199      	movs	r1, #153	; 0x99
 8009654:	1a9a      	subs	r2, r3, r2
 8009656:	fb06 2315 	mls	r3, r6, r5, r2
 800965a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800965e:	3202      	adds	r2, #2
 8009660:	fbb2 f2f1 	udiv	r2, r2, r1
 8009664:	2705      	movs	r7, #5
 8009666:	4351      	muls	r1, r2
 8009668:	3102      	adds	r1, #2
 800966a:	fbb1 f1f7 	udiv	r1, r1, r7
 800966e:	2a0a      	cmp	r2, #10
 8009670:	f103 0601 	add.w	r6, r3, #1
 8009674:	eba6 0101 	sub.w	r1, r6, r1
 8009678:	bf34      	ite	cc
 800967a:	2602      	movcc	r6, #2
 800967c:	f06f 0609 	mvncs.w	r6, #9
 8009680:	4416      	add	r6, r2
 8009682:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009686:	fb02 5000 	mla	r0, r2, r0, r5
 800968a:	2e01      	cmp	r6, #1
 800968c:	bf98      	it	ls
 800968e:	3001      	addls	r0, #1
 8009690:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8009694:	d30c      	bcc.n	80096b0 <gmtime_r+0x11c>
 8009696:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800969a:	61e3      	str	r3, [r4, #28]
 800969c:	2300      	movs	r3, #0
 800969e:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
 80096a2:	e9c4 6004 	strd	r6, r0, [r4, #16]
 80096a6:	60e1      	str	r1, [r4, #12]
 80096a8:	6223      	str	r3, [r4, #32]
 80096aa:	4620      	mov	r0, r4
 80096ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096b0:	07aa      	lsls	r2, r5, #30
 80096b2:	d105      	bne.n	80096c0 <gmtime_r+0x12c>
 80096b4:	2764      	movs	r7, #100	; 0x64
 80096b6:	fbb5 f2f7 	udiv	r2, r5, r7
 80096ba:	fb07 5212 	mls	r2, r7, r2, r5
 80096be:	b95a      	cbnz	r2, 80096d8 <gmtime_r+0x144>
 80096c0:	f44f 77c8 	mov.w	r7, #400	; 0x190
 80096c4:	fbb5 f2f7 	udiv	r2, r5, r7
 80096c8:	fb07 5212 	mls	r2, r7, r2, r5
 80096cc:	fab2 f282 	clz	r2, r2
 80096d0:	0952      	lsrs	r2, r2, #5
 80096d2:	333b      	adds	r3, #59	; 0x3b
 80096d4:	4413      	add	r3, r2
 80096d6:	e7e0      	b.n	800969a <gmtime_r+0x106>
 80096d8:	2201      	movs	r2, #1
 80096da:	e7fa      	b.n	80096d2 <gmtime_r+0x13e>
 80096dc:	00015180 	.word	0x00015180
 80096e0:	00023ab1 	.word	0x00023ab1
 80096e4:	fffdc54f 	.word	0xfffdc54f
 80096e8:	00023ab0 	.word	0x00023ab0

080096ec <__libc_init_array>:
 80096ec:	b570      	push	{r4, r5, r6, lr}
 80096ee:	2500      	movs	r5, #0
 80096f0:	4e0c      	ldr	r6, [pc, #48]	; (8009724 <__libc_init_array+0x38>)
 80096f2:	4c0d      	ldr	r4, [pc, #52]	; (8009728 <__libc_init_array+0x3c>)
 80096f4:	1ba4      	subs	r4, r4, r6
 80096f6:	10a4      	asrs	r4, r4, #2
 80096f8:	42a5      	cmp	r5, r4
 80096fa:	d109      	bne.n	8009710 <__libc_init_array+0x24>
 80096fc:	f003 ffd8 	bl	800d6b0 <_init>
 8009700:	2500      	movs	r5, #0
 8009702:	4e0a      	ldr	r6, [pc, #40]	; (800972c <__libc_init_array+0x40>)
 8009704:	4c0a      	ldr	r4, [pc, #40]	; (8009730 <__libc_init_array+0x44>)
 8009706:	1ba4      	subs	r4, r4, r6
 8009708:	10a4      	asrs	r4, r4, #2
 800970a:	42a5      	cmp	r5, r4
 800970c:	d105      	bne.n	800971a <__libc_init_array+0x2e>
 800970e:	bd70      	pop	{r4, r5, r6, pc}
 8009710:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009714:	4798      	blx	r3
 8009716:	3501      	adds	r5, #1
 8009718:	e7ee      	b.n	80096f8 <__libc_init_array+0xc>
 800971a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800971e:	4798      	blx	r3
 8009720:	3501      	adds	r5, #1
 8009722:	e7f2      	b.n	800970a <__libc_init_array+0x1e>
 8009724:	0800ddf4 	.word	0x0800ddf4
 8009728:	0800ddf4 	.word	0x0800ddf4
 800972c:	0800ddf4 	.word	0x0800ddf4
 8009730:	0800ddf8 	.word	0x0800ddf8

08009734 <malloc>:
 8009734:	4b02      	ldr	r3, [pc, #8]	; (8009740 <malloc+0xc>)
 8009736:	4601      	mov	r1, r0
 8009738:	6818      	ldr	r0, [r3, #0]
 800973a:	f000 baf3 	b.w	8009d24 <_malloc_r>
 800973e:	bf00      	nop
 8009740:	20000028 	.word	0x20000028

08009744 <free>:
 8009744:	4b02      	ldr	r3, [pc, #8]	; (8009750 <free+0xc>)
 8009746:	4601      	mov	r1, r0
 8009748:	6818      	ldr	r0, [r3, #0]
 800974a:	f000 ba9f 	b.w	8009c8c <_free_r>
 800974e:	bf00      	nop
 8009750:	20000028 	.word	0x20000028

08009754 <memset>:
 8009754:	4603      	mov	r3, r0
 8009756:	4402      	add	r2, r0
 8009758:	4293      	cmp	r3, r2
 800975a:	d100      	bne.n	800975e <memset+0xa>
 800975c:	4770      	bx	lr
 800975e:	f803 1b01 	strb.w	r1, [r3], #1
 8009762:	e7f9      	b.n	8009758 <memset+0x4>

08009764 <validate_structure>:
 8009764:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009766:	6801      	ldr	r1, [r0, #0]
 8009768:	4604      	mov	r4, r0
 800976a:	293b      	cmp	r1, #59	; 0x3b
 800976c:	d911      	bls.n	8009792 <validate_structure+0x2e>
 800976e:	223c      	movs	r2, #60	; 0x3c
 8009770:	4668      	mov	r0, sp
 8009772:	f001 fb3f 	bl	800adf4 <div>
 8009776:	9a01      	ldr	r2, [sp, #4]
 8009778:	6863      	ldr	r3, [r4, #4]
 800977a:	9900      	ldr	r1, [sp, #0]
 800977c:	2a00      	cmp	r2, #0
 800977e:	440b      	add	r3, r1
 8009780:	6063      	str	r3, [r4, #4]
 8009782:	bfbb      	ittet	lt
 8009784:	323c      	addlt	r2, #60	; 0x3c
 8009786:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800978a:	6022      	strge	r2, [r4, #0]
 800978c:	6022      	strlt	r2, [r4, #0]
 800978e:	bfb8      	it	lt
 8009790:	6063      	strlt	r3, [r4, #4]
 8009792:	6861      	ldr	r1, [r4, #4]
 8009794:	293b      	cmp	r1, #59	; 0x3b
 8009796:	d911      	bls.n	80097bc <validate_structure+0x58>
 8009798:	223c      	movs	r2, #60	; 0x3c
 800979a:	4668      	mov	r0, sp
 800979c:	f001 fb2a 	bl	800adf4 <div>
 80097a0:	9a01      	ldr	r2, [sp, #4]
 80097a2:	68a3      	ldr	r3, [r4, #8]
 80097a4:	9900      	ldr	r1, [sp, #0]
 80097a6:	2a00      	cmp	r2, #0
 80097a8:	440b      	add	r3, r1
 80097aa:	60a3      	str	r3, [r4, #8]
 80097ac:	bfbb      	ittet	lt
 80097ae:	323c      	addlt	r2, #60	; 0x3c
 80097b0:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80097b4:	6062      	strge	r2, [r4, #4]
 80097b6:	6062      	strlt	r2, [r4, #4]
 80097b8:	bfb8      	it	lt
 80097ba:	60a3      	strlt	r3, [r4, #8]
 80097bc:	68a1      	ldr	r1, [r4, #8]
 80097be:	2917      	cmp	r1, #23
 80097c0:	d911      	bls.n	80097e6 <validate_structure+0x82>
 80097c2:	2218      	movs	r2, #24
 80097c4:	4668      	mov	r0, sp
 80097c6:	f001 fb15 	bl	800adf4 <div>
 80097ca:	9a01      	ldr	r2, [sp, #4]
 80097cc:	68e3      	ldr	r3, [r4, #12]
 80097ce:	9900      	ldr	r1, [sp, #0]
 80097d0:	2a00      	cmp	r2, #0
 80097d2:	440b      	add	r3, r1
 80097d4:	60e3      	str	r3, [r4, #12]
 80097d6:	bfbb      	ittet	lt
 80097d8:	3218      	addlt	r2, #24
 80097da:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80097de:	60a2      	strge	r2, [r4, #8]
 80097e0:	60a2      	strlt	r2, [r4, #8]
 80097e2:	bfb8      	it	lt
 80097e4:	60e3      	strlt	r3, [r4, #12]
 80097e6:	6921      	ldr	r1, [r4, #16]
 80097e8:	290b      	cmp	r1, #11
 80097ea:	d911      	bls.n	8009810 <validate_structure+0xac>
 80097ec:	220c      	movs	r2, #12
 80097ee:	4668      	mov	r0, sp
 80097f0:	f001 fb00 	bl	800adf4 <div>
 80097f4:	9a01      	ldr	r2, [sp, #4]
 80097f6:	6963      	ldr	r3, [r4, #20]
 80097f8:	9900      	ldr	r1, [sp, #0]
 80097fa:	2a00      	cmp	r2, #0
 80097fc:	440b      	add	r3, r1
 80097fe:	6163      	str	r3, [r4, #20]
 8009800:	bfbb      	ittet	lt
 8009802:	320c      	addlt	r2, #12
 8009804:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009808:	6122      	strge	r2, [r4, #16]
 800980a:	6122      	strlt	r2, [r4, #16]
 800980c:	bfb8      	it	lt
 800980e:	6163      	strlt	r3, [r4, #20]
 8009810:	6963      	ldr	r3, [r4, #20]
 8009812:	0799      	lsls	r1, r3, #30
 8009814:	d120      	bne.n	8009858 <validate_structure+0xf4>
 8009816:	2164      	movs	r1, #100	; 0x64
 8009818:	fb93 f2f1 	sdiv	r2, r3, r1
 800981c:	fb01 3212 	mls	r2, r1, r2, r3
 8009820:	b9e2      	cbnz	r2, 800985c <validate_structure+0xf8>
 8009822:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009826:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800982a:	fb93 f2f1 	sdiv	r2, r3, r1
 800982e:	fb01 3312 	mls	r3, r1, r2, r3
 8009832:	2b00      	cmp	r3, #0
 8009834:	bf14      	ite	ne
 8009836:	231c      	movne	r3, #28
 8009838:	231d      	moveq	r3, #29
 800983a:	68e2      	ldr	r2, [r4, #12]
 800983c:	2a00      	cmp	r2, #0
 800983e:	dc0f      	bgt.n	8009860 <validate_structure+0xfc>
 8009840:	260b      	movs	r6, #11
 8009842:	2064      	movs	r0, #100	; 0x64
 8009844:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8009848:	4f32      	ldr	r7, [pc, #200]	; (8009914 <validate_structure+0x1b0>)
 800984a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800984e:	f1bc 0f00 	cmp.w	ip, #0
 8009852:	dd14      	ble.n	800987e <validate_structure+0x11a>
 8009854:	b003      	add	sp, #12
 8009856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009858:	231c      	movs	r3, #28
 800985a:	e7ee      	b.n	800983a <validate_structure+0xd6>
 800985c:	231d      	movs	r3, #29
 800985e:	e7ec      	b.n	800983a <validate_structure+0xd6>
 8009860:	f04f 0c00 	mov.w	ip, #0
 8009864:	2564      	movs	r5, #100	; 0x64
 8009866:	f44f 76c8 	mov.w	r6, #400	; 0x190
 800986a:	4f2a      	ldr	r7, [pc, #168]	; (8009914 <validate_structure+0x1b0>)
 800986c:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8009870:	2a01      	cmp	r2, #1
 8009872:	d02f      	beq.n	80098d4 <validate_structure+0x170>
 8009874:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
 8009878:	4281      	cmp	r1, r0
 800987a:	dc2e      	bgt.n	80098da <validate_structure+0x176>
 800987c:	e7ea      	b.n	8009854 <validate_structure+0xf0>
 800987e:	6921      	ldr	r1, [r4, #16]
 8009880:	3901      	subs	r1, #1
 8009882:	6121      	str	r1, [r4, #16]
 8009884:	3101      	adds	r1, #1
 8009886:	d114      	bne.n	80098b2 <validate_structure+0x14e>
 8009888:	6963      	ldr	r3, [r4, #20]
 800988a:	1e59      	subs	r1, r3, #1
 800988c:	078a      	lsls	r2, r1, #30
 800988e:	e9c4 6104 	strd	r6, r1, [r4, #16]
 8009892:	d117      	bne.n	80098c4 <validate_structure+0x160>
 8009894:	fb91 f2f0 	sdiv	r2, r1, r0
 8009898:	fb00 1112 	mls	r1, r0, r2, r1
 800989c:	b9a1      	cbnz	r1, 80098c8 <validate_structure+0x164>
 800989e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80098a2:	fb93 f2f5 	sdiv	r2, r3, r5
 80098a6:	fb05 3312 	mls	r3, r5, r2, r3
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	bf14      	ite	ne
 80098ae:	231c      	movne	r3, #28
 80098b0:	231d      	moveq	r3, #29
 80098b2:	6922      	ldr	r2, [r4, #16]
 80098b4:	2a01      	cmp	r2, #1
 80098b6:	bf0c      	ite	eq
 80098b8:	461a      	moveq	r2, r3
 80098ba:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 80098be:	4462      	add	r2, ip
 80098c0:	60e2      	str	r2, [r4, #12]
 80098c2:	e7c2      	b.n	800984a <validate_structure+0xe6>
 80098c4:	231c      	movs	r3, #28
 80098c6:	e7f4      	b.n	80098b2 <validate_structure+0x14e>
 80098c8:	231d      	movs	r3, #29
 80098ca:	e7f2      	b.n	80098b2 <validate_structure+0x14e>
 80098cc:	231c      	movs	r3, #28
 80098ce:	e7cd      	b.n	800986c <validate_structure+0x108>
 80098d0:	231d      	movs	r3, #29
 80098d2:	e7cb      	b.n	800986c <validate_structure+0x108>
 80098d4:	428b      	cmp	r3, r1
 80098d6:	dabd      	bge.n	8009854 <validate_structure+0xf0>
 80098d8:	4618      	mov	r0, r3
 80098da:	3201      	adds	r2, #1
 80098dc:	1a09      	subs	r1, r1, r0
 80098de:	2a0c      	cmp	r2, #12
 80098e0:	60e1      	str	r1, [r4, #12]
 80098e2:	6122      	str	r2, [r4, #16]
 80098e4:	d1c2      	bne.n	800986c <validate_structure+0x108>
 80098e6:	6963      	ldr	r3, [r4, #20]
 80098e8:	1c5a      	adds	r2, r3, #1
 80098ea:	0791      	lsls	r1, r2, #30
 80098ec:	e9c4 c204 	strd	ip, r2, [r4, #16]
 80098f0:	d1ec      	bne.n	80098cc <validate_structure+0x168>
 80098f2:	fb92 f1f5 	sdiv	r1, r2, r5
 80098f6:	fb05 2211 	mls	r2, r5, r1, r2
 80098fa:	2a00      	cmp	r2, #0
 80098fc:	d1e8      	bne.n	80098d0 <validate_structure+0x16c>
 80098fe:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8009902:	fb93 f2f6 	sdiv	r2, r3, r6
 8009906:	fb06 3312 	mls	r3, r6, r2, r3
 800990a:	2b00      	cmp	r3, #0
 800990c:	bf14      	ite	ne
 800990e:	231c      	movne	r3, #28
 8009910:	231d      	moveq	r3, #29
 8009912:	e7ab      	b.n	800986c <validate_structure+0x108>
 8009914:	0800da1c 	.word	0x0800da1c

08009918 <mktime>:
 8009918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800991c:	b089      	sub	sp, #36	; 0x24
 800991e:	4606      	mov	r6, r0
 8009920:	f002 fa7c 	bl	800be1c <__gettzinfo>
 8009924:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 8009928:	4680      	mov	r8, r0
 800992a:	4630      	mov	r0, r6
 800992c:	f7ff ff1a 	bl	8009764 <validate_structure>
 8009930:	e9d6 3000 	ldrd	r3, r0, [r6]
 8009934:	fb0a 3a00 	mla	sl, sl, r0, r3
 8009938:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800993c:	68b0      	ldr	r0, [r6, #8]
 800993e:	4abd      	ldr	r2, [pc, #756]	; (8009c34 <mktime+0x31c>)
 8009940:	fb03 aa00 	mla	sl, r3, r0, sl
 8009944:	e9d6 4303 	ldrd	r4, r3, [r6, #12]
 8009948:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800994c:	3c01      	subs	r4, #1
 800994e:	2b01      	cmp	r3, #1
 8009950:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8009954:	4414      	add	r4, r2
 8009956:	6975      	ldr	r5, [r6, #20]
 8009958:	dd11      	ble.n	800997e <mktime+0x66>
 800995a:	07a9      	lsls	r1, r5, #30
 800995c:	d10f      	bne.n	800997e <mktime+0x66>
 800995e:	2264      	movs	r2, #100	; 0x64
 8009960:	fb95 f3f2 	sdiv	r3, r5, r2
 8009964:	fb02 5313 	mls	r3, r2, r3, r5
 8009968:	b943      	cbnz	r3, 800997c <mktime+0x64>
 800996a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800996e:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 8009972:	fb91 f3f2 	sdiv	r3, r1, r2
 8009976:	fb02 1313 	mls	r3, r2, r3, r1
 800997a:	b903      	cbnz	r3, 800997e <mktime+0x66>
 800997c:	3401      	adds	r4, #1
 800997e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8009982:	f505 531c 	add.w	r3, r5, #9984	; 0x2700
 8009986:	3310      	adds	r3, #16
 8009988:	4293      	cmp	r3, r2
 800998a:	61f4      	str	r4, [r6, #28]
 800998c:	f200 8179 	bhi.w	8009c82 <mktime+0x36a>
 8009990:	2d46      	cmp	r5, #70	; 0x46
 8009992:	f340 8084 	ble.w	8009a9e <mktime+0x186>
 8009996:	2346      	movs	r3, #70	; 0x46
 8009998:	f240 176d 	movw	r7, #365	; 0x16d
 800999c:	2164      	movs	r1, #100	; 0x64
 800999e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80099a2:	079a      	lsls	r2, r3, #30
 80099a4:	d175      	bne.n	8009a92 <mktime+0x17a>
 80099a6:	fb93 f2f1 	sdiv	r2, r3, r1
 80099aa:	fb01 3212 	mls	r2, r1, r2, r3
 80099ae:	2a00      	cmp	r2, #0
 80099b0:	d172      	bne.n	8009a98 <mktime+0x180>
 80099b2:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 80099b6:	fb9c f2f0 	sdiv	r2, ip, r0
 80099ba:	fb00 c212 	mls	r2, r0, r2, ip
 80099be:	2a00      	cmp	r2, #0
 80099c0:	bf14      	ite	ne
 80099c2:	463a      	movne	r2, r7
 80099c4:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80099c8:	3301      	adds	r3, #1
 80099ca:	429d      	cmp	r5, r3
 80099cc:	4414      	add	r4, r2
 80099ce:	d1e8      	bne.n	80099a2 <mktime+0x8a>
 80099d0:	4b99      	ldr	r3, [pc, #612]	; (8009c38 <mktime+0x320>)
 80099d2:	4363      	muls	r3, r4
 80099d4:	eb1a 0103 	adds.w	r1, sl, r3
 80099d8:	eb4b 72e3 	adc.w	r2, fp, r3, asr #31
 80099dc:	e9cd 1200 	strd	r1, r2, [sp]
 80099e0:	f000 ffc2 	bl	800a968 <__tz_lock>
 80099e4:	f000 ffc2 	bl	800a96c <_tzset_unlocked>
 80099e8:	4b94      	ldr	r3, [pc, #592]	; (8009c3c <mktime+0x324>)
 80099ea:	f8d3 9000 	ldr.w	r9, [r3]
 80099ee:	f1b9 0f00 	cmp.w	r9, #0
 80099f2:	d045      	beq.n	8009a80 <mktime+0x168>
 80099f4:	f8d6 9020 	ldr.w	r9, [r6, #32]
 80099f8:	6970      	ldr	r0, [r6, #20]
 80099fa:	464f      	mov	r7, r9
 80099fc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009a00:	2f01      	cmp	r7, #1
 8009a02:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8009a06:	bfa8      	it	ge
 8009a08:	2701      	movge	r7, #1
 8009a0a:	4283      	cmp	r3, r0
 8009a0c:	f040 8089 	bne.w	8009b22 <mktime+0x20a>
 8009a10:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8009a14:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 8009a18:	460a      	mov	r2, r1
 8009a1a:	17cb      	asrs	r3, r1, #31
 8009a1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009a20:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8009a24:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009a28:	1a12      	subs	r2, r2, r0
 8009a2a:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
 8009a2e:	4692      	mov	sl, r2
 8009a30:	469b      	mov	fp, r3
 8009a32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a36:	4552      	cmp	r2, sl
 8009a38:	eb73 0c0b 	sbcs.w	ip, r3, fp
 8009a3c:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8009a40:	da76      	bge.n	8009b30 <mktime+0x218>
 8009a42:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 8009a46:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009a4a:	ebb2 0a0a 	subs.w	sl, r2, sl
 8009a4e:	eb63 0b0b 	sbc.w	fp, r3, fp
 8009a52:	f8d8 3000 	ldr.w	r3, [r8]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d079      	beq.n	8009b4e <mktime+0x236>
 8009a5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a5e:	4552      	cmp	r2, sl
 8009a60:	eb73 030b 	sbcs.w	r3, r3, fp
 8009a64:	db07      	blt.n	8009a76 <mktime+0x15e>
 8009a66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a6a:	e9dd ab00 	ldrd	sl, fp, [sp]
 8009a6e:	4592      	cmp	sl, r2
 8009a70:	eb7b 0303 	sbcs.w	r3, fp, r3
 8009a74:	db71      	blt.n	8009b5a <mktime+0x242>
 8009a76:	f1b9 0f00 	cmp.w	r9, #0
 8009a7a:	f04f 0900 	mov.w	r9, #0
 8009a7e:	da71      	bge.n	8009b64 <mktime+0x24c>
 8009a80:	e9dd ab00 	ldrd	sl, fp, [sp]
 8009a84:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8009a88:	eb1a 0a03 	adds.w	sl, sl, r3
 8009a8c:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8009a90:	e0b4      	b.n	8009bfc <mktime+0x2e4>
 8009a92:	f240 126d 	movw	r2, #365	; 0x16d
 8009a96:	e797      	b.n	80099c8 <mktime+0xb0>
 8009a98:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8009a9c:	e794      	b.n	80099c8 <mktime+0xb0>
 8009a9e:	d097      	beq.n	80099d0 <mktime+0xb8>
 8009aa0:	2345      	movs	r3, #69	; 0x45
 8009aa2:	f240 176d 	movw	r7, #365	; 0x16d
 8009aa6:	2164      	movs	r1, #100	; 0x64
 8009aa8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8009aac:	e012      	b.n	8009ad4 <mktime+0x1bc>
 8009aae:	bb62      	cbnz	r2, 8009b0a <mktime+0x1f2>
 8009ab0:	fb93 f2f1 	sdiv	r2, r3, r1
 8009ab4:	fb01 3212 	mls	r2, r1, r2, r3
 8009ab8:	bb52      	cbnz	r2, 8009b10 <mktime+0x1f8>
 8009aba:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8009abe:	fb9c f2f0 	sdiv	r2, ip, r0
 8009ac2:	fb00 c212 	mls	r2, r0, r2, ip
 8009ac6:	2a00      	cmp	r2, #0
 8009ac8:	bf14      	ite	ne
 8009aca:	463a      	movne	r2, r7
 8009acc:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8009ad0:	1aa4      	subs	r4, r4, r2
 8009ad2:	3b01      	subs	r3, #1
 8009ad4:	429d      	cmp	r5, r3
 8009ad6:	f003 0203 	and.w	r2, r3, #3
 8009ada:	dbe8      	blt.n	8009aae <mktime+0x196>
 8009adc:	b9da      	cbnz	r2, 8009b16 <mktime+0x1fe>
 8009ade:	2264      	movs	r2, #100	; 0x64
 8009ae0:	fb95 f3f2 	sdiv	r3, r5, r2
 8009ae4:	fb02 5313 	mls	r3, r2, r3, r5
 8009ae8:	b9c3      	cbnz	r3, 8009b1c <mktime+0x204>
 8009aea:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009aee:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 8009af2:	fb91 f3f2 	sdiv	r3, r1, r2
 8009af6:	fb02 1313 	mls	r3, r2, r3, r1
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	f240 136d 	movw	r3, #365	; 0x16d
 8009b00:	bf08      	it	eq
 8009b02:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8009b06:	1ae4      	subs	r4, r4, r3
 8009b08:	e762      	b.n	80099d0 <mktime+0xb8>
 8009b0a:	f240 126d 	movw	r2, #365	; 0x16d
 8009b0e:	e7df      	b.n	8009ad0 <mktime+0x1b8>
 8009b10:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8009b14:	e7dc      	b.n	8009ad0 <mktime+0x1b8>
 8009b16:	f240 136d 	movw	r3, #365	; 0x16d
 8009b1a:	e7f4      	b.n	8009b06 <mktime+0x1ee>
 8009b1c:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8009b20:	e7f1      	b.n	8009b06 <mktime+0x1ee>
 8009b22:	f000 fe79 	bl	800a818 <__tzcalc_limits>
 8009b26:	2800      	cmp	r0, #0
 8009b28:	f47f af72 	bne.w	8009a10 <mktime+0xf8>
 8009b2c:	46b9      	mov	r9, r7
 8009b2e:	e057      	b.n	8009be0 <mktime+0x2c8>
 8009b30:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009b34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b38:	ebb2 020a 	subs.w	r2, r2, sl
 8009b3c:	eb63 030b 	sbc.w	r3, r3, fp
 8009b40:	e9dd ab00 	ldrd	sl, fp, [sp]
 8009b44:	4592      	cmp	sl, r2
 8009b46:	eb7b 0303 	sbcs.w	r3, fp, r3
 8009b4a:	dbef      	blt.n	8009b2c <mktime+0x214>
 8009b4c:	e779      	b.n	8009a42 <mktime+0x12a>
 8009b4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b52:	4552      	cmp	r2, sl
 8009b54:	eb73 030b 	sbcs.w	r3, r3, fp
 8009b58:	db85      	blt.n	8009a66 <mktime+0x14e>
 8009b5a:	f1b9 0f00 	cmp.w	r9, #0
 8009b5e:	db43      	blt.n	8009be8 <mktime+0x2d0>
 8009b60:	f04f 0901 	mov.w	r9, #1
 8009b64:	ea87 0709 	eor.w	r7, r7, r9
 8009b68:	2f01      	cmp	r7, #1
 8009b6a:	d139      	bne.n	8009be0 <mktime+0x2c8>
 8009b6c:	1a40      	subs	r0, r0, r1
 8009b6e:	f1b9 0f00 	cmp.w	r9, #0
 8009b72:	d100      	bne.n	8009b76 <mktime+0x25e>
 8009b74:	4240      	negs	r0, r0
 8009b76:	6833      	ldr	r3, [r6, #0]
 8009b78:	4403      	add	r3, r0
 8009b7a:	6033      	str	r3, [r6, #0]
 8009b7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b80:	1812      	adds	r2, r2, r0
 8009b82:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 8009b86:	e9cd 2300 	strd	r2, r3, [sp]
 8009b8a:	68f2      	ldr	r2, [r6, #12]
 8009b8c:	4630      	mov	r0, r6
 8009b8e:	9202      	str	r2, [sp, #8]
 8009b90:	f7ff fde8 	bl	8009764 <validate_structure>
 8009b94:	68f3      	ldr	r3, [r6, #12]
 8009b96:	9a02      	ldr	r2, [sp, #8]
 8009b98:	1a9b      	subs	r3, r3, r2
 8009b9a:	d021      	beq.n	8009be0 <mktime+0x2c8>
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	dc40      	bgt.n	8009c22 <mktime+0x30a>
 8009ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ba4:	bfa8      	it	ge
 8009ba6:	461f      	movge	r7, r3
 8009ba8:	69f3      	ldr	r3, [r6, #28]
 8009baa:	443c      	add	r4, r7
 8009bac:	18ff      	adds	r7, r7, r3
 8009bae:	d547      	bpl.n	8009c40 <mktime+0x328>
 8009bb0:	1e6a      	subs	r2, r5, #1
 8009bb2:	0791      	lsls	r1, r2, #30
 8009bb4:	d138      	bne.n	8009c28 <mktime+0x310>
 8009bb6:	2164      	movs	r1, #100	; 0x64
 8009bb8:	fb92 f3f1 	sdiv	r3, r2, r1
 8009bbc:	fb01 2313 	mls	r3, r1, r3, r2
 8009bc0:	bbab      	cbnz	r3, 8009c2e <mktime+0x316>
 8009bc2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009bc6:	f205 756b 	addw	r5, r5, #1899	; 0x76b
 8009bca:	fb95 f3f2 	sdiv	r3, r5, r2
 8009bce:	fb02 5513 	mls	r5, r2, r3, r5
 8009bd2:	2d00      	cmp	r5, #0
 8009bd4:	f240 136d 	movw	r3, #365	; 0x16d
 8009bd8:	bf18      	it	ne
 8009bda:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8009bde:	61f3      	str	r3, [r6, #28]
 8009be0:	f1b9 0f01 	cmp.w	r9, #1
 8009be4:	f47f af4c 	bne.w	8009a80 <mktime+0x168>
 8009be8:	e9dd ab00 	ldrd	sl, fp, [sp]
 8009bec:	f04f 0901 	mov.w	r9, #1
 8009bf0:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
 8009bf4:	eb1a 0a03 	adds.w	sl, sl, r3
 8009bf8:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8009bfc:	f000 feb5 	bl	800a96a <__tz_unlock>
 8009c00:	2307      	movs	r3, #7
 8009c02:	3404      	adds	r4, #4
 8009c04:	fb94 f3f3 	sdiv	r3, r4, r3
 8009c08:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009c0c:	1ae4      	subs	r4, r4, r3
 8009c0e:	bf48      	it	mi
 8009c10:	3407      	addmi	r4, #7
 8009c12:	f8c6 9020 	str.w	r9, [r6, #32]
 8009c16:	61b4      	str	r4, [r6, #24]
 8009c18:	4650      	mov	r0, sl
 8009c1a:	4659      	mov	r1, fp
 8009c1c:	b009      	add	sp, #36	; 0x24
 8009c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c22:	f04f 37ff 	mov.w	r7, #4294967295
 8009c26:	e7bf      	b.n	8009ba8 <mktime+0x290>
 8009c28:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8009c2c:	e7d7      	b.n	8009bde <mktime+0x2c6>
 8009c2e:	f240 136d 	movw	r3, #365	; 0x16d
 8009c32:	e7d4      	b.n	8009bde <mktime+0x2c6>
 8009c34:	0800da4c 	.word	0x0800da4c
 8009c38:	00015180 	.word	0x00015180
 8009c3c:	200002e4 	.word	0x200002e4
 8009c40:	07ab      	lsls	r3, r5, #30
 8009c42:	d118      	bne.n	8009c76 <mktime+0x35e>
 8009c44:	2264      	movs	r2, #100	; 0x64
 8009c46:	fb95 f3f2 	sdiv	r3, r5, r2
 8009c4a:	fb02 5313 	mls	r3, r2, r3, r5
 8009c4e:	b9ab      	cbnz	r3, 8009c7c <mktime+0x364>
 8009c50:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009c54:	f205 756c 	addw	r5, r5, #1900	; 0x76c
 8009c58:	fb95 f3f2 	sdiv	r3, r5, r2
 8009c5c:	fb02 5513 	mls	r5, r2, r3, r5
 8009c60:	2d00      	cmp	r5, #0
 8009c62:	f240 136d 	movw	r3, #365	; 0x16d
 8009c66:	bf08      	it	eq
 8009c68:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8009c6c:	429f      	cmp	r7, r3
 8009c6e:	bfa8      	it	ge
 8009c70:	1aff      	subge	r7, r7, r3
 8009c72:	61f7      	str	r7, [r6, #28]
 8009c74:	e7b4      	b.n	8009be0 <mktime+0x2c8>
 8009c76:	f240 136d 	movw	r3, #365	; 0x16d
 8009c7a:	e7f7      	b.n	8009c6c <mktime+0x354>
 8009c7c:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8009c80:	e7f4      	b.n	8009c6c <mktime+0x354>
 8009c82:	f04f 3aff 	mov.w	sl, #4294967295
 8009c86:	f04f 3bff 	mov.w	fp, #4294967295
 8009c8a:	e7c5      	b.n	8009c18 <mktime+0x300>

08009c8c <_free_r>:
 8009c8c:	b538      	push	{r3, r4, r5, lr}
 8009c8e:	4605      	mov	r5, r0
 8009c90:	2900      	cmp	r1, #0
 8009c92:	d043      	beq.n	8009d1c <_free_r+0x90>
 8009c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c98:	1f0c      	subs	r4, r1, #4
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	bfb8      	it	lt
 8009c9e:	18e4      	addlt	r4, r4, r3
 8009ca0:	f002 f94b 	bl	800bf3a <__malloc_lock>
 8009ca4:	4a1e      	ldr	r2, [pc, #120]	; (8009d20 <_free_r+0x94>)
 8009ca6:	6813      	ldr	r3, [r2, #0]
 8009ca8:	4610      	mov	r0, r2
 8009caa:	b933      	cbnz	r3, 8009cba <_free_r+0x2e>
 8009cac:	6063      	str	r3, [r4, #4]
 8009cae:	6014      	str	r4, [r2, #0]
 8009cb0:	4628      	mov	r0, r5
 8009cb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cb6:	f002 b941 	b.w	800bf3c <__malloc_unlock>
 8009cba:	42a3      	cmp	r3, r4
 8009cbc:	d90b      	bls.n	8009cd6 <_free_r+0x4a>
 8009cbe:	6821      	ldr	r1, [r4, #0]
 8009cc0:	1862      	adds	r2, r4, r1
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	bf01      	itttt	eq
 8009cc6:	681a      	ldreq	r2, [r3, #0]
 8009cc8:	685b      	ldreq	r3, [r3, #4]
 8009cca:	1852      	addeq	r2, r2, r1
 8009ccc:	6022      	streq	r2, [r4, #0]
 8009cce:	6063      	str	r3, [r4, #4]
 8009cd0:	6004      	str	r4, [r0, #0]
 8009cd2:	e7ed      	b.n	8009cb0 <_free_r+0x24>
 8009cd4:	4613      	mov	r3, r2
 8009cd6:	685a      	ldr	r2, [r3, #4]
 8009cd8:	b10a      	cbz	r2, 8009cde <_free_r+0x52>
 8009cda:	42a2      	cmp	r2, r4
 8009cdc:	d9fa      	bls.n	8009cd4 <_free_r+0x48>
 8009cde:	6819      	ldr	r1, [r3, #0]
 8009ce0:	1858      	adds	r0, r3, r1
 8009ce2:	42a0      	cmp	r0, r4
 8009ce4:	d10b      	bne.n	8009cfe <_free_r+0x72>
 8009ce6:	6820      	ldr	r0, [r4, #0]
 8009ce8:	4401      	add	r1, r0
 8009cea:	1858      	adds	r0, r3, r1
 8009cec:	4282      	cmp	r2, r0
 8009cee:	6019      	str	r1, [r3, #0]
 8009cf0:	d1de      	bne.n	8009cb0 <_free_r+0x24>
 8009cf2:	6810      	ldr	r0, [r2, #0]
 8009cf4:	6852      	ldr	r2, [r2, #4]
 8009cf6:	4401      	add	r1, r0
 8009cf8:	6019      	str	r1, [r3, #0]
 8009cfa:	605a      	str	r2, [r3, #4]
 8009cfc:	e7d8      	b.n	8009cb0 <_free_r+0x24>
 8009cfe:	d902      	bls.n	8009d06 <_free_r+0x7a>
 8009d00:	230c      	movs	r3, #12
 8009d02:	602b      	str	r3, [r5, #0]
 8009d04:	e7d4      	b.n	8009cb0 <_free_r+0x24>
 8009d06:	6820      	ldr	r0, [r4, #0]
 8009d08:	1821      	adds	r1, r4, r0
 8009d0a:	428a      	cmp	r2, r1
 8009d0c:	bf01      	itttt	eq
 8009d0e:	6811      	ldreq	r1, [r2, #0]
 8009d10:	6852      	ldreq	r2, [r2, #4]
 8009d12:	1809      	addeq	r1, r1, r0
 8009d14:	6021      	streq	r1, [r4, #0]
 8009d16:	6062      	str	r2, [r4, #4]
 8009d18:	605c      	str	r4, [r3, #4]
 8009d1a:	e7c9      	b.n	8009cb0 <_free_r+0x24>
 8009d1c:	bd38      	pop	{r3, r4, r5, pc}
 8009d1e:	bf00      	nop
 8009d20:	200002c0 	.word	0x200002c0

08009d24 <_malloc_r>:
 8009d24:	b570      	push	{r4, r5, r6, lr}
 8009d26:	1ccd      	adds	r5, r1, #3
 8009d28:	f025 0503 	bic.w	r5, r5, #3
 8009d2c:	3508      	adds	r5, #8
 8009d2e:	2d0c      	cmp	r5, #12
 8009d30:	bf38      	it	cc
 8009d32:	250c      	movcc	r5, #12
 8009d34:	2d00      	cmp	r5, #0
 8009d36:	4606      	mov	r6, r0
 8009d38:	db01      	blt.n	8009d3e <_malloc_r+0x1a>
 8009d3a:	42a9      	cmp	r1, r5
 8009d3c:	d903      	bls.n	8009d46 <_malloc_r+0x22>
 8009d3e:	230c      	movs	r3, #12
 8009d40:	6033      	str	r3, [r6, #0]
 8009d42:	2000      	movs	r0, #0
 8009d44:	bd70      	pop	{r4, r5, r6, pc}
 8009d46:	f002 f8f8 	bl	800bf3a <__malloc_lock>
 8009d4a:	4a21      	ldr	r2, [pc, #132]	; (8009dd0 <_malloc_r+0xac>)
 8009d4c:	6814      	ldr	r4, [r2, #0]
 8009d4e:	4621      	mov	r1, r4
 8009d50:	b991      	cbnz	r1, 8009d78 <_malloc_r+0x54>
 8009d52:	4c20      	ldr	r4, [pc, #128]	; (8009dd4 <_malloc_r+0xb0>)
 8009d54:	6823      	ldr	r3, [r4, #0]
 8009d56:	b91b      	cbnz	r3, 8009d60 <_malloc_r+0x3c>
 8009d58:	4630      	mov	r0, r6
 8009d5a:	f000 fd1d 	bl	800a798 <_sbrk_r>
 8009d5e:	6020      	str	r0, [r4, #0]
 8009d60:	4629      	mov	r1, r5
 8009d62:	4630      	mov	r0, r6
 8009d64:	f000 fd18 	bl	800a798 <_sbrk_r>
 8009d68:	1c43      	adds	r3, r0, #1
 8009d6a:	d124      	bne.n	8009db6 <_malloc_r+0x92>
 8009d6c:	230c      	movs	r3, #12
 8009d6e:	4630      	mov	r0, r6
 8009d70:	6033      	str	r3, [r6, #0]
 8009d72:	f002 f8e3 	bl	800bf3c <__malloc_unlock>
 8009d76:	e7e4      	b.n	8009d42 <_malloc_r+0x1e>
 8009d78:	680b      	ldr	r3, [r1, #0]
 8009d7a:	1b5b      	subs	r3, r3, r5
 8009d7c:	d418      	bmi.n	8009db0 <_malloc_r+0x8c>
 8009d7e:	2b0b      	cmp	r3, #11
 8009d80:	d90f      	bls.n	8009da2 <_malloc_r+0x7e>
 8009d82:	600b      	str	r3, [r1, #0]
 8009d84:	18cc      	adds	r4, r1, r3
 8009d86:	50cd      	str	r5, [r1, r3]
 8009d88:	4630      	mov	r0, r6
 8009d8a:	f002 f8d7 	bl	800bf3c <__malloc_unlock>
 8009d8e:	f104 000b 	add.w	r0, r4, #11
 8009d92:	1d23      	adds	r3, r4, #4
 8009d94:	f020 0007 	bic.w	r0, r0, #7
 8009d98:	1ac3      	subs	r3, r0, r3
 8009d9a:	d0d3      	beq.n	8009d44 <_malloc_r+0x20>
 8009d9c:	425a      	negs	r2, r3
 8009d9e:	50e2      	str	r2, [r4, r3]
 8009da0:	e7d0      	b.n	8009d44 <_malloc_r+0x20>
 8009da2:	684b      	ldr	r3, [r1, #4]
 8009da4:	428c      	cmp	r4, r1
 8009da6:	bf16      	itet	ne
 8009da8:	6063      	strne	r3, [r4, #4]
 8009daa:	6013      	streq	r3, [r2, #0]
 8009dac:	460c      	movne	r4, r1
 8009dae:	e7eb      	b.n	8009d88 <_malloc_r+0x64>
 8009db0:	460c      	mov	r4, r1
 8009db2:	6849      	ldr	r1, [r1, #4]
 8009db4:	e7cc      	b.n	8009d50 <_malloc_r+0x2c>
 8009db6:	1cc4      	adds	r4, r0, #3
 8009db8:	f024 0403 	bic.w	r4, r4, #3
 8009dbc:	42a0      	cmp	r0, r4
 8009dbe:	d005      	beq.n	8009dcc <_malloc_r+0xa8>
 8009dc0:	1a21      	subs	r1, r4, r0
 8009dc2:	4630      	mov	r0, r6
 8009dc4:	f000 fce8 	bl	800a798 <_sbrk_r>
 8009dc8:	3001      	adds	r0, #1
 8009dca:	d0cf      	beq.n	8009d6c <_malloc_r+0x48>
 8009dcc:	6025      	str	r5, [r4, #0]
 8009dce:	e7db      	b.n	8009d88 <_malloc_r+0x64>
 8009dd0:	200002c0 	.word	0x200002c0
 8009dd4:	200002c4 	.word	0x200002c4

08009dd8 <__cvt>:
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dde:	461e      	mov	r6, r3
 8009de0:	bfbb      	ittet	lt
 8009de2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009de6:	461e      	movlt	r6, r3
 8009de8:	2300      	movge	r3, #0
 8009dea:	232d      	movlt	r3, #45	; 0x2d
 8009dec:	b088      	sub	sp, #32
 8009dee:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009df0:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8009df4:	f027 0720 	bic.w	r7, r7, #32
 8009df8:	2f46      	cmp	r7, #70	; 0x46
 8009dfa:	4614      	mov	r4, r2
 8009dfc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009dfe:	700b      	strb	r3, [r1, #0]
 8009e00:	d004      	beq.n	8009e0c <__cvt+0x34>
 8009e02:	2f45      	cmp	r7, #69	; 0x45
 8009e04:	d100      	bne.n	8009e08 <__cvt+0x30>
 8009e06:	3501      	adds	r5, #1
 8009e08:	2302      	movs	r3, #2
 8009e0a:	e000      	b.n	8009e0e <__cvt+0x36>
 8009e0c:	2303      	movs	r3, #3
 8009e0e:	aa07      	add	r2, sp, #28
 8009e10:	9204      	str	r2, [sp, #16]
 8009e12:	aa06      	add	r2, sp, #24
 8009e14:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009e18:	e9cd 3500 	strd	r3, r5, [sp]
 8009e1c:	4622      	mov	r2, r4
 8009e1e:	4633      	mov	r3, r6
 8009e20:	f001 f88a 	bl	800af38 <_dtoa_r>
 8009e24:	2f47      	cmp	r7, #71	; 0x47
 8009e26:	4680      	mov	r8, r0
 8009e28:	d102      	bne.n	8009e30 <__cvt+0x58>
 8009e2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e2c:	07db      	lsls	r3, r3, #31
 8009e2e:	d526      	bpl.n	8009e7e <__cvt+0xa6>
 8009e30:	2f46      	cmp	r7, #70	; 0x46
 8009e32:	eb08 0905 	add.w	r9, r8, r5
 8009e36:	d111      	bne.n	8009e5c <__cvt+0x84>
 8009e38:	f898 3000 	ldrb.w	r3, [r8]
 8009e3c:	2b30      	cmp	r3, #48	; 0x30
 8009e3e:	d10a      	bne.n	8009e56 <__cvt+0x7e>
 8009e40:	2200      	movs	r2, #0
 8009e42:	2300      	movs	r3, #0
 8009e44:	4620      	mov	r0, r4
 8009e46:	4631      	mov	r1, r6
 8009e48:	f7f6 fdb8 	bl	80009bc <__aeabi_dcmpeq>
 8009e4c:	b918      	cbnz	r0, 8009e56 <__cvt+0x7e>
 8009e4e:	f1c5 0501 	rsb	r5, r5, #1
 8009e52:	f8ca 5000 	str.w	r5, [sl]
 8009e56:	f8da 3000 	ldr.w	r3, [sl]
 8009e5a:	4499      	add	r9, r3
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	2300      	movs	r3, #0
 8009e60:	4620      	mov	r0, r4
 8009e62:	4631      	mov	r1, r6
 8009e64:	f7f6 fdaa 	bl	80009bc <__aeabi_dcmpeq>
 8009e68:	b938      	cbnz	r0, 8009e7a <__cvt+0xa2>
 8009e6a:	2230      	movs	r2, #48	; 0x30
 8009e6c:	9b07      	ldr	r3, [sp, #28]
 8009e6e:	454b      	cmp	r3, r9
 8009e70:	d205      	bcs.n	8009e7e <__cvt+0xa6>
 8009e72:	1c59      	adds	r1, r3, #1
 8009e74:	9107      	str	r1, [sp, #28]
 8009e76:	701a      	strb	r2, [r3, #0]
 8009e78:	e7f8      	b.n	8009e6c <__cvt+0x94>
 8009e7a:	f8cd 901c 	str.w	r9, [sp, #28]
 8009e7e:	4640      	mov	r0, r8
 8009e80:	9b07      	ldr	r3, [sp, #28]
 8009e82:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009e84:	eba3 0308 	sub.w	r3, r3, r8
 8009e88:	6013      	str	r3, [r2, #0]
 8009e8a:	b008      	add	sp, #32
 8009e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009e90 <__exponent>:
 8009e90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e92:	2900      	cmp	r1, #0
 8009e94:	bfb4      	ite	lt
 8009e96:	232d      	movlt	r3, #45	; 0x2d
 8009e98:	232b      	movge	r3, #43	; 0x2b
 8009e9a:	4604      	mov	r4, r0
 8009e9c:	bfb8      	it	lt
 8009e9e:	4249      	neglt	r1, r1
 8009ea0:	2909      	cmp	r1, #9
 8009ea2:	f804 2b02 	strb.w	r2, [r4], #2
 8009ea6:	7043      	strb	r3, [r0, #1]
 8009ea8:	dd21      	ble.n	8009eee <__exponent+0x5e>
 8009eaa:	f10d 0307 	add.w	r3, sp, #7
 8009eae:	461f      	mov	r7, r3
 8009eb0:	260a      	movs	r6, #10
 8009eb2:	fb91 f5f6 	sdiv	r5, r1, r6
 8009eb6:	fb06 1115 	mls	r1, r6, r5, r1
 8009eba:	2d09      	cmp	r5, #9
 8009ebc:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8009ec0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009ec4:	f103 32ff 	add.w	r2, r3, #4294967295
 8009ec8:	4629      	mov	r1, r5
 8009eca:	dc09      	bgt.n	8009ee0 <__exponent+0x50>
 8009ecc:	3130      	adds	r1, #48	; 0x30
 8009ece:	3b02      	subs	r3, #2
 8009ed0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009ed4:	42bb      	cmp	r3, r7
 8009ed6:	4622      	mov	r2, r4
 8009ed8:	d304      	bcc.n	8009ee4 <__exponent+0x54>
 8009eda:	1a10      	subs	r0, r2, r0
 8009edc:	b003      	add	sp, #12
 8009ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ee0:	4613      	mov	r3, r2
 8009ee2:	e7e6      	b.n	8009eb2 <__exponent+0x22>
 8009ee4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ee8:	f804 2b01 	strb.w	r2, [r4], #1
 8009eec:	e7f2      	b.n	8009ed4 <__exponent+0x44>
 8009eee:	2330      	movs	r3, #48	; 0x30
 8009ef0:	4419      	add	r1, r3
 8009ef2:	7083      	strb	r3, [r0, #2]
 8009ef4:	1d02      	adds	r2, r0, #4
 8009ef6:	70c1      	strb	r1, [r0, #3]
 8009ef8:	e7ef      	b.n	8009eda <__exponent+0x4a>
	...

08009efc <_printf_float>:
 8009efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f00:	b091      	sub	sp, #68	; 0x44
 8009f02:	460c      	mov	r4, r1
 8009f04:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8009f06:	4693      	mov	fp, r2
 8009f08:	461e      	mov	r6, r3
 8009f0a:	4605      	mov	r5, r0
 8009f0c:	f001 ff8a 	bl	800be24 <_localeconv_r>
 8009f10:	6803      	ldr	r3, [r0, #0]
 8009f12:	4618      	mov	r0, r3
 8009f14:	9309      	str	r3, [sp, #36]	; 0x24
 8009f16:	f7f6 f91b 	bl	8000150 <strlen>
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	930e      	str	r3, [sp, #56]	; 0x38
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	900a      	str	r0, [sp, #40]	; 0x28
 8009f22:	3307      	adds	r3, #7
 8009f24:	f023 0307 	bic.w	r3, r3, #7
 8009f28:	f103 0208 	add.w	r2, r3, #8
 8009f2c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8009f30:	f8d4 a000 	ldr.w	sl, [r4]
 8009f34:	603a      	str	r2, [r7, #0]
 8009f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009f3e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8009f42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009f46:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f48:	f04f 32ff 	mov.w	r2, #4294967295
 8009f4c:	4ba6      	ldr	r3, [pc, #664]	; (800a1e8 <_printf_float+0x2ec>)
 8009f4e:	4638      	mov	r0, r7
 8009f50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f52:	f7f6 fd65 	bl	8000a20 <__aeabi_dcmpun>
 8009f56:	bb68      	cbnz	r0, 8009fb4 <_printf_float+0xb8>
 8009f58:	f04f 32ff 	mov.w	r2, #4294967295
 8009f5c:	4ba2      	ldr	r3, [pc, #648]	; (800a1e8 <_printf_float+0x2ec>)
 8009f5e:	4638      	mov	r0, r7
 8009f60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f62:	f7f6 fd3f 	bl	80009e4 <__aeabi_dcmple>
 8009f66:	bb28      	cbnz	r0, 8009fb4 <_printf_float+0xb8>
 8009f68:	2200      	movs	r2, #0
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	4638      	mov	r0, r7
 8009f6e:	4649      	mov	r1, r9
 8009f70:	f7f6 fd2e 	bl	80009d0 <__aeabi_dcmplt>
 8009f74:	b110      	cbz	r0, 8009f7c <_printf_float+0x80>
 8009f76:	232d      	movs	r3, #45	; 0x2d
 8009f78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f7c:	4f9b      	ldr	r7, [pc, #620]	; (800a1ec <_printf_float+0x2f0>)
 8009f7e:	4b9c      	ldr	r3, [pc, #624]	; (800a1f0 <_printf_float+0x2f4>)
 8009f80:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009f84:	bf98      	it	ls
 8009f86:	461f      	movls	r7, r3
 8009f88:	2303      	movs	r3, #3
 8009f8a:	f04f 0900 	mov.w	r9, #0
 8009f8e:	6123      	str	r3, [r4, #16]
 8009f90:	f02a 0304 	bic.w	r3, sl, #4
 8009f94:	6023      	str	r3, [r4, #0]
 8009f96:	9600      	str	r6, [sp, #0]
 8009f98:	465b      	mov	r3, fp
 8009f9a:	aa0f      	add	r2, sp, #60	; 0x3c
 8009f9c:	4621      	mov	r1, r4
 8009f9e:	4628      	mov	r0, r5
 8009fa0:	f000 f9e2 	bl	800a368 <_printf_common>
 8009fa4:	3001      	adds	r0, #1
 8009fa6:	f040 8090 	bne.w	800a0ca <_printf_float+0x1ce>
 8009faa:	f04f 30ff 	mov.w	r0, #4294967295
 8009fae:	b011      	add	sp, #68	; 0x44
 8009fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fb4:	463a      	mov	r2, r7
 8009fb6:	464b      	mov	r3, r9
 8009fb8:	4638      	mov	r0, r7
 8009fba:	4649      	mov	r1, r9
 8009fbc:	f7f6 fd30 	bl	8000a20 <__aeabi_dcmpun>
 8009fc0:	b110      	cbz	r0, 8009fc8 <_printf_float+0xcc>
 8009fc2:	4f8c      	ldr	r7, [pc, #560]	; (800a1f4 <_printf_float+0x2f8>)
 8009fc4:	4b8c      	ldr	r3, [pc, #560]	; (800a1f8 <_printf_float+0x2fc>)
 8009fc6:	e7db      	b.n	8009f80 <_printf_float+0x84>
 8009fc8:	6863      	ldr	r3, [r4, #4]
 8009fca:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8009fce:	1c59      	adds	r1, r3, #1
 8009fd0:	a80d      	add	r0, sp, #52	; 0x34
 8009fd2:	a90e      	add	r1, sp, #56	; 0x38
 8009fd4:	d140      	bne.n	800a058 <_printf_float+0x15c>
 8009fd6:	2306      	movs	r3, #6
 8009fd8:	6063      	str	r3, [r4, #4]
 8009fda:	f04f 0c00 	mov.w	ip, #0
 8009fde:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8009fe2:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8009fe6:	6863      	ldr	r3, [r4, #4]
 8009fe8:	6022      	str	r2, [r4, #0]
 8009fea:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8009fee:	9300      	str	r3, [sp, #0]
 8009ff0:	463a      	mov	r2, r7
 8009ff2:	464b      	mov	r3, r9
 8009ff4:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	f7ff feed 	bl	8009dd8 <__cvt>
 8009ffe:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800a002:	2b47      	cmp	r3, #71	; 0x47
 800a004:	4607      	mov	r7, r0
 800a006:	d109      	bne.n	800a01c <_printf_float+0x120>
 800a008:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a00a:	1cd8      	adds	r0, r3, #3
 800a00c:	db02      	blt.n	800a014 <_printf_float+0x118>
 800a00e:	6862      	ldr	r2, [r4, #4]
 800a010:	4293      	cmp	r3, r2
 800a012:	dd47      	ble.n	800a0a4 <_printf_float+0x1a8>
 800a014:	f1a8 0802 	sub.w	r8, r8, #2
 800a018:	fa5f f888 	uxtb.w	r8, r8
 800a01c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800a020:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a022:	d824      	bhi.n	800a06e <_printf_float+0x172>
 800a024:	3901      	subs	r1, #1
 800a026:	4642      	mov	r2, r8
 800a028:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a02c:	910d      	str	r1, [sp, #52]	; 0x34
 800a02e:	f7ff ff2f 	bl	8009e90 <__exponent>
 800a032:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a034:	4681      	mov	r9, r0
 800a036:	1813      	adds	r3, r2, r0
 800a038:	2a01      	cmp	r2, #1
 800a03a:	6123      	str	r3, [r4, #16]
 800a03c:	dc02      	bgt.n	800a044 <_printf_float+0x148>
 800a03e:	6822      	ldr	r2, [r4, #0]
 800a040:	07d1      	lsls	r1, r2, #31
 800a042:	d501      	bpl.n	800a048 <_printf_float+0x14c>
 800a044:	3301      	adds	r3, #1
 800a046:	6123      	str	r3, [r4, #16]
 800a048:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d0a2      	beq.n	8009f96 <_printf_float+0x9a>
 800a050:	232d      	movs	r3, #45	; 0x2d
 800a052:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a056:	e79e      	b.n	8009f96 <_printf_float+0x9a>
 800a058:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800a05c:	f000 816e 	beq.w	800a33c <_printf_float+0x440>
 800a060:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a064:	d1b9      	bne.n	8009fda <_printf_float+0xde>
 800a066:	2b00      	cmp	r3, #0
 800a068:	d1b7      	bne.n	8009fda <_printf_float+0xde>
 800a06a:	2301      	movs	r3, #1
 800a06c:	e7b4      	b.n	8009fd8 <_printf_float+0xdc>
 800a06e:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800a072:	d119      	bne.n	800a0a8 <_printf_float+0x1ac>
 800a074:	2900      	cmp	r1, #0
 800a076:	6863      	ldr	r3, [r4, #4]
 800a078:	dd0c      	ble.n	800a094 <_printf_float+0x198>
 800a07a:	6121      	str	r1, [r4, #16]
 800a07c:	b913      	cbnz	r3, 800a084 <_printf_float+0x188>
 800a07e:	6822      	ldr	r2, [r4, #0]
 800a080:	07d2      	lsls	r2, r2, #31
 800a082:	d502      	bpl.n	800a08a <_printf_float+0x18e>
 800a084:	3301      	adds	r3, #1
 800a086:	440b      	add	r3, r1
 800a088:	6123      	str	r3, [r4, #16]
 800a08a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a08c:	f04f 0900 	mov.w	r9, #0
 800a090:	65a3      	str	r3, [r4, #88]	; 0x58
 800a092:	e7d9      	b.n	800a048 <_printf_float+0x14c>
 800a094:	b913      	cbnz	r3, 800a09c <_printf_float+0x1a0>
 800a096:	6822      	ldr	r2, [r4, #0]
 800a098:	07d0      	lsls	r0, r2, #31
 800a09a:	d501      	bpl.n	800a0a0 <_printf_float+0x1a4>
 800a09c:	3302      	adds	r3, #2
 800a09e:	e7f3      	b.n	800a088 <_printf_float+0x18c>
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	e7f1      	b.n	800a088 <_printf_float+0x18c>
 800a0a4:	f04f 0867 	mov.w	r8, #103	; 0x67
 800a0a8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	db05      	blt.n	800a0bc <_printf_float+0x1c0>
 800a0b0:	6822      	ldr	r2, [r4, #0]
 800a0b2:	6123      	str	r3, [r4, #16]
 800a0b4:	07d1      	lsls	r1, r2, #31
 800a0b6:	d5e8      	bpl.n	800a08a <_printf_float+0x18e>
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	e7e5      	b.n	800a088 <_printf_float+0x18c>
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	bfcc      	ite	gt
 800a0c0:	2301      	movgt	r3, #1
 800a0c2:	f1c3 0302 	rsble	r3, r3, #2
 800a0c6:	4413      	add	r3, r2
 800a0c8:	e7de      	b.n	800a088 <_printf_float+0x18c>
 800a0ca:	6823      	ldr	r3, [r4, #0]
 800a0cc:	055a      	lsls	r2, r3, #21
 800a0ce:	d407      	bmi.n	800a0e0 <_printf_float+0x1e4>
 800a0d0:	6923      	ldr	r3, [r4, #16]
 800a0d2:	463a      	mov	r2, r7
 800a0d4:	4659      	mov	r1, fp
 800a0d6:	4628      	mov	r0, r5
 800a0d8:	47b0      	blx	r6
 800a0da:	3001      	adds	r0, #1
 800a0dc:	d129      	bne.n	800a132 <_printf_float+0x236>
 800a0de:	e764      	b.n	8009faa <_printf_float+0xae>
 800a0e0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800a0e4:	f240 80d7 	bls.w	800a296 <_printf_float+0x39a>
 800a0e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	f7f6 fc64 	bl	80009bc <__aeabi_dcmpeq>
 800a0f4:	b388      	cbz	r0, 800a15a <_printf_float+0x25e>
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	4a40      	ldr	r2, [pc, #256]	; (800a1fc <_printf_float+0x300>)
 800a0fa:	4659      	mov	r1, fp
 800a0fc:	4628      	mov	r0, r5
 800a0fe:	47b0      	blx	r6
 800a100:	3001      	adds	r0, #1
 800a102:	f43f af52 	beq.w	8009faa <_printf_float+0xae>
 800a106:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a10a:	429a      	cmp	r2, r3
 800a10c:	db02      	blt.n	800a114 <_printf_float+0x218>
 800a10e:	6823      	ldr	r3, [r4, #0]
 800a110:	07d8      	lsls	r0, r3, #31
 800a112:	d50e      	bpl.n	800a132 <_printf_float+0x236>
 800a114:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a118:	4659      	mov	r1, fp
 800a11a:	4628      	mov	r0, r5
 800a11c:	47b0      	blx	r6
 800a11e:	3001      	adds	r0, #1
 800a120:	f43f af43 	beq.w	8009faa <_printf_float+0xae>
 800a124:	2700      	movs	r7, #0
 800a126:	f104 081a 	add.w	r8, r4, #26
 800a12a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a12c:	3b01      	subs	r3, #1
 800a12e:	42bb      	cmp	r3, r7
 800a130:	dc09      	bgt.n	800a146 <_printf_float+0x24a>
 800a132:	6823      	ldr	r3, [r4, #0]
 800a134:	079f      	lsls	r7, r3, #30
 800a136:	f100 80fd 	bmi.w	800a334 <_printf_float+0x438>
 800a13a:	68e0      	ldr	r0, [r4, #12]
 800a13c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a13e:	4298      	cmp	r0, r3
 800a140:	bfb8      	it	lt
 800a142:	4618      	movlt	r0, r3
 800a144:	e733      	b.n	8009fae <_printf_float+0xb2>
 800a146:	2301      	movs	r3, #1
 800a148:	4642      	mov	r2, r8
 800a14a:	4659      	mov	r1, fp
 800a14c:	4628      	mov	r0, r5
 800a14e:	47b0      	blx	r6
 800a150:	3001      	adds	r0, #1
 800a152:	f43f af2a 	beq.w	8009faa <_printf_float+0xae>
 800a156:	3701      	adds	r7, #1
 800a158:	e7e7      	b.n	800a12a <_printf_float+0x22e>
 800a15a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	dc2b      	bgt.n	800a1b8 <_printf_float+0x2bc>
 800a160:	2301      	movs	r3, #1
 800a162:	4a26      	ldr	r2, [pc, #152]	; (800a1fc <_printf_float+0x300>)
 800a164:	4659      	mov	r1, fp
 800a166:	4628      	mov	r0, r5
 800a168:	47b0      	blx	r6
 800a16a:	3001      	adds	r0, #1
 800a16c:	f43f af1d 	beq.w	8009faa <_printf_float+0xae>
 800a170:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a172:	b923      	cbnz	r3, 800a17e <_printf_float+0x282>
 800a174:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a176:	b913      	cbnz	r3, 800a17e <_printf_float+0x282>
 800a178:	6823      	ldr	r3, [r4, #0]
 800a17a:	07d9      	lsls	r1, r3, #31
 800a17c:	d5d9      	bpl.n	800a132 <_printf_float+0x236>
 800a17e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a182:	4659      	mov	r1, fp
 800a184:	4628      	mov	r0, r5
 800a186:	47b0      	blx	r6
 800a188:	3001      	adds	r0, #1
 800a18a:	f43f af0e 	beq.w	8009faa <_printf_float+0xae>
 800a18e:	f04f 0800 	mov.w	r8, #0
 800a192:	f104 091a 	add.w	r9, r4, #26
 800a196:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a198:	425b      	negs	r3, r3
 800a19a:	4543      	cmp	r3, r8
 800a19c:	dc01      	bgt.n	800a1a2 <_printf_float+0x2a6>
 800a19e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1a0:	e797      	b.n	800a0d2 <_printf_float+0x1d6>
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	464a      	mov	r2, r9
 800a1a6:	4659      	mov	r1, fp
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	47b0      	blx	r6
 800a1ac:	3001      	adds	r0, #1
 800a1ae:	f43f aefc 	beq.w	8009faa <_printf_float+0xae>
 800a1b2:	f108 0801 	add.w	r8, r8, #1
 800a1b6:	e7ee      	b.n	800a196 <_printf_float+0x29a>
 800a1b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a1ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	bfa8      	it	ge
 800a1c0:	461a      	movge	r2, r3
 800a1c2:	2a00      	cmp	r2, #0
 800a1c4:	4690      	mov	r8, r2
 800a1c6:	dd07      	ble.n	800a1d8 <_printf_float+0x2dc>
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	4659      	mov	r1, fp
 800a1cc:	463a      	mov	r2, r7
 800a1ce:	4628      	mov	r0, r5
 800a1d0:	47b0      	blx	r6
 800a1d2:	3001      	adds	r0, #1
 800a1d4:	f43f aee9 	beq.w	8009faa <_printf_float+0xae>
 800a1d8:	f104 031a 	add.w	r3, r4, #26
 800a1dc:	f04f 0a00 	mov.w	sl, #0
 800a1e0:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800a1e4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1e6:	e015      	b.n	800a214 <_printf_float+0x318>
 800a1e8:	7fefffff 	.word	0x7fefffff
 800a1ec:	0800da80 	.word	0x0800da80
 800a1f0:	0800da7c 	.word	0x0800da7c
 800a1f4:	0800da88 	.word	0x0800da88
 800a1f8:	0800da84 	.word	0x0800da84
 800a1fc:	0800dce5 	.word	0x0800dce5
 800a200:	2301      	movs	r3, #1
 800a202:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a204:	4659      	mov	r1, fp
 800a206:	4628      	mov	r0, r5
 800a208:	47b0      	blx	r6
 800a20a:	3001      	adds	r0, #1
 800a20c:	f43f aecd 	beq.w	8009faa <_printf_float+0xae>
 800a210:	f10a 0a01 	add.w	sl, sl, #1
 800a214:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800a218:	eba9 0308 	sub.w	r3, r9, r8
 800a21c:	4553      	cmp	r3, sl
 800a21e:	dcef      	bgt.n	800a200 <_printf_float+0x304>
 800a220:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a224:	429a      	cmp	r2, r3
 800a226:	444f      	add	r7, r9
 800a228:	db14      	blt.n	800a254 <_printf_float+0x358>
 800a22a:	6823      	ldr	r3, [r4, #0]
 800a22c:	07da      	lsls	r2, r3, #31
 800a22e:	d411      	bmi.n	800a254 <_printf_float+0x358>
 800a230:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a232:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a234:	eba3 0209 	sub.w	r2, r3, r9
 800a238:	eba3 0901 	sub.w	r9, r3, r1
 800a23c:	4591      	cmp	r9, r2
 800a23e:	bfa8      	it	ge
 800a240:	4691      	movge	r9, r2
 800a242:	f1b9 0f00 	cmp.w	r9, #0
 800a246:	dc0d      	bgt.n	800a264 <_printf_float+0x368>
 800a248:	2700      	movs	r7, #0
 800a24a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a24e:	f104 081a 	add.w	r8, r4, #26
 800a252:	e018      	b.n	800a286 <_printf_float+0x38a>
 800a254:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a258:	4659      	mov	r1, fp
 800a25a:	4628      	mov	r0, r5
 800a25c:	47b0      	blx	r6
 800a25e:	3001      	adds	r0, #1
 800a260:	d1e6      	bne.n	800a230 <_printf_float+0x334>
 800a262:	e6a2      	b.n	8009faa <_printf_float+0xae>
 800a264:	464b      	mov	r3, r9
 800a266:	463a      	mov	r2, r7
 800a268:	4659      	mov	r1, fp
 800a26a:	4628      	mov	r0, r5
 800a26c:	47b0      	blx	r6
 800a26e:	3001      	adds	r0, #1
 800a270:	d1ea      	bne.n	800a248 <_printf_float+0x34c>
 800a272:	e69a      	b.n	8009faa <_printf_float+0xae>
 800a274:	2301      	movs	r3, #1
 800a276:	4642      	mov	r2, r8
 800a278:	4659      	mov	r1, fp
 800a27a:	4628      	mov	r0, r5
 800a27c:	47b0      	blx	r6
 800a27e:	3001      	adds	r0, #1
 800a280:	f43f ae93 	beq.w	8009faa <_printf_float+0xae>
 800a284:	3701      	adds	r7, #1
 800a286:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a28a:	1a9b      	subs	r3, r3, r2
 800a28c:	eba3 0309 	sub.w	r3, r3, r9
 800a290:	42bb      	cmp	r3, r7
 800a292:	dcef      	bgt.n	800a274 <_printf_float+0x378>
 800a294:	e74d      	b.n	800a132 <_printf_float+0x236>
 800a296:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a298:	2a01      	cmp	r2, #1
 800a29a:	dc01      	bgt.n	800a2a0 <_printf_float+0x3a4>
 800a29c:	07db      	lsls	r3, r3, #31
 800a29e:	d538      	bpl.n	800a312 <_printf_float+0x416>
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	463a      	mov	r2, r7
 800a2a4:	4659      	mov	r1, fp
 800a2a6:	4628      	mov	r0, r5
 800a2a8:	47b0      	blx	r6
 800a2aa:	3001      	adds	r0, #1
 800a2ac:	f43f ae7d 	beq.w	8009faa <_printf_float+0xae>
 800a2b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2b4:	4659      	mov	r1, fp
 800a2b6:	4628      	mov	r0, r5
 800a2b8:	47b0      	blx	r6
 800a2ba:	3001      	adds	r0, #1
 800a2bc:	f107 0701 	add.w	r7, r7, #1
 800a2c0:	f43f ae73 	beq.w	8009faa <_printf_float+0xae>
 800a2c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a2c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	f103 38ff 	add.w	r8, r3, #4294967295
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	f7f6 fb73 	bl	80009bc <__aeabi_dcmpeq>
 800a2d6:	b9c0      	cbnz	r0, 800a30a <_printf_float+0x40e>
 800a2d8:	4643      	mov	r3, r8
 800a2da:	463a      	mov	r2, r7
 800a2dc:	4659      	mov	r1, fp
 800a2de:	4628      	mov	r0, r5
 800a2e0:	47b0      	blx	r6
 800a2e2:	3001      	adds	r0, #1
 800a2e4:	d10d      	bne.n	800a302 <_printf_float+0x406>
 800a2e6:	e660      	b.n	8009faa <_printf_float+0xae>
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	4642      	mov	r2, r8
 800a2ec:	4659      	mov	r1, fp
 800a2ee:	4628      	mov	r0, r5
 800a2f0:	47b0      	blx	r6
 800a2f2:	3001      	adds	r0, #1
 800a2f4:	f43f ae59 	beq.w	8009faa <_printf_float+0xae>
 800a2f8:	3701      	adds	r7, #1
 800a2fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	42bb      	cmp	r3, r7
 800a300:	dcf2      	bgt.n	800a2e8 <_printf_float+0x3ec>
 800a302:	464b      	mov	r3, r9
 800a304:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a308:	e6e4      	b.n	800a0d4 <_printf_float+0x1d8>
 800a30a:	2700      	movs	r7, #0
 800a30c:	f104 081a 	add.w	r8, r4, #26
 800a310:	e7f3      	b.n	800a2fa <_printf_float+0x3fe>
 800a312:	2301      	movs	r3, #1
 800a314:	e7e1      	b.n	800a2da <_printf_float+0x3de>
 800a316:	2301      	movs	r3, #1
 800a318:	4642      	mov	r2, r8
 800a31a:	4659      	mov	r1, fp
 800a31c:	4628      	mov	r0, r5
 800a31e:	47b0      	blx	r6
 800a320:	3001      	adds	r0, #1
 800a322:	f43f ae42 	beq.w	8009faa <_printf_float+0xae>
 800a326:	3701      	adds	r7, #1
 800a328:	68e3      	ldr	r3, [r4, #12]
 800a32a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a32c:	1a9b      	subs	r3, r3, r2
 800a32e:	42bb      	cmp	r3, r7
 800a330:	dcf1      	bgt.n	800a316 <_printf_float+0x41a>
 800a332:	e702      	b.n	800a13a <_printf_float+0x23e>
 800a334:	2700      	movs	r7, #0
 800a336:	f104 0819 	add.w	r8, r4, #25
 800a33a:	e7f5      	b.n	800a328 <_printf_float+0x42c>
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	f43f ae94 	beq.w	800a06a <_printf_float+0x16e>
 800a342:	f04f 0c00 	mov.w	ip, #0
 800a346:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800a34a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800a34e:	6022      	str	r2, [r4, #0]
 800a350:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800a354:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800a358:	9300      	str	r3, [sp, #0]
 800a35a:	463a      	mov	r2, r7
 800a35c:	464b      	mov	r3, r9
 800a35e:	4628      	mov	r0, r5
 800a360:	f7ff fd3a 	bl	8009dd8 <__cvt>
 800a364:	4607      	mov	r7, r0
 800a366:	e64f      	b.n	800a008 <_printf_float+0x10c>

0800a368 <_printf_common>:
 800a368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a36c:	4691      	mov	r9, r2
 800a36e:	461f      	mov	r7, r3
 800a370:	688a      	ldr	r2, [r1, #8]
 800a372:	690b      	ldr	r3, [r1, #16]
 800a374:	4606      	mov	r6, r0
 800a376:	4293      	cmp	r3, r2
 800a378:	bfb8      	it	lt
 800a37a:	4613      	movlt	r3, r2
 800a37c:	f8c9 3000 	str.w	r3, [r9]
 800a380:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a384:	460c      	mov	r4, r1
 800a386:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a38a:	b112      	cbz	r2, 800a392 <_printf_common+0x2a>
 800a38c:	3301      	adds	r3, #1
 800a38e:	f8c9 3000 	str.w	r3, [r9]
 800a392:	6823      	ldr	r3, [r4, #0]
 800a394:	0699      	lsls	r1, r3, #26
 800a396:	bf42      	ittt	mi
 800a398:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a39c:	3302      	addmi	r3, #2
 800a39e:	f8c9 3000 	strmi.w	r3, [r9]
 800a3a2:	6825      	ldr	r5, [r4, #0]
 800a3a4:	f015 0506 	ands.w	r5, r5, #6
 800a3a8:	d107      	bne.n	800a3ba <_printf_common+0x52>
 800a3aa:	f104 0a19 	add.w	sl, r4, #25
 800a3ae:	68e3      	ldr	r3, [r4, #12]
 800a3b0:	f8d9 2000 	ldr.w	r2, [r9]
 800a3b4:	1a9b      	subs	r3, r3, r2
 800a3b6:	42ab      	cmp	r3, r5
 800a3b8:	dc29      	bgt.n	800a40e <_printf_common+0xa6>
 800a3ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a3be:	6822      	ldr	r2, [r4, #0]
 800a3c0:	3300      	adds	r3, #0
 800a3c2:	bf18      	it	ne
 800a3c4:	2301      	movne	r3, #1
 800a3c6:	0692      	lsls	r2, r2, #26
 800a3c8:	d42e      	bmi.n	800a428 <_printf_common+0xc0>
 800a3ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a3ce:	4639      	mov	r1, r7
 800a3d0:	4630      	mov	r0, r6
 800a3d2:	47c0      	blx	r8
 800a3d4:	3001      	adds	r0, #1
 800a3d6:	d021      	beq.n	800a41c <_printf_common+0xb4>
 800a3d8:	6823      	ldr	r3, [r4, #0]
 800a3da:	68e5      	ldr	r5, [r4, #12]
 800a3dc:	f003 0306 	and.w	r3, r3, #6
 800a3e0:	2b04      	cmp	r3, #4
 800a3e2:	bf18      	it	ne
 800a3e4:	2500      	movne	r5, #0
 800a3e6:	f8d9 2000 	ldr.w	r2, [r9]
 800a3ea:	f04f 0900 	mov.w	r9, #0
 800a3ee:	bf08      	it	eq
 800a3f0:	1aad      	subeq	r5, r5, r2
 800a3f2:	68a3      	ldr	r3, [r4, #8]
 800a3f4:	6922      	ldr	r2, [r4, #16]
 800a3f6:	bf08      	it	eq
 800a3f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	bfc4      	itt	gt
 800a400:	1a9b      	subgt	r3, r3, r2
 800a402:	18ed      	addgt	r5, r5, r3
 800a404:	341a      	adds	r4, #26
 800a406:	454d      	cmp	r5, r9
 800a408:	d11a      	bne.n	800a440 <_printf_common+0xd8>
 800a40a:	2000      	movs	r0, #0
 800a40c:	e008      	b.n	800a420 <_printf_common+0xb8>
 800a40e:	2301      	movs	r3, #1
 800a410:	4652      	mov	r2, sl
 800a412:	4639      	mov	r1, r7
 800a414:	4630      	mov	r0, r6
 800a416:	47c0      	blx	r8
 800a418:	3001      	adds	r0, #1
 800a41a:	d103      	bne.n	800a424 <_printf_common+0xbc>
 800a41c:	f04f 30ff 	mov.w	r0, #4294967295
 800a420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a424:	3501      	adds	r5, #1
 800a426:	e7c2      	b.n	800a3ae <_printf_common+0x46>
 800a428:	2030      	movs	r0, #48	; 0x30
 800a42a:	18e1      	adds	r1, r4, r3
 800a42c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a430:	1c5a      	adds	r2, r3, #1
 800a432:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a436:	4422      	add	r2, r4
 800a438:	3302      	adds	r3, #2
 800a43a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a43e:	e7c4      	b.n	800a3ca <_printf_common+0x62>
 800a440:	2301      	movs	r3, #1
 800a442:	4622      	mov	r2, r4
 800a444:	4639      	mov	r1, r7
 800a446:	4630      	mov	r0, r6
 800a448:	47c0      	blx	r8
 800a44a:	3001      	adds	r0, #1
 800a44c:	d0e6      	beq.n	800a41c <_printf_common+0xb4>
 800a44e:	f109 0901 	add.w	r9, r9, #1
 800a452:	e7d8      	b.n	800a406 <_printf_common+0x9e>

0800a454 <_printf_i>:
 800a454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a458:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a45c:	460c      	mov	r4, r1
 800a45e:	7e09      	ldrb	r1, [r1, #24]
 800a460:	b085      	sub	sp, #20
 800a462:	296e      	cmp	r1, #110	; 0x6e
 800a464:	4617      	mov	r7, r2
 800a466:	4606      	mov	r6, r0
 800a468:	4698      	mov	r8, r3
 800a46a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a46c:	f000 80b3 	beq.w	800a5d6 <_printf_i+0x182>
 800a470:	d822      	bhi.n	800a4b8 <_printf_i+0x64>
 800a472:	2963      	cmp	r1, #99	; 0x63
 800a474:	d036      	beq.n	800a4e4 <_printf_i+0x90>
 800a476:	d80a      	bhi.n	800a48e <_printf_i+0x3a>
 800a478:	2900      	cmp	r1, #0
 800a47a:	f000 80b9 	beq.w	800a5f0 <_printf_i+0x19c>
 800a47e:	2958      	cmp	r1, #88	; 0x58
 800a480:	f000 8083 	beq.w	800a58a <_printf_i+0x136>
 800a484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a488:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a48c:	e032      	b.n	800a4f4 <_printf_i+0xa0>
 800a48e:	2964      	cmp	r1, #100	; 0x64
 800a490:	d001      	beq.n	800a496 <_printf_i+0x42>
 800a492:	2969      	cmp	r1, #105	; 0x69
 800a494:	d1f6      	bne.n	800a484 <_printf_i+0x30>
 800a496:	6820      	ldr	r0, [r4, #0]
 800a498:	6813      	ldr	r3, [r2, #0]
 800a49a:	0605      	lsls	r5, r0, #24
 800a49c:	f103 0104 	add.w	r1, r3, #4
 800a4a0:	d52a      	bpl.n	800a4f8 <_printf_i+0xa4>
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	6011      	str	r1, [r2, #0]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	da03      	bge.n	800a4b2 <_printf_i+0x5e>
 800a4aa:	222d      	movs	r2, #45	; 0x2d
 800a4ac:	425b      	negs	r3, r3
 800a4ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a4b2:	486f      	ldr	r0, [pc, #444]	; (800a670 <_printf_i+0x21c>)
 800a4b4:	220a      	movs	r2, #10
 800a4b6:	e039      	b.n	800a52c <_printf_i+0xd8>
 800a4b8:	2973      	cmp	r1, #115	; 0x73
 800a4ba:	f000 809d 	beq.w	800a5f8 <_printf_i+0x1a4>
 800a4be:	d808      	bhi.n	800a4d2 <_printf_i+0x7e>
 800a4c0:	296f      	cmp	r1, #111	; 0x6f
 800a4c2:	d020      	beq.n	800a506 <_printf_i+0xb2>
 800a4c4:	2970      	cmp	r1, #112	; 0x70
 800a4c6:	d1dd      	bne.n	800a484 <_printf_i+0x30>
 800a4c8:	6823      	ldr	r3, [r4, #0]
 800a4ca:	f043 0320 	orr.w	r3, r3, #32
 800a4ce:	6023      	str	r3, [r4, #0]
 800a4d0:	e003      	b.n	800a4da <_printf_i+0x86>
 800a4d2:	2975      	cmp	r1, #117	; 0x75
 800a4d4:	d017      	beq.n	800a506 <_printf_i+0xb2>
 800a4d6:	2978      	cmp	r1, #120	; 0x78
 800a4d8:	d1d4      	bne.n	800a484 <_printf_i+0x30>
 800a4da:	2378      	movs	r3, #120	; 0x78
 800a4dc:	4865      	ldr	r0, [pc, #404]	; (800a674 <_printf_i+0x220>)
 800a4de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a4e2:	e055      	b.n	800a590 <_printf_i+0x13c>
 800a4e4:	6813      	ldr	r3, [r2, #0]
 800a4e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4ea:	1d19      	adds	r1, r3, #4
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	6011      	str	r1, [r2, #0]
 800a4f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	e08c      	b.n	800a612 <_printf_i+0x1be>
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a4fe:	6011      	str	r1, [r2, #0]
 800a500:	bf18      	it	ne
 800a502:	b21b      	sxthne	r3, r3
 800a504:	e7cf      	b.n	800a4a6 <_printf_i+0x52>
 800a506:	6813      	ldr	r3, [r2, #0]
 800a508:	6825      	ldr	r5, [r4, #0]
 800a50a:	1d18      	adds	r0, r3, #4
 800a50c:	6010      	str	r0, [r2, #0]
 800a50e:	0628      	lsls	r0, r5, #24
 800a510:	d501      	bpl.n	800a516 <_printf_i+0xc2>
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	e002      	b.n	800a51c <_printf_i+0xc8>
 800a516:	0668      	lsls	r0, r5, #25
 800a518:	d5fb      	bpl.n	800a512 <_printf_i+0xbe>
 800a51a:	881b      	ldrh	r3, [r3, #0]
 800a51c:	296f      	cmp	r1, #111	; 0x6f
 800a51e:	bf14      	ite	ne
 800a520:	220a      	movne	r2, #10
 800a522:	2208      	moveq	r2, #8
 800a524:	4852      	ldr	r0, [pc, #328]	; (800a670 <_printf_i+0x21c>)
 800a526:	2100      	movs	r1, #0
 800a528:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a52c:	6865      	ldr	r5, [r4, #4]
 800a52e:	2d00      	cmp	r5, #0
 800a530:	60a5      	str	r5, [r4, #8]
 800a532:	f2c0 8095 	blt.w	800a660 <_printf_i+0x20c>
 800a536:	6821      	ldr	r1, [r4, #0]
 800a538:	f021 0104 	bic.w	r1, r1, #4
 800a53c:	6021      	str	r1, [r4, #0]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d13d      	bne.n	800a5be <_printf_i+0x16a>
 800a542:	2d00      	cmp	r5, #0
 800a544:	f040 808e 	bne.w	800a664 <_printf_i+0x210>
 800a548:	4665      	mov	r5, ip
 800a54a:	2a08      	cmp	r2, #8
 800a54c:	d10b      	bne.n	800a566 <_printf_i+0x112>
 800a54e:	6823      	ldr	r3, [r4, #0]
 800a550:	07db      	lsls	r3, r3, #31
 800a552:	d508      	bpl.n	800a566 <_printf_i+0x112>
 800a554:	6923      	ldr	r3, [r4, #16]
 800a556:	6862      	ldr	r2, [r4, #4]
 800a558:	429a      	cmp	r2, r3
 800a55a:	bfde      	ittt	le
 800a55c:	2330      	movle	r3, #48	; 0x30
 800a55e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a562:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a566:	ebac 0305 	sub.w	r3, ip, r5
 800a56a:	6123      	str	r3, [r4, #16]
 800a56c:	f8cd 8000 	str.w	r8, [sp]
 800a570:	463b      	mov	r3, r7
 800a572:	aa03      	add	r2, sp, #12
 800a574:	4621      	mov	r1, r4
 800a576:	4630      	mov	r0, r6
 800a578:	f7ff fef6 	bl	800a368 <_printf_common>
 800a57c:	3001      	adds	r0, #1
 800a57e:	d14d      	bne.n	800a61c <_printf_i+0x1c8>
 800a580:	f04f 30ff 	mov.w	r0, #4294967295
 800a584:	b005      	add	sp, #20
 800a586:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a58a:	4839      	ldr	r0, [pc, #228]	; (800a670 <_printf_i+0x21c>)
 800a58c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a590:	6813      	ldr	r3, [r2, #0]
 800a592:	6821      	ldr	r1, [r4, #0]
 800a594:	1d1d      	adds	r5, r3, #4
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	6015      	str	r5, [r2, #0]
 800a59a:	060a      	lsls	r2, r1, #24
 800a59c:	d50b      	bpl.n	800a5b6 <_printf_i+0x162>
 800a59e:	07ca      	lsls	r2, r1, #31
 800a5a0:	bf44      	itt	mi
 800a5a2:	f041 0120 	orrmi.w	r1, r1, #32
 800a5a6:	6021      	strmi	r1, [r4, #0]
 800a5a8:	b91b      	cbnz	r3, 800a5b2 <_printf_i+0x15e>
 800a5aa:	6822      	ldr	r2, [r4, #0]
 800a5ac:	f022 0220 	bic.w	r2, r2, #32
 800a5b0:	6022      	str	r2, [r4, #0]
 800a5b2:	2210      	movs	r2, #16
 800a5b4:	e7b7      	b.n	800a526 <_printf_i+0xd2>
 800a5b6:	064d      	lsls	r5, r1, #25
 800a5b8:	bf48      	it	mi
 800a5ba:	b29b      	uxthmi	r3, r3
 800a5bc:	e7ef      	b.n	800a59e <_printf_i+0x14a>
 800a5be:	4665      	mov	r5, ip
 800a5c0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a5c4:	fb02 3311 	mls	r3, r2, r1, r3
 800a5c8:	5cc3      	ldrb	r3, [r0, r3]
 800a5ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a5ce:	460b      	mov	r3, r1
 800a5d0:	2900      	cmp	r1, #0
 800a5d2:	d1f5      	bne.n	800a5c0 <_printf_i+0x16c>
 800a5d4:	e7b9      	b.n	800a54a <_printf_i+0xf6>
 800a5d6:	6813      	ldr	r3, [r2, #0]
 800a5d8:	6825      	ldr	r5, [r4, #0]
 800a5da:	1d18      	adds	r0, r3, #4
 800a5dc:	6961      	ldr	r1, [r4, #20]
 800a5de:	6010      	str	r0, [r2, #0]
 800a5e0:	0628      	lsls	r0, r5, #24
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	d501      	bpl.n	800a5ea <_printf_i+0x196>
 800a5e6:	6019      	str	r1, [r3, #0]
 800a5e8:	e002      	b.n	800a5f0 <_printf_i+0x19c>
 800a5ea:	066a      	lsls	r2, r5, #25
 800a5ec:	d5fb      	bpl.n	800a5e6 <_printf_i+0x192>
 800a5ee:	8019      	strh	r1, [r3, #0]
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	4665      	mov	r5, ip
 800a5f4:	6123      	str	r3, [r4, #16]
 800a5f6:	e7b9      	b.n	800a56c <_printf_i+0x118>
 800a5f8:	6813      	ldr	r3, [r2, #0]
 800a5fa:	1d19      	adds	r1, r3, #4
 800a5fc:	6011      	str	r1, [r2, #0]
 800a5fe:	681d      	ldr	r5, [r3, #0]
 800a600:	6862      	ldr	r2, [r4, #4]
 800a602:	2100      	movs	r1, #0
 800a604:	4628      	mov	r0, r5
 800a606:	f001 fc7f 	bl	800bf08 <memchr>
 800a60a:	b108      	cbz	r0, 800a610 <_printf_i+0x1bc>
 800a60c:	1b40      	subs	r0, r0, r5
 800a60e:	6060      	str	r0, [r4, #4]
 800a610:	6863      	ldr	r3, [r4, #4]
 800a612:	6123      	str	r3, [r4, #16]
 800a614:	2300      	movs	r3, #0
 800a616:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a61a:	e7a7      	b.n	800a56c <_printf_i+0x118>
 800a61c:	6923      	ldr	r3, [r4, #16]
 800a61e:	462a      	mov	r2, r5
 800a620:	4639      	mov	r1, r7
 800a622:	4630      	mov	r0, r6
 800a624:	47c0      	blx	r8
 800a626:	3001      	adds	r0, #1
 800a628:	d0aa      	beq.n	800a580 <_printf_i+0x12c>
 800a62a:	6823      	ldr	r3, [r4, #0]
 800a62c:	079b      	lsls	r3, r3, #30
 800a62e:	d413      	bmi.n	800a658 <_printf_i+0x204>
 800a630:	68e0      	ldr	r0, [r4, #12]
 800a632:	9b03      	ldr	r3, [sp, #12]
 800a634:	4298      	cmp	r0, r3
 800a636:	bfb8      	it	lt
 800a638:	4618      	movlt	r0, r3
 800a63a:	e7a3      	b.n	800a584 <_printf_i+0x130>
 800a63c:	2301      	movs	r3, #1
 800a63e:	464a      	mov	r2, r9
 800a640:	4639      	mov	r1, r7
 800a642:	4630      	mov	r0, r6
 800a644:	47c0      	blx	r8
 800a646:	3001      	adds	r0, #1
 800a648:	d09a      	beq.n	800a580 <_printf_i+0x12c>
 800a64a:	3501      	adds	r5, #1
 800a64c:	68e3      	ldr	r3, [r4, #12]
 800a64e:	9a03      	ldr	r2, [sp, #12]
 800a650:	1a9b      	subs	r3, r3, r2
 800a652:	42ab      	cmp	r3, r5
 800a654:	dcf2      	bgt.n	800a63c <_printf_i+0x1e8>
 800a656:	e7eb      	b.n	800a630 <_printf_i+0x1dc>
 800a658:	2500      	movs	r5, #0
 800a65a:	f104 0919 	add.w	r9, r4, #25
 800a65e:	e7f5      	b.n	800a64c <_printf_i+0x1f8>
 800a660:	2b00      	cmp	r3, #0
 800a662:	d1ac      	bne.n	800a5be <_printf_i+0x16a>
 800a664:	7803      	ldrb	r3, [r0, #0]
 800a666:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a66a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a66e:	e76c      	b.n	800a54a <_printf_i+0xf6>
 800a670:	0800da8c 	.word	0x0800da8c
 800a674:	0800da9d 	.word	0x0800da9d

0800a678 <iprintf>:
 800a678:	b40f      	push	{r0, r1, r2, r3}
 800a67a:	4b0a      	ldr	r3, [pc, #40]	; (800a6a4 <iprintf+0x2c>)
 800a67c:	b513      	push	{r0, r1, r4, lr}
 800a67e:	681c      	ldr	r4, [r3, #0]
 800a680:	b124      	cbz	r4, 800a68c <iprintf+0x14>
 800a682:	69a3      	ldr	r3, [r4, #24]
 800a684:	b913      	cbnz	r3, 800a68c <iprintf+0x14>
 800a686:	4620      	mov	r0, r4
 800a688:	f001 fafa 	bl	800bc80 <__sinit>
 800a68c:	ab05      	add	r3, sp, #20
 800a68e:	9a04      	ldr	r2, [sp, #16]
 800a690:	68a1      	ldr	r1, [r4, #8]
 800a692:	4620      	mov	r0, r4
 800a694:	9301      	str	r3, [sp, #4]
 800a696:	f002 f8b7 	bl	800c808 <_vfiprintf_r>
 800a69a:	b002      	add	sp, #8
 800a69c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6a0:	b004      	add	sp, #16
 800a6a2:	4770      	bx	lr
 800a6a4:	20000028 	.word	0x20000028

0800a6a8 <putchar>:
 800a6a8:	b538      	push	{r3, r4, r5, lr}
 800a6aa:	4b08      	ldr	r3, [pc, #32]	; (800a6cc <putchar+0x24>)
 800a6ac:	4605      	mov	r5, r0
 800a6ae:	681c      	ldr	r4, [r3, #0]
 800a6b0:	b124      	cbz	r4, 800a6bc <putchar+0x14>
 800a6b2:	69a3      	ldr	r3, [r4, #24]
 800a6b4:	b913      	cbnz	r3, 800a6bc <putchar+0x14>
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	f001 fae2 	bl	800bc80 <__sinit>
 800a6bc:	68a2      	ldr	r2, [r4, #8]
 800a6be:	4629      	mov	r1, r5
 800a6c0:	4620      	mov	r0, r4
 800a6c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6c6:	f002 b9b5 	b.w	800ca34 <_putc_r>
 800a6ca:	bf00      	nop
 800a6cc:	20000028 	.word	0x20000028

0800a6d0 <_puts_r>:
 800a6d0:	b570      	push	{r4, r5, r6, lr}
 800a6d2:	460e      	mov	r6, r1
 800a6d4:	4605      	mov	r5, r0
 800a6d6:	b118      	cbz	r0, 800a6e0 <_puts_r+0x10>
 800a6d8:	6983      	ldr	r3, [r0, #24]
 800a6da:	b90b      	cbnz	r3, 800a6e0 <_puts_r+0x10>
 800a6dc:	f001 fad0 	bl	800bc80 <__sinit>
 800a6e0:	69ab      	ldr	r3, [r5, #24]
 800a6e2:	68ac      	ldr	r4, [r5, #8]
 800a6e4:	b913      	cbnz	r3, 800a6ec <_puts_r+0x1c>
 800a6e6:	4628      	mov	r0, r5
 800a6e8:	f001 faca 	bl	800bc80 <__sinit>
 800a6ec:	4b23      	ldr	r3, [pc, #140]	; (800a77c <_puts_r+0xac>)
 800a6ee:	429c      	cmp	r4, r3
 800a6f0:	d117      	bne.n	800a722 <_puts_r+0x52>
 800a6f2:	686c      	ldr	r4, [r5, #4]
 800a6f4:	89a3      	ldrh	r3, [r4, #12]
 800a6f6:	071b      	lsls	r3, r3, #28
 800a6f8:	d51d      	bpl.n	800a736 <_puts_r+0x66>
 800a6fa:	6923      	ldr	r3, [r4, #16]
 800a6fc:	b1db      	cbz	r3, 800a736 <_puts_r+0x66>
 800a6fe:	3e01      	subs	r6, #1
 800a700:	68a3      	ldr	r3, [r4, #8]
 800a702:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a706:	3b01      	subs	r3, #1
 800a708:	60a3      	str	r3, [r4, #8]
 800a70a:	b9e9      	cbnz	r1, 800a748 <_puts_r+0x78>
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	da2e      	bge.n	800a76e <_puts_r+0x9e>
 800a710:	4622      	mov	r2, r4
 800a712:	210a      	movs	r1, #10
 800a714:	4628      	mov	r0, r5
 800a716:	f000 faad 	bl	800ac74 <__swbuf_r>
 800a71a:	3001      	adds	r0, #1
 800a71c:	d011      	beq.n	800a742 <_puts_r+0x72>
 800a71e:	200a      	movs	r0, #10
 800a720:	e011      	b.n	800a746 <_puts_r+0x76>
 800a722:	4b17      	ldr	r3, [pc, #92]	; (800a780 <_puts_r+0xb0>)
 800a724:	429c      	cmp	r4, r3
 800a726:	d101      	bne.n	800a72c <_puts_r+0x5c>
 800a728:	68ac      	ldr	r4, [r5, #8]
 800a72a:	e7e3      	b.n	800a6f4 <_puts_r+0x24>
 800a72c:	4b15      	ldr	r3, [pc, #84]	; (800a784 <_puts_r+0xb4>)
 800a72e:	429c      	cmp	r4, r3
 800a730:	bf08      	it	eq
 800a732:	68ec      	ldreq	r4, [r5, #12]
 800a734:	e7de      	b.n	800a6f4 <_puts_r+0x24>
 800a736:	4621      	mov	r1, r4
 800a738:	4628      	mov	r0, r5
 800a73a:	f000 faed 	bl	800ad18 <__swsetup_r>
 800a73e:	2800      	cmp	r0, #0
 800a740:	d0dd      	beq.n	800a6fe <_puts_r+0x2e>
 800a742:	f04f 30ff 	mov.w	r0, #4294967295
 800a746:	bd70      	pop	{r4, r5, r6, pc}
 800a748:	2b00      	cmp	r3, #0
 800a74a:	da04      	bge.n	800a756 <_puts_r+0x86>
 800a74c:	69a2      	ldr	r2, [r4, #24]
 800a74e:	429a      	cmp	r2, r3
 800a750:	dc06      	bgt.n	800a760 <_puts_r+0x90>
 800a752:	290a      	cmp	r1, #10
 800a754:	d004      	beq.n	800a760 <_puts_r+0x90>
 800a756:	6823      	ldr	r3, [r4, #0]
 800a758:	1c5a      	adds	r2, r3, #1
 800a75a:	6022      	str	r2, [r4, #0]
 800a75c:	7019      	strb	r1, [r3, #0]
 800a75e:	e7cf      	b.n	800a700 <_puts_r+0x30>
 800a760:	4622      	mov	r2, r4
 800a762:	4628      	mov	r0, r5
 800a764:	f000 fa86 	bl	800ac74 <__swbuf_r>
 800a768:	3001      	adds	r0, #1
 800a76a:	d1c9      	bne.n	800a700 <_puts_r+0x30>
 800a76c:	e7e9      	b.n	800a742 <_puts_r+0x72>
 800a76e:	200a      	movs	r0, #10
 800a770:	6823      	ldr	r3, [r4, #0]
 800a772:	1c5a      	adds	r2, r3, #1
 800a774:	6022      	str	r2, [r4, #0]
 800a776:	7018      	strb	r0, [r3, #0]
 800a778:	e7e5      	b.n	800a746 <_puts_r+0x76>
 800a77a:	bf00      	nop
 800a77c:	0800db18 	.word	0x0800db18
 800a780:	0800db38 	.word	0x0800db38
 800a784:	0800daf8 	.word	0x0800daf8

0800a788 <puts>:
 800a788:	4b02      	ldr	r3, [pc, #8]	; (800a794 <puts+0xc>)
 800a78a:	4601      	mov	r1, r0
 800a78c:	6818      	ldr	r0, [r3, #0]
 800a78e:	f7ff bf9f 	b.w	800a6d0 <_puts_r>
 800a792:	bf00      	nop
 800a794:	20000028 	.word	0x20000028

0800a798 <_sbrk_r>:
 800a798:	b538      	push	{r3, r4, r5, lr}
 800a79a:	2300      	movs	r3, #0
 800a79c:	4c05      	ldr	r4, [pc, #20]	; (800a7b4 <_sbrk_r+0x1c>)
 800a79e:	4605      	mov	r5, r0
 800a7a0:	4608      	mov	r0, r1
 800a7a2:	6023      	str	r3, [r4, #0]
 800a7a4:	f7f8 fb26 	bl	8002df4 <_sbrk>
 800a7a8:	1c43      	adds	r3, r0, #1
 800a7aa:	d102      	bne.n	800a7b2 <_sbrk_r+0x1a>
 800a7ac:	6823      	ldr	r3, [r4, #0]
 800a7ae:	b103      	cbz	r3, 800a7b2 <_sbrk_r+0x1a>
 800a7b0:	602b      	str	r3, [r5, #0]
 800a7b2:	bd38      	pop	{r3, r4, r5, pc}
 800a7b4:	200011f0 	.word	0x200011f0

0800a7b8 <siprintf>:
 800a7b8:	b40e      	push	{r1, r2, r3}
 800a7ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a7be:	b500      	push	{lr}
 800a7c0:	b09c      	sub	sp, #112	; 0x70
 800a7c2:	ab1d      	add	r3, sp, #116	; 0x74
 800a7c4:	9002      	str	r0, [sp, #8]
 800a7c6:	9006      	str	r0, [sp, #24]
 800a7c8:	9107      	str	r1, [sp, #28]
 800a7ca:	9104      	str	r1, [sp, #16]
 800a7cc:	4808      	ldr	r0, [pc, #32]	; (800a7f0 <siprintf+0x38>)
 800a7ce:	4909      	ldr	r1, [pc, #36]	; (800a7f4 <siprintf+0x3c>)
 800a7d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7d4:	9105      	str	r1, [sp, #20]
 800a7d6:	6800      	ldr	r0, [r0, #0]
 800a7d8:	a902      	add	r1, sp, #8
 800a7da:	9301      	str	r3, [sp, #4]
 800a7dc:	f001 fef4 	bl	800c5c8 <_svfiprintf_r>
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	9b02      	ldr	r3, [sp, #8]
 800a7e4:	701a      	strb	r2, [r3, #0]
 800a7e6:	b01c      	add	sp, #112	; 0x70
 800a7e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7ec:	b003      	add	sp, #12
 800a7ee:	4770      	bx	lr
 800a7f0:	20000028 	.word	0x20000028
 800a7f4:	ffff0208 	.word	0xffff0208

0800a7f8 <strcat>:
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	b510      	push	{r4, lr}
 800a7fc:	781a      	ldrb	r2, [r3, #0]
 800a7fe:	1c5c      	adds	r4, r3, #1
 800a800:	b93a      	cbnz	r2, 800a812 <strcat+0x1a>
 800a802:	3b01      	subs	r3, #1
 800a804:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a808:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a80c:	2a00      	cmp	r2, #0
 800a80e:	d1f9      	bne.n	800a804 <strcat+0xc>
 800a810:	bd10      	pop	{r4, pc}
 800a812:	4623      	mov	r3, r4
 800a814:	e7f2      	b.n	800a7fc <strcat+0x4>
	...

0800a818 <__tzcalc_limits>:
 800a818:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a81c:	4680      	mov	r8, r0
 800a81e:	f001 fafd 	bl	800be1c <__gettzinfo>
 800a822:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800a826:	4598      	cmp	r8, r3
 800a828:	f340 8097 	ble.w	800a95a <__tzcalc_limits+0x142>
 800a82c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 800a830:	f240 126d 	movw	r2, #365	; 0x16d
 800a834:	4443      	add	r3, r8
 800a836:	109b      	asrs	r3, r3, #2
 800a838:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 800a83c:	fb02 3505 	mla	r5, r2, r5, r3
 800a840:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800a844:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 800a848:	fb93 f3f2 	sdiv	r3, r3, r2
 800a84c:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 800a850:	441d      	add	r5, r3
 800a852:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800a856:	4442      	add	r2, r8
 800a858:	fb92 f2f3 	sdiv	r2, r2, r3
 800a85c:	fb98 f7f3 	sdiv	r7, r8, r3
 800a860:	4415      	add	r5, r2
 800a862:	2264      	movs	r2, #100	; 0x64
 800a864:	fb03 8717 	mls	r7, r3, r7, r8
 800a868:	fb98 f6f2 	sdiv	r6, r8, r2
 800a86c:	fab7 fc87 	clz	ip, r7
 800a870:	4604      	mov	r4, r0
 800a872:	f04f 0e07 	mov.w	lr, #7
 800a876:	fb02 8616 	mls	r6, r2, r6, r8
 800a87a:	f008 0303 	and.w	r3, r8, #3
 800a87e:	f8c0 8004 	str.w	r8, [r0, #4]
 800a882:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800a886:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800a88a:	9300      	str	r3, [sp, #0]
 800a88c:	7a22      	ldrb	r2, [r4, #8]
 800a88e:	6963      	ldr	r3, [r4, #20]
 800a890:	2a4a      	cmp	r2, #74	; 0x4a
 800a892:	d128      	bne.n	800a8e6 <__tzcalc_limits+0xce>
 800a894:	9900      	ldr	r1, [sp, #0]
 800a896:	18ea      	adds	r2, r5, r3
 800a898:	b901      	cbnz	r1, 800a89c <__tzcalc_limits+0x84>
 800a89a:	b906      	cbnz	r6, 800a89e <__tzcalc_limits+0x86>
 800a89c:	bb0f      	cbnz	r7, 800a8e2 <__tzcalc_limits+0xca>
 800a89e:	2b3b      	cmp	r3, #59	; 0x3b
 800a8a0:	bfd4      	ite	le
 800a8a2:	2300      	movle	r3, #0
 800a8a4:	2301      	movgt	r3, #1
 800a8a6:	4413      	add	r3, r2
 800a8a8:	1e5a      	subs	r2, r3, #1
 800a8aa:	69a3      	ldr	r3, [r4, #24]
 800a8ac:	492c      	ldr	r1, [pc, #176]	; (800a960 <__tzcalc_limits+0x148>)
 800a8ae:	3428      	adds	r4, #40	; 0x28
 800a8b0:	fb01 3202 	mla	r2, r1, r2, r3
 800a8b4:	6823      	ldr	r3, [r4, #0]
 800a8b6:	4413      	add	r3, r2
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	17db      	asrs	r3, r3, #31
 800a8bc:	e944 2302 	strd	r2, r3, [r4, #-8]
 800a8c0:	45a3      	cmp	fp, r4
 800a8c2:	d1e3      	bne.n	800a88c <__tzcalc_limits+0x74>
 800a8c4:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 800a8c8:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 800a8cc:	4294      	cmp	r4, r2
 800a8ce:	eb75 0303 	sbcs.w	r3, r5, r3
 800a8d2:	bfb4      	ite	lt
 800a8d4:	2301      	movlt	r3, #1
 800a8d6:	2300      	movge	r3, #0
 800a8d8:	6003      	str	r3, [r0, #0]
 800a8da:	2001      	movs	r0, #1
 800a8dc:	b003      	add	sp, #12
 800a8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	e7df      	b.n	800a8a6 <__tzcalc_limits+0x8e>
 800a8e6:	2a44      	cmp	r2, #68	; 0x44
 800a8e8:	d101      	bne.n	800a8ee <__tzcalc_limits+0xd6>
 800a8ea:	18ea      	adds	r2, r5, r3
 800a8ec:	e7dd      	b.n	800a8aa <__tzcalc_limits+0x92>
 800a8ee:	9a00      	ldr	r2, [sp, #0]
 800a8f0:	bb6a      	cbnz	r2, 800a94e <__tzcalc_limits+0x136>
 800a8f2:	2e00      	cmp	r6, #0
 800a8f4:	bf0c      	ite	eq
 800a8f6:	46e1      	moveq	r9, ip
 800a8f8:	f04f 0901 	movne.w	r9, #1
 800a8fc:	2230      	movs	r2, #48	; 0x30
 800a8fe:	fb02 f909 	mul.w	r9, r2, r9
 800a902:	68e2      	ldr	r2, [r4, #12]
 800a904:	f04f 0800 	mov.w	r8, #0
 800a908:	9201      	str	r2, [sp, #4]
 800a90a:	462a      	mov	r2, r5
 800a90c:	f108 0801 	add.w	r8, r8, #1
 800a910:	4914      	ldr	r1, [pc, #80]	; (800a964 <__tzcalc_limits+0x14c>)
 800a912:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 800a916:	448a      	add	sl, r1
 800a918:	9901      	ldr	r1, [sp, #4]
 800a91a:	f85a ac04 	ldr.w	sl, [sl, #-4]
 800a91e:	4541      	cmp	r1, r8
 800a920:	dc17      	bgt.n	800a952 <__tzcalc_limits+0x13a>
 800a922:	f102 0804 	add.w	r8, r2, #4
 800a926:	fb98 f9fe 	sdiv	r9, r8, lr
 800a92a:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 800a92e:	eba8 0909 	sub.w	r9, r8, r9
 800a932:	ebb3 0909 	subs.w	r9, r3, r9
 800a936:	6923      	ldr	r3, [r4, #16]
 800a938:	bf48      	it	mi
 800a93a:	f109 0907 	addmi.w	r9, r9, #7
 800a93e:	3b01      	subs	r3, #1
 800a940:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800a944:	444b      	add	r3, r9
 800a946:	4553      	cmp	r3, sl
 800a948:	da05      	bge.n	800a956 <__tzcalc_limits+0x13e>
 800a94a:	441a      	add	r2, r3
 800a94c:	e7ad      	b.n	800a8aa <__tzcalc_limits+0x92>
 800a94e:	46e1      	mov	r9, ip
 800a950:	e7d4      	b.n	800a8fc <__tzcalc_limits+0xe4>
 800a952:	4452      	add	r2, sl
 800a954:	e7da      	b.n	800a90c <__tzcalc_limits+0xf4>
 800a956:	3b07      	subs	r3, #7
 800a958:	e7f5      	b.n	800a946 <__tzcalc_limits+0x12e>
 800a95a:	2000      	movs	r0, #0
 800a95c:	e7be      	b.n	800a8dc <__tzcalc_limits+0xc4>
 800a95e:	bf00      	nop
 800a960:	00015180 	.word	0x00015180
 800a964:	0800db58 	.word	0x0800db58

0800a968 <__tz_lock>:
 800a968:	4770      	bx	lr

0800a96a <__tz_unlock>:
 800a96a:	4770      	bx	lr

0800a96c <_tzset_unlocked>:
 800a96c:	4b01      	ldr	r3, [pc, #4]	; (800a974 <_tzset_unlocked+0x8>)
 800a96e:	6818      	ldr	r0, [r3, #0]
 800a970:	f000 b802 	b.w	800a978 <_tzset_unlocked_r>
 800a974:	20000028 	.word	0x20000028

0800a978 <_tzset_unlocked_r>:
 800a978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a97c:	b08d      	sub	sp, #52	; 0x34
 800a97e:	4607      	mov	r7, r0
 800a980:	f001 fa4c 	bl	800be1c <__gettzinfo>
 800a984:	49af      	ldr	r1, [pc, #700]	; (800ac44 <_tzset_unlocked_r+0x2cc>)
 800a986:	4605      	mov	r5, r0
 800a988:	4638      	mov	r0, r7
 800a98a:	f001 fa3f 	bl	800be0c <_getenv_r>
 800a98e:	4eae      	ldr	r6, [pc, #696]	; (800ac48 <_tzset_unlocked_r+0x2d0>)
 800a990:	4604      	mov	r4, r0
 800a992:	b970      	cbnz	r0, 800a9b2 <_tzset_unlocked_r+0x3a>
 800a994:	4bad      	ldr	r3, [pc, #692]	; (800ac4c <_tzset_unlocked_r+0x2d4>)
 800a996:	4aae      	ldr	r2, [pc, #696]	; (800ac50 <_tzset_unlocked_r+0x2d8>)
 800a998:	6018      	str	r0, [r3, #0]
 800a99a:	4bae      	ldr	r3, [pc, #696]	; (800ac54 <_tzset_unlocked_r+0x2dc>)
 800a99c:	6018      	str	r0, [r3, #0]
 800a99e:	4bae      	ldr	r3, [pc, #696]	; (800ac58 <_tzset_unlocked_r+0x2e0>)
 800a9a0:	6830      	ldr	r0, [r6, #0]
 800a9a2:	e9c3 2200 	strd	r2, r2, [r3]
 800a9a6:	f7fe fecd 	bl	8009744 <free>
 800a9aa:	6034      	str	r4, [r6, #0]
 800a9ac:	b00d      	add	sp, #52	; 0x34
 800a9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9b2:	6831      	ldr	r1, [r6, #0]
 800a9b4:	2900      	cmp	r1, #0
 800a9b6:	d15f      	bne.n	800aa78 <_tzset_unlocked_r+0x100>
 800a9b8:	6830      	ldr	r0, [r6, #0]
 800a9ba:	f7fe fec3 	bl	8009744 <free>
 800a9be:	4620      	mov	r0, r4
 800a9c0:	f7f5 fbc6 	bl	8000150 <strlen>
 800a9c4:	1c41      	adds	r1, r0, #1
 800a9c6:	4638      	mov	r0, r7
 800a9c8:	f7ff f9ac 	bl	8009d24 <_malloc_r>
 800a9cc:	6030      	str	r0, [r6, #0]
 800a9ce:	2800      	cmp	r0, #0
 800a9d0:	d157      	bne.n	800aa82 <_tzset_unlocked_r+0x10a>
 800a9d2:	7823      	ldrb	r3, [r4, #0]
 800a9d4:	ae0a      	add	r6, sp, #40	; 0x28
 800a9d6:	2b3a      	cmp	r3, #58	; 0x3a
 800a9d8:	bf08      	it	eq
 800a9da:	3401      	addeq	r4, #1
 800a9dc:	4633      	mov	r3, r6
 800a9de:	4a9f      	ldr	r2, [pc, #636]	; (800ac5c <_tzset_unlocked_r+0x2e4>)
 800a9e0:	499f      	ldr	r1, [pc, #636]	; (800ac60 <_tzset_unlocked_r+0x2e8>)
 800a9e2:	4620      	mov	r0, r4
 800a9e4:	f002 f85c 	bl	800caa0 <siscanf>
 800a9e8:	2800      	cmp	r0, #0
 800a9ea:	dddf      	ble.n	800a9ac <_tzset_unlocked_r+0x34>
 800a9ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9ee:	18e7      	adds	r7, r4, r3
 800a9f0:	5ce3      	ldrb	r3, [r4, r3]
 800a9f2:	2b2d      	cmp	r3, #45	; 0x2d
 800a9f4:	d149      	bne.n	800aa8a <_tzset_unlocked_r+0x112>
 800a9f6:	f04f 34ff 	mov.w	r4, #4294967295
 800a9fa:	3701      	adds	r7, #1
 800a9fc:	f04f 0800 	mov.w	r8, #0
 800aa00:	f10d 0a20 	add.w	sl, sp, #32
 800aa04:	f10d 0b1e 	add.w	fp, sp, #30
 800aa08:	9603      	str	r6, [sp, #12]
 800aa0a:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800aa0e:	f8cd b000 	str.w	fp, [sp]
 800aa12:	4633      	mov	r3, r6
 800aa14:	aa07      	add	r2, sp, #28
 800aa16:	4993      	ldr	r1, [pc, #588]	; (800ac64 <_tzset_unlocked_r+0x2ec>)
 800aa18:	4638      	mov	r0, r7
 800aa1a:	f8ad 801e 	strh.w	r8, [sp, #30]
 800aa1e:	f8ad 8020 	strh.w	r8, [sp, #32]
 800aa22:	f002 f83d 	bl	800caa0 <siscanf>
 800aa26:	4540      	cmp	r0, r8
 800aa28:	ddc0      	ble.n	800a9ac <_tzset_unlocked_r+0x34>
 800aa2a:	213c      	movs	r1, #60	; 0x3c
 800aa2c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800aa30:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800aa34:	f8df 9238 	ldr.w	r9, [pc, #568]	; 800ac70 <_tzset_unlocked_r+0x2f8>
 800aa38:	fb01 2203 	mla	r2, r1, r3, r2
 800aa3c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800aa40:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800aa44:	fb01 2303 	mla	r3, r1, r3, r2
 800aa48:	435c      	muls	r4, r3
 800aa4a:	4b84      	ldr	r3, [pc, #528]	; (800ac5c <_tzset_unlocked_r+0x2e4>)
 800aa4c:	62ac      	str	r4, [r5, #40]	; 0x28
 800aa4e:	4c82      	ldr	r4, [pc, #520]	; (800ac58 <_tzset_unlocked_r+0x2e0>)
 800aa50:	464a      	mov	r2, r9
 800aa52:	6023      	str	r3, [r4, #0]
 800aa54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa56:	4982      	ldr	r1, [pc, #520]	; (800ac60 <_tzset_unlocked_r+0x2e8>)
 800aa58:	441f      	add	r7, r3
 800aa5a:	4638      	mov	r0, r7
 800aa5c:	4633      	mov	r3, r6
 800aa5e:	f002 f81f 	bl	800caa0 <siscanf>
 800aa62:	4540      	cmp	r0, r8
 800aa64:	dc16      	bgt.n	800aa94 <_tzset_unlocked_r+0x11c>
 800aa66:	6823      	ldr	r3, [r4, #0]
 800aa68:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800aa6a:	6063      	str	r3, [r4, #4]
 800aa6c:	4b77      	ldr	r3, [pc, #476]	; (800ac4c <_tzset_unlocked_r+0x2d4>)
 800aa6e:	601a      	str	r2, [r3, #0]
 800aa70:	4b78      	ldr	r3, [pc, #480]	; (800ac54 <_tzset_unlocked_r+0x2dc>)
 800aa72:	f8c3 8000 	str.w	r8, [r3]
 800aa76:	e799      	b.n	800a9ac <_tzset_unlocked_r+0x34>
 800aa78:	f7f5 fb72 	bl	8000160 <strcmp>
 800aa7c:	2800      	cmp	r0, #0
 800aa7e:	d095      	beq.n	800a9ac <_tzset_unlocked_r+0x34>
 800aa80:	e79a      	b.n	800a9b8 <_tzset_unlocked_r+0x40>
 800aa82:	4621      	mov	r1, r4
 800aa84:	f002 f87b 	bl	800cb7e <strcpy>
 800aa88:	e7a3      	b.n	800a9d2 <_tzset_unlocked_r+0x5a>
 800aa8a:	2b2b      	cmp	r3, #43	; 0x2b
 800aa8c:	bf08      	it	eq
 800aa8e:	3701      	addeq	r7, #1
 800aa90:	2401      	movs	r4, #1
 800aa92:	e7b3      	b.n	800a9fc <_tzset_unlocked_r+0x84>
 800aa94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa96:	f8c4 9004 	str.w	r9, [r4, #4]
 800aa9a:	18fc      	adds	r4, r7, r3
 800aa9c:	5cfb      	ldrb	r3, [r7, r3]
 800aa9e:	2b2d      	cmp	r3, #45	; 0x2d
 800aaa0:	f040 808c 	bne.w	800abbc <_tzset_unlocked_r+0x244>
 800aaa4:	f04f 37ff 	mov.w	r7, #4294967295
 800aaa8:	3401      	adds	r4, #1
 800aaaa:	2300      	movs	r3, #0
 800aaac:	e9cd a602 	strd	sl, r6, [sp, #8]
 800aab0:	f8ad 301c 	strh.w	r3, [sp, #28]
 800aab4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800aab8:	f8ad 3020 	strh.w	r3, [sp, #32]
 800aabc:	930a      	str	r3, [sp, #40]	; 0x28
 800aabe:	e9cd b600 	strd	fp, r6, [sp]
 800aac2:	4633      	mov	r3, r6
 800aac4:	aa07      	add	r2, sp, #28
 800aac6:	4967      	ldr	r1, [pc, #412]	; (800ac64 <_tzset_unlocked_r+0x2ec>)
 800aac8:	4620      	mov	r0, r4
 800aaca:	f001 ffe9 	bl	800caa0 <siscanf>
 800aace:	2800      	cmp	r0, #0
 800aad0:	dc79      	bgt.n	800abc6 <_tzset_unlocked_r+0x24e>
 800aad2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800aad4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800aad8:	652b      	str	r3, [r5, #80]	; 0x50
 800aada:	462f      	mov	r7, r5
 800aadc:	f04f 0900 	mov.w	r9, #0
 800aae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aae2:	441c      	add	r4, r3
 800aae4:	7823      	ldrb	r3, [r4, #0]
 800aae6:	2b2c      	cmp	r3, #44	; 0x2c
 800aae8:	bf08      	it	eq
 800aaea:	3401      	addeq	r4, #1
 800aaec:	f894 8000 	ldrb.w	r8, [r4]
 800aaf0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800aaf4:	d17a      	bne.n	800abec <_tzset_unlocked_r+0x274>
 800aaf6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800aafa:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800aafe:	ab09      	add	r3, sp, #36	; 0x24
 800ab00:	9300      	str	r3, [sp, #0]
 800ab02:	9603      	str	r6, [sp, #12]
 800ab04:	4633      	mov	r3, r6
 800ab06:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800ab0a:	4957      	ldr	r1, [pc, #348]	; (800ac68 <_tzset_unlocked_r+0x2f0>)
 800ab0c:	4620      	mov	r0, r4
 800ab0e:	f001 ffc7 	bl	800caa0 <siscanf>
 800ab12:	2803      	cmp	r0, #3
 800ab14:	f47f af4a 	bne.w	800a9ac <_tzset_unlocked_r+0x34>
 800ab18:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800ab1c:	1e4b      	subs	r3, r1, #1
 800ab1e:	2b0b      	cmp	r3, #11
 800ab20:	f63f af44 	bhi.w	800a9ac <_tzset_unlocked_r+0x34>
 800ab24:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800ab28:	1e53      	subs	r3, r2, #1
 800ab2a:	2b04      	cmp	r3, #4
 800ab2c:	f63f af3e 	bhi.w	800a9ac <_tzset_unlocked_r+0x34>
 800ab30:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800ab34:	2b06      	cmp	r3, #6
 800ab36:	f63f af39 	bhi.w	800a9ac <_tzset_unlocked_r+0x34>
 800ab3a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800ab3e:	f887 8008 	strb.w	r8, [r7, #8]
 800ab42:	617b      	str	r3, [r7, #20]
 800ab44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab46:	eb04 0803 	add.w	r8, r4, r3
 800ab4a:	2302      	movs	r3, #2
 800ab4c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ab50:	2300      	movs	r3, #0
 800ab52:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ab56:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ab5a:	930a      	str	r3, [sp, #40]	; 0x28
 800ab5c:	f898 3000 	ldrb.w	r3, [r8]
 800ab60:	2b2f      	cmp	r3, #47	; 0x2f
 800ab62:	d109      	bne.n	800ab78 <_tzset_unlocked_r+0x200>
 800ab64:	e9cd a602 	strd	sl, r6, [sp, #8]
 800ab68:	e9cd b600 	strd	fp, r6, [sp]
 800ab6c:	4633      	mov	r3, r6
 800ab6e:	aa07      	add	r2, sp, #28
 800ab70:	493e      	ldr	r1, [pc, #248]	; (800ac6c <_tzset_unlocked_r+0x2f4>)
 800ab72:	4640      	mov	r0, r8
 800ab74:	f001 ff94 	bl	800caa0 <siscanf>
 800ab78:	213c      	movs	r1, #60	; 0x3c
 800ab7a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800ab7e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800ab82:	3728      	adds	r7, #40	; 0x28
 800ab84:	fb01 2203 	mla	r2, r1, r3, r2
 800ab88:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800ab8c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800ab90:	fb01 2303 	mla	r3, r1, r3, r2
 800ab94:	f847 3c10 	str.w	r3, [r7, #-16]
 800ab98:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ab9a:	4444      	add	r4, r8
 800ab9c:	f1b9 0f00 	cmp.w	r9, #0
 800aba0:	d021      	beq.n	800abe6 <_tzset_unlocked_r+0x26e>
 800aba2:	6868      	ldr	r0, [r5, #4]
 800aba4:	f7ff fe38 	bl	800a818 <__tzcalc_limits>
 800aba8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800abaa:	4b28      	ldr	r3, [pc, #160]	; (800ac4c <_tzset_unlocked_r+0x2d4>)
 800abac:	601a      	str	r2, [r3, #0]
 800abae:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800abb0:	1a9b      	subs	r3, r3, r2
 800abb2:	bf18      	it	ne
 800abb4:	2301      	movne	r3, #1
 800abb6:	4a27      	ldr	r2, [pc, #156]	; (800ac54 <_tzset_unlocked_r+0x2dc>)
 800abb8:	6013      	str	r3, [r2, #0]
 800abba:	e6f7      	b.n	800a9ac <_tzset_unlocked_r+0x34>
 800abbc:	2b2b      	cmp	r3, #43	; 0x2b
 800abbe:	bf08      	it	eq
 800abc0:	3401      	addeq	r4, #1
 800abc2:	2701      	movs	r7, #1
 800abc4:	e771      	b.n	800aaaa <_tzset_unlocked_r+0x132>
 800abc6:	213c      	movs	r1, #60	; 0x3c
 800abc8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800abcc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800abd0:	fb01 2203 	mla	r2, r1, r3, r2
 800abd4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800abd8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800abdc:	fb01 2303 	mla	r3, r1, r3, r2
 800abe0:	435f      	muls	r7, r3
 800abe2:	652f      	str	r7, [r5, #80]	; 0x50
 800abe4:	e779      	b.n	800aada <_tzset_unlocked_r+0x162>
 800abe6:	f04f 0901 	mov.w	r9, #1
 800abea:	e77b      	b.n	800aae4 <_tzset_unlocked_r+0x16c>
 800abec:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800abf0:	bf0a      	itet	eq
 800abf2:	4643      	moveq	r3, r8
 800abf4:	2344      	movne	r3, #68	; 0x44
 800abf6:	3401      	addeq	r4, #1
 800abf8:	220a      	movs	r2, #10
 800abfa:	a90b      	add	r1, sp, #44	; 0x2c
 800abfc:	4620      	mov	r0, r4
 800abfe:	9305      	str	r3, [sp, #20]
 800ac00:	f002 f864 	bl	800cccc <strtoul>
 800ac04:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800ac08:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800ac0c:	45a0      	cmp	r8, r4
 800ac0e:	9b05      	ldr	r3, [sp, #20]
 800ac10:	d114      	bne.n	800ac3c <_tzset_unlocked_r+0x2c4>
 800ac12:	234d      	movs	r3, #77	; 0x4d
 800ac14:	f1b9 0f00 	cmp.w	r9, #0
 800ac18:	d107      	bne.n	800ac2a <_tzset_unlocked_r+0x2b2>
 800ac1a:	722b      	strb	r3, [r5, #8]
 800ac1c:	2103      	movs	r1, #3
 800ac1e:	2302      	movs	r3, #2
 800ac20:	f8c5 9014 	str.w	r9, [r5, #20]
 800ac24:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800ac28:	e78f      	b.n	800ab4a <_tzset_unlocked_r+0x1d2>
 800ac2a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800ac2e:	220b      	movs	r2, #11
 800ac30:	2301      	movs	r3, #1
 800ac32:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800ac36:	2300      	movs	r3, #0
 800ac38:	63eb      	str	r3, [r5, #60]	; 0x3c
 800ac3a:	e786      	b.n	800ab4a <_tzset_unlocked_r+0x1d2>
 800ac3c:	b280      	uxth	r0, r0
 800ac3e:	723b      	strb	r3, [r7, #8]
 800ac40:	6178      	str	r0, [r7, #20]
 800ac42:	e782      	b.n	800ab4a <_tzset_unlocked_r+0x1d2>
 800ac44:	0800daae 	.word	0x0800daae
 800ac48:	200002e0 	.word	0x200002e0
 800ac4c:	200002e8 	.word	0x200002e8
 800ac50:	0800dab1 	.word	0x0800dab1
 800ac54:	200002e4 	.word	0x200002e4
 800ac58:	2000008c 	.word	0x2000008c
 800ac5c:	200002d3 	.word	0x200002d3
 800ac60:	0800dab5 	.word	0x0800dab5
 800ac64:	0800dad8 	.word	0x0800dad8
 800ac68:	0800dac4 	.word	0x0800dac4
 800ac6c:	0800dad7 	.word	0x0800dad7
 800ac70:	200002c8 	.word	0x200002c8

0800ac74 <__swbuf_r>:
 800ac74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac76:	460e      	mov	r6, r1
 800ac78:	4614      	mov	r4, r2
 800ac7a:	4605      	mov	r5, r0
 800ac7c:	b118      	cbz	r0, 800ac86 <__swbuf_r+0x12>
 800ac7e:	6983      	ldr	r3, [r0, #24]
 800ac80:	b90b      	cbnz	r3, 800ac86 <__swbuf_r+0x12>
 800ac82:	f000 fffd 	bl	800bc80 <__sinit>
 800ac86:	4b21      	ldr	r3, [pc, #132]	; (800ad0c <__swbuf_r+0x98>)
 800ac88:	429c      	cmp	r4, r3
 800ac8a:	d12a      	bne.n	800ace2 <__swbuf_r+0x6e>
 800ac8c:	686c      	ldr	r4, [r5, #4]
 800ac8e:	69a3      	ldr	r3, [r4, #24]
 800ac90:	60a3      	str	r3, [r4, #8]
 800ac92:	89a3      	ldrh	r3, [r4, #12]
 800ac94:	071a      	lsls	r2, r3, #28
 800ac96:	d52e      	bpl.n	800acf6 <__swbuf_r+0x82>
 800ac98:	6923      	ldr	r3, [r4, #16]
 800ac9a:	b363      	cbz	r3, 800acf6 <__swbuf_r+0x82>
 800ac9c:	6923      	ldr	r3, [r4, #16]
 800ac9e:	6820      	ldr	r0, [r4, #0]
 800aca0:	b2f6      	uxtb	r6, r6
 800aca2:	1ac0      	subs	r0, r0, r3
 800aca4:	6963      	ldr	r3, [r4, #20]
 800aca6:	4637      	mov	r7, r6
 800aca8:	4283      	cmp	r3, r0
 800acaa:	dc04      	bgt.n	800acb6 <__swbuf_r+0x42>
 800acac:	4621      	mov	r1, r4
 800acae:	4628      	mov	r0, r5
 800acb0:	f000 ff7c 	bl	800bbac <_fflush_r>
 800acb4:	bb28      	cbnz	r0, 800ad02 <__swbuf_r+0x8e>
 800acb6:	68a3      	ldr	r3, [r4, #8]
 800acb8:	3001      	adds	r0, #1
 800acba:	3b01      	subs	r3, #1
 800acbc:	60a3      	str	r3, [r4, #8]
 800acbe:	6823      	ldr	r3, [r4, #0]
 800acc0:	1c5a      	adds	r2, r3, #1
 800acc2:	6022      	str	r2, [r4, #0]
 800acc4:	701e      	strb	r6, [r3, #0]
 800acc6:	6963      	ldr	r3, [r4, #20]
 800acc8:	4283      	cmp	r3, r0
 800acca:	d004      	beq.n	800acd6 <__swbuf_r+0x62>
 800accc:	89a3      	ldrh	r3, [r4, #12]
 800acce:	07db      	lsls	r3, r3, #31
 800acd0:	d519      	bpl.n	800ad06 <__swbuf_r+0x92>
 800acd2:	2e0a      	cmp	r6, #10
 800acd4:	d117      	bne.n	800ad06 <__swbuf_r+0x92>
 800acd6:	4621      	mov	r1, r4
 800acd8:	4628      	mov	r0, r5
 800acda:	f000 ff67 	bl	800bbac <_fflush_r>
 800acde:	b190      	cbz	r0, 800ad06 <__swbuf_r+0x92>
 800ace0:	e00f      	b.n	800ad02 <__swbuf_r+0x8e>
 800ace2:	4b0b      	ldr	r3, [pc, #44]	; (800ad10 <__swbuf_r+0x9c>)
 800ace4:	429c      	cmp	r4, r3
 800ace6:	d101      	bne.n	800acec <__swbuf_r+0x78>
 800ace8:	68ac      	ldr	r4, [r5, #8]
 800acea:	e7d0      	b.n	800ac8e <__swbuf_r+0x1a>
 800acec:	4b09      	ldr	r3, [pc, #36]	; (800ad14 <__swbuf_r+0xa0>)
 800acee:	429c      	cmp	r4, r3
 800acf0:	bf08      	it	eq
 800acf2:	68ec      	ldreq	r4, [r5, #12]
 800acf4:	e7cb      	b.n	800ac8e <__swbuf_r+0x1a>
 800acf6:	4621      	mov	r1, r4
 800acf8:	4628      	mov	r0, r5
 800acfa:	f000 f80d 	bl	800ad18 <__swsetup_r>
 800acfe:	2800      	cmp	r0, #0
 800ad00:	d0cc      	beq.n	800ac9c <__swbuf_r+0x28>
 800ad02:	f04f 37ff 	mov.w	r7, #4294967295
 800ad06:	4638      	mov	r0, r7
 800ad08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	0800db18 	.word	0x0800db18
 800ad10:	0800db38 	.word	0x0800db38
 800ad14:	0800daf8 	.word	0x0800daf8

0800ad18 <__swsetup_r>:
 800ad18:	4b32      	ldr	r3, [pc, #200]	; (800ade4 <__swsetup_r+0xcc>)
 800ad1a:	b570      	push	{r4, r5, r6, lr}
 800ad1c:	681d      	ldr	r5, [r3, #0]
 800ad1e:	4606      	mov	r6, r0
 800ad20:	460c      	mov	r4, r1
 800ad22:	b125      	cbz	r5, 800ad2e <__swsetup_r+0x16>
 800ad24:	69ab      	ldr	r3, [r5, #24]
 800ad26:	b913      	cbnz	r3, 800ad2e <__swsetup_r+0x16>
 800ad28:	4628      	mov	r0, r5
 800ad2a:	f000 ffa9 	bl	800bc80 <__sinit>
 800ad2e:	4b2e      	ldr	r3, [pc, #184]	; (800ade8 <__swsetup_r+0xd0>)
 800ad30:	429c      	cmp	r4, r3
 800ad32:	d10f      	bne.n	800ad54 <__swsetup_r+0x3c>
 800ad34:	686c      	ldr	r4, [r5, #4]
 800ad36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad3a:	b29a      	uxth	r2, r3
 800ad3c:	0715      	lsls	r5, r2, #28
 800ad3e:	d42c      	bmi.n	800ad9a <__swsetup_r+0x82>
 800ad40:	06d0      	lsls	r0, r2, #27
 800ad42:	d411      	bmi.n	800ad68 <__swsetup_r+0x50>
 800ad44:	2209      	movs	r2, #9
 800ad46:	6032      	str	r2, [r6, #0]
 800ad48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad4c:	81a3      	strh	r3, [r4, #12]
 800ad4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad52:	e03e      	b.n	800add2 <__swsetup_r+0xba>
 800ad54:	4b25      	ldr	r3, [pc, #148]	; (800adec <__swsetup_r+0xd4>)
 800ad56:	429c      	cmp	r4, r3
 800ad58:	d101      	bne.n	800ad5e <__swsetup_r+0x46>
 800ad5a:	68ac      	ldr	r4, [r5, #8]
 800ad5c:	e7eb      	b.n	800ad36 <__swsetup_r+0x1e>
 800ad5e:	4b24      	ldr	r3, [pc, #144]	; (800adf0 <__swsetup_r+0xd8>)
 800ad60:	429c      	cmp	r4, r3
 800ad62:	bf08      	it	eq
 800ad64:	68ec      	ldreq	r4, [r5, #12]
 800ad66:	e7e6      	b.n	800ad36 <__swsetup_r+0x1e>
 800ad68:	0751      	lsls	r1, r2, #29
 800ad6a:	d512      	bpl.n	800ad92 <__swsetup_r+0x7a>
 800ad6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad6e:	b141      	cbz	r1, 800ad82 <__swsetup_r+0x6a>
 800ad70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad74:	4299      	cmp	r1, r3
 800ad76:	d002      	beq.n	800ad7e <__swsetup_r+0x66>
 800ad78:	4630      	mov	r0, r6
 800ad7a:	f7fe ff87 	bl	8009c8c <_free_r>
 800ad7e:	2300      	movs	r3, #0
 800ad80:	6363      	str	r3, [r4, #52]	; 0x34
 800ad82:	89a3      	ldrh	r3, [r4, #12]
 800ad84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ad88:	81a3      	strh	r3, [r4, #12]
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	6063      	str	r3, [r4, #4]
 800ad8e:	6923      	ldr	r3, [r4, #16]
 800ad90:	6023      	str	r3, [r4, #0]
 800ad92:	89a3      	ldrh	r3, [r4, #12]
 800ad94:	f043 0308 	orr.w	r3, r3, #8
 800ad98:	81a3      	strh	r3, [r4, #12]
 800ad9a:	6923      	ldr	r3, [r4, #16]
 800ad9c:	b94b      	cbnz	r3, 800adb2 <__swsetup_r+0x9a>
 800ad9e:	89a3      	ldrh	r3, [r4, #12]
 800ada0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ada4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ada8:	d003      	beq.n	800adb2 <__swsetup_r+0x9a>
 800adaa:	4621      	mov	r1, r4
 800adac:	4630      	mov	r0, r6
 800adae:	f001 f86b 	bl	800be88 <__smakebuf_r>
 800adb2:	89a2      	ldrh	r2, [r4, #12]
 800adb4:	f012 0301 	ands.w	r3, r2, #1
 800adb8:	d00c      	beq.n	800add4 <__swsetup_r+0xbc>
 800adba:	2300      	movs	r3, #0
 800adbc:	60a3      	str	r3, [r4, #8]
 800adbe:	6963      	ldr	r3, [r4, #20]
 800adc0:	425b      	negs	r3, r3
 800adc2:	61a3      	str	r3, [r4, #24]
 800adc4:	6923      	ldr	r3, [r4, #16]
 800adc6:	b953      	cbnz	r3, 800adde <__swsetup_r+0xc6>
 800adc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adcc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800add0:	d1ba      	bne.n	800ad48 <__swsetup_r+0x30>
 800add2:	bd70      	pop	{r4, r5, r6, pc}
 800add4:	0792      	lsls	r2, r2, #30
 800add6:	bf58      	it	pl
 800add8:	6963      	ldrpl	r3, [r4, #20]
 800adda:	60a3      	str	r3, [r4, #8]
 800addc:	e7f2      	b.n	800adc4 <__swsetup_r+0xac>
 800adde:	2000      	movs	r0, #0
 800ade0:	e7f7      	b.n	800add2 <__swsetup_r+0xba>
 800ade2:	bf00      	nop
 800ade4:	20000028 	.word	0x20000028
 800ade8:	0800db18 	.word	0x0800db18
 800adec:	0800db38 	.word	0x0800db38
 800adf0:	0800daf8 	.word	0x0800daf8

0800adf4 <div>:
 800adf4:	b510      	push	{r4, lr}
 800adf6:	fb91 f4f2 	sdiv	r4, r1, r2
 800adfa:	2900      	cmp	r1, #0
 800adfc:	fb02 1314 	mls	r3, r2, r4, r1
 800ae00:	db06      	blt.n	800ae10 <div+0x1c>
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	da01      	bge.n	800ae0a <div+0x16>
 800ae06:	3401      	adds	r4, #1
 800ae08:	1a9b      	subs	r3, r3, r2
 800ae0a:	e9c0 4300 	strd	r4, r3, [r0]
 800ae0e:	bd10      	pop	{r4, pc}
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	bfc4      	itt	gt
 800ae14:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800ae18:	189b      	addgt	r3, r3, r2
 800ae1a:	e7f6      	b.n	800ae0a <div+0x16>

0800ae1c <quorem>:
 800ae1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae20:	6903      	ldr	r3, [r0, #16]
 800ae22:	690c      	ldr	r4, [r1, #16]
 800ae24:	4680      	mov	r8, r0
 800ae26:	42a3      	cmp	r3, r4
 800ae28:	f2c0 8084 	blt.w	800af34 <quorem+0x118>
 800ae2c:	3c01      	subs	r4, #1
 800ae2e:	f101 0714 	add.w	r7, r1, #20
 800ae32:	f100 0614 	add.w	r6, r0, #20
 800ae36:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800ae3a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800ae3e:	3501      	adds	r5, #1
 800ae40:	fbb0 f5f5 	udiv	r5, r0, r5
 800ae44:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800ae48:	eb06 030c 	add.w	r3, r6, ip
 800ae4c:	eb07 090c 	add.w	r9, r7, ip
 800ae50:	9301      	str	r3, [sp, #4]
 800ae52:	b39d      	cbz	r5, 800aebc <quorem+0xa0>
 800ae54:	f04f 0a00 	mov.w	sl, #0
 800ae58:	4638      	mov	r0, r7
 800ae5a:	46b6      	mov	lr, r6
 800ae5c:	46d3      	mov	fp, sl
 800ae5e:	f850 2b04 	ldr.w	r2, [r0], #4
 800ae62:	b293      	uxth	r3, r2
 800ae64:	fb05 a303 	mla	r3, r5, r3, sl
 800ae68:	0c12      	lsrs	r2, r2, #16
 800ae6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ae6e:	fb05 a202 	mla	r2, r5, r2, sl
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	ebab 0303 	sub.w	r3, fp, r3
 800ae78:	f8de b000 	ldr.w	fp, [lr]
 800ae7c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800ae80:	fa1f fb8b 	uxth.w	fp, fp
 800ae84:	445b      	add	r3, fp
 800ae86:	fa1f fb82 	uxth.w	fp, r2
 800ae8a:	f8de 2000 	ldr.w	r2, [lr]
 800ae8e:	4581      	cmp	r9, r0
 800ae90:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800ae94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae9e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800aea2:	f84e 3b04 	str.w	r3, [lr], #4
 800aea6:	d2da      	bcs.n	800ae5e <quorem+0x42>
 800aea8:	f856 300c 	ldr.w	r3, [r6, ip]
 800aeac:	b933      	cbnz	r3, 800aebc <quorem+0xa0>
 800aeae:	9b01      	ldr	r3, [sp, #4]
 800aeb0:	3b04      	subs	r3, #4
 800aeb2:	429e      	cmp	r6, r3
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	d331      	bcc.n	800af1c <quorem+0x100>
 800aeb8:	f8c8 4010 	str.w	r4, [r8, #16]
 800aebc:	4640      	mov	r0, r8
 800aebe:	f001 fa53 	bl	800c368 <__mcmp>
 800aec2:	2800      	cmp	r0, #0
 800aec4:	db26      	blt.n	800af14 <quorem+0xf8>
 800aec6:	4630      	mov	r0, r6
 800aec8:	f04f 0c00 	mov.w	ip, #0
 800aecc:	3501      	adds	r5, #1
 800aece:	f857 1b04 	ldr.w	r1, [r7], #4
 800aed2:	f8d0 e000 	ldr.w	lr, [r0]
 800aed6:	b28b      	uxth	r3, r1
 800aed8:	ebac 0303 	sub.w	r3, ip, r3
 800aedc:	fa1f f28e 	uxth.w	r2, lr
 800aee0:	4413      	add	r3, r2
 800aee2:	0c0a      	lsrs	r2, r1, #16
 800aee4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800aee8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aeec:	b29b      	uxth	r3, r3
 800aeee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aef2:	45b9      	cmp	r9, r7
 800aef4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800aef8:	f840 3b04 	str.w	r3, [r0], #4
 800aefc:	d2e7      	bcs.n	800aece <quorem+0xb2>
 800aefe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800af02:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800af06:	b92a      	cbnz	r2, 800af14 <quorem+0xf8>
 800af08:	3b04      	subs	r3, #4
 800af0a:	429e      	cmp	r6, r3
 800af0c:	461a      	mov	r2, r3
 800af0e:	d30b      	bcc.n	800af28 <quorem+0x10c>
 800af10:	f8c8 4010 	str.w	r4, [r8, #16]
 800af14:	4628      	mov	r0, r5
 800af16:	b003      	add	sp, #12
 800af18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af1c:	6812      	ldr	r2, [r2, #0]
 800af1e:	3b04      	subs	r3, #4
 800af20:	2a00      	cmp	r2, #0
 800af22:	d1c9      	bne.n	800aeb8 <quorem+0x9c>
 800af24:	3c01      	subs	r4, #1
 800af26:	e7c4      	b.n	800aeb2 <quorem+0x96>
 800af28:	6812      	ldr	r2, [r2, #0]
 800af2a:	3b04      	subs	r3, #4
 800af2c:	2a00      	cmp	r2, #0
 800af2e:	d1ef      	bne.n	800af10 <quorem+0xf4>
 800af30:	3c01      	subs	r4, #1
 800af32:	e7ea      	b.n	800af0a <quorem+0xee>
 800af34:	2000      	movs	r0, #0
 800af36:	e7ee      	b.n	800af16 <quorem+0xfa>

0800af38 <_dtoa_r>:
 800af38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af3c:	4616      	mov	r6, r2
 800af3e:	461f      	mov	r7, r3
 800af40:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800af42:	b095      	sub	sp, #84	; 0x54
 800af44:	4604      	mov	r4, r0
 800af46:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800af4a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800af4e:	b93d      	cbnz	r5, 800af60 <_dtoa_r+0x28>
 800af50:	2010      	movs	r0, #16
 800af52:	f7fe fbef 	bl	8009734 <malloc>
 800af56:	6260      	str	r0, [r4, #36]	; 0x24
 800af58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800af5c:	6005      	str	r5, [r0, #0]
 800af5e:	60c5      	str	r5, [r0, #12]
 800af60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af62:	6819      	ldr	r1, [r3, #0]
 800af64:	b151      	cbz	r1, 800af7c <_dtoa_r+0x44>
 800af66:	685a      	ldr	r2, [r3, #4]
 800af68:	2301      	movs	r3, #1
 800af6a:	4093      	lsls	r3, r2
 800af6c:	604a      	str	r2, [r1, #4]
 800af6e:	608b      	str	r3, [r1, #8]
 800af70:	4620      	mov	r0, r4
 800af72:	f001 f818 	bl	800bfa6 <_Bfree>
 800af76:	2200      	movs	r2, #0
 800af78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af7a:	601a      	str	r2, [r3, #0]
 800af7c:	1e3b      	subs	r3, r7, #0
 800af7e:	bfaf      	iteee	ge
 800af80:	2300      	movge	r3, #0
 800af82:	2201      	movlt	r2, #1
 800af84:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800af88:	9303      	strlt	r3, [sp, #12]
 800af8a:	bfac      	ite	ge
 800af8c:	f8c8 3000 	strge.w	r3, [r8]
 800af90:	f8c8 2000 	strlt.w	r2, [r8]
 800af94:	4bae      	ldr	r3, [pc, #696]	; (800b250 <_dtoa_r+0x318>)
 800af96:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800af9a:	ea33 0308 	bics.w	r3, r3, r8
 800af9e:	d11b      	bne.n	800afd8 <_dtoa_r+0xa0>
 800afa0:	f242 730f 	movw	r3, #9999	; 0x270f
 800afa4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800afa6:	6013      	str	r3, [r2, #0]
 800afa8:	9b02      	ldr	r3, [sp, #8]
 800afaa:	b923      	cbnz	r3, 800afb6 <_dtoa_r+0x7e>
 800afac:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800afb0:	2800      	cmp	r0, #0
 800afb2:	f000 8545 	beq.w	800ba40 <_dtoa_r+0xb08>
 800afb6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800afb8:	b953      	cbnz	r3, 800afd0 <_dtoa_r+0x98>
 800afba:	4ba6      	ldr	r3, [pc, #664]	; (800b254 <_dtoa_r+0x31c>)
 800afbc:	e021      	b.n	800b002 <_dtoa_r+0xca>
 800afbe:	4ba6      	ldr	r3, [pc, #664]	; (800b258 <_dtoa_r+0x320>)
 800afc0:	9306      	str	r3, [sp, #24]
 800afc2:	3308      	adds	r3, #8
 800afc4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800afc6:	6013      	str	r3, [r2, #0]
 800afc8:	9806      	ldr	r0, [sp, #24]
 800afca:	b015      	add	sp, #84	; 0x54
 800afcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afd0:	4ba0      	ldr	r3, [pc, #640]	; (800b254 <_dtoa_r+0x31c>)
 800afd2:	9306      	str	r3, [sp, #24]
 800afd4:	3303      	adds	r3, #3
 800afd6:	e7f5      	b.n	800afc4 <_dtoa_r+0x8c>
 800afd8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800afdc:	2200      	movs	r2, #0
 800afde:	2300      	movs	r3, #0
 800afe0:	4630      	mov	r0, r6
 800afe2:	4639      	mov	r1, r7
 800afe4:	f7f5 fcea 	bl	80009bc <__aeabi_dcmpeq>
 800afe8:	4682      	mov	sl, r0
 800afea:	b160      	cbz	r0, 800b006 <_dtoa_r+0xce>
 800afec:	2301      	movs	r3, #1
 800afee:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800aff0:	6013      	str	r3, [r2, #0]
 800aff2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	f000 8520 	beq.w	800ba3a <_dtoa_r+0xb02>
 800affa:	4b98      	ldr	r3, [pc, #608]	; (800b25c <_dtoa_r+0x324>)
 800affc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800affe:	6013      	str	r3, [r2, #0]
 800b000:	3b01      	subs	r3, #1
 800b002:	9306      	str	r3, [sp, #24]
 800b004:	e7e0      	b.n	800afc8 <_dtoa_r+0x90>
 800b006:	ab12      	add	r3, sp, #72	; 0x48
 800b008:	9301      	str	r3, [sp, #4]
 800b00a:	ab13      	add	r3, sp, #76	; 0x4c
 800b00c:	9300      	str	r3, [sp, #0]
 800b00e:	4632      	mov	r2, r6
 800b010:	463b      	mov	r3, r7
 800b012:	4620      	mov	r0, r4
 800b014:	f001 fa20 	bl	800c458 <__d2b>
 800b018:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b01c:	4683      	mov	fp, r0
 800b01e:	2d00      	cmp	r5, #0
 800b020:	d07d      	beq.n	800b11e <_dtoa_r+0x1e6>
 800b022:	46b0      	mov	r8, r6
 800b024:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b028:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800b02c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800b030:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b034:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800b038:	2200      	movs	r2, #0
 800b03a:	4b89      	ldr	r3, [pc, #548]	; (800b260 <_dtoa_r+0x328>)
 800b03c:	4640      	mov	r0, r8
 800b03e:	4649      	mov	r1, r9
 800b040:	f7f5 f89c 	bl	800017c <__aeabi_dsub>
 800b044:	a37c      	add	r3, pc, #496	; (adr r3, 800b238 <_dtoa_r+0x300>)
 800b046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04a:	f7f5 fa4f 	bl	80004ec <__aeabi_dmul>
 800b04e:	a37c      	add	r3, pc, #496	; (adr r3, 800b240 <_dtoa_r+0x308>)
 800b050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b054:	f7f5 f894 	bl	8000180 <__adddf3>
 800b058:	4606      	mov	r6, r0
 800b05a:	4628      	mov	r0, r5
 800b05c:	460f      	mov	r7, r1
 800b05e:	f7f5 f9db 	bl	8000418 <__aeabi_i2d>
 800b062:	a379      	add	r3, pc, #484	; (adr r3, 800b248 <_dtoa_r+0x310>)
 800b064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b068:	f7f5 fa40 	bl	80004ec <__aeabi_dmul>
 800b06c:	4602      	mov	r2, r0
 800b06e:	460b      	mov	r3, r1
 800b070:	4630      	mov	r0, r6
 800b072:	4639      	mov	r1, r7
 800b074:	f7f5 f884 	bl	8000180 <__adddf3>
 800b078:	4606      	mov	r6, r0
 800b07a:	460f      	mov	r7, r1
 800b07c:	f7f5 fce6 	bl	8000a4c <__aeabi_d2iz>
 800b080:	2200      	movs	r2, #0
 800b082:	4682      	mov	sl, r0
 800b084:	2300      	movs	r3, #0
 800b086:	4630      	mov	r0, r6
 800b088:	4639      	mov	r1, r7
 800b08a:	f7f5 fca1 	bl	80009d0 <__aeabi_dcmplt>
 800b08e:	b148      	cbz	r0, 800b0a4 <_dtoa_r+0x16c>
 800b090:	4650      	mov	r0, sl
 800b092:	f7f5 f9c1 	bl	8000418 <__aeabi_i2d>
 800b096:	4632      	mov	r2, r6
 800b098:	463b      	mov	r3, r7
 800b09a:	f7f5 fc8f 	bl	80009bc <__aeabi_dcmpeq>
 800b09e:	b908      	cbnz	r0, 800b0a4 <_dtoa_r+0x16c>
 800b0a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b0a4:	f1ba 0f16 	cmp.w	sl, #22
 800b0a8:	d85a      	bhi.n	800b160 <_dtoa_r+0x228>
 800b0aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b0ae:	496d      	ldr	r1, [pc, #436]	; (800b264 <_dtoa_r+0x32c>)
 800b0b0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b0b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0b8:	f7f5 fca8 	bl	8000a0c <__aeabi_dcmpgt>
 800b0bc:	2800      	cmp	r0, #0
 800b0be:	d051      	beq.n	800b164 <_dtoa_r+0x22c>
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b0c6:	930d      	str	r3, [sp, #52]	; 0x34
 800b0c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b0ca:	1b5d      	subs	r5, r3, r5
 800b0cc:	1e6b      	subs	r3, r5, #1
 800b0ce:	9307      	str	r3, [sp, #28]
 800b0d0:	bf43      	ittte	mi
 800b0d2:	2300      	movmi	r3, #0
 800b0d4:	f1c5 0901 	rsbmi	r9, r5, #1
 800b0d8:	9307      	strmi	r3, [sp, #28]
 800b0da:	f04f 0900 	movpl.w	r9, #0
 800b0de:	f1ba 0f00 	cmp.w	sl, #0
 800b0e2:	db41      	blt.n	800b168 <_dtoa_r+0x230>
 800b0e4:	9b07      	ldr	r3, [sp, #28]
 800b0e6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800b0ea:	4453      	add	r3, sl
 800b0ec:	9307      	str	r3, [sp, #28]
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	9308      	str	r3, [sp, #32]
 800b0f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b0f4:	2b09      	cmp	r3, #9
 800b0f6:	f200 808f 	bhi.w	800b218 <_dtoa_r+0x2e0>
 800b0fa:	2b05      	cmp	r3, #5
 800b0fc:	bfc4      	itt	gt
 800b0fe:	3b04      	subgt	r3, #4
 800b100:	931e      	strgt	r3, [sp, #120]	; 0x78
 800b102:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b104:	bfc8      	it	gt
 800b106:	2500      	movgt	r5, #0
 800b108:	f1a3 0302 	sub.w	r3, r3, #2
 800b10c:	bfd8      	it	le
 800b10e:	2501      	movle	r5, #1
 800b110:	2b03      	cmp	r3, #3
 800b112:	f200 808d 	bhi.w	800b230 <_dtoa_r+0x2f8>
 800b116:	e8df f003 	tbb	[pc, r3]
 800b11a:	7d7b      	.short	0x7d7b
 800b11c:	6f2f      	.short	0x6f2f
 800b11e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b122:	441d      	add	r5, r3
 800b124:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800b128:	2820      	cmp	r0, #32
 800b12a:	dd13      	ble.n	800b154 <_dtoa_r+0x21c>
 800b12c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800b130:	9b02      	ldr	r3, [sp, #8]
 800b132:	fa08 f800 	lsl.w	r8, r8, r0
 800b136:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b13a:	fa23 f000 	lsr.w	r0, r3, r0
 800b13e:	ea48 0000 	orr.w	r0, r8, r0
 800b142:	f7f5 f959 	bl	80003f8 <__aeabi_ui2d>
 800b146:	2301      	movs	r3, #1
 800b148:	4680      	mov	r8, r0
 800b14a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800b14e:	3d01      	subs	r5, #1
 800b150:	9310      	str	r3, [sp, #64]	; 0x40
 800b152:	e771      	b.n	800b038 <_dtoa_r+0x100>
 800b154:	9b02      	ldr	r3, [sp, #8]
 800b156:	f1c0 0020 	rsb	r0, r0, #32
 800b15a:	fa03 f000 	lsl.w	r0, r3, r0
 800b15e:	e7f0      	b.n	800b142 <_dtoa_r+0x20a>
 800b160:	2301      	movs	r3, #1
 800b162:	e7b0      	b.n	800b0c6 <_dtoa_r+0x18e>
 800b164:	900d      	str	r0, [sp, #52]	; 0x34
 800b166:	e7af      	b.n	800b0c8 <_dtoa_r+0x190>
 800b168:	f1ca 0300 	rsb	r3, sl, #0
 800b16c:	9308      	str	r3, [sp, #32]
 800b16e:	2300      	movs	r3, #0
 800b170:	eba9 090a 	sub.w	r9, r9, sl
 800b174:	930c      	str	r3, [sp, #48]	; 0x30
 800b176:	e7bc      	b.n	800b0f2 <_dtoa_r+0x1ba>
 800b178:	2301      	movs	r3, #1
 800b17a:	9309      	str	r3, [sp, #36]	; 0x24
 800b17c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b17e:	2b00      	cmp	r3, #0
 800b180:	dd74      	ble.n	800b26c <_dtoa_r+0x334>
 800b182:	4698      	mov	r8, r3
 800b184:	9304      	str	r3, [sp, #16]
 800b186:	2200      	movs	r2, #0
 800b188:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b18a:	6072      	str	r2, [r6, #4]
 800b18c:	2204      	movs	r2, #4
 800b18e:	f102 0014 	add.w	r0, r2, #20
 800b192:	4298      	cmp	r0, r3
 800b194:	6871      	ldr	r1, [r6, #4]
 800b196:	d96e      	bls.n	800b276 <_dtoa_r+0x33e>
 800b198:	4620      	mov	r0, r4
 800b19a:	f000 fed0 	bl	800bf3e <_Balloc>
 800b19e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1a0:	6030      	str	r0, [r6, #0]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f1b8 0f0e 	cmp.w	r8, #14
 800b1a8:	9306      	str	r3, [sp, #24]
 800b1aa:	f200 80ed 	bhi.w	800b388 <_dtoa_r+0x450>
 800b1ae:	2d00      	cmp	r5, #0
 800b1b0:	f000 80ea 	beq.w	800b388 <_dtoa_r+0x450>
 800b1b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b1b8:	f1ba 0f00 	cmp.w	sl, #0
 800b1bc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b1c0:	dd77      	ble.n	800b2b2 <_dtoa_r+0x37a>
 800b1c2:	4a28      	ldr	r2, [pc, #160]	; (800b264 <_dtoa_r+0x32c>)
 800b1c4:	f00a 030f 	and.w	r3, sl, #15
 800b1c8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800b1cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b1d0:	06f0      	lsls	r0, r6, #27
 800b1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b1da:	d568      	bpl.n	800b2ae <_dtoa_r+0x376>
 800b1dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b1e0:	4b21      	ldr	r3, [pc, #132]	; (800b268 <_dtoa_r+0x330>)
 800b1e2:	2503      	movs	r5, #3
 800b1e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b1e8:	f7f5 faaa 	bl	8000740 <__aeabi_ddiv>
 800b1ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1f0:	f006 060f 	and.w	r6, r6, #15
 800b1f4:	4f1c      	ldr	r7, [pc, #112]	; (800b268 <_dtoa_r+0x330>)
 800b1f6:	e04f      	b.n	800b298 <_dtoa_r+0x360>
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	9309      	str	r3, [sp, #36]	; 0x24
 800b1fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b1fe:	4453      	add	r3, sl
 800b200:	f103 0801 	add.w	r8, r3, #1
 800b204:	9304      	str	r3, [sp, #16]
 800b206:	4643      	mov	r3, r8
 800b208:	2b01      	cmp	r3, #1
 800b20a:	bfb8      	it	lt
 800b20c:	2301      	movlt	r3, #1
 800b20e:	e7ba      	b.n	800b186 <_dtoa_r+0x24e>
 800b210:	2300      	movs	r3, #0
 800b212:	e7b2      	b.n	800b17a <_dtoa_r+0x242>
 800b214:	2300      	movs	r3, #0
 800b216:	e7f0      	b.n	800b1fa <_dtoa_r+0x2c2>
 800b218:	2501      	movs	r5, #1
 800b21a:	2300      	movs	r3, #0
 800b21c:	9509      	str	r5, [sp, #36]	; 0x24
 800b21e:	931e      	str	r3, [sp, #120]	; 0x78
 800b220:	f04f 33ff 	mov.w	r3, #4294967295
 800b224:	2200      	movs	r2, #0
 800b226:	9304      	str	r3, [sp, #16]
 800b228:	4698      	mov	r8, r3
 800b22a:	2312      	movs	r3, #18
 800b22c:	921f      	str	r2, [sp, #124]	; 0x7c
 800b22e:	e7aa      	b.n	800b186 <_dtoa_r+0x24e>
 800b230:	2301      	movs	r3, #1
 800b232:	9309      	str	r3, [sp, #36]	; 0x24
 800b234:	e7f4      	b.n	800b220 <_dtoa_r+0x2e8>
 800b236:	bf00      	nop
 800b238:	636f4361 	.word	0x636f4361
 800b23c:	3fd287a7 	.word	0x3fd287a7
 800b240:	8b60c8b3 	.word	0x8b60c8b3
 800b244:	3fc68a28 	.word	0x3fc68a28
 800b248:	509f79fb 	.word	0x509f79fb
 800b24c:	3fd34413 	.word	0x3fd34413
 800b250:	7ff00000 	.word	0x7ff00000
 800b254:	0800daf3 	.word	0x0800daf3
 800b258:	0800daea 	.word	0x0800daea
 800b25c:	0800dce6 	.word	0x0800dce6
 800b260:	3ff80000 	.word	0x3ff80000
 800b264:	0800dbe0 	.word	0x0800dbe0
 800b268:	0800dbb8 	.word	0x0800dbb8
 800b26c:	2301      	movs	r3, #1
 800b26e:	9304      	str	r3, [sp, #16]
 800b270:	4698      	mov	r8, r3
 800b272:	461a      	mov	r2, r3
 800b274:	e7da      	b.n	800b22c <_dtoa_r+0x2f4>
 800b276:	3101      	adds	r1, #1
 800b278:	6071      	str	r1, [r6, #4]
 800b27a:	0052      	lsls	r2, r2, #1
 800b27c:	e787      	b.n	800b18e <_dtoa_r+0x256>
 800b27e:	07f1      	lsls	r1, r6, #31
 800b280:	d508      	bpl.n	800b294 <_dtoa_r+0x35c>
 800b282:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b286:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b28a:	f7f5 f92f 	bl	80004ec <__aeabi_dmul>
 800b28e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b292:	3501      	adds	r5, #1
 800b294:	1076      	asrs	r6, r6, #1
 800b296:	3708      	adds	r7, #8
 800b298:	2e00      	cmp	r6, #0
 800b29a:	d1f0      	bne.n	800b27e <_dtoa_r+0x346>
 800b29c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b2a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2a4:	f7f5 fa4c 	bl	8000740 <__aeabi_ddiv>
 800b2a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2ac:	e01b      	b.n	800b2e6 <_dtoa_r+0x3ae>
 800b2ae:	2502      	movs	r5, #2
 800b2b0:	e7a0      	b.n	800b1f4 <_dtoa_r+0x2bc>
 800b2b2:	f000 80a4 	beq.w	800b3fe <_dtoa_r+0x4c6>
 800b2b6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b2ba:	f1ca 0600 	rsb	r6, sl, #0
 800b2be:	4ba0      	ldr	r3, [pc, #640]	; (800b540 <_dtoa_r+0x608>)
 800b2c0:	f006 020f 	and.w	r2, r6, #15
 800b2c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2cc:	f7f5 f90e 	bl	80004ec <__aeabi_dmul>
 800b2d0:	2502      	movs	r5, #2
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2d8:	4f9a      	ldr	r7, [pc, #616]	; (800b544 <_dtoa_r+0x60c>)
 800b2da:	1136      	asrs	r6, r6, #4
 800b2dc:	2e00      	cmp	r6, #0
 800b2de:	f040 8083 	bne.w	800b3e8 <_dtoa_r+0x4b0>
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d1e0      	bne.n	800b2a8 <_dtoa_r+0x370>
 800b2e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	f000 808a 	beq.w	800b402 <_dtoa_r+0x4ca>
 800b2ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b2f2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b2f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	4b92      	ldr	r3, [pc, #584]	; (800b548 <_dtoa_r+0x610>)
 800b2fe:	f7f5 fb67 	bl	80009d0 <__aeabi_dcmplt>
 800b302:	2800      	cmp	r0, #0
 800b304:	d07d      	beq.n	800b402 <_dtoa_r+0x4ca>
 800b306:	f1b8 0f00 	cmp.w	r8, #0
 800b30a:	d07a      	beq.n	800b402 <_dtoa_r+0x4ca>
 800b30c:	9b04      	ldr	r3, [sp, #16]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	dd36      	ble.n	800b380 <_dtoa_r+0x448>
 800b312:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b316:	2200      	movs	r2, #0
 800b318:	4b8c      	ldr	r3, [pc, #560]	; (800b54c <_dtoa_r+0x614>)
 800b31a:	f7f5 f8e7 	bl	80004ec <__aeabi_dmul>
 800b31e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b322:	9e04      	ldr	r6, [sp, #16]
 800b324:	f10a 37ff 	add.w	r7, sl, #4294967295
 800b328:	3501      	adds	r5, #1
 800b32a:	4628      	mov	r0, r5
 800b32c:	f7f5 f874 	bl	8000418 <__aeabi_i2d>
 800b330:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b334:	f7f5 f8da 	bl	80004ec <__aeabi_dmul>
 800b338:	2200      	movs	r2, #0
 800b33a:	4b85      	ldr	r3, [pc, #532]	; (800b550 <_dtoa_r+0x618>)
 800b33c:	f7f4 ff20 	bl	8000180 <__adddf3>
 800b340:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800b344:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b348:	950b      	str	r5, [sp, #44]	; 0x2c
 800b34a:	2e00      	cmp	r6, #0
 800b34c:	d15c      	bne.n	800b408 <_dtoa_r+0x4d0>
 800b34e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b352:	2200      	movs	r2, #0
 800b354:	4b7f      	ldr	r3, [pc, #508]	; (800b554 <_dtoa_r+0x61c>)
 800b356:	f7f4 ff11 	bl	800017c <__aeabi_dsub>
 800b35a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b35c:	462b      	mov	r3, r5
 800b35e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b362:	f7f5 fb53 	bl	8000a0c <__aeabi_dcmpgt>
 800b366:	2800      	cmp	r0, #0
 800b368:	f040 8281 	bne.w	800b86e <_dtoa_r+0x936>
 800b36c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b370:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b372:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b376:	f7f5 fb2b 	bl	80009d0 <__aeabi_dcmplt>
 800b37a:	2800      	cmp	r0, #0
 800b37c:	f040 8275 	bne.w	800b86a <_dtoa_r+0x932>
 800b380:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b384:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b388:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	f2c0 814b 	blt.w	800b626 <_dtoa_r+0x6ee>
 800b390:	f1ba 0f0e 	cmp.w	sl, #14
 800b394:	f300 8147 	bgt.w	800b626 <_dtoa_r+0x6ee>
 800b398:	4b69      	ldr	r3, [pc, #420]	; (800b540 <_dtoa_r+0x608>)
 800b39a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b3a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	f280 80d7 	bge.w	800b55c <_dtoa_r+0x624>
 800b3ae:	f1b8 0f00 	cmp.w	r8, #0
 800b3b2:	f300 80d3 	bgt.w	800b55c <_dtoa_r+0x624>
 800b3b6:	f040 8257 	bne.w	800b868 <_dtoa_r+0x930>
 800b3ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	4b64      	ldr	r3, [pc, #400]	; (800b554 <_dtoa_r+0x61c>)
 800b3c2:	f7f5 f893 	bl	80004ec <__aeabi_dmul>
 800b3c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b3ca:	f7f5 fb15 	bl	80009f8 <__aeabi_dcmpge>
 800b3ce:	4646      	mov	r6, r8
 800b3d0:	4647      	mov	r7, r8
 800b3d2:	2800      	cmp	r0, #0
 800b3d4:	f040 822d 	bne.w	800b832 <_dtoa_r+0x8fa>
 800b3d8:	9b06      	ldr	r3, [sp, #24]
 800b3da:	9a06      	ldr	r2, [sp, #24]
 800b3dc:	1c5d      	adds	r5, r3, #1
 800b3de:	2331      	movs	r3, #49	; 0x31
 800b3e0:	f10a 0a01 	add.w	sl, sl, #1
 800b3e4:	7013      	strb	r3, [r2, #0]
 800b3e6:	e228      	b.n	800b83a <_dtoa_r+0x902>
 800b3e8:	07f2      	lsls	r2, r6, #31
 800b3ea:	d505      	bpl.n	800b3f8 <_dtoa_r+0x4c0>
 800b3ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3f0:	f7f5 f87c 	bl	80004ec <__aeabi_dmul>
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	3501      	adds	r5, #1
 800b3f8:	1076      	asrs	r6, r6, #1
 800b3fa:	3708      	adds	r7, #8
 800b3fc:	e76e      	b.n	800b2dc <_dtoa_r+0x3a4>
 800b3fe:	2502      	movs	r5, #2
 800b400:	e771      	b.n	800b2e6 <_dtoa_r+0x3ae>
 800b402:	4657      	mov	r7, sl
 800b404:	4646      	mov	r6, r8
 800b406:	e790      	b.n	800b32a <_dtoa_r+0x3f2>
 800b408:	4b4d      	ldr	r3, [pc, #308]	; (800b540 <_dtoa_r+0x608>)
 800b40a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b40e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800b412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b414:	2b00      	cmp	r3, #0
 800b416:	d048      	beq.n	800b4aa <_dtoa_r+0x572>
 800b418:	4602      	mov	r2, r0
 800b41a:	460b      	mov	r3, r1
 800b41c:	2000      	movs	r0, #0
 800b41e:	494e      	ldr	r1, [pc, #312]	; (800b558 <_dtoa_r+0x620>)
 800b420:	f7f5 f98e 	bl	8000740 <__aeabi_ddiv>
 800b424:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b428:	f7f4 fea8 	bl	800017c <__aeabi_dsub>
 800b42c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b430:	9d06      	ldr	r5, [sp, #24]
 800b432:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b436:	f7f5 fb09 	bl	8000a4c <__aeabi_d2iz>
 800b43a:	9011      	str	r0, [sp, #68]	; 0x44
 800b43c:	f7f4 ffec 	bl	8000418 <__aeabi_i2d>
 800b440:	4602      	mov	r2, r0
 800b442:	460b      	mov	r3, r1
 800b444:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b448:	f7f4 fe98 	bl	800017c <__aeabi_dsub>
 800b44c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b44e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b452:	3330      	adds	r3, #48	; 0x30
 800b454:	f805 3b01 	strb.w	r3, [r5], #1
 800b458:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b45c:	f7f5 fab8 	bl	80009d0 <__aeabi_dcmplt>
 800b460:	2800      	cmp	r0, #0
 800b462:	d163      	bne.n	800b52c <_dtoa_r+0x5f4>
 800b464:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b468:	2000      	movs	r0, #0
 800b46a:	4937      	ldr	r1, [pc, #220]	; (800b548 <_dtoa_r+0x610>)
 800b46c:	f7f4 fe86 	bl	800017c <__aeabi_dsub>
 800b470:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b474:	f7f5 faac 	bl	80009d0 <__aeabi_dcmplt>
 800b478:	2800      	cmp	r0, #0
 800b47a:	f040 80b5 	bne.w	800b5e8 <_dtoa_r+0x6b0>
 800b47e:	9b06      	ldr	r3, [sp, #24]
 800b480:	1aeb      	subs	r3, r5, r3
 800b482:	429e      	cmp	r6, r3
 800b484:	f77f af7c 	ble.w	800b380 <_dtoa_r+0x448>
 800b488:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b48c:	2200      	movs	r2, #0
 800b48e:	4b2f      	ldr	r3, [pc, #188]	; (800b54c <_dtoa_r+0x614>)
 800b490:	f7f5 f82c 	bl	80004ec <__aeabi_dmul>
 800b494:	2200      	movs	r2, #0
 800b496:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b49a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b49e:	4b2b      	ldr	r3, [pc, #172]	; (800b54c <_dtoa_r+0x614>)
 800b4a0:	f7f5 f824 	bl	80004ec <__aeabi_dmul>
 800b4a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4a8:	e7c3      	b.n	800b432 <_dtoa_r+0x4fa>
 800b4aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b4ae:	f7f5 f81d 	bl	80004ec <__aeabi_dmul>
 800b4b2:	9b06      	ldr	r3, [sp, #24]
 800b4b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b4b8:	199d      	adds	r5, r3, r6
 800b4ba:	461e      	mov	r6, r3
 800b4bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4c0:	f7f5 fac4 	bl	8000a4c <__aeabi_d2iz>
 800b4c4:	9011      	str	r0, [sp, #68]	; 0x44
 800b4c6:	f7f4 ffa7 	bl	8000418 <__aeabi_i2d>
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4d2:	f7f4 fe53 	bl	800017c <__aeabi_dsub>
 800b4d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b4d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4dc:	3330      	adds	r3, #48	; 0x30
 800b4de:	f806 3b01 	strb.w	r3, [r6], #1
 800b4e2:	42ae      	cmp	r6, r5
 800b4e4:	f04f 0200 	mov.w	r2, #0
 800b4e8:	d124      	bne.n	800b534 <_dtoa_r+0x5fc>
 800b4ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b4ee:	4b1a      	ldr	r3, [pc, #104]	; (800b558 <_dtoa_r+0x620>)
 800b4f0:	f7f4 fe46 	bl	8000180 <__adddf3>
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	460b      	mov	r3, r1
 800b4f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4fc:	f7f5 fa86 	bl	8000a0c <__aeabi_dcmpgt>
 800b500:	2800      	cmp	r0, #0
 800b502:	d171      	bne.n	800b5e8 <_dtoa_r+0x6b0>
 800b504:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b508:	2000      	movs	r0, #0
 800b50a:	4913      	ldr	r1, [pc, #76]	; (800b558 <_dtoa_r+0x620>)
 800b50c:	f7f4 fe36 	bl	800017c <__aeabi_dsub>
 800b510:	4602      	mov	r2, r0
 800b512:	460b      	mov	r3, r1
 800b514:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b518:	f7f5 fa5a 	bl	80009d0 <__aeabi_dcmplt>
 800b51c:	2800      	cmp	r0, #0
 800b51e:	f43f af2f 	beq.w	800b380 <_dtoa_r+0x448>
 800b522:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b526:	1e6a      	subs	r2, r5, #1
 800b528:	2b30      	cmp	r3, #48	; 0x30
 800b52a:	d001      	beq.n	800b530 <_dtoa_r+0x5f8>
 800b52c:	46ba      	mov	sl, r7
 800b52e:	e04a      	b.n	800b5c6 <_dtoa_r+0x68e>
 800b530:	4615      	mov	r5, r2
 800b532:	e7f6      	b.n	800b522 <_dtoa_r+0x5ea>
 800b534:	4b05      	ldr	r3, [pc, #20]	; (800b54c <_dtoa_r+0x614>)
 800b536:	f7f4 ffd9 	bl	80004ec <__aeabi_dmul>
 800b53a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b53e:	e7bd      	b.n	800b4bc <_dtoa_r+0x584>
 800b540:	0800dbe0 	.word	0x0800dbe0
 800b544:	0800dbb8 	.word	0x0800dbb8
 800b548:	3ff00000 	.word	0x3ff00000
 800b54c:	40240000 	.word	0x40240000
 800b550:	401c0000 	.word	0x401c0000
 800b554:	40140000 	.word	0x40140000
 800b558:	3fe00000 	.word	0x3fe00000
 800b55c:	9d06      	ldr	r5, [sp, #24]
 800b55e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b562:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b566:	4630      	mov	r0, r6
 800b568:	4639      	mov	r1, r7
 800b56a:	f7f5 f8e9 	bl	8000740 <__aeabi_ddiv>
 800b56e:	f7f5 fa6d 	bl	8000a4c <__aeabi_d2iz>
 800b572:	4681      	mov	r9, r0
 800b574:	f7f4 ff50 	bl	8000418 <__aeabi_i2d>
 800b578:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b57c:	f7f4 ffb6 	bl	80004ec <__aeabi_dmul>
 800b580:	4602      	mov	r2, r0
 800b582:	460b      	mov	r3, r1
 800b584:	4630      	mov	r0, r6
 800b586:	4639      	mov	r1, r7
 800b588:	f7f4 fdf8 	bl	800017c <__aeabi_dsub>
 800b58c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800b590:	f805 6b01 	strb.w	r6, [r5], #1
 800b594:	9e06      	ldr	r6, [sp, #24]
 800b596:	4602      	mov	r2, r0
 800b598:	1bae      	subs	r6, r5, r6
 800b59a:	45b0      	cmp	r8, r6
 800b59c:	460b      	mov	r3, r1
 800b59e:	d135      	bne.n	800b60c <_dtoa_r+0x6d4>
 800b5a0:	f7f4 fdee 	bl	8000180 <__adddf3>
 800b5a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5a8:	4606      	mov	r6, r0
 800b5aa:	460f      	mov	r7, r1
 800b5ac:	f7f5 fa2e 	bl	8000a0c <__aeabi_dcmpgt>
 800b5b0:	b9c8      	cbnz	r0, 800b5e6 <_dtoa_r+0x6ae>
 800b5b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5b6:	4630      	mov	r0, r6
 800b5b8:	4639      	mov	r1, r7
 800b5ba:	f7f5 f9ff 	bl	80009bc <__aeabi_dcmpeq>
 800b5be:	b110      	cbz	r0, 800b5c6 <_dtoa_r+0x68e>
 800b5c0:	f019 0f01 	tst.w	r9, #1
 800b5c4:	d10f      	bne.n	800b5e6 <_dtoa_r+0x6ae>
 800b5c6:	4659      	mov	r1, fp
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	f000 fcec 	bl	800bfa6 <_Bfree>
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b5d2:	702b      	strb	r3, [r5, #0]
 800b5d4:	f10a 0301 	add.w	r3, sl, #1
 800b5d8:	6013      	str	r3, [r2, #0]
 800b5da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	f43f acf3 	beq.w	800afc8 <_dtoa_r+0x90>
 800b5e2:	601d      	str	r5, [r3, #0]
 800b5e4:	e4f0      	b.n	800afc8 <_dtoa_r+0x90>
 800b5e6:	4657      	mov	r7, sl
 800b5e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b5ec:	1e6b      	subs	r3, r5, #1
 800b5ee:	2a39      	cmp	r2, #57	; 0x39
 800b5f0:	d106      	bne.n	800b600 <_dtoa_r+0x6c8>
 800b5f2:	9a06      	ldr	r2, [sp, #24]
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d107      	bne.n	800b608 <_dtoa_r+0x6d0>
 800b5f8:	2330      	movs	r3, #48	; 0x30
 800b5fa:	7013      	strb	r3, [r2, #0]
 800b5fc:	4613      	mov	r3, r2
 800b5fe:	3701      	adds	r7, #1
 800b600:	781a      	ldrb	r2, [r3, #0]
 800b602:	3201      	adds	r2, #1
 800b604:	701a      	strb	r2, [r3, #0]
 800b606:	e791      	b.n	800b52c <_dtoa_r+0x5f4>
 800b608:	461d      	mov	r5, r3
 800b60a:	e7ed      	b.n	800b5e8 <_dtoa_r+0x6b0>
 800b60c:	2200      	movs	r2, #0
 800b60e:	4b99      	ldr	r3, [pc, #612]	; (800b874 <_dtoa_r+0x93c>)
 800b610:	f7f4 ff6c 	bl	80004ec <__aeabi_dmul>
 800b614:	2200      	movs	r2, #0
 800b616:	2300      	movs	r3, #0
 800b618:	4606      	mov	r6, r0
 800b61a:	460f      	mov	r7, r1
 800b61c:	f7f5 f9ce 	bl	80009bc <__aeabi_dcmpeq>
 800b620:	2800      	cmp	r0, #0
 800b622:	d09e      	beq.n	800b562 <_dtoa_r+0x62a>
 800b624:	e7cf      	b.n	800b5c6 <_dtoa_r+0x68e>
 800b626:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b628:	2a00      	cmp	r2, #0
 800b62a:	f000 8088 	beq.w	800b73e <_dtoa_r+0x806>
 800b62e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b630:	2a01      	cmp	r2, #1
 800b632:	dc6d      	bgt.n	800b710 <_dtoa_r+0x7d8>
 800b634:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b636:	2a00      	cmp	r2, #0
 800b638:	d066      	beq.n	800b708 <_dtoa_r+0x7d0>
 800b63a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b63e:	464d      	mov	r5, r9
 800b640:	9e08      	ldr	r6, [sp, #32]
 800b642:	9a07      	ldr	r2, [sp, #28]
 800b644:	2101      	movs	r1, #1
 800b646:	441a      	add	r2, r3
 800b648:	4620      	mov	r0, r4
 800b64a:	4499      	add	r9, r3
 800b64c:	9207      	str	r2, [sp, #28]
 800b64e:	f000 fd4a 	bl	800c0e6 <__i2b>
 800b652:	4607      	mov	r7, r0
 800b654:	2d00      	cmp	r5, #0
 800b656:	dd0b      	ble.n	800b670 <_dtoa_r+0x738>
 800b658:	9b07      	ldr	r3, [sp, #28]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	dd08      	ble.n	800b670 <_dtoa_r+0x738>
 800b65e:	42ab      	cmp	r3, r5
 800b660:	bfa8      	it	ge
 800b662:	462b      	movge	r3, r5
 800b664:	9a07      	ldr	r2, [sp, #28]
 800b666:	eba9 0903 	sub.w	r9, r9, r3
 800b66a:	1aed      	subs	r5, r5, r3
 800b66c:	1ad3      	subs	r3, r2, r3
 800b66e:	9307      	str	r3, [sp, #28]
 800b670:	9b08      	ldr	r3, [sp, #32]
 800b672:	b1eb      	cbz	r3, 800b6b0 <_dtoa_r+0x778>
 800b674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b676:	2b00      	cmp	r3, #0
 800b678:	d065      	beq.n	800b746 <_dtoa_r+0x80e>
 800b67a:	b18e      	cbz	r6, 800b6a0 <_dtoa_r+0x768>
 800b67c:	4639      	mov	r1, r7
 800b67e:	4632      	mov	r2, r6
 800b680:	4620      	mov	r0, r4
 800b682:	f000 fdcf 	bl	800c224 <__pow5mult>
 800b686:	465a      	mov	r2, fp
 800b688:	4601      	mov	r1, r0
 800b68a:	4607      	mov	r7, r0
 800b68c:	4620      	mov	r0, r4
 800b68e:	f000 fd33 	bl	800c0f8 <__multiply>
 800b692:	4659      	mov	r1, fp
 800b694:	900a      	str	r0, [sp, #40]	; 0x28
 800b696:	4620      	mov	r0, r4
 800b698:	f000 fc85 	bl	800bfa6 <_Bfree>
 800b69c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b69e:	469b      	mov	fp, r3
 800b6a0:	9b08      	ldr	r3, [sp, #32]
 800b6a2:	1b9a      	subs	r2, r3, r6
 800b6a4:	d004      	beq.n	800b6b0 <_dtoa_r+0x778>
 800b6a6:	4659      	mov	r1, fp
 800b6a8:	4620      	mov	r0, r4
 800b6aa:	f000 fdbb 	bl	800c224 <__pow5mult>
 800b6ae:	4683      	mov	fp, r0
 800b6b0:	2101      	movs	r1, #1
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	f000 fd17 	bl	800c0e6 <__i2b>
 800b6b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6ba:	4606      	mov	r6, r0
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	f000 81c6 	beq.w	800ba4e <_dtoa_r+0xb16>
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	4601      	mov	r1, r0
 800b6c6:	4620      	mov	r0, r4
 800b6c8:	f000 fdac 	bl	800c224 <__pow5mult>
 800b6cc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b6ce:	4606      	mov	r6, r0
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	dc3e      	bgt.n	800b752 <_dtoa_r+0x81a>
 800b6d4:	9b02      	ldr	r3, [sp, #8]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d137      	bne.n	800b74a <_dtoa_r+0x812>
 800b6da:	9b03      	ldr	r3, [sp, #12]
 800b6dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d134      	bne.n	800b74e <_dtoa_r+0x816>
 800b6e4:	9b03      	ldr	r3, [sp, #12]
 800b6e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b6ea:	0d1b      	lsrs	r3, r3, #20
 800b6ec:	051b      	lsls	r3, r3, #20
 800b6ee:	b12b      	cbz	r3, 800b6fc <_dtoa_r+0x7c4>
 800b6f0:	9b07      	ldr	r3, [sp, #28]
 800b6f2:	f109 0901 	add.w	r9, r9, #1
 800b6f6:	3301      	adds	r3, #1
 800b6f8:	9307      	str	r3, [sp, #28]
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	9308      	str	r3, [sp, #32]
 800b6fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b700:	2b00      	cmp	r3, #0
 800b702:	d128      	bne.n	800b756 <_dtoa_r+0x81e>
 800b704:	2001      	movs	r0, #1
 800b706:	e02e      	b.n	800b766 <_dtoa_r+0x82e>
 800b708:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b70a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b70e:	e796      	b.n	800b63e <_dtoa_r+0x706>
 800b710:	9b08      	ldr	r3, [sp, #32]
 800b712:	f108 36ff 	add.w	r6, r8, #4294967295
 800b716:	42b3      	cmp	r3, r6
 800b718:	bfb7      	itett	lt
 800b71a:	9b08      	ldrlt	r3, [sp, #32]
 800b71c:	1b9e      	subge	r6, r3, r6
 800b71e:	1af2      	sublt	r2, r6, r3
 800b720:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800b722:	bfbf      	itttt	lt
 800b724:	9608      	strlt	r6, [sp, #32]
 800b726:	189b      	addlt	r3, r3, r2
 800b728:	930c      	strlt	r3, [sp, #48]	; 0x30
 800b72a:	2600      	movlt	r6, #0
 800b72c:	f1b8 0f00 	cmp.w	r8, #0
 800b730:	bfb9      	ittee	lt
 800b732:	eba9 0508 	sublt.w	r5, r9, r8
 800b736:	2300      	movlt	r3, #0
 800b738:	464d      	movge	r5, r9
 800b73a:	4643      	movge	r3, r8
 800b73c:	e781      	b.n	800b642 <_dtoa_r+0x70a>
 800b73e:	9e08      	ldr	r6, [sp, #32]
 800b740:	464d      	mov	r5, r9
 800b742:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b744:	e786      	b.n	800b654 <_dtoa_r+0x71c>
 800b746:	9a08      	ldr	r2, [sp, #32]
 800b748:	e7ad      	b.n	800b6a6 <_dtoa_r+0x76e>
 800b74a:	2300      	movs	r3, #0
 800b74c:	e7d6      	b.n	800b6fc <_dtoa_r+0x7c4>
 800b74e:	9b02      	ldr	r3, [sp, #8]
 800b750:	e7d4      	b.n	800b6fc <_dtoa_r+0x7c4>
 800b752:	2300      	movs	r3, #0
 800b754:	9308      	str	r3, [sp, #32]
 800b756:	6933      	ldr	r3, [r6, #16]
 800b758:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b75c:	6918      	ldr	r0, [r3, #16]
 800b75e:	f000 fc74 	bl	800c04a <__hi0bits>
 800b762:	f1c0 0020 	rsb	r0, r0, #32
 800b766:	9b07      	ldr	r3, [sp, #28]
 800b768:	4418      	add	r0, r3
 800b76a:	f010 001f 	ands.w	r0, r0, #31
 800b76e:	d047      	beq.n	800b800 <_dtoa_r+0x8c8>
 800b770:	f1c0 0320 	rsb	r3, r0, #32
 800b774:	2b04      	cmp	r3, #4
 800b776:	dd3b      	ble.n	800b7f0 <_dtoa_r+0x8b8>
 800b778:	9b07      	ldr	r3, [sp, #28]
 800b77a:	f1c0 001c 	rsb	r0, r0, #28
 800b77e:	4481      	add	r9, r0
 800b780:	4405      	add	r5, r0
 800b782:	4403      	add	r3, r0
 800b784:	9307      	str	r3, [sp, #28]
 800b786:	f1b9 0f00 	cmp.w	r9, #0
 800b78a:	dd05      	ble.n	800b798 <_dtoa_r+0x860>
 800b78c:	4659      	mov	r1, fp
 800b78e:	464a      	mov	r2, r9
 800b790:	4620      	mov	r0, r4
 800b792:	f000 fd95 	bl	800c2c0 <__lshift>
 800b796:	4683      	mov	fp, r0
 800b798:	9b07      	ldr	r3, [sp, #28]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	dd05      	ble.n	800b7aa <_dtoa_r+0x872>
 800b79e:	4631      	mov	r1, r6
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	f000 fd8c 	bl	800c2c0 <__lshift>
 800b7a8:	4606      	mov	r6, r0
 800b7aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7ac:	b353      	cbz	r3, 800b804 <_dtoa_r+0x8cc>
 800b7ae:	4631      	mov	r1, r6
 800b7b0:	4658      	mov	r0, fp
 800b7b2:	f000 fdd9 	bl	800c368 <__mcmp>
 800b7b6:	2800      	cmp	r0, #0
 800b7b8:	da24      	bge.n	800b804 <_dtoa_r+0x8cc>
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	4659      	mov	r1, fp
 800b7be:	220a      	movs	r2, #10
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	f000 fc07 	bl	800bfd4 <__multadd>
 800b7c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b7cc:	4683      	mov	fp, r0
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	f000 8144 	beq.w	800ba5c <_dtoa_r+0xb24>
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	4639      	mov	r1, r7
 800b7d8:	220a      	movs	r2, #10
 800b7da:	4620      	mov	r0, r4
 800b7dc:	f000 fbfa 	bl	800bfd4 <__multadd>
 800b7e0:	9b04      	ldr	r3, [sp, #16]
 800b7e2:	4607      	mov	r7, r0
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	dc4d      	bgt.n	800b884 <_dtoa_r+0x94c>
 800b7e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b7ea:	2b02      	cmp	r3, #2
 800b7ec:	dd4a      	ble.n	800b884 <_dtoa_r+0x94c>
 800b7ee:	e011      	b.n	800b814 <_dtoa_r+0x8dc>
 800b7f0:	d0c9      	beq.n	800b786 <_dtoa_r+0x84e>
 800b7f2:	9a07      	ldr	r2, [sp, #28]
 800b7f4:	331c      	adds	r3, #28
 800b7f6:	441a      	add	r2, r3
 800b7f8:	4499      	add	r9, r3
 800b7fa:	441d      	add	r5, r3
 800b7fc:	4613      	mov	r3, r2
 800b7fe:	e7c1      	b.n	800b784 <_dtoa_r+0x84c>
 800b800:	4603      	mov	r3, r0
 800b802:	e7f6      	b.n	800b7f2 <_dtoa_r+0x8ba>
 800b804:	f1b8 0f00 	cmp.w	r8, #0
 800b808:	dc36      	bgt.n	800b878 <_dtoa_r+0x940>
 800b80a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b80c:	2b02      	cmp	r3, #2
 800b80e:	dd33      	ble.n	800b878 <_dtoa_r+0x940>
 800b810:	f8cd 8010 	str.w	r8, [sp, #16]
 800b814:	9b04      	ldr	r3, [sp, #16]
 800b816:	b963      	cbnz	r3, 800b832 <_dtoa_r+0x8fa>
 800b818:	4631      	mov	r1, r6
 800b81a:	2205      	movs	r2, #5
 800b81c:	4620      	mov	r0, r4
 800b81e:	f000 fbd9 	bl	800bfd4 <__multadd>
 800b822:	4601      	mov	r1, r0
 800b824:	4606      	mov	r6, r0
 800b826:	4658      	mov	r0, fp
 800b828:	f000 fd9e 	bl	800c368 <__mcmp>
 800b82c:	2800      	cmp	r0, #0
 800b82e:	f73f add3 	bgt.w	800b3d8 <_dtoa_r+0x4a0>
 800b832:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b834:	9d06      	ldr	r5, [sp, #24]
 800b836:	ea6f 0a03 	mvn.w	sl, r3
 800b83a:	f04f 0900 	mov.w	r9, #0
 800b83e:	4631      	mov	r1, r6
 800b840:	4620      	mov	r0, r4
 800b842:	f000 fbb0 	bl	800bfa6 <_Bfree>
 800b846:	2f00      	cmp	r7, #0
 800b848:	f43f aebd 	beq.w	800b5c6 <_dtoa_r+0x68e>
 800b84c:	f1b9 0f00 	cmp.w	r9, #0
 800b850:	d005      	beq.n	800b85e <_dtoa_r+0x926>
 800b852:	45b9      	cmp	r9, r7
 800b854:	d003      	beq.n	800b85e <_dtoa_r+0x926>
 800b856:	4649      	mov	r1, r9
 800b858:	4620      	mov	r0, r4
 800b85a:	f000 fba4 	bl	800bfa6 <_Bfree>
 800b85e:	4639      	mov	r1, r7
 800b860:	4620      	mov	r0, r4
 800b862:	f000 fba0 	bl	800bfa6 <_Bfree>
 800b866:	e6ae      	b.n	800b5c6 <_dtoa_r+0x68e>
 800b868:	2600      	movs	r6, #0
 800b86a:	4637      	mov	r7, r6
 800b86c:	e7e1      	b.n	800b832 <_dtoa_r+0x8fa>
 800b86e:	46ba      	mov	sl, r7
 800b870:	4637      	mov	r7, r6
 800b872:	e5b1      	b.n	800b3d8 <_dtoa_r+0x4a0>
 800b874:	40240000 	.word	0x40240000
 800b878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b87a:	f8cd 8010 	str.w	r8, [sp, #16]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	f000 80f3 	beq.w	800ba6a <_dtoa_r+0xb32>
 800b884:	2d00      	cmp	r5, #0
 800b886:	dd05      	ble.n	800b894 <_dtoa_r+0x95c>
 800b888:	4639      	mov	r1, r7
 800b88a:	462a      	mov	r2, r5
 800b88c:	4620      	mov	r0, r4
 800b88e:	f000 fd17 	bl	800c2c0 <__lshift>
 800b892:	4607      	mov	r7, r0
 800b894:	9b08      	ldr	r3, [sp, #32]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d04c      	beq.n	800b934 <_dtoa_r+0x9fc>
 800b89a:	6879      	ldr	r1, [r7, #4]
 800b89c:	4620      	mov	r0, r4
 800b89e:	f000 fb4e 	bl	800bf3e <_Balloc>
 800b8a2:	4605      	mov	r5, r0
 800b8a4:	693a      	ldr	r2, [r7, #16]
 800b8a6:	f107 010c 	add.w	r1, r7, #12
 800b8aa:	3202      	adds	r2, #2
 800b8ac:	0092      	lsls	r2, r2, #2
 800b8ae:	300c      	adds	r0, #12
 800b8b0:	f000 fb38 	bl	800bf24 <memcpy>
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	4629      	mov	r1, r5
 800b8b8:	4620      	mov	r0, r4
 800b8ba:	f000 fd01 	bl	800c2c0 <__lshift>
 800b8be:	46b9      	mov	r9, r7
 800b8c0:	4607      	mov	r7, r0
 800b8c2:	9b06      	ldr	r3, [sp, #24]
 800b8c4:	9307      	str	r3, [sp, #28]
 800b8c6:	9b02      	ldr	r3, [sp, #8]
 800b8c8:	f003 0301 	and.w	r3, r3, #1
 800b8cc:	9308      	str	r3, [sp, #32]
 800b8ce:	4631      	mov	r1, r6
 800b8d0:	4658      	mov	r0, fp
 800b8d2:	f7ff faa3 	bl	800ae1c <quorem>
 800b8d6:	4649      	mov	r1, r9
 800b8d8:	4605      	mov	r5, r0
 800b8da:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b8de:	4658      	mov	r0, fp
 800b8e0:	f000 fd42 	bl	800c368 <__mcmp>
 800b8e4:	463a      	mov	r2, r7
 800b8e6:	9002      	str	r0, [sp, #8]
 800b8e8:	4631      	mov	r1, r6
 800b8ea:	4620      	mov	r0, r4
 800b8ec:	f000 fd56 	bl	800c39c <__mdiff>
 800b8f0:	68c3      	ldr	r3, [r0, #12]
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	bb03      	cbnz	r3, 800b938 <_dtoa_r+0xa00>
 800b8f6:	4601      	mov	r1, r0
 800b8f8:	9009      	str	r0, [sp, #36]	; 0x24
 800b8fa:	4658      	mov	r0, fp
 800b8fc:	f000 fd34 	bl	800c368 <__mcmp>
 800b900:	4603      	mov	r3, r0
 800b902:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b904:	4611      	mov	r1, r2
 800b906:	4620      	mov	r0, r4
 800b908:	9309      	str	r3, [sp, #36]	; 0x24
 800b90a:	f000 fb4c 	bl	800bfa6 <_Bfree>
 800b90e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b910:	b9a3      	cbnz	r3, 800b93c <_dtoa_r+0xa04>
 800b912:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b914:	b992      	cbnz	r2, 800b93c <_dtoa_r+0xa04>
 800b916:	9a08      	ldr	r2, [sp, #32]
 800b918:	b982      	cbnz	r2, 800b93c <_dtoa_r+0xa04>
 800b91a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b91e:	d029      	beq.n	800b974 <_dtoa_r+0xa3c>
 800b920:	9b02      	ldr	r3, [sp, #8]
 800b922:	2b00      	cmp	r3, #0
 800b924:	dd01      	ble.n	800b92a <_dtoa_r+0x9f2>
 800b926:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800b92a:	9b07      	ldr	r3, [sp, #28]
 800b92c:	1c5d      	adds	r5, r3, #1
 800b92e:	f883 8000 	strb.w	r8, [r3]
 800b932:	e784      	b.n	800b83e <_dtoa_r+0x906>
 800b934:	4638      	mov	r0, r7
 800b936:	e7c2      	b.n	800b8be <_dtoa_r+0x986>
 800b938:	2301      	movs	r3, #1
 800b93a:	e7e3      	b.n	800b904 <_dtoa_r+0x9cc>
 800b93c:	9a02      	ldr	r2, [sp, #8]
 800b93e:	2a00      	cmp	r2, #0
 800b940:	db04      	blt.n	800b94c <_dtoa_r+0xa14>
 800b942:	d123      	bne.n	800b98c <_dtoa_r+0xa54>
 800b944:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b946:	bb0a      	cbnz	r2, 800b98c <_dtoa_r+0xa54>
 800b948:	9a08      	ldr	r2, [sp, #32]
 800b94a:	b9fa      	cbnz	r2, 800b98c <_dtoa_r+0xa54>
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	ddec      	ble.n	800b92a <_dtoa_r+0x9f2>
 800b950:	4659      	mov	r1, fp
 800b952:	2201      	movs	r2, #1
 800b954:	4620      	mov	r0, r4
 800b956:	f000 fcb3 	bl	800c2c0 <__lshift>
 800b95a:	4631      	mov	r1, r6
 800b95c:	4683      	mov	fp, r0
 800b95e:	f000 fd03 	bl	800c368 <__mcmp>
 800b962:	2800      	cmp	r0, #0
 800b964:	dc03      	bgt.n	800b96e <_dtoa_r+0xa36>
 800b966:	d1e0      	bne.n	800b92a <_dtoa_r+0x9f2>
 800b968:	f018 0f01 	tst.w	r8, #1
 800b96c:	d0dd      	beq.n	800b92a <_dtoa_r+0x9f2>
 800b96e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b972:	d1d8      	bne.n	800b926 <_dtoa_r+0x9ee>
 800b974:	9b07      	ldr	r3, [sp, #28]
 800b976:	9a07      	ldr	r2, [sp, #28]
 800b978:	1c5d      	adds	r5, r3, #1
 800b97a:	2339      	movs	r3, #57	; 0x39
 800b97c:	7013      	strb	r3, [r2, #0]
 800b97e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b982:	1e6a      	subs	r2, r5, #1
 800b984:	2b39      	cmp	r3, #57	; 0x39
 800b986:	d04d      	beq.n	800ba24 <_dtoa_r+0xaec>
 800b988:	3301      	adds	r3, #1
 800b98a:	e052      	b.n	800ba32 <_dtoa_r+0xafa>
 800b98c:	9a07      	ldr	r2, [sp, #28]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	f102 0501 	add.w	r5, r2, #1
 800b994:	dd06      	ble.n	800b9a4 <_dtoa_r+0xa6c>
 800b996:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b99a:	d0eb      	beq.n	800b974 <_dtoa_r+0xa3c>
 800b99c:	f108 0801 	add.w	r8, r8, #1
 800b9a0:	9b07      	ldr	r3, [sp, #28]
 800b9a2:	e7c4      	b.n	800b92e <_dtoa_r+0x9f6>
 800b9a4:	9b06      	ldr	r3, [sp, #24]
 800b9a6:	9a04      	ldr	r2, [sp, #16]
 800b9a8:	1aeb      	subs	r3, r5, r3
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	f805 8c01 	strb.w	r8, [r5, #-1]
 800b9b0:	d021      	beq.n	800b9f6 <_dtoa_r+0xabe>
 800b9b2:	4659      	mov	r1, fp
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	220a      	movs	r2, #10
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	f000 fb0b 	bl	800bfd4 <__multadd>
 800b9be:	45b9      	cmp	r9, r7
 800b9c0:	4683      	mov	fp, r0
 800b9c2:	f04f 0300 	mov.w	r3, #0
 800b9c6:	f04f 020a 	mov.w	r2, #10
 800b9ca:	4649      	mov	r1, r9
 800b9cc:	4620      	mov	r0, r4
 800b9ce:	d105      	bne.n	800b9dc <_dtoa_r+0xaa4>
 800b9d0:	f000 fb00 	bl	800bfd4 <__multadd>
 800b9d4:	4681      	mov	r9, r0
 800b9d6:	4607      	mov	r7, r0
 800b9d8:	9507      	str	r5, [sp, #28]
 800b9da:	e778      	b.n	800b8ce <_dtoa_r+0x996>
 800b9dc:	f000 fafa 	bl	800bfd4 <__multadd>
 800b9e0:	4639      	mov	r1, r7
 800b9e2:	4681      	mov	r9, r0
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	220a      	movs	r2, #10
 800b9e8:	4620      	mov	r0, r4
 800b9ea:	f000 faf3 	bl	800bfd4 <__multadd>
 800b9ee:	4607      	mov	r7, r0
 800b9f0:	e7f2      	b.n	800b9d8 <_dtoa_r+0xaa0>
 800b9f2:	f04f 0900 	mov.w	r9, #0
 800b9f6:	4659      	mov	r1, fp
 800b9f8:	2201      	movs	r2, #1
 800b9fa:	4620      	mov	r0, r4
 800b9fc:	f000 fc60 	bl	800c2c0 <__lshift>
 800ba00:	4631      	mov	r1, r6
 800ba02:	4683      	mov	fp, r0
 800ba04:	f000 fcb0 	bl	800c368 <__mcmp>
 800ba08:	2800      	cmp	r0, #0
 800ba0a:	dcb8      	bgt.n	800b97e <_dtoa_r+0xa46>
 800ba0c:	d102      	bne.n	800ba14 <_dtoa_r+0xadc>
 800ba0e:	f018 0f01 	tst.w	r8, #1
 800ba12:	d1b4      	bne.n	800b97e <_dtoa_r+0xa46>
 800ba14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ba18:	1e6a      	subs	r2, r5, #1
 800ba1a:	2b30      	cmp	r3, #48	; 0x30
 800ba1c:	f47f af0f 	bne.w	800b83e <_dtoa_r+0x906>
 800ba20:	4615      	mov	r5, r2
 800ba22:	e7f7      	b.n	800ba14 <_dtoa_r+0xadc>
 800ba24:	9b06      	ldr	r3, [sp, #24]
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d105      	bne.n	800ba36 <_dtoa_r+0xafe>
 800ba2a:	2331      	movs	r3, #49	; 0x31
 800ba2c:	9a06      	ldr	r2, [sp, #24]
 800ba2e:	f10a 0a01 	add.w	sl, sl, #1
 800ba32:	7013      	strb	r3, [r2, #0]
 800ba34:	e703      	b.n	800b83e <_dtoa_r+0x906>
 800ba36:	4615      	mov	r5, r2
 800ba38:	e7a1      	b.n	800b97e <_dtoa_r+0xa46>
 800ba3a:	4b17      	ldr	r3, [pc, #92]	; (800ba98 <_dtoa_r+0xb60>)
 800ba3c:	f7ff bae1 	b.w	800b002 <_dtoa_r+0xca>
 800ba40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	f47f aabb 	bne.w	800afbe <_dtoa_r+0x86>
 800ba48:	4b14      	ldr	r3, [pc, #80]	; (800ba9c <_dtoa_r+0xb64>)
 800ba4a:	f7ff bada 	b.w	800b002 <_dtoa_r+0xca>
 800ba4e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ba50:	2b01      	cmp	r3, #1
 800ba52:	f77f ae3f 	ble.w	800b6d4 <_dtoa_r+0x79c>
 800ba56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba58:	9308      	str	r3, [sp, #32]
 800ba5a:	e653      	b.n	800b704 <_dtoa_r+0x7cc>
 800ba5c:	9b04      	ldr	r3, [sp, #16]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	dc03      	bgt.n	800ba6a <_dtoa_r+0xb32>
 800ba62:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ba64:	2b02      	cmp	r3, #2
 800ba66:	f73f aed5 	bgt.w	800b814 <_dtoa_r+0x8dc>
 800ba6a:	9d06      	ldr	r5, [sp, #24]
 800ba6c:	4631      	mov	r1, r6
 800ba6e:	4658      	mov	r0, fp
 800ba70:	f7ff f9d4 	bl	800ae1c <quorem>
 800ba74:	9b06      	ldr	r3, [sp, #24]
 800ba76:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ba7a:	f805 8b01 	strb.w	r8, [r5], #1
 800ba7e:	9a04      	ldr	r2, [sp, #16]
 800ba80:	1aeb      	subs	r3, r5, r3
 800ba82:	429a      	cmp	r2, r3
 800ba84:	ddb5      	ble.n	800b9f2 <_dtoa_r+0xaba>
 800ba86:	4659      	mov	r1, fp
 800ba88:	2300      	movs	r3, #0
 800ba8a:	220a      	movs	r2, #10
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	f000 faa1 	bl	800bfd4 <__multadd>
 800ba92:	4683      	mov	fp, r0
 800ba94:	e7ea      	b.n	800ba6c <_dtoa_r+0xb34>
 800ba96:	bf00      	nop
 800ba98:	0800dce5 	.word	0x0800dce5
 800ba9c:	0800daea 	.word	0x0800daea

0800baa0 <__sflush_r>:
 800baa0:	898a      	ldrh	r2, [r1, #12]
 800baa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baa6:	4605      	mov	r5, r0
 800baa8:	0710      	lsls	r0, r2, #28
 800baaa:	460c      	mov	r4, r1
 800baac:	d458      	bmi.n	800bb60 <__sflush_r+0xc0>
 800baae:	684b      	ldr	r3, [r1, #4]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	dc05      	bgt.n	800bac0 <__sflush_r+0x20>
 800bab4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	dc02      	bgt.n	800bac0 <__sflush_r+0x20>
 800baba:	2000      	movs	r0, #0
 800babc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bac0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bac2:	2e00      	cmp	r6, #0
 800bac4:	d0f9      	beq.n	800baba <__sflush_r+0x1a>
 800bac6:	2300      	movs	r3, #0
 800bac8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bacc:	682f      	ldr	r7, [r5, #0]
 800bace:	6a21      	ldr	r1, [r4, #32]
 800bad0:	602b      	str	r3, [r5, #0]
 800bad2:	d032      	beq.n	800bb3a <__sflush_r+0x9a>
 800bad4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bad6:	89a3      	ldrh	r3, [r4, #12]
 800bad8:	075a      	lsls	r2, r3, #29
 800bada:	d505      	bpl.n	800bae8 <__sflush_r+0x48>
 800badc:	6863      	ldr	r3, [r4, #4]
 800bade:	1ac0      	subs	r0, r0, r3
 800bae0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bae2:	b10b      	cbz	r3, 800bae8 <__sflush_r+0x48>
 800bae4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bae6:	1ac0      	subs	r0, r0, r3
 800bae8:	2300      	movs	r3, #0
 800baea:	4602      	mov	r2, r0
 800baec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800baee:	6a21      	ldr	r1, [r4, #32]
 800baf0:	4628      	mov	r0, r5
 800baf2:	47b0      	blx	r6
 800baf4:	1c43      	adds	r3, r0, #1
 800baf6:	89a3      	ldrh	r3, [r4, #12]
 800baf8:	d106      	bne.n	800bb08 <__sflush_r+0x68>
 800bafa:	6829      	ldr	r1, [r5, #0]
 800bafc:	291d      	cmp	r1, #29
 800bafe:	d848      	bhi.n	800bb92 <__sflush_r+0xf2>
 800bb00:	4a29      	ldr	r2, [pc, #164]	; (800bba8 <__sflush_r+0x108>)
 800bb02:	40ca      	lsrs	r2, r1
 800bb04:	07d6      	lsls	r6, r2, #31
 800bb06:	d544      	bpl.n	800bb92 <__sflush_r+0xf2>
 800bb08:	2200      	movs	r2, #0
 800bb0a:	6062      	str	r2, [r4, #4]
 800bb0c:	6922      	ldr	r2, [r4, #16]
 800bb0e:	04d9      	lsls	r1, r3, #19
 800bb10:	6022      	str	r2, [r4, #0]
 800bb12:	d504      	bpl.n	800bb1e <__sflush_r+0x7e>
 800bb14:	1c42      	adds	r2, r0, #1
 800bb16:	d101      	bne.n	800bb1c <__sflush_r+0x7c>
 800bb18:	682b      	ldr	r3, [r5, #0]
 800bb1a:	b903      	cbnz	r3, 800bb1e <__sflush_r+0x7e>
 800bb1c:	6560      	str	r0, [r4, #84]	; 0x54
 800bb1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb20:	602f      	str	r7, [r5, #0]
 800bb22:	2900      	cmp	r1, #0
 800bb24:	d0c9      	beq.n	800baba <__sflush_r+0x1a>
 800bb26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb2a:	4299      	cmp	r1, r3
 800bb2c:	d002      	beq.n	800bb34 <__sflush_r+0x94>
 800bb2e:	4628      	mov	r0, r5
 800bb30:	f7fe f8ac 	bl	8009c8c <_free_r>
 800bb34:	2000      	movs	r0, #0
 800bb36:	6360      	str	r0, [r4, #52]	; 0x34
 800bb38:	e7c0      	b.n	800babc <__sflush_r+0x1c>
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	4628      	mov	r0, r5
 800bb3e:	47b0      	blx	r6
 800bb40:	1c41      	adds	r1, r0, #1
 800bb42:	d1c8      	bne.n	800bad6 <__sflush_r+0x36>
 800bb44:	682b      	ldr	r3, [r5, #0]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d0c5      	beq.n	800bad6 <__sflush_r+0x36>
 800bb4a:	2b1d      	cmp	r3, #29
 800bb4c:	d001      	beq.n	800bb52 <__sflush_r+0xb2>
 800bb4e:	2b16      	cmp	r3, #22
 800bb50:	d101      	bne.n	800bb56 <__sflush_r+0xb6>
 800bb52:	602f      	str	r7, [r5, #0]
 800bb54:	e7b1      	b.n	800baba <__sflush_r+0x1a>
 800bb56:	89a3      	ldrh	r3, [r4, #12]
 800bb58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb5c:	81a3      	strh	r3, [r4, #12]
 800bb5e:	e7ad      	b.n	800babc <__sflush_r+0x1c>
 800bb60:	690f      	ldr	r7, [r1, #16]
 800bb62:	2f00      	cmp	r7, #0
 800bb64:	d0a9      	beq.n	800baba <__sflush_r+0x1a>
 800bb66:	0793      	lsls	r3, r2, #30
 800bb68:	bf18      	it	ne
 800bb6a:	2300      	movne	r3, #0
 800bb6c:	680e      	ldr	r6, [r1, #0]
 800bb6e:	bf08      	it	eq
 800bb70:	694b      	ldreq	r3, [r1, #20]
 800bb72:	eba6 0807 	sub.w	r8, r6, r7
 800bb76:	600f      	str	r7, [r1, #0]
 800bb78:	608b      	str	r3, [r1, #8]
 800bb7a:	f1b8 0f00 	cmp.w	r8, #0
 800bb7e:	dd9c      	ble.n	800baba <__sflush_r+0x1a>
 800bb80:	4643      	mov	r3, r8
 800bb82:	463a      	mov	r2, r7
 800bb84:	6a21      	ldr	r1, [r4, #32]
 800bb86:	4628      	mov	r0, r5
 800bb88:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bb8a:	47b0      	blx	r6
 800bb8c:	2800      	cmp	r0, #0
 800bb8e:	dc06      	bgt.n	800bb9e <__sflush_r+0xfe>
 800bb90:	89a3      	ldrh	r3, [r4, #12]
 800bb92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb96:	81a3      	strh	r3, [r4, #12]
 800bb98:	f04f 30ff 	mov.w	r0, #4294967295
 800bb9c:	e78e      	b.n	800babc <__sflush_r+0x1c>
 800bb9e:	4407      	add	r7, r0
 800bba0:	eba8 0800 	sub.w	r8, r8, r0
 800bba4:	e7e9      	b.n	800bb7a <__sflush_r+0xda>
 800bba6:	bf00      	nop
 800bba8:	20400001 	.word	0x20400001

0800bbac <_fflush_r>:
 800bbac:	b538      	push	{r3, r4, r5, lr}
 800bbae:	690b      	ldr	r3, [r1, #16]
 800bbb0:	4605      	mov	r5, r0
 800bbb2:	460c      	mov	r4, r1
 800bbb4:	b1db      	cbz	r3, 800bbee <_fflush_r+0x42>
 800bbb6:	b118      	cbz	r0, 800bbc0 <_fflush_r+0x14>
 800bbb8:	6983      	ldr	r3, [r0, #24]
 800bbba:	b90b      	cbnz	r3, 800bbc0 <_fflush_r+0x14>
 800bbbc:	f000 f860 	bl	800bc80 <__sinit>
 800bbc0:	4b0c      	ldr	r3, [pc, #48]	; (800bbf4 <_fflush_r+0x48>)
 800bbc2:	429c      	cmp	r4, r3
 800bbc4:	d109      	bne.n	800bbda <_fflush_r+0x2e>
 800bbc6:	686c      	ldr	r4, [r5, #4]
 800bbc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbcc:	b17b      	cbz	r3, 800bbee <_fflush_r+0x42>
 800bbce:	4621      	mov	r1, r4
 800bbd0:	4628      	mov	r0, r5
 800bbd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbd6:	f7ff bf63 	b.w	800baa0 <__sflush_r>
 800bbda:	4b07      	ldr	r3, [pc, #28]	; (800bbf8 <_fflush_r+0x4c>)
 800bbdc:	429c      	cmp	r4, r3
 800bbde:	d101      	bne.n	800bbe4 <_fflush_r+0x38>
 800bbe0:	68ac      	ldr	r4, [r5, #8]
 800bbe2:	e7f1      	b.n	800bbc8 <_fflush_r+0x1c>
 800bbe4:	4b05      	ldr	r3, [pc, #20]	; (800bbfc <_fflush_r+0x50>)
 800bbe6:	429c      	cmp	r4, r3
 800bbe8:	bf08      	it	eq
 800bbea:	68ec      	ldreq	r4, [r5, #12]
 800bbec:	e7ec      	b.n	800bbc8 <_fflush_r+0x1c>
 800bbee:	2000      	movs	r0, #0
 800bbf0:	bd38      	pop	{r3, r4, r5, pc}
 800bbf2:	bf00      	nop
 800bbf4:	0800db18 	.word	0x0800db18
 800bbf8:	0800db38 	.word	0x0800db38
 800bbfc:	0800daf8 	.word	0x0800daf8

0800bc00 <std>:
 800bc00:	2300      	movs	r3, #0
 800bc02:	b510      	push	{r4, lr}
 800bc04:	4604      	mov	r4, r0
 800bc06:	e9c0 3300 	strd	r3, r3, [r0]
 800bc0a:	6083      	str	r3, [r0, #8]
 800bc0c:	8181      	strh	r1, [r0, #12]
 800bc0e:	6643      	str	r3, [r0, #100]	; 0x64
 800bc10:	81c2      	strh	r2, [r0, #14]
 800bc12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc16:	6183      	str	r3, [r0, #24]
 800bc18:	4619      	mov	r1, r3
 800bc1a:	2208      	movs	r2, #8
 800bc1c:	305c      	adds	r0, #92	; 0x5c
 800bc1e:	f7fd fd99 	bl	8009754 <memset>
 800bc22:	4b05      	ldr	r3, [pc, #20]	; (800bc38 <std+0x38>)
 800bc24:	6224      	str	r4, [r4, #32]
 800bc26:	6263      	str	r3, [r4, #36]	; 0x24
 800bc28:	4b04      	ldr	r3, [pc, #16]	; (800bc3c <std+0x3c>)
 800bc2a:	62a3      	str	r3, [r4, #40]	; 0x28
 800bc2c:	4b04      	ldr	r3, [pc, #16]	; (800bc40 <std+0x40>)
 800bc2e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bc30:	4b04      	ldr	r3, [pc, #16]	; (800bc44 <std+0x44>)
 800bc32:	6323      	str	r3, [r4, #48]	; 0x30
 800bc34:	bd10      	pop	{r4, pc}
 800bc36:	bf00      	nop
 800bc38:	0800caf5 	.word	0x0800caf5
 800bc3c:	0800cb1b 	.word	0x0800cb1b
 800bc40:	0800cb53 	.word	0x0800cb53
 800bc44:	0800cb77 	.word	0x0800cb77

0800bc48 <_cleanup_r>:
 800bc48:	4901      	ldr	r1, [pc, #4]	; (800bc50 <_cleanup_r+0x8>)
 800bc4a:	f000 b885 	b.w	800bd58 <_fwalk_reent>
 800bc4e:	bf00      	nop
 800bc50:	0800bbad 	.word	0x0800bbad

0800bc54 <__sfmoreglue>:
 800bc54:	b570      	push	{r4, r5, r6, lr}
 800bc56:	2568      	movs	r5, #104	; 0x68
 800bc58:	1e4a      	subs	r2, r1, #1
 800bc5a:	4355      	muls	r5, r2
 800bc5c:	460e      	mov	r6, r1
 800bc5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bc62:	f7fe f85f 	bl	8009d24 <_malloc_r>
 800bc66:	4604      	mov	r4, r0
 800bc68:	b140      	cbz	r0, 800bc7c <__sfmoreglue+0x28>
 800bc6a:	2100      	movs	r1, #0
 800bc6c:	e9c0 1600 	strd	r1, r6, [r0]
 800bc70:	300c      	adds	r0, #12
 800bc72:	60a0      	str	r0, [r4, #8]
 800bc74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bc78:	f7fd fd6c 	bl	8009754 <memset>
 800bc7c:	4620      	mov	r0, r4
 800bc7e:	bd70      	pop	{r4, r5, r6, pc}

0800bc80 <__sinit>:
 800bc80:	6983      	ldr	r3, [r0, #24]
 800bc82:	b510      	push	{r4, lr}
 800bc84:	4604      	mov	r4, r0
 800bc86:	bb33      	cbnz	r3, 800bcd6 <__sinit+0x56>
 800bc88:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800bc8c:	6503      	str	r3, [r0, #80]	; 0x50
 800bc8e:	4b12      	ldr	r3, [pc, #72]	; (800bcd8 <__sinit+0x58>)
 800bc90:	4a12      	ldr	r2, [pc, #72]	; (800bcdc <__sinit+0x5c>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	6282      	str	r2, [r0, #40]	; 0x28
 800bc96:	4298      	cmp	r0, r3
 800bc98:	bf04      	itt	eq
 800bc9a:	2301      	moveq	r3, #1
 800bc9c:	6183      	streq	r3, [r0, #24]
 800bc9e:	f000 f81f 	bl	800bce0 <__sfp>
 800bca2:	6060      	str	r0, [r4, #4]
 800bca4:	4620      	mov	r0, r4
 800bca6:	f000 f81b 	bl	800bce0 <__sfp>
 800bcaa:	60a0      	str	r0, [r4, #8]
 800bcac:	4620      	mov	r0, r4
 800bcae:	f000 f817 	bl	800bce0 <__sfp>
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	60e0      	str	r0, [r4, #12]
 800bcb6:	2104      	movs	r1, #4
 800bcb8:	6860      	ldr	r0, [r4, #4]
 800bcba:	f7ff ffa1 	bl	800bc00 <std>
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	2109      	movs	r1, #9
 800bcc2:	68a0      	ldr	r0, [r4, #8]
 800bcc4:	f7ff ff9c 	bl	800bc00 <std>
 800bcc8:	2202      	movs	r2, #2
 800bcca:	2112      	movs	r1, #18
 800bccc:	68e0      	ldr	r0, [r4, #12]
 800bcce:	f7ff ff97 	bl	800bc00 <std>
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	61a3      	str	r3, [r4, #24]
 800bcd6:	bd10      	pop	{r4, pc}
 800bcd8:	0800da18 	.word	0x0800da18
 800bcdc:	0800bc49 	.word	0x0800bc49

0800bce0 <__sfp>:
 800bce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bce2:	4b1b      	ldr	r3, [pc, #108]	; (800bd50 <__sfp+0x70>)
 800bce4:	4607      	mov	r7, r0
 800bce6:	681e      	ldr	r6, [r3, #0]
 800bce8:	69b3      	ldr	r3, [r6, #24]
 800bcea:	b913      	cbnz	r3, 800bcf2 <__sfp+0x12>
 800bcec:	4630      	mov	r0, r6
 800bcee:	f7ff ffc7 	bl	800bc80 <__sinit>
 800bcf2:	3648      	adds	r6, #72	; 0x48
 800bcf4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bcf8:	3b01      	subs	r3, #1
 800bcfa:	d503      	bpl.n	800bd04 <__sfp+0x24>
 800bcfc:	6833      	ldr	r3, [r6, #0]
 800bcfe:	b133      	cbz	r3, 800bd0e <__sfp+0x2e>
 800bd00:	6836      	ldr	r6, [r6, #0]
 800bd02:	e7f7      	b.n	800bcf4 <__sfp+0x14>
 800bd04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bd08:	b16d      	cbz	r5, 800bd26 <__sfp+0x46>
 800bd0a:	3468      	adds	r4, #104	; 0x68
 800bd0c:	e7f4      	b.n	800bcf8 <__sfp+0x18>
 800bd0e:	2104      	movs	r1, #4
 800bd10:	4638      	mov	r0, r7
 800bd12:	f7ff ff9f 	bl	800bc54 <__sfmoreglue>
 800bd16:	6030      	str	r0, [r6, #0]
 800bd18:	2800      	cmp	r0, #0
 800bd1a:	d1f1      	bne.n	800bd00 <__sfp+0x20>
 800bd1c:	230c      	movs	r3, #12
 800bd1e:	4604      	mov	r4, r0
 800bd20:	603b      	str	r3, [r7, #0]
 800bd22:	4620      	mov	r0, r4
 800bd24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd26:	4b0b      	ldr	r3, [pc, #44]	; (800bd54 <__sfp+0x74>)
 800bd28:	6665      	str	r5, [r4, #100]	; 0x64
 800bd2a:	e9c4 5500 	strd	r5, r5, [r4]
 800bd2e:	60a5      	str	r5, [r4, #8]
 800bd30:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800bd34:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800bd38:	2208      	movs	r2, #8
 800bd3a:	4629      	mov	r1, r5
 800bd3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bd40:	f7fd fd08 	bl	8009754 <memset>
 800bd44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bd48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bd4c:	e7e9      	b.n	800bd22 <__sfp+0x42>
 800bd4e:	bf00      	nop
 800bd50:	0800da18 	.word	0x0800da18
 800bd54:	ffff0001 	.word	0xffff0001

0800bd58 <_fwalk_reent>:
 800bd58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd5c:	4680      	mov	r8, r0
 800bd5e:	4689      	mov	r9, r1
 800bd60:	2600      	movs	r6, #0
 800bd62:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bd66:	b914      	cbnz	r4, 800bd6e <_fwalk_reent+0x16>
 800bd68:	4630      	mov	r0, r6
 800bd6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd6e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800bd72:	3f01      	subs	r7, #1
 800bd74:	d501      	bpl.n	800bd7a <_fwalk_reent+0x22>
 800bd76:	6824      	ldr	r4, [r4, #0]
 800bd78:	e7f5      	b.n	800bd66 <_fwalk_reent+0xe>
 800bd7a:	89ab      	ldrh	r3, [r5, #12]
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d907      	bls.n	800bd90 <_fwalk_reent+0x38>
 800bd80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd84:	3301      	adds	r3, #1
 800bd86:	d003      	beq.n	800bd90 <_fwalk_reent+0x38>
 800bd88:	4629      	mov	r1, r5
 800bd8a:	4640      	mov	r0, r8
 800bd8c:	47c8      	blx	r9
 800bd8e:	4306      	orrs	r6, r0
 800bd90:	3568      	adds	r5, #104	; 0x68
 800bd92:	e7ee      	b.n	800bd72 <_fwalk_reent+0x1a>

0800bd94 <_findenv_r>:
 800bd94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd98:	4607      	mov	r7, r0
 800bd9a:	468b      	mov	fp, r1
 800bd9c:	4690      	mov	r8, r2
 800bd9e:	f000 ffcd 	bl	800cd3c <__env_lock>
 800bda2:	4b19      	ldr	r3, [pc, #100]	; (800be08 <_findenv_r+0x74>)
 800bda4:	681d      	ldr	r5, [r3, #0]
 800bda6:	469a      	mov	sl, r3
 800bda8:	b13d      	cbz	r5, 800bdba <_findenv_r+0x26>
 800bdaa:	465c      	mov	r4, fp
 800bdac:	4623      	mov	r3, r4
 800bdae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdb2:	b32a      	cbz	r2, 800be00 <_findenv_r+0x6c>
 800bdb4:	2a3d      	cmp	r2, #61	; 0x3d
 800bdb6:	461c      	mov	r4, r3
 800bdb8:	d1f8      	bne.n	800bdac <_findenv_r+0x18>
 800bdba:	4638      	mov	r0, r7
 800bdbc:	f000 ffbf 	bl	800cd3e <__env_unlock>
 800bdc0:	2000      	movs	r0, #0
 800bdc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdc6:	464d      	mov	r5, r9
 800bdc8:	46a9      	mov	r9, r5
 800bdca:	f859 0b04 	ldr.w	r0, [r9], #4
 800bdce:	2800      	cmp	r0, #0
 800bdd0:	d0f3      	beq.n	800bdba <_findenv_r+0x26>
 800bdd2:	4622      	mov	r2, r4
 800bdd4:	4659      	mov	r1, fp
 800bdd6:	f000 feda 	bl	800cb8e <strncmp>
 800bdda:	2800      	cmp	r0, #0
 800bddc:	d1f3      	bne.n	800bdc6 <_findenv_r+0x32>
 800bdde:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800bde2:	191e      	adds	r6, r3, r4
 800bde4:	5d1b      	ldrb	r3, [r3, r4]
 800bde6:	2b3d      	cmp	r3, #61	; 0x3d
 800bde8:	d1ed      	bne.n	800bdc6 <_findenv_r+0x32>
 800bdea:	f8da 3000 	ldr.w	r3, [sl]
 800bdee:	4638      	mov	r0, r7
 800bdf0:	1aed      	subs	r5, r5, r3
 800bdf2:	10ad      	asrs	r5, r5, #2
 800bdf4:	f8c8 5000 	str.w	r5, [r8]
 800bdf8:	f000 ffa1 	bl	800cd3e <__env_unlock>
 800bdfc:	1c70      	adds	r0, r6, #1
 800bdfe:	e7e0      	b.n	800bdc2 <_findenv_r+0x2e>
 800be00:	eba4 040b 	sub.w	r4, r4, fp
 800be04:	e7e0      	b.n	800bdc8 <_findenv_r+0x34>
 800be06:	bf00      	nop
 800be08:	20000004 	.word	0x20000004

0800be0c <_getenv_r>:
 800be0c:	b507      	push	{r0, r1, r2, lr}
 800be0e:	aa01      	add	r2, sp, #4
 800be10:	f7ff ffc0 	bl	800bd94 <_findenv_r>
 800be14:	b003      	add	sp, #12
 800be16:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800be1c <__gettzinfo>:
 800be1c:	4800      	ldr	r0, [pc, #0]	; (800be20 <__gettzinfo+0x4>)
 800be1e:	4770      	bx	lr
 800be20:	20000098 	.word	0x20000098

0800be24 <_localeconv_r>:
 800be24:	4b04      	ldr	r3, [pc, #16]	; (800be38 <_localeconv_r+0x14>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	6a18      	ldr	r0, [r3, #32]
 800be2a:	4b04      	ldr	r3, [pc, #16]	; (800be3c <_localeconv_r+0x18>)
 800be2c:	2800      	cmp	r0, #0
 800be2e:	bf08      	it	eq
 800be30:	4618      	moveq	r0, r3
 800be32:	30f0      	adds	r0, #240	; 0xf0
 800be34:	4770      	bx	lr
 800be36:	bf00      	nop
 800be38:	20000028 	.word	0x20000028
 800be3c:	200000f0 	.word	0x200000f0

0800be40 <__swhatbuf_r>:
 800be40:	b570      	push	{r4, r5, r6, lr}
 800be42:	460e      	mov	r6, r1
 800be44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be48:	b096      	sub	sp, #88	; 0x58
 800be4a:	2900      	cmp	r1, #0
 800be4c:	4614      	mov	r4, r2
 800be4e:	461d      	mov	r5, r3
 800be50:	da07      	bge.n	800be62 <__swhatbuf_r+0x22>
 800be52:	2300      	movs	r3, #0
 800be54:	602b      	str	r3, [r5, #0]
 800be56:	89b3      	ldrh	r3, [r6, #12]
 800be58:	061a      	lsls	r2, r3, #24
 800be5a:	d410      	bmi.n	800be7e <__swhatbuf_r+0x3e>
 800be5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be60:	e00e      	b.n	800be80 <__swhatbuf_r+0x40>
 800be62:	466a      	mov	r2, sp
 800be64:	f000 ff6c 	bl	800cd40 <_fstat_r>
 800be68:	2800      	cmp	r0, #0
 800be6a:	dbf2      	blt.n	800be52 <__swhatbuf_r+0x12>
 800be6c:	9a01      	ldr	r2, [sp, #4]
 800be6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800be72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800be76:	425a      	negs	r2, r3
 800be78:	415a      	adcs	r2, r3
 800be7a:	602a      	str	r2, [r5, #0]
 800be7c:	e7ee      	b.n	800be5c <__swhatbuf_r+0x1c>
 800be7e:	2340      	movs	r3, #64	; 0x40
 800be80:	2000      	movs	r0, #0
 800be82:	6023      	str	r3, [r4, #0]
 800be84:	b016      	add	sp, #88	; 0x58
 800be86:	bd70      	pop	{r4, r5, r6, pc}

0800be88 <__smakebuf_r>:
 800be88:	898b      	ldrh	r3, [r1, #12]
 800be8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be8c:	079d      	lsls	r5, r3, #30
 800be8e:	4606      	mov	r6, r0
 800be90:	460c      	mov	r4, r1
 800be92:	d507      	bpl.n	800bea4 <__smakebuf_r+0x1c>
 800be94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800be98:	6023      	str	r3, [r4, #0]
 800be9a:	6123      	str	r3, [r4, #16]
 800be9c:	2301      	movs	r3, #1
 800be9e:	6163      	str	r3, [r4, #20]
 800bea0:	b002      	add	sp, #8
 800bea2:	bd70      	pop	{r4, r5, r6, pc}
 800bea4:	ab01      	add	r3, sp, #4
 800bea6:	466a      	mov	r2, sp
 800bea8:	f7ff ffca 	bl	800be40 <__swhatbuf_r>
 800beac:	9900      	ldr	r1, [sp, #0]
 800beae:	4605      	mov	r5, r0
 800beb0:	4630      	mov	r0, r6
 800beb2:	f7fd ff37 	bl	8009d24 <_malloc_r>
 800beb6:	b948      	cbnz	r0, 800becc <__smakebuf_r+0x44>
 800beb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bebc:	059a      	lsls	r2, r3, #22
 800bebe:	d4ef      	bmi.n	800bea0 <__smakebuf_r+0x18>
 800bec0:	f023 0303 	bic.w	r3, r3, #3
 800bec4:	f043 0302 	orr.w	r3, r3, #2
 800bec8:	81a3      	strh	r3, [r4, #12]
 800beca:	e7e3      	b.n	800be94 <__smakebuf_r+0xc>
 800becc:	4b0d      	ldr	r3, [pc, #52]	; (800bf04 <__smakebuf_r+0x7c>)
 800bece:	62b3      	str	r3, [r6, #40]	; 0x28
 800bed0:	89a3      	ldrh	r3, [r4, #12]
 800bed2:	6020      	str	r0, [r4, #0]
 800bed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bed8:	81a3      	strh	r3, [r4, #12]
 800beda:	9b00      	ldr	r3, [sp, #0]
 800bedc:	6120      	str	r0, [r4, #16]
 800bede:	6163      	str	r3, [r4, #20]
 800bee0:	9b01      	ldr	r3, [sp, #4]
 800bee2:	b15b      	cbz	r3, 800befc <__smakebuf_r+0x74>
 800bee4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bee8:	4630      	mov	r0, r6
 800beea:	f000 ff3b 	bl	800cd64 <_isatty_r>
 800beee:	b128      	cbz	r0, 800befc <__smakebuf_r+0x74>
 800bef0:	89a3      	ldrh	r3, [r4, #12]
 800bef2:	f023 0303 	bic.w	r3, r3, #3
 800bef6:	f043 0301 	orr.w	r3, r3, #1
 800befa:	81a3      	strh	r3, [r4, #12]
 800befc:	89a3      	ldrh	r3, [r4, #12]
 800befe:	431d      	orrs	r5, r3
 800bf00:	81a5      	strh	r5, [r4, #12]
 800bf02:	e7cd      	b.n	800bea0 <__smakebuf_r+0x18>
 800bf04:	0800bc49 	.word	0x0800bc49

0800bf08 <memchr>:
 800bf08:	b510      	push	{r4, lr}
 800bf0a:	b2c9      	uxtb	r1, r1
 800bf0c:	4402      	add	r2, r0
 800bf0e:	4290      	cmp	r0, r2
 800bf10:	4603      	mov	r3, r0
 800bf12:	d101      	bne.n	800bf18 <memchr+0x10>
 800bf14:	2300      	movs	r3, #0
 800bf16:	e003      	b.n	800bf20 <memchr+0x18>
 800bf18:	781c      	ldrb	r4, [r3, #0]
 800bf1a:	3001      	adds	r0, #1
 800bf1c:	428c      	cmp	r4, r1
 800bf1e:	d1f6      	bne.n	800bf0e <memchr+0x6>
 800bf20:	4618      	mov	r0, r3
 800bf22:	bd10      	pop	{r4, pc}

0800bf24 <memcpy>:
 800bf24:	b510      	push	{r4, lr}
 800bf26:	1e43      	subs	r3, r0, #1
 800bf28:	440a      	add	r2, r1
 800bf2a:	4291      	cmp	r1, r2
 800bf2c:	d100      	bne.n	800bf30 <memcpy+0xc>
 800bf2e:	bd10      	pop	{r4, pc}
 800bf30:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf34:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf38:	e7f7      	b.n	800bf2a <memcpy+0x6>

0800bf3a <__malloc_lock>:
 800bf3a:	4770      	bx	lr

0800bf3c <__malloc_unlock>:
 800bf3c:	4770      	bx	lr

0800bf3e <_Balloc>:
 800bf3e:	b570      	push	{r4, r5, r6, lr}
 800bf40:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bf42:	4604      	mov	r4, r0
 800bf44:	460e      	mov	r6, r1
 800bf46:	b93d      	cbnz	r5, 800bf58 <_Balloc+0x1a>
 800bf48:	2010      	movs	r0, #16
 800bf4a:	f7fd fbf3 	bl	8009734 <malloc>
 800bf4e:	6260      	str	r0, [r4, #36]	; 0x24
 800bf50:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bf54:	6005      	str	r5, [r0, #0]
 800bf56:	60c5      	str	r5, [r0, #12]
 800bf58:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800bf5a:	68eb      	ldr	r3, [r5, #12]
 800bf5c:	b183      	cbz	r3, 800bf80 <_Balloc+0x42>
 800bf5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf60:	68db      	ldr	r3, [r3, #12]
 800bf62:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bf66:	b9b8      	cbnz	r0, 800bf98 <_Balloc+0x5a>
 800bf68:	2101      	movs	r1, #1
 800bf6a:	fa01 f506 	lsl.w	r5, r1, r6
 800bf6e:	1d6a      	adds	r2, r5, #5
 800bf70:	0092      	lsls	r2, r2, #2
 800bf72:	4620      	mov	r0, r4
 800bf74:	f000 fabf 	bl	800c4f6 <_calloc_r>
 800bf78:	b160      	cbz	r0, 800bf94 <_Balloc+0x56>
 800bf7a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800bf7e:	e00e      	b.n	800bf9e <_Balloc+0x60>
 800bf80:	2221      	movs	r2, #33	; 0x21
 800bf82:	2104      	movs	r1, #4
 800bf84:	4620      	mov	r0, r4
 800bf86:	f000 fab6 	bl	800c4f6 <_calloc_r>
 800bf8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf8c:	60e8      	str	r0, [r5, #12]
 800bf8e:	68db      	ldr	r3, [r3, #12]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d1e4      	bne.n	800bf5e <_Balloc+0x20>
 800bf94:	2000      	movs	r0, #0
 800bf96:	bd70      	pop	{r4, r5, r6, pc}
 800bf98:	6802      	ldr	r2, [r0, #0]
 800bf9a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bfa4:	e7f7      	b.n	800bf96 <_Balloc+0x58>

0800bfa6 <_Bfree>:
 800bfa6:	b570      	push	{r4, r5, r6, lr}
 800bfa8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800bfaa:	4606      	mov	r6, r0
 800bfac:	460d      	mov	r5, r1
 800bfae:	b93c      	cbnz	r4, 800bfc0 <_Bfree+0x1a>
 800bfb0:	2010      	movs	r0, #16
 800bfb2:	f7fd fbbf 	bl	8009734 <malloc>
 800bfb6:	6270      	str	r0, [r6, #36]	; 0x24
 800bfb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bfbc:	6004      	str	r4, [r0, #0]
 800bfbe:	60c4      	str	r4, [r0, #12]
 800bfc0:	b13d      	cbz	r5, 800bfd2 <_Bfree+0x2c>
 800bfc2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bfc4:	686a      	ldr	r2, [r5, #4]
 800bfc6:	68db      	ldr	r3, [r3, #12]
 800bfc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bfcc:	6029      	str	r1, [r5, #0]
 800bfce:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800bfd2:	bd70      	pop	{r4, r5, r6, pc}

0800bfd4 <__multadd>:
 800bfd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfd8:	461f      	mov	r7, r3
 800bfda:	4606      	mov	r6, r0
 800bfdc:	460c      	mov	r4, r1
 800bfde:	2300      	movs	r3, #0
 800bfe0:	690d      	ldr	r5, [r1, #16]
 800bfe2:	f101 0c14 	add.w	ip, r1, #20
 800bfe6:	f8dc 0000 	ldr.w	r0, [ip]
 800bfea:	3301      	adds	r3, #1
 800bfec:	b281      	uxth	r1, r0
 800bfee:	fb02 7101 	mla	r1, r2, r1, r7
 800bff2:	0c00      	lsrs	r0, r0, #16
 800bff4:	0c0f      	lsrs	r7, r1, #16
 800bff6:	fb02 7000 	mla	r0, r2, r0, r7
 800bffa:	b289      	uxth	r1, r1
 800bffc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c000:	429d      	cmp	r5, r3
 800c002:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c006:	f84c 1b04 	str.w	r1, [ip], #4
 800c00a:	dcec      	bgt.n	800bfe6 <__multadd+0x12>
 800c00c:	b1d7      	cbz	r7, 800c044 <__multadd+0x70>
 800c00e:	68a3      	ldr	r3, [r4, #8]
 800c010:	42ab      	cmp	r3, r5
 800c012:	dc12      	bgt.n	800c03a <__multadd+0x66>
 800c014:	6861      	ldr	r1, [r4, #4]
 800c016:	4630      	mov	r0, r6
 800c018:	3101      	adds	r1, #1
 800c01a:	f7ff ff90 	bl	800bf3e <_Balloc>
 800c01e:	4680      	mov	r8, r0
 800c020:	6922      	ldr	r2, [r4, #16]
 800c022:	f104 010c 	add.w	r1, r4, #12
 800c026:	3202      	adds	r2, #2
 800c028:	0092      	lsls	r2, r2, #2
 800c02a:	300c      	adds	r0, #12
 800c02c:	f7ff ff7a 	bl	800bf24 <memcpy>
 800c030:	4621      	mov	r1, r4
 800c032:	4630      	mov	r0, r6
 800c034:	f7ff ffb7 	bl	800bfa6 <_Bfree>
 800c038:	4644      	mov	r4, r8
 800c03a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c03e:	3501      	adds	r5, #1
 800c040:	615f      	str	r7, [r3, #20]
 800c042:	6125      	str	r5, [r4, #16]
 800c044:	4620      	mov	r0, r4
 800c046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c04a <__hi0bits>:
 800c04a:	0c02      	lsrs	r2, r0, #16
 800c04c:	0412      	lsls	r2, r2, #16
 800c04e:	4603      	mov	r3, r0
 800c050:	b9b2      	cbnz	r2, 800c080 <__hi0bits+0x36>
 800c052:	0403      	lsls	r3, r0, #16
 800c054:	2010      	movs	r0, #16
 800c056:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c05a:	bf04      	itt	eq
 800c05c:	021b      	lsleq	r3, r3, #8
 800c05e:	3008      	addeq	r0, #8
 800c060:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c064:	bf04      	itt	eq
 800c066:	011b      	lsleq	r3, r3, #4
 800c068:	3004      	addeq	r0, #4
 800c06a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c06e:	bf04      	itt	eq
 800c070:	009b      	lsleq	r3, r3, #2
 800c072:	3002      	addeq	r0, #2
 800c074:	2b00      	cmp	r3, #0
 800c076:	db06      	blt.n	800c086 <__hi0bits+0x3c>
 800c078:	005b      	lsls	r3, r3, #1
 800c07a:	d503      	bpl.n	800c084 <__hi0bits+0x3a>
 800c07c:	3001      	adds	r0, #1
 800c07e:	4770      	bx	lr
 800c080:	2000      	movs	r0, #0
 800c082:	e7e8      	b.n	800c056 <__hi0bits+0xc>
 800c084:	2020      	movs	r0, #32
 800c086:	4770      	bx	lr

0800c088 <__lo0bits>:
 800c088:	6803      	ldr	r3, [r0, #0]
 800c08a:	4601      	mov	r1, r0
 800c08c:	f013 0207 	ands.w	r2, r3, #7
 800c090:	d00b      	beq.n	800c0aa <__lo0bits+0x22>
 800c092:	07da      	lsls	r2, r3, #31
 800c094:	d423      	bmi.n	800c0de <__lo0bits+0x56>
 800c096:	0798      	lsls	r0, r3, #30
 800c098:	bf49      	itett	mi
 800c09a:	085b      	lsrmi	r3, r3, #1
 800c09c:	089b      	lsrpl	r3, r3, #2
 800c09e:	2001      	movmi	r0, #1
 800c0a0:	600b      	strmi	r3, [r1, #0]
 800c0a2:	bf5c      	itt	pl
 800c0a4:	600b      	strpl	r3, [r1, #0]
 800c0a6:	2002      	movpl	r0, #2
 800c0a8:	4770      	bx	lr
 800c0aa:	b298      	uxth	r0, r3
 800c0ac:	b9a8      	cbnz	r0, 800c0da <__lo0bits+0x52>
 800c0ae:	2010      	movs	r0, #16
 800c0b0:	0c1b      	lsrs	r3, r3, #16
 800c0b2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c0b6:	bf04      	itt	eq
 800c0b8:	0a1b      	lsreq	r3, r3, #8
 800c0ba:	3008      	addeq	r0, #8
 800c0bc:	071a      	lsls	r2, r3, #28
 800c0be:	bf04      	itt	eq
 800c0c0:	091b      	lsreq	r3, r3, #4
 800c0c2:	3004      	addeq	r0, #4
 800c0c4:	079a      	lsls	r2, r3, #30
 800c0c6:	bf04      	itt	eq
 800c0c8:	089b      	lsreq	r3, r3, #2
 800c0ca:	3002      	addeq	r0, #2
 800c0cc:	07da      	lsls	r2, r3, #31
 800c0ce:	d402      	bmi.n	800c0d6 <__lo0bits+0x4e>
 800c0d0:	085b      	lsrs	r3, r3, #1
 800c0d2:	d006      	beq.n	800c0e2 <__lo0bits+0x5a>
 800c0d4:	3001      	adds	r0, #1
 800c0d6:	600b      	str	r3, [r1, #0]
 800c0d8:	4770      	bx	lr
 800c0da:	4610      	mov	r0, r2
 800c0dc:	e7e9      	b.n	800c0b2 <__lo0bits+0x2a>
 800c0de:	2000      	movs	r0, #0
 800c0e0:	4770      	bx	lr
 800c0e2:	2020      	movs	r0, #32
 800c0e4:	4770      	bx	lr

0800c0e6 <__i2b>:
 800c0e6:	b510      	push	{r4, lr}
 800c0e8:	460c      	mov	r4, r1
 800c0ea:	2101      	movs	r1, #1
 800c0ec:	f7ff ff27 	bl	800bf3e <_Balloc>
 800c0f0:	2201      	movs	r2, #1
 800c0f2:	6144      	str	r4, [r0, #20]
 800c0f4:	6102      	str	r2, [r0, #16]
 800c0f6:	bd10      	pop	{r4, pc}

0800c0f8 <__multiply>:
 800c0f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0fc:	4614      	mov	r4, r2
 800c0fe:	690a      	ldr	r2, [r1, #16]
 800c100:	6923      	ldr	r3, [r4, #16]
 800c102:	4688      	mov	r8, r1
 800c104:	429a      	cmp	r2, r3
 800c106:	bfbe      	ittt	lt
 800c108:	460b      	movlt	r3, r1
 800c10a:	46a0      	movlt	r8, r4
 800c10c:	461c      	movlt	r4, r3
 800c10e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c112:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c116:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c11a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c11e:	eb07 0609 	add.w	r6, r7, r9
 800c122:	42b3      	cmp	r3, r6
 800c124:	bfb8      	it	lt
 800c126:	3101      	addlt	r1, #1
 800c128:	f7ff ff09 	bl	800bf3e <_Balloc>
 800c12c:	f100 0514 	add.w	r5, r0, #20
 800c130:	462b      	mov	r3, r5
 800c132:	2200      	movs	r2, #0
 800c134:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c138:	4573      	cmp	r3, lr
 800c13a:	d316      	bcc.n	800c16a <__multiply+0x72>
 800c13c:	f104 0214 	add.w	r2, r4, #20
 800c140:	f108 0114 	add.w	r1, r8, #20
 800c144:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c148:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c14c:	9300      	str	r3, [sp, #0]
 800c14e:	9b00      	ldr	r3, [sp, #0]
 800c150:	9201      	str	r2, [sp, #4]
 800c152:	4293      	cmp	r3, r2
 800c154:	d80c      	bhi.n	800c170 <__multiply+0x78>
 800c156:	2e00      	cmp	r6, #0
 800c158:	dd03      	ble.n	800c162 <__multiply+0x6a>
 800c15a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d05d      	beq.n	800c21e <__multiply+0x126>
 800c162:	6106      	str	r6, [r0, #16]
 800c164:	b003      	add	sp, #12
 800c166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c16a:	f843 2b04 	str.w	r2, [r3], #4
 800c16e:	e7e3      	b.n	800c138 <__multiply+0x40>
 800c170:	f8b2 b000 	ldrh.w	fp, [r2]
 800c174:	f1bb 0f00 	cmp.w	fp, #0
 800c178:	d023      	beq.n	800c1c2 <__multiply+0xca>
 800c17a:	4689      	mov	r9, r1
 800c17c:	46ac      	mov	ip, r5
 800c17e:	f04f 0800 	mov.w	r8, #0
 800c182:	f859 4b04 	ldr.w	r4, [r9], #4
 800c186:	f8dc a000 	ldr.w	sl, [ip]
 800c18a:	b2a3      	uxth	r3, r4
 800c18c:	fa1f fa8a 	uxth.w	sl, sl
 800c190:	fb0b a303 	mla	r3, fp, r3, sl
 800c194:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c198:	f8dc 4000 	ldr.w	r4, [ip]
 800c19c:	4443      	add	r3, r8
 800c19e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c1a2:	fb0b 840a 	mla	r4, fp, sl, r8
 800c1a6:	46e2      	mov	sl, ip
 800c1a8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c1ac:	b29b      	uxth	r3, r3
 800c1ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c1b2:	454f      	cmp	r7, r9
 800c1b4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c1b8:	f84a 3b04 	str.w	r3, [sl], #4
 800c1bc:	d82b      	bhi.n	800c216 <__multiply+0x11e>
 800c1be:	f8cc 8004 	str.w	r8, [ip, #4]
 800c1c2:	9b01      	ldr	r3, [sp, #4]
 800c1c4:	3204      	adds	r2, #4
 800c1c6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c1ca:	f1ba 0f00 	cmp.w	sl, #0
 800c1ce:	d020      	beq.n	800c212 <__multiply+0x11a>
 800c1d0:	4689      	mov	r9, r1
 800c1d2:	46a8      	mov	r8, r5
 800c1d4:	f04f 0b00 	mov.w	fp, #0
 800c1d8:	682b      	ldr	r3, [r5, #0]
 800c1da:	f8b9 c000 	ldrh.w	ip, [r9]
 800c1de:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c1e2:	b29b      	uxth	r3, r3
 800c1e4:	fb0a 440c 	mla	r4, sl, ip, r4
 800c1e8:	46c4      	mov	ip, r8
 800c1ea:	445c      	add	r4, fp
 800c1ec:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c1f0:	f84c 3b04 	str.w	r3, [ip], #4
 800c1f4:	f859 3b04 	ldr.w	r3, [r9], #4
 800c1f8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c1fc:	0c1b      	lsrs	r3, r3, #16
 800c1fe:	fb0a b303 	mla	r3, sl, r3, fp
 800c202:	454f      	cmp	r7, r9
 800c204:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c208:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c20c:	d805      	bhi.n	800c21a <__multiply+0x122>
 800c20e:	f8c8 3004 	str.w	r3, [r8, #4]
 800c212:	3504      	adds	r5, #4
 800c214:	e79b      	b.n	800c14e <__multiply+0x56>
 800c216:	46d4      	mov	ip, sl
 800c218:	e7b3      	b.n	800c182 <__multiply+0x8a>
 800c21a:	46e0      	mov	r8, ip
 800c21c:	e7dd      	b.n	800c1da <__multiply+0xe2>
 800c21e:	3e01      	subs	r6, #1
 800c220:	e799      	b.n	800c156 <__multiply+0x5e>
	...

0800c224 <__pow5mult>:
 800c224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c228:	4615      	mov	r5, r2
 800c22a:	f012 0203 	ands.w	r2, r2, #3
 800c22e:	4606      	mov	r6, r0
 800c230:	460f      	mov	r7, r1
 800c232:	d007      	beq.n	800c244 <__pow5mult+0x20>
 800c234:	4c21      	ldr	r4, [pc, #132]	; (800c2bc <__pow5mult+0x98>)
 800c236:	3a01      	subs	r2, #1
 800c238:	2300      	movs	r3, #0
 800c23a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c23e:	f7ff fec9 	bl	800bfd4 <__multadd>
 800c242:	4607      	mov	r7, r0
 800c244:	10ad      	asrs	r5, r5, #2
 800c246:	d035      	beq.n	800c2b4 <__pow5mult+0x90>
 800c248:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c24a:	b93c      	cbnz	r4, 800c25c <__pow5mult+0x38>
 800c24c:	2010      	movs	r0, #16
 800c24e:	f7fd fa71 	bl	8009734 <malloc>
 800c252:	6270      	str	r0, [r6, #36]	; 0x24
 800c254:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c258:	6004      	str	r4, [r0, #0]
 800c25a:	60c4      	str	r4, [r0, #12]
 800c25c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c260:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c264:	b94c      	cbnz	r4, 800c27a <__pow5mult+0x56>
 800c266:	f240 2171 	movw	r1, #625	; 0x271
 800c26a:	4630      	mov	r0, r6
 800c26c:	f7ff ff3b 	bl	800c0e6 <__i2b>
 800c270:	2300      	movs	r3, #0
 800c272:	4604      	mov	r4, r0
 800c274:	f8c8 0008 	str.w	r0, [r8, #8]
 800c278:	6003      	str	r3, [r0, #0]
 800c27a:	f04f 0800 	mov.w	r8, #0
 800c27e:	07eb      	lsls	r3, r5, #31
 800c280:	d50a      	bpl.n	800c298 <__pow5mult+0x74>
 800c282:	4639      	mov	r1, r7
 800c284:	4622      	mov	r2, r4
 800c286:	4630      	mov	r0, r6
 800c288:	f7ff ff36 	bl	800c0f8 <__multiply>
 800c28c:	4681      	mov	r9, r0
 800c28e:	4639      	mov	r1, r7
 800c290:	4630      	mov	r0, r6
 800c292:	f7ff fe88 	bl	800bfa6 <_Bfree>
 800c296:	464f      	mov	r7, r9
 800c298:	106d      	asrs	r5, r5, #1
 800c29a:	d00b      	beq.n	800c2b4 <__pow5mult+0x90>
 800c29c:	6820      	ldr	r0, [r4, #0]
 800c29e:	b938      	cbnz	r0, 800c2b0 <__pow5mult+0x8c>
 800c2a0:	4622      	mov	r2, r4
 800c2a2:	4621      	mov	r1, r4
 800c2a4:	4630      	mov	r0, r6
 800c2a6:	f7ff ff27 	bl	800c0f8 <__multiply>
 800c2aa:	6020      	str	r0, [r4, #0]
 800c2ac:	f8c0 8000 	str.w	r8, [r0]
 800c2b0:	4604      	mov	r4, r0
 800c2b2:	e7e4      	b.n	800c27e <__pow5mult+0x5a>
 800c2b4:	4638      	mov	r0, r7
 800c2b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2ba:	bf00      	nop
 800c2bc:	0800dca8 	.word	0x0800dca8

0800c2c0 <__lshift>:
 800c2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2c4:	460c      	mov	r4, r1
 800c2c6:	4607      	mov	r7, r0
 800c2c8:	4616      	mov	r6, r2
 800c2ca:	6923      	ldr	r3, [r4, #16]
 800c2cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c2d0:	eb0a 0903 	add.w	r9, sl, r3
 800c2d4:	6849      	ldr	r1, [r1, #4]
 800c2d6:	68a3      	ldr	r3, [r4, #8]
 800c2d8:	f109 0501 	add.w	r5, r9, #1
 800c2dc:	42ab      	cmp	r3, r5
 800c2de:	db32      	blt.n	800c346 <__lshift+0x86>
 800c2e0:	4638      	mov	r0, r7
 800c2e2:	f7ff fe2c 	bl	800bf3e <_Balloc>
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	4680      	mov	r8, r0
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	f100 0114 	add.w	r1, r0, #20
 800c2f0:	4553      	cmp	r3, sl
 800c2f2:	db2b      	blt.n	800c34c <__lshift+0x8c>
 800c2f4:	6920      	ldr	r0, [r4, #16]
 800c2f6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c2fa:	f104 0314 	add.w	r3, r4, #20
 800c2fe:	f016 021f 	ands.w	r2, r6, #31
 800c302:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c306:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c30a:	d025      	beq.n	800c358 <__lshift+0x98>
 800c30c:	2000      	movs	r0, #0
 800c30e:	f1c2 0e20 	rsb	lr, r2, #32
 800c312:	468a      	mov	sl, r1
 800c314:	681e      	ldr	r6, [r3, #0]
 800c316:	4096      	lsls	r6, r2
 800c318:	4330      	orrs	r0, r6
 800c31a:	f84a 0b04 	str.w	r0, [sl], #4
 800c31e:	f853 0b04 	ldr.w	r0, [r3], #4
 800c322:	459c      	cmp	ip, r3
 800c324:	fa20 f00e 	lsr.w	r0, r0, lr
 800c328:	d814      	bhi.n	800c354 <__lshift+0x94>
 800c32a:	6048      	str	r0, [r1, #4]
 800c32c:	b108      	cbz	r0, 800c332 <__lshift+0x72>
 800c32e:	f109 0502 	add.w	r5, r9, #2
 800c332:	3d01      	subs	r5, #1
 800c334:	4638      	mov	r0, r7
 800c336:	f8c8 5010 	str.w	r5, [r8, #16]
 800c33a:	4621      	mov	r1, r4
 800c33c:	f7ff fe33 	bl	800bfa6 <_Bfree>
 800c340:	4640      	mov	r0, r8
 800c342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c346:	3101      	adds	r1, #1
 800c348:	005b      	lsls	r3, r3, #1
 800c34a:	e7c7      	b.n	800c2dc <__lshift+0x1c>
 800c34c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c350:	3301      	adds	r3, #1
 800c352:	e7cd      	b.n	800c2f0 <__lshift+0x30>
 800c354:	4651      	mov	r1, sl
 800c356:	e7dc      	b.n	800c312 <__lshift+0x52>
 800c358:	3904      	subs	r1, #4
 800c35a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c35e:	459c      	cmp	ip, r3
 800c360:	f841 2f04 	str.w	r2, [r1, #4]!
 800c364:	d8f9      	bhi.n	800c35a <__lshift+0x9a>
 800c366:	e7e4      	b.n	800c332 <__lshift+0x72>

0800c368 <__mcmp>:
 800c368:	6903      	ldr	r3, [r0, #16]
 800c36a:	690a      	ldr	r2, [r1, #16]
 800c36c:	b530      	push	{r4, r5, lr}
 800c36e:	1a9b      	subs	r3, r3, r2
 800c370:	d10c      	bne.n	800c38c <__mcmp+0x24>
 800c372:	0092      	lsls	r2, r2, #2
 800c374:	3014      	adds	r0, #20
 800c376:	3114      	adds	r1, #20
 800c378:	1884      	adds	r4, r0, r2
 800c37a:	4411      	add	r1, r2
 800c37c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c380:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c384:	4295      	cmp	r5, r2
 800c386:	d003      	beq.n	800c390 <__mcmp+0x28>
 800c388:	d305      	bcc.n	800c396 <__mcmp+0x2e>
 800c38a:	2301      	movs	r3, #1
 800c38c:	4618      	mov	r0, r3
 800c38e:	bd30      	pop	{r4, r5, pc}
 800c390:	42a0      	cmp	r0, r4
 800c392:	d3f3      	bcc.n	800c37c <__mcmp+0x14>
 800c394:	e7fa      	b.n	800c38c <__mcmp+0x24>
 800c396:	f04f 33ff 	mov.w	r3, #4294967295
 800c39a:	e7f7      	b.n	800c38c <__mcmp+0x24>

0800c39c <__mdiff>:
 800c39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3a0:	460d      	mov	r5, r1
 800c3a2:	4607      	mov	r7, r0
 800c3a4:	4611      	mov	r1, r2
 800c3a6:	4628      	mov	r0, r5
 800c3a8:	4614      	mov	r4, r2
 800c3aa:	f7ff ffdd 	bl	800c368 <__mcmp>
 800c3ae:	1e06      	subs	r6, r0, #0
 800c3b0:	d108      	bne.n	800c3c4 <__mdiff+0x28>
 800c3b2:	4631      	mov	r1, r6
 800c3b4:	4638      	mov	r0, r7
 800c3b6:	f7ff fdc2 	bl	800bf3e <_Balloc>
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c3c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3c4:	bfa4      	itt	ge
 800c3c6:	4623      	movge	r3, r4
 800c3c8:	462c      	movge	r4, r5
 800c3ca:	4638      	mov	r0, r7
 800c3cc:	6861      	ldr	r1, [r4, #4]
 800c3ce:	bfa6      	itte	ge
 800c3d0:	461d      	movge	r5, r3
 800c3d2:	2600      	movge	r6, #0
 800c3d4:	2601      	movlt	r6, #1
 800c3d6:	f7ff fdb2 	bl	800bf3e <_Balloc>
 800c3da:	f04f 0e00 	mov.w	lr, #0
 800c3de:	60c6      	str	r6, [r0, #12]
 800c3e0:	692b      	ldr	r3, [r5, #16]
 800c3e2:	6926      	ldr	r6, [r4, #16]
 800c3e4:	f104 0214 	add.w	r2, r4, #20
 800c3e8:	f105 0914 	add.w	r9, r5, #20
 800c3ec:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c3f0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c3f4:	f100 0114 	add.w	r1, r0, #20
 800c3f8:	f852 ab04 	ldr.w	sl, [r2], #4
 800c3fc:	f859 5b04 	ldr.w	r5, [r9], #4
 800c400:	fa1f f38a 	uxth.w	r3, sl
 800c404:	4473      	add	r3, lr
 800c406:	b2ac      	uxth	r4, r5
 800c408:	1b1b      	subs	r3, r3, r4
 800c40a:	0c2c      	lsrs	r4, r5, #16
 800c40c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800c410:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800c414:	b29b      	uxth	r3, r3
 800c416:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800c41a:	45c8      	cmp	r8, r9
 800c41c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800c420:	4694      	mov	ip, r2
 800c422:	f841 4b04 	str.w	r4, [r1], #4
 800c426:	d8e7      	bhi.n	800c3f8 <__mdiff+0x5c>
 800c428:	45bc      	cmp	ip, r7
 800c42a:	d304      	bcc.n	800c436 <__mdiff+0x9a>
 800c42c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c430:	b183      	cbz	r3, 800c454 <__mdiff+0xb8>
 800c432:	6106      	str	r6, [r0, #16]
 800c434:	e7c4      	b.n	800c3c0 <__mdiff+0x24>
 800c436:	f85c 4b04 	ldr.w	r4, [ip], #4
 800c43a:	b2a2      	uxth	r2, r4
 800c43c:	4472      	add	r2, lr
 800c43e:	1413      	asrs	r3, r2, #16
 800c440:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c444:	b292      	uxth	r2, r2
 800c446:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c44a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c44e:	f841 2b04 	str.w	r2, [r1], #4
 800c452:	e7e9      	b.n	800c428 <__mdiff+0x8c>
 800c454:	3e01      	subs	r6, #1
 800c456:	e7e9      	b.n	800c42c <__mdiff+0x90>

0800c458 <__d2b>:
 800c458:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c45c:	461c      	mov	r4, r3
 800c45e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800c462:	2101      	movs	r1, #1
 800c464:	4690      	mov	r8, r2
 800c466:	f7ff fd6a 	bl	800bf3e <_Balloc>
 800c46a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800c46e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800c472:	4607      	mov	r7, r0
 800c474:	bb34      	cbnz	r4, 800c4c4 <__d2b+0x6c>
 800c476:	9201      	str	r2, [sp, #4]
 800c478:	f1b8 0200 	subs.w	r2, r8, #0
 800c47c:	d027      	beq.n	800c4ce <__d2b+0x76>
 800c47e:	a802      	add	r0, sp, #8
 800c480:	f840 2d08 	str.w	r2, [r0, #-8]!
 800c484:	f7ff fe00 	bl	800c088 <__lo0bits>
 800c488:	9900      	ldr	r1, [sp, #0]
 800c48a:	b1f0      	cbz	r0, 800c4ca <__d2b+0x72>
 800c48c:	9a01      	ldr	r2, [sp, #4]
 800c48e:	f1c0 0320 	rsb	r3, r0, #32
 800c492:	fa02 f303 	lsl.w	r3, r2, r3
 800c496:	430b      	orrs	r3, r1
 800c498:	40c2      	lsrs	r2, r0
 800c49a:	617b      	str	r3, [r7, #20]
 800c49c:	9201      	str	r2, [sp, #4]
 800c49e:	9b01      	ldr	r3, [sp, #4]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	bf14      	ite	ne
 800c4a4:	2102      	movne	r1, #2
 800c4a6:	2101      	moveq	r1, #1
 800c4a8:	61bb      	str	r3, [r7, #24]
 800c4aa:	6139      	str	r1, [r7, #16]
 800c4ac:	b1c4      	cbz	r4, 800c4e0 <__d2b+0x88>
 800c4ae:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c4b2:	4404      	add	r4, r0
 800c4b4:	6034      	str	r4, [r6, #0]
 800c4b6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c4ba:	6028      	str	r0, [r5, #0]
 800c4bc:	4638      	mov	r0, r7
 800c4be:	b002      	add	sp, #8
 800c4c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4c4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c4c8:	e7d5      	b.n	800c476 <__d2b+0x1e>
 800c4ca:	6179      	str	r1, [r7, #20]
 800c4cc:	e7e7      	b.n	800c49e <__d2b+0x46>
 800c4ce:	a801      	add	r0, sp, #4
 800c4d0:	f7ff fdda 	bl	800c088 <__lo0bits>
 800c4d4:	2101      	movs	r1, #1
 800c4d6:	9b01      	ldr	r3, [sp, #4]
 800c4d8:	6139      	str	r1, [r7, #16]
 800c4da:	617b      	str	r3, [r7, #20]
 800c4dc:	3020      	adds	r0, #32
 800c4de:	e7e5      	b.n	800c4ac <__d2b+0x54>
 800c4e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c4e4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c4e8:	6030      	str	r0, [r6, #0]
 800c4ea:	6918      	ldr	r0, [r3, #16]
 800c4ec:	f7ff fdad 	bl	800c04a <__hi0bits>
 800c4f0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c4f4:	e7e1      	b.n	800c4ba <__d2b+0x62>

0800c4f6 <_calloc_r>:
 800c4f6:	b538      	push	{r3, r4, r5, lr}
 800c4f8:	fb02 f401 	mul.w	r4, r2, r1
 800c4fc:	4621      	mov	r1, r4
 800c4fe:	f7fd fc11 	bl	8009d24 <_malloc_r>
 800c502:	4605      	mov	r5, r0
 800c504:	b118      	cbz	r0, 800c50e <_calloc_r+0x18>
 800c506:	4622      	mov	r2, r4
 800c508:	2100      	movs	r1, #0
 800c50a:	f7fd f923 	bl	8009754 <memset>
 800c50e:	4628      	mov	r0, r5
 800c510:	bd38      	pop	{r3, r4, r5, pc}

0800c512 <__ssputs_r>:
 800c512:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c516:	688e      	ldr	r6, [r1, #8]
 800c518:	4682      	mov	sl, r0
 800c51a:	429e      	cmp	r6, r3
 800c51c:	460c      	mov	r4, r1
 800c51e:	4690      	mov	r8, r2
 800c520:	4699      	mov	r9, r3
 800c522:	d837      	bhi.n	800c594 <__ssputs_r+0x82>
 800c524:	898a      	ldrh	r2, [r1, #12]
 800c526:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c52a:	d031      	beq.n	800c590 <__ssputs_r+0x7e>
 800c52c:	2302      	movs	r3, #2
 800c52e:	6825      	ldr	r5, [r4, #0]
 800c530:	6909      	ldr	r1, [r1, #16]
 800c532:	1a6f      	subs	r7, r5, r1
 800c534:	6965      	ldr	r5, [r4, #20]
 800c536:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c53a:	fb95 f5f3 	sdiv	r5, r5, r3
 800c53e:	f109 0301 	add.w	r3, r9, #1
 800c542:	443b      	add	r3, r7
 800c544:	429d      	cmp	r5, r3
 800c546:	bf38      	it	cc
 800c548:	461d      	movcc	r5, r3
 800c54a:	0553      	lsls	r3, r2, #21
 800c54c:	d530      	bpl.n	800c5b0 <__ssputs_r+0x9e>
 800c54e:	4629      	mov	r1, r5
 800c550:	f7fd fbe8 	bl	8009d24 <_malloc_r>
 800c554:	4606      	mov	r6, r0
 800c556:	b950      	cbnz	r0, 800c56e <__ssputs_r+0x5c>
 800c558:	230c      	movs	r3, #12
 800c55a:	f04f 30ff 	mov.w	r0, #4294967295
 800c55e:	f8ca 3000 	str.w	r3, [sl]
 800c562:	89a3      	ldrh	r3, [r4, #12]
 800c564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c568:	81a3      	strh	r3, [r4, #12]
 800c56a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c56e:	463a      	mov	r2, r7
 800c570:	6921      	ldr	r1, [r4, #16]
 800c572:	f7ff fcd7 	bl	800bf24 <memcpy>
 800c576:	89a3      	ldrh	r3, [r4, #12]
 800c578:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c57c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c580:	81a3      	strh	r3, [r4, #12]
 800c582:	6126      	str	r6, [r4, #16]
 800c584:	443e      	add	r6, r7
 800c586:	6026      	str	r6, [r4, #0]
 800c588:	464e      	mov	r6, r9
 800c58a:	6165      	str	r5, [r4, #20]
 800c58c:	1bed      	subs	r5, r5, r7
 800c58e:	60a5      	str	r5, [r4, #8]
 800c590:	454e      	cmp	r6, r9
 800c592:	d900      	bls.n	800c596 <__ssputs_r+0x84>
 800c594:	464e      	mov	r6, r9
 800c596:	4632      	mov	r2, r6
 800c598:	4641      	mov	r1, r8
 800c59a:	6820      	ldr	r0, [r4, #0]
 800c59c:	f000 fc28 	bl	800cdf0 <memmove>
 800c5a0:	68a3      	ldr	r3, [r4, #8]
 800c5a2:	2000      	movs	r0, #0
 800c5a4:	1b9b      	subs	r3, r3, r6
 800c5a6:	60a3      	str	r3, [r4, #8]
 800c5a8:	6823      	ldr	r3, [r4, #0]
 800c5aa:	441e      	add	r6, r3
 800c5ac:	6026      	str	r6, [r4, #0]
 800c5ae:	e7dc      	b.n	800c56a <__ssputs_r+0x58>
 800c5b0:	462a      	mov	r2, r5
 800c5b2:	f000 fc36 	bl	800ce22 <_realloc_r>
 800c5b6:	4606      	mov	r6, r0
 800c5b8:	2800      	cmp	r0, #0
 800c5ba:	d1e2      	bne.n	800c582 <__ssputs_r+0x70>
 800c5bc:	6921      	ldr	r1, [r4, #16]
 800c5be:	4650      	mov	r0, sl
 800c5c0:	f7fd fb64 	bl	8009c8c <_free_r>
 800c5c4:	e7c8      	b.n	800c558 <__ssputs_r+0x46>
	...

0800c5c8 <_svfiprintf_r>:
 800c5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5cc:	461d      	mov	r5, r3
 800c5ce:	898b      	ldrh	r3, [r1, #12]
 800c5d0:	b09d      	sub	sp, #116	; 0x74
 800c5d2:	061f      	lsls	r7, r3, #24
 800c5d4:	4680      	mov	r8, r0
 800c5d6:	460c      	mov	r4, r1
 800c5d8:	4616      	mov	r6, r2
 800c5da:	d50f      	bpl.n	800c5fc <_svfiprintf_r+0x34>
 800c5dc:	690b      	ldr	r3, [r1, #16]
 800c5de:	b96b      	cbnz	r3, 800c5fc <_svfiprintf_r+0x34>
 800c5e0:	2140      	movs	r1, #64	; 0x40
 800c5e2:	f7fd fb9f 	bl	8009d24 <_malloc_r>
 800c5e6:	6020      	str	r0, [r4, #0]
 800c5e8:	6120      	str	r0, [r4, #16]
 800c5ea:	b928      	cbnz	r0, 800c5f8 <_svfiprintf_r+0x30>
 800c5ec:	230c      	movs	r3, #12
 800c5ee:	f8c8 3000 	str.w	r3, [r8]
 800c5f2:	f04f 30ff 	mov.w	r0, #4294967295
 800c5f6:	e0c8      	b.n	800c78a <_svfiprintf_r+0x1c2>
 800c5f8:	2340      	movs	r3, #64	; 0x40
 800c5fa:	6163      	str	r3, [r4, #20]
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	9309      	str	r3, [sp, #36]	; 0x24
 800c600:	2320      	movs	r3, #32
 800c602:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c606:	2330      	movs	r3, #48	; 0x30
 800c608:	f04f 0b01 	mov.w	fp, #1
 800c60c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c610:	9503      	str	r5, [sp, #12]
 800c612:	4637      	mov	r7, r6
 800c614:	463d      	mov	r5, r7
 800c616:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c61a:	b10b      	cbz	r3, 800c620 <_svfiprintf_r+0x58>
 800c61c:	2b25      	cmp	r3, #37	; 0x25
 800c61e:	d13e      	bne.n	800c69e <_svfiprintf_r+0xd6>
 800c620:	ebb7 0a06 	subs.w	sl, r7, r6
 800c624:	d00b      	beq.n	800c63e <_svfiprintf_r+0x76>
 800c626:	4653      	mov	r3, sl
 800c628:	4632      	mov	r2, r6
 800c62a:	4621      	mov	r1, r4
 800c62c:	4640      	mov	r0, r8
 800c62e:	f7ff ff70 	bl	800c512 <__ssputs_r>
 800c632:	3001      	adds	r0, #1
 800c634:	f000 80a4 	beq.w	800c780 <_svfiprintf_r+0x1b8>
 800c638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c63a:	4453      	add	r3, sl
 800c63c:	9309      	str	r3, [sp, #36]	; 0x24
 800c63e:	783b      	ldrb	r3, [r7, #0]
 800c640:	2b00      	cmp	r3, #0
 800c642:	f000 809d 	beq.w	800c780 <_svfiprintf_r+0x1b8>
 800c646:	2300      	movs	r3, #0
 800c648:	f04f 32ff 	mov.w	r2, #4294967295
 800c64c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c650:	9304      	str	r3, [sp, #16]
 800c652:	9307      	str	r3, [sp, #28]
 800c654:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c658:	931a      	str	r3, [sp, #104]	; 0x68
 800c65a:	462f      	mov	r7, r5
 800c65c:	2205      	movs	r2, #5
 800c65e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c662:	4850      	ldr	r0, [pc, #320]	; (800c7a4 <_svfiprintf_r+0x1dc>)
 800c664:	f7ff fc50 	bl	800bf08 <memchr>
 800c668:	9b04      	ldr	r3, [sp, #16]
 800c66a:	b9d0      	cbnz	r0, 800c6a2 <_svfiprintf_r+0xda>
 800c66c:	06d9      	lsls	r1, r3, #27
 800c66e:	bf44      	itt	mi
 800c670:	2220      	movmi	r2, #32
 800c672:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c676:	071a      	lsls	r2, r3, #28
 800c678:	bf44      	itt	mi
 800c67a:	222b      	movmi	r2, #43	; 0x2b
 800c67c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c680:	782a      	ldrb	r2, [r5, #0]
 800c682:	2a2a      	cmp	r2, #42	; 0x2a
 800c684:	d015      	beq.n	800c6b2 <_svfiprintf_r+0xea>
 800c686:	462f      	mov	r7, r5
 800c688:	2000      	movs	r0, #0
 800c68a:	250a      	movs	r5, #10
 800c68c:	9a07      	ldr	r2, [sp, #28]
 800c68e:	4639      	mov	r1, r7
 800c690:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c694:	3b30      	subs	r3, #48	; 0x30
 800c696:	2b09      	cmp	r3, #9
 800c698:	d94d      	bls.n	800c736 <_svfiprintf_r+0x16e>
 800c69a:	b1b8      	cbz	r0, 800c6cc <_svfiprintf_r+0x104>
 800c69c:	e00f      	b.n	800c6be <_svfiprintf_r+0xf6>
 800c69e:	462f      	mov	r7, r5
 800c6a0:	e7b8      	b.n	800c614 <_svfiprintf_r+0x4c>
 800c6a2:	4a40      	ldr	r2, [pc, #256]	; (800c7a4 <_svfiprintf_r+0x1dc>)
 800c6a4:	463d      	mov	r5, r7
 800c6a6:	1a80      	subs	r0, r0, r2
 800c6a8:	fa0b f000 	lsl.w	r0, fp, r0
 800c6ac:	4318      	orrs	r0, r3
 800c6ae:	9004      	str	r0, [sp, #16]
 800c6b0:	e7d3      	b.n	800c65a <_svfiprintf_r+0x92>
 800c6b2:	9a03      	ldr	r2, [sp, #12]
 800c6b4:	1d11      	adds	r1, r2, #4
 800c6b6:	6812      	ldr	r2, [r2, #0]
 800c6b8:	9103      	str	r1, [sp, #12]
 800c6ba:	2a00      	cmp	r2, #0
 800c6bc:	db01      	blt.n	800c6c2 <_svfiprintf_r+0xfa>
 800c6be:	9207      	str	r2, [sp, #28]
 800c6c0:	e004      	b.n	800c6cc <_svfiprintf_r+0x104>
 800c6c2:	4252      	negs	r2, r2
 800c6c4:	f043 0302 	orr.w	r3, r3, #2
 800c6c8:	9207      	str	r2, [sp, #28]
 800c6ca:	9304      	str	r3, [sp, #16]
 800c6cc:	783b      	ldrb	r3, [r7, #0]
 800c6ce:	2b2e      	cmp	r3, #46	; 0x2e
 800c6d0:	d10c      	bne.n	800c6ec <_svfiprintf_r+0x124>
 800c6d2:	787b      	ldrb	r3, [r7, #1]
 800c6d4:	2b2a      	cmp	r3, #42	; 0x2a
 800c6d6:	d133      	bne.n	800c740 <_svfiprintf_r+0x178>
 800c6d8:	9b03      	ldr	r3, [sp, #12]
 800c6da:	3702      	adds	r7, #2
 800c6dc:	1d1a      	adds	r2, r3, #4
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	9203      	str	r2, [sp, #12]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	bfb8      	it	lt
 800c6e6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c6ea:	9305      	str	r3, [sp, #20]
 800c6ec:	4d2e      	ldr	r5, [pc, #184]	; (800c7a8 <_svfiprintf_r+0x1e0>)
 800c6ee:	2203      	movs	r2, #3
 800c6f0:	7839      	ldrb	r1, [r7, #0]
 800c6f2:	4628      	mov	r0, r5
 800c6f4:	f7ff fc08 	bl	800bf08 <memchr>
 800c6f8:	b138      	cbz	r0, 800c70a <_svfiprintf_r+0x142>
 800c6fa:	2340      	movs	r3, #64	; 0x40
 800c6fc:	1b40      	subs	r0, r0, r5
 800c6fe:	fa03 f000 	lsl.w	r0, r3, r0
 800c702:	9b04      	ldr	r3, [sp, #16]
 800c704:	3701      	adds	r7, #1
 800c706:	4303      	orrs	r3, r0
 800c708:	9304      	str	r3, [sp, #16]
 800c70a:	7839      	ldrb	r1, [r7, #0]
 800c70c:	2206      	movs	r2, #6
 800c70e:	4827      	ldr	r0, [pc, #156]	; (800c7ac <_svfiprintf_r+0x1e4>)
 800c710:	1c7e      	adds	r6, r7, #1
 800c712:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c716:	f7ff fbf7 	bl	800bf08 <memchr>
 800c71a:	2800      	cmp	r0, #0
 800c71c:	d038      	beq.n	800c790 <_svfiprintf_r+0x1c8>
 800c71e:	4b24      	ldr	r3, [pc, #144]	; (800c7b0 <_svfiprintf_r+0x1e8>)
 800c720:	bb13      	cbnz	r3, 800c768 <_svfiprintf_r+0x1a0>
 800c722:	9b03      	ldr	r3, [sp, #12]
 800c724:	3307      	adds	r3, #7
 800c726:	f023 0307 	bic.w	r3, r3, #7
 800c72a:	3308      	adds	r3, #8
 800c72c:	9303      	str	r3, [sp, #12]
 800c72e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c730:	444b      	add	r3, r9
 800c732:	9309      	str	r3, [sp, #36]	; 0x24
 800c734:	e76d      	b.n	800c612 <_svfiprintf_r+0x4a>
 800c736:	fb05 3202 	mla	r2, r5, r2, r3
 800c73a:	2001      	movs	r0, #1
 800c73c:	460f      	mov	r7, r1
 800c73e:	e7a6      	b.n	800c68e <_svfiprintf_r+0xc6>
 800c740:	2300      	movs	r3, #0
 800c742:	250a      	movs	r5, #10
 800c744:	4619      	mov	r1, r3
 800c746:	3701      	adds	r7, #1
 800c748:	9305      	str	r3, [sp, #20]
 800c74a:	4638      	mov	r0, r7
 800c74c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c750:	3a30      	subs	r2, #48	; 0x30
 800c752:	2a09      	cmp	r2, #9
 800c754:	d903      	bls.n	800c75e <_svfiprintf_r+0x196>
 800c756:	2b00      	cmp	r3, #0
 800c758:	d0c8      	beq.n	800c6ec <_svfiprintf_r+0x124>
 800c75a:	9105      	str	r1, [sp, #20]
 800c75c:	e7c6      	b.n	800c6ec <_svfiprintf_r+0x124>
 800c75e:	fb05 2101 	mla	r1, r5, r1, r2
 800c762:	2301      	movs	r3, #1
 800c764:	4607      	mov	r7, r0
 800c766:	e7f0      	b.n	800c74a <_svfiprintf_r+0x182>
 800c768:	ab03      	add	r3, sp, #12
 800c76a:	9300      	str	r3, [sp, #0]
 800c76c:	4622      	mov	r2, r4
 800c76e:	4b11      	ldr	r3, [pc, #68]	; (800c7b4 <_svfiprintf_r+0x1ec>)
 800c770:	a904      	add	r1, sp, #16
 800c772:	4640      	mov	r0, r8
 800c774:	f7fd fbc2 	bl	8009efc <_printf_float>
 800c778:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c77c:	4681      	mov	r9, r0
 800c77e:	d1d6      	bne.n	800c72e <_svfiprintf_r+0x166>
 800c780:	89a3      	ldrh	r3, [r4, #12]
 800c782:	065b      	lsls	r3, r3, #25
 800c784:	f53f af35 	bmi.w	800c5f2 <_svfiprintf_r+0x2a>
 800c788:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c78a:	b01d      	add	sp, #116	; 0x74
 800c78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c790:	ab03      	add	r3, sp, #12
 800c792:	9300      	str	r3, [sp, #0]
 800c794:	4622      	mov	r2, r4
 800c796:	4b07      	ldr	r3, [pc, #28]	; (800c7b4 <_svfiprintf_r+0x1ec>)
 800c798:	a904      	add	r1, sp, #16
 800c79a:	4640      	mov	r0, r8
 800c79c:	f7fd fe5a 	bl	800a454 <_printf_i>
 800c7a0:	e7ea      	b.n	800c778 <_svfiprintf_r+0x1b0>
 800c7a2:	bf00      	nop
 800c7a4:	0800dcb4 	.word	0x0800dcb4
 800c7a8:	0800dcba 	.word	0x0800dcba
 800c7ac:	0800dcbe 	.word	0x0800dcbe
 800c7b0:	08009efd 	.word	0x08009efd
 800c7b4:	0800c513 	.word	0x0800c513

0800c7b8 <__sfputc_r>:
 800c7b8:	6893      	ldr	r3, [r2, #8]
 800c7ba:	b410      	push	{r4}
 800c7bc:	3b01      	subs	r3, #1
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	6093      	str	r3, [r2, #8]
 800c7c2:	da07      	bge.n	800c7d4 <__sfputc_r+0x1c>
 800c7c4:	6994      	ldr	r4, [r2, #24]
 800c7c6:	42a3      	cmp	r3, r4
 800c7c8:	db01      	blt.n	800c7ce <__sfputc_r+0x16>
 800c7ca:	290a      	cmp	r1, #10
 800c7cc:	d102      	bne.n	800c7d4 <__sfputc_r+0x1c>
 800c7ce:	bc10      	pop	{r4}
 800c7d0:	f7fe ba50 	b.w	800ac74 <__swbuf_r>
 800c7d4:	6813      	ldr	r3, [r2, #0]
 800c7d6:	1c58      	adds	r0, r3, #1
 800c7d8:	6010      	str	r0, [r2, #0]
 800c7da:	7019      	strb	r1, [r3, #0]
 800c7dc:	4608      	mov	r0, r1
 800c7de:	bc10      	pop	{r4}
 800c7e0:	4770      	bx	lr

0800c7e2 <__sfputs_r>:
 800c7e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7e4:	4606      	mov	r6, r0
 800c7e6:	460f      	mov	r7, r1
 800c7e8:	4614      	mov	r4, r2
 800c7ea:	18d5      	adds	r5, r2, r3
 800c7ec:	42ac      	cmp	r4, r5
 800c7ee:	d101      	bne.n	800c7f4 <__sfputs_r+0x12>
 800c7f0:	2000      	movs	r0, #0
 800c7f2:	e007      	b.n	800c804 <__sfputs_r+0x22>
 800c7f4:	463a      	mov	r2, r7
 800c7f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7fa:	4630      	mov	r0, r6
 800c7fc:	f7ff ffdc 	bl	800c7b8 <__sfputc_r>
 800c800:	1c43      	adds	r3, r0, #1
 800c802:	d1f3      	bne.n	800c7ec <__sfputs_r+0xa>
 800c804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c808 <_vfiprintf_r>:
 800c808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c80c:	460c      	mov	r4, r1
 800c80e:	b09d      	sub	sp, #116	; 0x74
 800c810:	4617      	mov	r7, r2
 800c812:	461d      	mov	r5, r3
 800c814:	4606      	mov	r6, r0
 800c816:	b118      	cbz	r0, 800c820 <_vfiprintf_r+0x18>
 800c818:	6983      	ldr	r3, [r0, #24]
 800c81a:	b90b      	cbnz	r3, 800c820 <_vfiprintf_r+0x18>
 800c81c:	f7ff fa30 	bl	800bc80 <__sinit>
 800c820:	4b7c      	ldr	r3, [pc, #496]	; (800ca14 <_vfiprintf_r+0x20c>)
 800c822:	429c      	cmp	r4, r3
 800c824:	d158      	bne.n	800c8d8 <_vfiprintf_r+0xd0>
 800c826:	6874      	ldr	r4, [r6, #4]
 800c828:	89a3      	ldrh	r3, [r4, #12]
 800c82a:	0718      	lsls	r0, r3, #28
 800c82c:	d55e      	bpl.n	800c8ec <_vfiprintf_r+0xe4>
 800c82e:	6923      	ldr	r3, [r4, #16]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d05b      	beq.n	800c8ec <_vfiprintf_r+0xe4>
 800c834:	2300      	movs	r3, #0
 800c836:	9309      	str	r3, [sp, #36]	; 0x24
 800c838:	2320      	movs	r3, #32
 800c83a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c83e:	2330      	movs	r3, #48	; 0x30
 800c840:	f04f 0b01 	mov.w	fp, #1
 800c844:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c848:	9503      	str	r5, [sp, #12]
 800c84a:	46b8      	mov	r8, r7
 800c84c:	4645      	mov	r5, r8
 800c84e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c852:	b10b      	cbz	r3, 800c858 <_vfiprintf_r+0x50>
 800c854:	2b25      	cmp	r3, #37	; 0x25
 800c856:	d154      	bne.n	800c902 <_vfiprintf_r+0xfa>
 800c858:	ebb8 0a07 	subs.w	sl, r8, r7
 800c85c:	d00b      	beq.n	800c876 <_vfiprintf_r+0x6e>
 800c85e:	4653      	mov	r3, sl
 800c860:	463a      	mov	r2, r7
 800c862:	4621      	mov	r1, r4
 800c864:	4630      	mov	r0, r6
 800c866:	f7ff ffbc 	bl	800c7e2 <__sfputs_r>
 800c86a:	3001      	adds	r0, #1
 800c86c:	f000 80c2 	beq.w	800c9f4 <_vfiprintf_r+0x1ec>
 800c870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c872:	4453      	add	r3, sl
 800c874:	9309      	str	r3, [sp, #36]	; 0x24
 800c876:	f898 3000 	ldrb.w	r3, [r8]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	f000 80ba 	beq.w	800c9f4 <_vfiprintf_r+0x1ec>
 800c880:	2300      	movs	r3, #0
 800c882:	f04f 32ff 	mov.w	r2, #4294967295
 800c886:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c88a:	9304      	str	r3, [sp, #16]
 800c88c:	9307      	str	r3, [sp, #28]
 800c88e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c892:	931a      	str	r3, [sp, #104]	; 0x68
 800c894:	46a8      	mov	r8, r5
 800c896:	2205      	movs	r2, #5
 800c898:	f818 1b01 	ldrb.w	r1, [r8], #1
 800c89c:	485e      	ldr	r0, [pc, #376]	; (800ca18 <_vfiprintf_r+0x210>)
 800c89e:	f7ff fb33 	bl	800bf08 <memchr>
 800c8a2:	9b04      	ldr	r3, [sp, #16]
 800c8a4:	bb78      	cbnz	r0, 800c906 <_vfiprintf_r+0xfe>
 800c8a6:	06d9      	lsls	r1, r3, #27
 800c8a8:	bf44      	itt	mi
 800c8aa:	2220      	movmi	r2, #32
 800c8ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c8b0:	071a      	lsls	r2, r3, #28
 800c8b2:	bf44      	itt	mi
 800c8b4:	222b      	movmi	r2, #43	; 0x2b
 800c8b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c8ba:	782a      	ldrb	r2, [r5, #0]
 800c8bc:	2a2a      	cmp	r2, #42	; 0x2a
 800c8be:	d02a      	beq.n	800c916 <_vfiprintf_r+0x10e>
 800c8c0:	46a8      	mov	r8, r5
 800c8c2:	2000      	movs	r0, #0
 800c8c4:	250a      	movs	r5, #10
 800c8c6:	9a07      	ldr	r2, [sp, #28]
 800c8c8:	4641      	mov	r1, r8
 800c8ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8ce:	3b30      	subs	r3, #48	; 0x30
 800c8d0:	2b09      	cmp	r3, #9
 800c8d2:	d969      	bls.n	800c9a8 <_vfiprintf_r+0x1a0>
 800c8d4:	b360      	cbz	r0, 800c930 <_vfiprintf_r+0x128>
 800c8d6:	e024      	b.n	800c922 <_vfiprintf_r+0x11a>
 800c8d8:	4b50      	ldr	r3, [pc, #320]	; (800ca1c <_vfiprintf_r+0x214>)
 800c8da:	429c      	cmp	r4, r3
 800c8dc:	d101      	bne.n	800c8e2 <_vfiprintf_r+0xda>
 800c8de:	68b4      	ldr	r4, [r6, #8]
 800c8e0:	e7a2      	b.n	800c828 <_vfiprintf_r+0x20>
 800c8e2:	4b4f      	ldr	r3, [pc, #316]	; (800ca20 <_vfiprintf_r+0x218>)
 800c8e4:	429c      	cmp	r4, r3
 800c8e6:	bf08      	it	eq
 800c8e8:	68f4      	ldreq	r4, [r6, #12]
 800c8ea:	e79d      	b.n	800c828 <_vfiprintf_r+0x20>
 800c8ec:	4621      	mov	r1, r4
 800c8ee:	4630      	mov	r0, r6
 800c8f0:	f7fe fa12 	bl	800ad18 <__swsetup_r>
 800c8f4:	2800      	cmp	r0, #0
 800c8f6:	d09d      	beq.n	800c834 <_vfiprintf_r+0x2c>
 800c8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c8fc:	b01d      	add	sp, #116	; 0x74
 800c8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c902:	46a8      	mov	r8, r5
 800c904:	e7a2      	b.n	800c84c <_vfiprintf_r+0x44>
 800c906:	4a44      	ldr	r2, [pc, #272]	; (800ca18 <_vfiprintf_r+0x210>)
 800c908:	4645      	mov	r5, r8
 800c90a:	1a80      	subs	r0, r0, r2
 800c90c:	fa0b f000 	lsl.w	r0, fp, r0
 800c910:	4318      	orrs	r0, r3
 800c912:	9004      	str	r0, [sp, #16]
 800c914:	e7be      	b.n	800c894 <_vfiprintf_r+0x8c>
 800c916:	9a03      	ldr	r2, [sp, #12]
 800c918:	1d11      	adds	r1, r2, #4
 800c91a:	6812      	ldr	r2, [r2, #0]
 800c91c:	9103      	str	r1, [sp, #12]
 800c91e:	2a00      	cmp	r2, #0
 800c920:	db01      	blt.n	800c926 <_vfiprintf_r+0x11e>
 800c922:	9207      	str	r2, [sp, #28]
 800c924:	e004      	b.n	800c930 <_vfiprintf_r+0x128>
 800c926:	4252      	negs	r2, r2
 800c928:	f043 0302 	orr.w	r3, r3, #2
 800c92c:	9207      	str	r2, [sp, #28]
 800c92e:	9304      	str	r3, [sp, #16]
 800c930:	f898 3000 	ldrb.w	r3, [r8]
 800c934:	2b2e      	cmp	r3, #46	; 0x2e
 800c936:	d10e      	bne.n	800c956 <_vfiprintf_r+0x14e>
 800c938:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c93c:	2b2a      	cmp	r3, #42	; 0x2a
 800c93e:	d138      	bne.n	800c9b2 <_vfiprintf_r+0x1aa>
 800c940:	9b03      	ldr	r3, [sp, #12]
 800c942:	f108 0802 	add.w	r8, r8, #2
 800c946:	1d1a      	adds	r2, r3, #4
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	9203      	str	r2, [sp, #12]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	bfb8      	it	lt
 800c950:	f04f 33ff 	movlt.w	r3, #4294967295
 800c954:	9305      	str	r3, [sp, #20]
 800c956:	4d33      	ldr	r5, [pc, #204]	; (800ca24 <_vfiprintf_r+0x21c>)
 800c958:	2203      	movs	r2, #3
 800c95a:	f898 1000 	ldrb.w	r1, [r8]
 800c95e:	4628      	mov	r0, r5
 800c960:	f7ff fad2 	bl	800bf08 <memchr>
 800c964:	b140      	cbz	r0, 800c978 <_vfiprintf_r+0x170>
 800c966:	2340      	movs	r3, #64	; 0x40
 800c968:	1b40      	subs	r0, r0, r5
 800c96a:	fa03 f000 	lsl.w	r0, r3, r0
 800c96e:	9b04      	ldr	r3, [sp, #16]
 800c970:	f108 0801 	add.w	r8, r8, #1
 800c974:	4303      	orrs	r3, r0
 800c976:	9304      	str	r3, [sp, #16]
 800c978:	f898 1000 	ldrb.w	r1, [r8]
 800c97c:	2206      	movs	r2, #6
 800c97e:	482a      	ldr	r0, [pc, #168]	; (800ca28 <_vfiprintf_r+0x220>)
 800c980:	f108 0701 	add.w	r7, r8, #1
 800c984:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c988:	f7ff fabe 	bl	800bf08 <memchr>
 800c98c:	2800      	cmp	r0, #0
 800c98e:	d037      	beq.n	800ca00 <_vfiprintf_r+0x1f8>
 800c990:	4b26      	ldr	r3, [pc, #152]	; (800ca2c <_vfiprintf_r+0x224>)
 800c992:	bb1b      	cbnz	r3, 800c9dc <_vfiprintf_r+0x1d4>
 800c994:	9b03      	ldr	r3, [sp, #12]
 800c996:	3307      	adds	r3, #7
 800c998:	f023 0307 	bic.w	r3, r3, #7
 800c99c:	3308      	adds	r3, #8
 800c99e:	9303      	str	r3, [sp, #12]
 800c9a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9a2:	444b      	add	r3, r9
 800c9a4:	9309      	str	r3, [sp, #36]	; 0x24
 800c9a6:	e750      	b.n	800c84a <_vfiprintf_r+0x42>
 800c9a8:	fb05 3202 	mla	r2, r5, r2, r3
 800c9ac:	2001      	movs	r0, #1
 800c9ae:	4688      	mov	r8, r1
 800c9b0:	e78a      	b.n	800c8c8 <_vfiprintf_r+0xc0>
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	250a      	movs	r5, #10
 800c9b6:	4619      	mov	r1, r3
 800c9b8:	f108 0801 	add.w	r8, r8, #1
 800c9bc:	9305      	str	r3, [sp, #20]
 800c9be:	4640      	mov	r0, r8
 800c9c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9c4:	3a30      	subs	r2, #48	; 0x30
 800c9c6:	2a09      	cmp	r2, #9
 800c9c8:	d903      	bls.n	800c9d2 <_vfiprintf_r+0x1ca>
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d0c3      	beq.n	800c956 <_vfiprintf_r+0x14e>
 800c9ce:	9105      	str	r1, [sp, #20]
 800c9d0:	e7c1      	b.n	800c956 <_vfiprintf_r+0x14e>
 800c9d2:	fb05 2101 	mla	r1, r5, r1, r2
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	4680      	mov	r8, r0
 800c9da:	e7f0      	b.n	800c9be <_vfiprintf_r+0x1b6>
 800c9dc:	ab03      	add	r3, sp, #12
 800c9de:	9300      	str	r3, [sp, #0]
 800c9e0:	4622      	mov	r2, r4
 800c9e2:	4b13      	ldr	r3, [pc, #76]	; (800ca30 <_vfiprintf_r+0x228>)
 800c9e4:	a904      	add	r1, sp, #16
 800c9e6:	4630      	mov	r0, r6
 800c9e8:	f7fd fa88 	bl	8009efc <_printf_float>
 800c9ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c9f0:	4681      	mov	r9, r0
 800c9f2:	d1d5      	bne.n	800c9a0 <_vfiprintf_r+0x198>
 800c9f4:	89a3      	ldrh	r3, [r4, #12]
 800c9f6:	065b      	lsls	r3, r3, #25
 800c9f8:	f53f af7e 	bmi.w	800c8f8 <_vfiprintf_r+0xf0>
 800c9fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9fe:	e77d      	b.n	800c8fc <_vfiprintf_r+0xf4>
 800ca00:	ab03      	add	r3, sp, #12
 800ca02:	9300      	str	r3, [sp, #0]
 800ca04:	4622      	mov	r2, r4
 800ca06:	4b0a      	ldr	r3, [pc, #40]	; (800ca30 <_vfiprintf_r+0x228>)
 800ca08:	a904      	add	r1, sp, #16
 800ca0a:	4630      	mov	r0, r6
 800ca0c:	f7fd fd22 	bl	800a454 <_printf_i>
 800ca10:	e7ec      	b.n	800c9ec <_vfiprintf_r+0x1e4>
 800ca12:	bf00      	nop
 800ca14:	0800db18 	.word	0x0800db18
 800ca18:	0800dcb4 	.word	0x0800dcb4
 800ca1c:	0800db38 	.word	0x0800db38
 800ca20:	0800daf8 	.word	0x0800daf8
 800ca24:	0800dcba 	.word	0x0800dcba
 800ca28:	0800dcbe 	.word	0x0800dcbe
 800ca2c:	08009efd 	.word	0x08009efd
 800ca30:	0800c7e3 	.word	0x0800c7e3

0800ca34 <_putc_r>:
 800ca34:	b570      	push	{r4, r5, r6, lr}
 800ca36:	460d      	mov	r5, r1
 800ca38:	4614      	mov	r4, r2
 800ca3a:	4606      	mov	r6, r0
 800ca3c:	b118      	cbz	r0, 800ca46 <_putc_r+0x12>
 800ca3e:	6983      	ldr	r3, [r0, #24]
 800ca40:	b90b      	cbnz	r3, 800ca46 <_putc_r+0x12>
 800ca42:	f7ff f91d 	bl	800bc80 <__sinit>
 800ca46:	4b13      	ldr	r3, [pc, #76]	; (800ca94 <_putc_r+0x60>)
 800ca48:	429c      	cmp	r4, r3
 800ca4a:	d112      	bne.n	800ca72 <_putc_r+0x3e>
 800ca4c:	6874      	ldr	r4, [r6, #4]
 800ca4e:	68a3      	ldr	r3, [r4, #8]
 800ca50:	3b01      	subs	r3, #1
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	60a3      	str	r3, [r4, #8]
 800ca56:	da16      	bge.n	800ca86 <_putc_r+0x52>
 800ca58:	69a2      	ldr	r2, [r4, #24]
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	db02      	blt.n	800ca64 <_putc_r+0x30>
 800ca5e:	b2eb      	uxtb	r3, r5
 800ca60:	2b0a      	cmp	r3, #10
 800ca62:	d110      	bne.n	800ca86 <_putc_r+0x52>
 800ca64:	4622      	mov	r2, r4
 800ca66:	4629      	mov	r1, r5
 800ca68:	4630      	mov	r0, r6
 800ca6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ca6e:	f7fe b901 	b.w	800ac74 <__swbuf_r>
 800ca72:	4b09      	ldr	r3, [pc, #36]	; (800ca98 <_putc_r+0x64>)
 800ca74:	429c      	cmp	r4, r3
 800ca76:	d101      	bne.n	800ca7c <_putc_r+0x48>
 800ca78:	68b4      	ldr	r4, [r6, #8]
 800ca7a:	e7e8      	b.n	800ca4e <_putc_r+0x1a>
 800ca7c:	4b07      	ldr	r3, [pc, #28]	; (800ca9c <_putc_r+0x68>)
 800ca7e:	429c      	cmp	r4, r3
 800ca80:	bf08      	it	eq
 800ca82:	68f4      	ldreq	r4, [r6, #12]
 800ca84:	e7e3      	b.n	800ca4e <_putc_r+0x1a>
 800ca86:	6823      	ldr	r3, [r4, #0]
 800ca88:	b2e8      	uxtb	r0, r5
 800ca8a:	1c5a      	adds	r2, r3, #1
 800ca8c:	6022      	str	r2, [r4, #0]
 800ca8e:	701d      	strb	r5, [r3, #0]
 800ca90:	bd70      	pop	{r4, r5, r6, pc}
 800ca92:	bf00      	nop
 800ca94:	0800db18 	.word	0x0800db18
 800ca98:	0800db38 	.word	0x0800db38
 800ca9c:	0800daf8 	.word	0x0800daf8

0800caa0 <siscanf>:
 800caa0:	b40e      	push	{r1, r2, r3}
 800caa2:	f44f 7201 	mov.w	r2, #516	; 0x204
 800caa6:	b530      	push	{r4, r5, lr}
 800caa8:	b09c      	sub	sp, #112	; 0x70
 800caaa:	ac1f      	add	r4, sp, #124	; 0x7c
 800caac:	f854 5b04 	ldr.w	r5, [r4], #4
 800cab0:	f8ad 2014 	strh.w	r2, [sp, #20]
 800cab4:	9002      	str	r0, [sp, #8]
 800cab6:	9006      	str	r0, [sp, #24]
 800cab8:	f7f3 fb4a 	bl	8000150 <strlen>
 800cabc:	4b0b      	ldr	r3, [pc, #44]	; (800caec <siscanf+0x4c>)
 800cabe:	9003      	str	r0, [sp, #12]
 800cac0:	930b      	str	r3, [sp, #44]	; 0x2c
 800cac2:	2300      	movs	r3, #0
 800cac4:	930f      	str	r3, [sp, #60]	; 0x3c
 800cac6:	9314      	str	r3, [sp, #80]	; 0x50
 800cac8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cacc:	9007      	str	r0, [sp, #28]
 800cace:	4808      	ldr	r0, [pc, #32]	; (800caf0 <siscanf+0x50>)
 800cad0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cad4:	462a      	mov	r2, r5
 800cad6:	4623      	mov	r3, r4
 800cad8:	a902      	add	r1, sp, #8
 800cada:	6800      	ldr	r0, [r0, #0]
 800cadc:	9401      	str	r4, [sp, #4]
 800cade:	f000 fa21 	bl	800cf24 <__ssvfiscanf_r>
 800cae2:	b01c      	add	sp, #112	; 0x70
 800cae4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cae8:	b003      	add	sp, #12
 800caea:	4770      	bx	lr
 800caec:	0800cb17 	.word	0x0800cb17
 800caf0:	20000028 	.word	0x20000028

0800caf4 <__sread>:
 800caf4:	b510      	push	{r4, lr}
 800caf6:	460c      	mov	r4, r1
 800caf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cafc:	f000 fcba 	bl	800d474 <_read_r>
 800cb00:	2800      	cmp	r0, #0
 800cb02:	bfab      	itete	ge
 800cb04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cb06:	89a3      	ldrhlt	r3, [r4, #12]
 800cb08:	181b      	addge	r3, r3, r0
 800cb0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cb0e:	bfac      	ite	ge
 800cb10:	6563      	strge	r3, [r4, #84]	; 0x54
 800cb12:	81a3      	strhlt	r3, [r4, #12]
 800cb14:	bd10      	pop	{r4, pc}

0800cb16 <__seofread>:
 800cb16:	2000      	movs	r0, #0
 800cb18:	4770      	bx	lr

0800cb1a <__swrite>:
 800cb1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb1e:	461f      	mov	r7, r3
 800cb20:	898b      	ldrh	r3, [r1, #12]
 800cb22:	4605      	mov	r5, r0
 800cb24:	05db      	lsls	r3, r3, #23
 800cb26:	460c      	mov	r4, r1
 800cb28:	4616      	mov	r6, r2
 800cb2a:	d505      	bpl.n	800cb38 <__swrite+0x1e>
 800cb2c:	2302      	movs	r3, #2
 800cb2e:	2200      	movs	r2, #0
 800cb30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb34:	f000 f938 	bl	800cda8 <_lseek_r>
 800cb38:	89a3      	ldrh	r3, [r4, #12]
 800cb3a:	4632      	mov	r2, r6
 800cb3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cb40:	81a3      	strh	r3, [r4, #12]
 800cb42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb46:	463b      	mov	r3, r7
 800cb48:	4628      	mov	r0, r5
 800cb4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb4e:	f000 b8d3 	b.w	800ccf8 <_write_r>

0800cb52 <__sseek>:
 800cb52:	b510      	push	{r4, lr}
 800cb54:	460c      	mov	r4, r1
 800cb56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb5a:	f000 f925 	bl	800cda8 <_lseek_r>
 800cb5e:	1c43      	adds	r3, r0, #1
 800cb60:	89a3      	ldrh	r3, [r4, #12]
 800cb62:	bf15      	itete	ne
 800cb64:	6560      	strne	r0, [r4, #84]	; 0x54
 800cb66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cb6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cb6e:	81a3      	strheq	r3, [r4, #12]
 800cb70:	bf18      	it	ne
 800cb72:	81a3      	strhne	r3, [r4, #12]
 800cb74:	bd10      	pop	{r4, pc}

0800cb76 <__sclose>:
 800cb76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb7a:	f000 b8cf 	b.w	800cd1c <_close_r>

0800cb7e <strcpy>:
 800cb7e:	4603      	mov	r3, r0
 800cb80:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb84:	f803 2b01 	strb.w	r2, [r3], #1
 800cb88:	2a00      	cmp	r2, #0
 800cb8a:	d1f9      	bne.n	800cb80 <strcpy+0x2>
 800cb8c:	4770      	bx	lr

0800cb8e <strncmp>:
 800cb8e:	b510      	push	{r4, lr}
 800cb90:	b16a      	cbz	r2, 800cbae <strncmp+0x20>
 800cb92:	3901      	subs	r1, #1
 800cb94:	1884      	adds	r4, r0, r2
 800cb96:	f810 3b01 	ldrb.w	r3, [r0], #1
 800cb9a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d103      	bne.n	800cbaa <strncmp+0x1c>
 800cba2:	42a0      	cmp	r0, r4
 800cba4:	d001      	beq.n	800cbaa <strncmp+0x1c>
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d1f5      	bne.n	800cb96 <strncmp+0x8>
 800cbaa:	1a98      	subs	r0, r3, r2
 800cbac:	bd10      	pop	{r4, pc}
 800cbae:	4610      	mov	r0, r2
 800cbb0:	e7fc      	b.n	800cbac <strncmp+0x1e>

0800cbb2 <_strtoul_l.isra.0>:
 800cbb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbb6:	4680      	mov	r8, r0
 800cbb8:	4689      	mov	r9, r1
 800cbba:	4692      	mov	sl, r2
 800cbbc:	461e      	mov	r6, r3
 800cbbe:	460f      	mov	r7, r1
 800cbc0:	463d      	mov	r5, r7
 800cbc2:	9808      	ldr	r0, [sp, #32]
 800cbc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cbc8:	f000 f8dc 	bl	800cd84 <__locale_ctype_ptr_l>
 800cbcc:	4420      	add	r0, r4
 800cbce:	7843      	ldrb	r3, [r0, #1]
 800cbd0:	f013 0308 	ands.w	r3, r3, #8
 800cbd4:	d130      	bne.n	800cc38 <_strtoul_l.isra.0+0x86>
 800cbd6:	2c2d      	cmp	r4, #45	; 0x2d
 800cbd8:	d130      	bne.n	800cc3c <_strtoul_l.isra.0+0x8a>
 800cbda:	2101      	movs	r1, #1
 800cbdc:	787c      	ldrb	r4, [r7, #1]
 800cbde:	1cbd      	adds	r5, r7, #2
 800cbe0:	2e00      	cmp	r6, #0
 800cbe2:	d05c      	beq.n	800cc9e <_strtoul_l.isra.0+0xec>
 800cbe4:	2e10      	cmp	r6, #16
 800cbe6:	d109      	bne.n	800cbfc <_strtoul_l.isra.0+0x4a>
 800cbe8:	2c30      	cmp	r4, #48	; 0x30
 800cbea:	d107      	bne.n	800cbfc <_strtoul_l.isra.0+0x4a>
 800cbec:	782b      	ldrb	r3, [r5, #0]
 800cbee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cbf2:	2b58      	cmp	r3, #88	; 0x58
 800cbf4:	d14e      	bne.n	800cc94 <_strtoul_l.isra.0+0xe2>
 800cbf6:	2610      	movs	r6, #16
 800cbf8:	786c      	ldrb	r4, [r5, #1]
 800cbfa:	3502      	adds	r5, #2
 800cbfc:	f04f 32ff 	mov.w	r2, #4294967295
 800cc00:	fbb2 f2f6 	udiv	r2, r2, r6
 800cc04:	2300      	movs	r3, #0
 800cc06:	fb06 fc02 	mul.w	ip, r6, r2
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	ea6f 0c0c 	mvn.w	ip, ip
 800cc10:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800cc14:	2f09      	cmp	r7, #9
 800cc16:	d817      	bhi.n	800cc48 <_strtoul_l.isra.0+0x96>
 800cc18:	463c      	mov	r4, r7
 800cc1a:	42a6      	cmp	r6, r4
 800cc1c:	dd23      	ble.n	800cc66 <_strtoul_l.isra.0+0xb4>
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	db1e      	blt.n	800cc60 <_strtoul_l.isra.0+0xae>
 800cc22:	4282      	cmp	r2, r0
 800cc24:	d31c      	bcc.n	800cc60 <_strtoul_l.isra.0+0xae>
 800cc26:	d101      	bne.n	800cc2c <_strtoul_l.isra.0+0x7a>
 800cc28:	45a4      	cmp	ip, r4
 800cc2a:	db19      	blt.n	800cc60 <_strtoul_l.isra.0+0xae>
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	fb00 4006 	mla	r0, r0, r6, r4
 800cc32:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cc36:	e7eb      	b.n	800cc10 <_strtoul_l.isra.0+0x5e>
 800cc38:	462f      	mov	r7, r5
 800cc3a:	e7c1      	b.n	800cbc0 <_strtoul_l.isra.0+0xe>
 800cc3c:	2c2b      	cmp	r4, #43	; 0x2b
 800cc3e:	bf04      	itt	eq
 800cc40:	1cbd      	addeq	r5, r7, #2
 800cc42:	787c      	ldrbeq	r4, [r7, #1]
 800cc44:	4619      	mov	r1, r3
 800cc46:	e7cb      	b.n	800cbe0 <_strtoul_l.isra.0+0x2e>
 800cc48:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800cc4c:	2f19      	cmp	r7, #25
 800cc4e:	d801      	bhi.n	800cc54 <_strtoul_l.isra.0+0xa2>
 800cc50:	3c37      	subs	r4, #55	; 0x37
 800cc52:	e7e2      	b.n	800cc1a <_strtoul_l.isra.0+0x68>
 800cc54:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800cc58:	2f19      	cmp	r7, #25
 800cc5a:	d804      	bhi.n	800cc66 <_strtoul_l.isra.0+0xb4>
 800cc5c:	3c57      	subs	r4, #87	; 0x57
 800cc5e:	e7dc      	b.n	800cc1a <_strtoul_l.isra.0+0x68>
 800cc60:	f04f 33ff 	mov.w	r3, #4294967295
 800cc64:	e7e5      	b.n	800cc32 <_strtoul_l.isra.0+0x80>
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	da09      	bge.n	800cc7e <_strtoul_l.isra.0+0xcc>
 800cc6a:	2322      	movs	r3, #34	; 0x22
 800cc6c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc70:	f8c8 3000 	str.w	r3, [r8]
 800cc74:	f1ba 0f00 	cmp.w	sl, #0
 800cc78:	d107      	bne.n	800cc8a <_strtoul_l.isra.0+0xd8>
 800cc7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc7e:	b101      	cbz	r1, 800cc82 <_strtoul_l.isra.0+0xd0>
 800cc80:	4240      	negs	r0, r0
 800cc82:	f1ba 0f00 	cmp.w	sl, #0
 800cc86:	d0f8      	beq.n	800cc7a <_strtoul_l.isra.0+0xc8>
 800cc88:	b10b      	cbz	r3, 800cc8e <_strtoul_l.isra.0+0xdc>
 800cc8a:	f105 39ff 	add.w	r9, r5, #4294967295
 800cc8e:	f8ca 9000 	str.w	r9, [sl]
 800cc92:	e7f2      	b.n	800cc7a <_strtoul_l.isra.0+0xc8>
 800cc94:	2430      	movs	r4, #48	; 0x30
 800cc96:	2e00      	cmp	r6, #0
 800cc98:	d1b0      	bne.n	800cbfc <_strtoul_l.isra.0+0x4a>
 800cc9a:	2608      	movs	r6, #8
 800cc9c:	e7ae      	b.n	800cbfc <_strtoul_l.isra.0+0x4a>
 800cc9e:	2c30      	cmp	r4, #48	; 0x30
 800cca0:	d0a4      	beq.n	800cbec <_strtoul_l.isra.0+0x3a>
 800cca2:	260a      	movs	r6, #10
 800cca4:	e7aa      	b.n	800cbfc <_strtoul_l.isra.0+0x4a>
	...

0800cca8 <_strtoul_r>:
 800cca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ccaa:	4c06      	ldr	r4, [pc, #24]	; (800ccc4 <_strtoul_r+0x1c>)
 800ccac:	4d06      	ldr	r5, [pc, #24]	; (800ccc8 <_strtoul_r+0x20>)
 800ccae:	6824      	ldr	r4, [r4, #0]
 800ccb0:	6a24      	ldr	r4, [r4, #32]
 800ccb2:	2c00      	cmp	r4, #0
 800ccb4:	bf08      	it	eq
 800ccb6:	462c      	moveq	r4, r5
 800ccb8:	9400      	str	r4, [sp, #0]
 800ccba:	f7ff ff7a 	bl	800cbb2 <_strtoul_l.isra.0>
 800ccbe:	b003      	add	sp, #12
 800ccc0:	bd30      	pop	{r4, r5, pc}
 800ccc2:	bf00      	nop
 800ccc4:	20000028 	.word	0x20000028
 800ccc8:	200000f0 	.word	0x200000f0

0800cccc <strtoul>:
 800cccc:	4b08      	ldr	r3, [pc, #32]	; (800ccf0 <strtoul+0x24>)
 800ccce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ccd0:	681c      	ldr	r4, [r3, #0]
 800ccd2:	4d08      	ldr	r5, [pc, #32]	; (800ccf4 <strtoul+0x28>)
 800ccd4:	6a23      	ldr	r3, [r4, #32]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	bf08      	it	eq
 800ccda:	462b      	moveq	r3, r5
 800ccdc:	9300      	str	r3, [sp, #0]
 800ccde:	4613      	mov	r3, r2
 800cce0:	460a      	mov	r2, r1
 800cce2:	4601      	mov	r1, r0
 800cce4:	4620      	mov	r0, r4
 800cce6:	f7ff ff64 	bl	800cbb2 <_strtoul_l.isra.0>
 800ccea:	b003      	add	sp, #12
 800ccec:	bd30      	pop	{r4, r5, pc}
 800ccee:	bf00      	nop
 800ccf0:	20000028 	.word	0x20000028
 800ccf4:	200000f0 	.word	0x200000f0

0800ccf8 <_write_r>:
 800ccf8:	b538      	push	{r3, r4, r5, lr}
 800ccfa:	4605      	mov	r5, r0
 800ccfc:	4608      	mov	r0, r1
 800ccfe:	4611      	mov	r1, r2
 800cd00:	2200      	movs	r2, #0
 800cd02:	4c05      	ldr	r4, [pc, #20]	; (800cd18 <_write_r+0x20>)
 800cd04:	6022      	str	r2, [r4, #0]
 800cd06:	461a      	mov	r2, r3
 800cd08:	f7f5 fd49 	bl	800279e <_write>
 800cd0c:	1c43      	adds	r3, r0, #1
 800cd0e:	d102      	bne.n	800cd16 <_write_r+0x1e>
 800cd10:	6823      	ldr	r3, [r4, #0]
 800cd12:	b103      	cbz	r3, 800cd16 <_write_r+0x1e>
 800cd14:	602b      	str	r3, [r5, #0]
 800cd16:	bd38      	pop	{r3, r4, r5, pc}
 800cd18:	200011f0 	.word	0x200011f0

0800cd1c <_close_r>:
 800cd1c:	b538      	push	{r3, r4, r5, lr}
 800cd1e:	2300      	movs	r3, #0
 800cd20:	4c05      	ldr	r4, [pc, #20]	; (800cd38 <_close_r+0x1c>)
 800cd22:	4605      	mov	r5, r0
 800cd24:	4608      	mov	r0, r1
 800cd26:	6023      	str	r3, [r4, #0]
 800cd28:	f7f6 f833 	bl	8002d92 <_close>
 800cd2c:	1c43      	adds	r3, r0, #1
 800cd2e:	d102      	bne.n	800cd36 <_close_r+0x1a>
 800cd30:	6823      	ldr	r3, [r4, #0]
 800cd32:	b103      	cbz	r3, 800cd36 <_close_r+0x1a>
 800cd34:	602b      	str	r3, [r5, #0]
 800cd36:	bd38      	pop	{r3, r4, r5, pc}
 800cd38:	200011f0 	.word	0x200011f0

0800cd3c <__env_lock>:
 800cd3c:	4770      	bx	lr

0800cd3e <__env_unlock>:
 800cd3e:	4770      	bx	lr

0800cd40 <_fstat_r>:
 800cd40:	b538      	push	{r3, r4, r5, lr}
 800cd42:	2300      	movs	r3, #0
 800cd44:	4c06      	ldr	r4, [pc, #24]	; (800cd60 <_fstat_r+0x20>)
 800cd46:	4605      	mov	r5, r0
 800cd48:	4608      	mov	r0, r1
 800cd4a:	4611      	mov	r1, r2
 800cd4c:	6023      	str	r3, [r4, #0]
 800cd4e:	f7f6 f82b 	bl	8002da8 <_fstat>
 800cd52:	1c43      	adds	r3, r0, #1
 800cd54:	d102      	bne.n	800cd5c <_fstat_r+0x1c>
 800cd56:	6823      	ldr	r3, [r4, #0]
 800cd58:	b103      	cbz	r3, 800cd5c <_fstat_r+0x1c>
 800cd5a:	602b      	str	r3, [r5, #0]
 800cd5c:	bd38      	pop	{r3, r4, r5, pc}
 800cd5e:	bf00      	nop
 800cd60:	200011f0 	.word	0x200011f0

0800cd64 <_isatty_r>:
 800cd64:	b538      	push	{r3, r4, r5, lr}
 800cd66:	2300      	movs	r3, #0
 800cd68:	4c05      	ldr	r4, [pc, #20]	; (800cd80 <_isatty_r+0x1c>)
 800cd6a:	4605      	mov	r5, r0
 800cd6c:	4608      	mov	r0, r1
 800cd6e:	6023      	str	r3, [r4, #0]
 800cd70:	f7f6 f829 	bl	8002dc6 <_isatty>
 800cd74:	1c43      	adds	r3, r0, #1
 800cd76:	d102      	bne.n	800cd7e <_isatty_r+0x1a>
 800cd78:	6823      	ldr	r3, [r4, #0]
 800cd7a:	b103      	cbz	r3, 800cd7e <_isatty_r+0x1a>
 800cd7c:	602b      	str	r3, [r5, #0]
 800cd7e:	bd38      	pop	{r3, r4, r5, pc}
 800cd80:	200011f0 	.word	0x200011f0

0800cd84 <__locale_ctype_ptr_l>:
 800cd84:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800cd88:	4770      	bx	lr
	...

0800cd8c <__locale_ctype_ptr>:
 800cd8c:	4b04      	ldr	r3, [pc, #16]	; (800cda0 <__locale_ctype_ptr+0x14>)
 800cd8e:	4a05      	ldr	r2, [pc, #20]	; (800cda4 <__locale_ctype_ptr+0x18>)
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	6a1b      	ldr	r3, [r3, #32]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	bf08      	it	eq
 800cd98:	4613      	moveq	r3, r2
 800cd9a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800cd9e:	4770      	bx	lr
 800cda0:	20000028 	.word	0x20000028
 800cda4:	200000f0 	.word	0x200000f0

0800cda8 <_lseek_r>:
 800cda8:	b538      	push	{r3, r4, r5, lr}
 800cdaa:	4605      	mov	r5, r0
 800cdac:	4608      	mov	r0, r1
 800cdae:	4611      	mov	r1, r2
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	4c05      	ldr	r4, [pc, #20]	; (800cdc8 <_lseek_r+0x20>)
 800cdb4:	6022      	str	r2, [r4, #0]
 800cdb6:	461a      	mov	r2, r3
 800cdb8:	f7f6 f80f 	bl	8002dda <_lseek>
 800cdbc:	1c43      	adds	r3, r0, #1
 800cdbe:	d102      	bne.n	800cdc6 <_lseek_r+0x1e>
 800cdc0:	6823      	ldr	r3, [r4, #0]
 800cdc2:	b103      	cbz	r3, 800cdc6 <_lseek_r+0x1e>
 800cdc4:	602b      	str	r3, [r5, #0]
 800cdc6:	bd38      	pop	{r3, r4, r5, pc}
 800cdc8:	200011f0 	.word	0x200011f0

0800cdcc <__ascii_mbtowc>:
 800cdcc:	b082      	sub	sp, #8
 800cdce:	b901      	cbnz	r1, 800cdd2 <__ascii_mbtowc+0x6>
 800cdd0:	a901      	add	r1, sp, #4
 800cdd2:	b142      	cbz	r2, 800cde6 <__ascii_mbtowc+0x1a>
 800cdd4:	b14b      	cbz	r3, 800cdea <__ascii_mbtowc+0x1e>
 800cdd6:	7813      	ldrb	r3, [r2, #0]
 800cdd8:	600b      	str	r3, [r1, #0]
 800cdda:	7812      	ldrb	r2, [r2, #0]
 800cddc:	1c10      	adds	r0, r2, #0
 800cdde:	bf18      	it	ne
 800cde0:	2001      	movne	r0, #1
 800cde2:	b002      	add	sp, #8
 800cde4:	4770      	bx	lr
 800cde6:	4610      	mov	r0, r2
 800cde8:	e7fb      	b.n	800cde2 <__ascii_mbtowc+0x16>
 800cdea:	f06f 0001 	mvn.w	r0, #1
 800cdee:	e7f8      	b.n	800cde2 <__ascii_mbtowc+0x16>

0800cdf0 <memmove>:
 800cdf0:	4288      	cmp	r0, r1
 800cdf2:	b510      	push	{r4, lr}
 800cdf4:	eb01 0302 	add.w	r3, r1, r2
 800cdf8:	d807      	bhi.n	800ce0a <memmove+0x1a>
 800cdfa:	1e42      	subs	r2, r0, #1
 800cdfc:	4299      	cmp	r1, r3
 800cdfe:	d00a      	beq.n	800ce16 <memmove+0x26>
 800ce00:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce04:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ce08:	e7f8      	b.n	800cdfc <memmove+0xc>
 800ce0a:	4283      	cmp	r3, r0
 800ce0c:	d9f5      	bls.n	800cdfa <memmove+0xa>
 800ce0e:	1881      	adds	r1, r0, r2
 800ce10:	1ad2      	subs	r2, r2, r3
 800ce12:	42d3      	cmn	r3, r2
 800ce14:	d100      	bne.n	800ce18 <memmove+0x28>
 800ce16:	bd10      	pop	{r4, pc}
 800ce18:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce1c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ce20:	e7f7      	b.n	800ce12 <memmove+0x22>

0800ce22 <_realloc_r>:
 800ce22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce24:	4607      	mov	r7, r0
 800ce26:	4614      	mov	r4, r2
 800ce28:	460e      	mov	r6, r1
 800ce2a:	b921      	cbnz	r1, 800ce36 <_realloc_r+0x14>
 800ce2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ce30:	4611      	mov	r1, r2
 800ce32:	f7fc bf77 	b.w	8009d24 <_malloc_r>
 800ce36:	b922      	cbnz	r2, 800ce42 <_realloc_r+0x20>
 800ce38:	f7fc ff28 	bl	8009c8c <_free_r>
 800ce3c:	4625      	mov	r5, r4
 800ce3e:	4628      	mov	r0, r5
 800ce40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce42:	f000 fc2c 	bl	800d69e <_malloc_usable_size_r>
 800ce46:	42a0      	cmp	r0, r4
 800ce48:	d20f      	bcs.n	800ce6a <_realloc_r+0x48>
 800ce4a:	4621      	mov	r1, r4
 800ce4c:	4638      	mov	r0, r7
 800ce4e:	f7fc ff69 	bl	8009d24 <_malloc_r>
 800ce52:	4605      	mov	r5, r0
 800ce54:	2800      	cmp	r0, #0
 800ce56:	d0f2      	beq.n	800ce3e <_realloc_r+0x1c>
 800ce58:	4631      	mov	r1, r6
 800ce5a:	4622      	mov	r2, r4
 800ce5c:	f7ff f862 	bl	800bf24 <memcpy>
 800ce60:	4631      	mov	r1, r6
 800ce62:	4638      	mov	r0, r7
 800ce64:	f7fc ff12 	bl	8009c8c <_free_r>
 800ce68:	e7e9      	b.n	800ce3e <_realloc_r+0x1c>
 800ce6a:	4635      	mov	r5, r6
 800ce6c:	e7e7      	b.n	800ce3e <_realloc_r+0x1c>

0800ce6e <_sungetc_r>:
 800ce6e:	b538      	push	{r3, r4, r5, lr}
 800ce70:	1c4b      	adds	r3, r1, #1
 800ce72:	4614      	mov	r4, r2
 800ce74:	d103      	bne.n	800ce7e <_sungetc_r+0x10>
 800ce76:	f04f 35ff 	mov.w	r5, #4294967295
 800ce7a:	4628      	mov	r0, r5
 800ce7c:	bd38      	pop	{r3, r4, r5, pc}
 800ce7e:	8993      	ldrh	r3, [r2, #12]
 800ce80:	b2cd      	uxtb	r5, r1
 800ce82:	f023 0320 	bic.w	r3, r3, #32
 800ce86:	8193      	strh	r3, [r2, #12]
 800ce88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce8a:	6852      	ldr	r2, [r2, #4]
 800ce8c:	b18b      	cbz	r3, 800ceb2 <_sungetc_r+0x44>
 800ce8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ce90:	4293      	cmp	r3, r2
 800ce92:	dd08      	ble.n	800cea6 <_sungetc_r+0x38>
 800ce94:	6823      	ldr	r3, [r4, #0]
 800ce96:	1e5a      	subs	r2, r3, #1
 800ce98:	6022      	str	r2, [r4, #0]
 800ce9a:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ce9e:	6863      	ldr	r3, [r4, #4]
 800cea0:	3301      	adds	r3, #1
 800cea2:	6063      	str	r3, [r4, #4]
 800cea4:	e7e9      	b.n	800ce7a <_sungetc_r+0xc>
 800cea6:	4621      	mov	r1, r4
 800cea8:	f000 fbb4 	bl	800d614 <__submore>
 800ceac:	2800      	cmp	r0, #0
 800ceae:	d0f1      	beq.n	800ce94 <_sungetc_r+0x26>
 800ceb0:	e7e1      	b.n	800ce76 <_sungetc_r+0x8>
 800ceb2:	6921      	ldr	r1, [r4, #16]
 800ceb4:	6823      	ldr	r3, [r4, #0]
 800ceb6:	b151      	cbz	r1, 800cece <_sungetc_r+0x60>
 800ceb8:	4299      	cmp	r1, r3
 800ceba:	d208      	bcs.n	800cece <_sungetc_r+0x60>
 800cebc:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800cec0:	42a9      	cmp	r1, r5
 800cec2:	d104      	bne.n	800cece <_sungetc_r+0x60>
 800cec4:	3b01      	subs	r3, #1
 800cec6:	3201      	adds	r2, #1
 800cec8:	6023      	str	r3, [r4, #0]
 800ceca:	6062      	str	r2, [r4, #4]
 800cecc:	e7d5      	b.n	800ce7a <_sungetc_r+0xc>
 800cece:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800ced2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ced6:	6363      	str	r3, [r4, #52]	; 0x34
 800ced8:	2303      	movs	r3, #3
 800ceda:	63a3      	str	r3, [r4, #56]	; 0x38
 800cedc:	4623      	mov	r3, r4
 800cede:	f803 5f46 	strb.w	r5, [r3, #70]!
 800cee2:	6023      	str	r3, [r4, #0]
 800cee4:	2301      	movs	r3, #1
 800cee6:	e7dc      	b.n	800cea2 <_sungetc_r+0x34>

0800cee8 <__ssrefill_r>:
 800cee8:	b510      	push	{r4, lr}
 800ceea:	460c      	mov	r4, r1
 800ceec:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ceee:	b169      	cbz	r1, 800cf0c <__ssrefill_r+0x24>
 800cef0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cef4:	4299      	cmp	r1, r3
 800cef6:	d001      	beq.n	800cefc <__ssrefill_r+0x14>
 800cef8:	f7fc fec8 	bl	8009c8c <_free_r>
 800cefc:	2000      	movs	r0, #0
 800cefe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf00:	6360      	str	r0, [r4, #52]	; 0x34
 800cf02:	6063      	str	r3, [r4, #4]
 800cf04:	b113      	cbz	r3, 800cf0c <__ssrefill_r+0x24>
 800cf06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cf08:	6023      	str	r3, [r4, #0]
 800cf0a:	bd10      	pop	{r4, pc}
 800cf0c:	6923      	ldr	r3, [r4, #16]
 800cf0e:	f04f 30ff 	mov.w	r0, #4294967295
 800cf12:	6023      	str	r3, [r4, #0]
 800cf14:	2300      	movs	r3, #0
 800cf16:	6063      	str	r3, [r4, #4]
 800cf18:	89a3      	ldrh	r3, [r4, #12]
 800cf1a:	f043 0320 	orr.w	r3, r3, #32
 800cf1e:	81a3      	strh	r3, [r4, #12]
 800cf20:	e7f3      	b.n	800cf0a <__ssrefill_r+0x22>
	...

0800cf24 <__ssvfiscanf_r>:
 800cf24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf28:	460c      	mov	r4, r1
 800cf2a:	2100      	movs	r1, #0
 800cf2c:	4606      	mov	r6, r0
 800cf2e:	4692      	mov	sl, r2
 800cf30:	270a      	movs	r7, #10
 800cf32:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800cf36:	9144      	str	r1, [sp, #272]	; 0x110
 800cf38:	9145      	str	r1, [sp, #276]	; 0x114
 800cf3a:	499e      	ldr	r1, [pc, #632]	; (800d1b4 <__ssvfiscanf_r+0x290>)
 800cf3c:	f10d 0804 	add.w	r8, sp, #4
 800cf40:	91a0      	str	r1, [sp, #640]	; 0x280
 800cf42:	499d      	ldr	r1, [pc, #628]	; (800d1b8 <__ssvfiscanf_r+0x294>)
 800cf44:	f8df 9274 	ldr.w	r9, [pc, #628]	; 800d1bc <__ssvfiscanf_r+0x298>
 800cf48:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800cf4c:	91a1      	str	r1, [sp, #644]	; 0x284
 800cf4e:	9300      	str	r3, [sp, #0]
 800cf50:	f89a 3000 	ldrb.w	r3, [sl]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	f000 812a 	beq.w	800d1ae <__ssvfiscanf_r+0x28a>
 800cf5a:	4655      	mov	r5, sl
 800cf5c:	f7ff ff16 	bl	800cd8c <__locale_ctype_ptr>
 800cf60:	f815 bb01 	ldrb.w	fp, [r5], #1
 800cf64:	4458      	add	r0, fp
 800cf66:	7843      	ldrb	r3, [r0, #1]
 800cf68:	f013 0308 	ands.w	r3, r3, #8
 800cf6c:	d01c      	beq.n	800cfa8 <__ssvfiscanf_r+0x84>
 800cf6e:	6863      	ldr	r3, [r4, #4]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	dd12      	ble.n	800cf9a <__ssvfiscanf_r+0x76>
 800cf74:	f7ff ff0a 	bl	800cd8c <__locale_ctype_ptr>
 800cf78:	6823      	ldr	r3, [r4, #0]
 800cf7a:	781a      	ldrb	r2, [r3, #0]
 800cf7c:	4410      	add	r0, r2
 800cf7e:	7842      	ldrb	r2, [r0, #1]
 800cf80:	0712      	lsls	r2, r2, #28
 800cf82:	d401      	bmi.n	800cf88 <__ssvfiscanf_r+0x64>
 800cf84:	46aa      	mov	sl, r5
 800cf86:	e7e3      	b.n	800cf50 <__ssvfiscanf_r+0x2c>
 800cf88:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cf8a:	3301      	adds	r3, #1
 800cf8c:	3201      	adds	r2, #1
 800cf8e:	9245      	str	r2, [sp, #276]	; 0x114
 800cf90:	6862      	ldr	r2, [r4, #4]
 800cf92:	6023      	str	r3, [r4, #0]
 800cf94:	3a01      	subs	r2, #1
 800cf96:	6062      	str	r2, [r4, #4]
 800cf98:	e7e9      	b.n	800cf6e <__ssvfiscanf_r+0x4a>
 800cf9a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cf9c:	4621      	mov	r1, r4
 800cf9e:	4630      	mov	r0, r6
 800cfa0:	4798      	blx	r3
 800cfa2:	2800      	cmp	r0, #0
 800cfa4:	d0e6      	beq.n	800cf74 <__ssvfiscanf_r+0x50>
 800cfa6:	e7ed      	b.n	800cf84 <__ssvfiscanf_r+0x60>
 800cfa8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800cfac:	f040 8082 	bne.w	800d0b4 <__ssvfiscanf_r+0x190>
 800cfb0:	9343      	str	r3, [sp, #268]	; 0x10c
 800cfb2:	9341      	str	r3, [sp, #260]	; 0x104
 800cfb4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800cfb8:	2b2a      	cmp	r3, #42	; 0x2a
 800cfba:	d103      	bne.n	800cfc4 <__ssvfiscanf_r+0xa0>
 800cfbc:	2310      	movs	r3, #16
 800cfbe:	f10a 0502 	add.w	r5, sl, #2
 800cfc2:	9341      	str	r3, [sp, #260]	; 0x104
 800cfc4:	46aa      	mov	sl, r5
 800cfc6:	f815 1b01 	ldrb.w	r1, [r5], #1
 800cfca:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800cfce:	2a09      	cmp	r2, #9
 800cfd0:	d922      	bls.n	800d018 <__ssvfiscanf_r+0xf4>
 800cfd2:	2203      	movs	r2, #3
 800cfd4:	4879      	ldr	r0, [pc, #484]	; (800d1bc <__ssvfiscanf_r+0x298>)
 800cfd6:	f7fe ff97 	bl	800bf08 <memchr>
 800cfda:	b138      	cbz	r0, 800cfec <__ssvfiscanf_r+0xc8>
 800cfdc:	eba0 0309 	sub.w	r3, r0, r9
 800cfe0:	2001      	movs	r0, #1
 800cfe2:	46aa      	mov	sl, r5
 800cfe4:	4098      	lsls	r0, r3
 800cfe6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cfe8:	4318      	orrs	r0, r3
 800cfea:	9041      	str	r0, [sp, #260]	; 0x104
 800cfec:	f89a 3000 	ldrb.w	r3, [sl]
 800cff0:	f10a 0501 	add.w	r5, sl, #1
 800cff4:	2b67      	cmp	r3, #103	; 0x67
 800cff6:	d82b      	bhi.n	800d050 <__ssvfiscanf_r+0x12c>
 800cff8:	2b65      	cmp	r3, #101	; 0x65
 800cffa:	f080 809f 	bcs.w	800d13c <__ssvfiscanf_r+0x218>
 800cffe:	2b47      	cmp	r3, #71	; 0x47
 800d000:	d810      	bhi.n	800d024 <__ssvfiscanf_r+0x100>
 800d002:	2b45      	cmp	r3, #69	; 0x45
 800d004:	f080 809a 	bcs.w	800d13c <__ssvfiscanf_r+0x218>
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d06c      	beq.n	800d0e6 <__ssvfiscanf_r+0x1c2>
 800d00c:	2b25      	cmp	r3, #37	; 0x25
 800d00e:	d051      	beq.n	800d0b4 <__ssvfiscanf_r+0x190>
 800d010:	2303      	movs	r3, #3
 800d012:	9742      	str	r7, [sp, #264]	; 0x108
 800d014:	9347      	str	r3, [sp, #284]	; 0x11c
 800d016:	e027      	b.n	800d068 <__ssvfiscanf_r+0x144>
 800d018:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800d01a:	fb07 1303 	mla	r3, r7, r3, r1
 800d01e:	3b30      	subs	r3, #48	; 0x30
 800d020:	9343      	str	r3, [sp, #268]	; 0x10c
 800d022:	e7cf      	b.n	800cfc4 <__ssvfiscanf_r+0xa0>
 800d024:	2b5b      	cmp	r3, #91	; 0x5b
 800d026:	d06a      	beq.n	800d0fe <__ssvfiscanf_r+0x1da>
 800d028:	d80c      	bhi.n	800d044 <__ssvfiscanf_r+0x120>
 800d02a:	2b58      	cmp	r3, #88	; 0x58
 800d02c:	d1f0      	bne.n	800d010 <__ssvfiscanf_r+0xec>
 800d02e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d034:	9241      	str	r2, [sp, #260]	; 0x104
 800d036:	2210      	movs	r2, #16
 800d038:	9242      	str	r2, [sp, #264]	; 0x108
 800d03a:	2b6e      	cmp	r3, #110	; 0x6e
 800d03c:	bf8c      	ite	hi
 800d03e:	2304      	movhi	r3, #4
 800d040:	2303      	movls	r3, #3
 800d042:	e010      	b.n	800d066 <__ssvfiscanf_r+0x142>
 800d044:	2b63      	cmp	r3, #99	; 0x63
 800d046:	d065      	beq.n	800d114 <__ssvfiscanf_r+0x1f0>
 800d048:	2b64      	cmp	r3, #100	; 0x64
 800d04a:	d1e1      	bne.n	800d010 <__ssvfiscanf_r+0xec>
 800d04c:	9742      	str	r7, [sp, #264]	; 0x108
 800d04e:	e7f4      	b.n	800d03a <__ssvfiscanf_r+0x116>
 800d050:	2b70      	cmp	r3, #112	; 0x70
 800d052:	d04b      	beq.n	800d0ec <__ssvfiscanf_r+0x1c8>
 800d054:	d826      	bhi.n	800d0a4 <__ssvfiscanf_r+0x180>
 800d056:	2b6e      	cmp	r3, #110	; 0x6e
 800d058:	d062      	beq.n	800d120 <__ssvfiscanf_r+0x1fc>
 800d05a:	d84c      	bhi.n	800d0f6 <__ssvfiscanf_r+0x1d2>
 800d05c:	2b69      	cmp	r3, #105	; 0x69
 800d05e:	d1d7      	bne.n	800d010 <__ssvfiscanf_r+0xec>
 800d060:	2300      	movs	r3, #0
 800d062:	9342      	str	r3, [sp, #264]	; 0x108
 800d064:	2303      	movs	r3, #3
 800d066:	9347      	str	r3, [sp, #284]	; 0x11c
 800d068:	6863      	ldr	r3, [r4, #4]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	dd68      	ble.n	800d140 <__ssvfiscanf_r+0x21c>
 800d06e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d070:	0659      	lsls	r1, r3, #25
 800d072:	d407      	bmi.n	800d084 <__ssvfiscanf_r+0x160>
 800d074:	f7ff fe8a 	bl	800cd8c <__locale_ctype_ptr>
 800d078:	6823      	ldr	r3, [r4, #0]
 800d07a:	781a      	ldrb	r2, [r3, #0]
 800d07c:	4410      	add	r0, r2
 800d07e:	7842      	ldrb	r2, [r0, #1]
 800d080:	0712      	lsls	r2, r2, #28
 800d082:	d464      	bmi.n	800d14e <__ssvfiscanf_r+0x22a>
 800d084:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800d086:	2b02      	cmp	r3, #2
 800d088:	dc73      	bgt.n	800d172 <__ssvfiscanf_r+0x24e>
 800d08a:	466b      	mov	r3, sp
 800d08c:	4622      	mov	r2, r4
 800d08e:	a941      	add	r1, sp, #260	; 0x104
 800d090:	4630      	mov	r0, r6
 800d092:	f000 f897 	bl	800d1c4 <_scanf_chars>
 800d096:	2801      	cmp	r0, #1
 800d098:	f000 8089 	beq.w	800d1ae <__ssvfiscanf_r+0x28a>
 800d09c:	2802      	cmp	r0, #2
 800d09e:	f47f af71 	bne.w	800cf84 <__ssvfiscanf_r+0x60>
 800d0a2:	e01d      	b.n	800d0e0 <__ssvfiscanf_r+0x1bc>
 800d0a4:	2b75      	cmp	r3, #117	; 0x75
 800d0a6:	d0d1      	beq.n	800d04c <__ssvfiscanf_r+0x128>
 800d0a8:	2b78      	cmp	r3, #120	; 0x78
 800d0aa:	d0c0      	beq.n	800d02e <__ssvfiscanf_r+0x10a>
 800d0ac:	2b73      	cmp	r3, #115	; 0x73
 800d0ae:	d1af      	bne.n	800d010 <__ssvfiscanf_r+0xec>
 800d0b0:	2302      	movs	r3, #2
 800d0b2:	e7d8      	b.n	800d066 <__ssvfiscanf_r+0x142>
 800d0b4:	6863      	ldr	r3, [r4, #4]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	dd0c      	ble.n	800d0d4 <__ssvfiscanf_r+0x1b0>
 800d0ba:	6823      	ldr	r3, [r4, #0]
 800d0bc:	781a      	ldrb	r2, [r3, #0]
 800d0be:	455a      	cmp	r2, fp
 800d0c0:	d175      	bne.n	800d1ae <__ssvfiscanf_r+0x28a>
 800d0c2:	3301      	adds	r3, #1
 800d0c4:	6862      	ldr	r2, [r4, #4]
 800d0c6:	6023      	str	r3, [r4, #0]
 800d0c8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d0ca:	3a01      	subs	r2, #1
 800d0cc:	3301      	adds	r3, #1
 800d0ce:	6062      	str	r2, [r4, #4]
 800d0d0:	9345      	str	r3, [sp, #276]	; 0x114
 800d0d2:	e757      	b.n	800cf84 <__ssvfiscanf_r+0x60>
 800d0d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d0d6:	4621      	mov	r1, r4
 800d0d8:	4630      	mov	r0, r6
 800d0da:	4798      	blx	r3
 800d0dc:	2800      	cmp	r0, #0
 800d0de:	d0ec      	beq.n	800d0ba <__ssvfiscanf_r+0x196>
 800d0e0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d0e2:	2800      	cmp	r0, #0
 800d0e4:	d159      	bne.n	800d19a <__ssvfiscanf_r+0x276>
 800d0e6:	f04f 30ff 	mov.w	r0, #4294967295
 800d0ea:	e05c      	b.n	800d1a6 <__ssvfiscanf_r+0x282>
 800d0ec:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d0ee:	f042 0220 	orr.w	r2, r2, #32
 800d0f2:	9241      	str	r2, [sp, #260]	; 0x104
 800d0f4:	e79b      	b.n	800d02e <__ssvfiscanf_r+0x10a>
 800d0f6:	2308      	movs	r3, #8
 800d0f8:	9342      	str	r3, [sp, #264]	; 0x108
 800d0fa:	2304      	movs	r3, #4
 800d0fc:	e7b3      	b.n	800d066 <__ssvfiscanf_r+0x142>
 800d0fe:	4629      	mov	r1, r5
 800d100:	4640      	mov	r0, r8
 800d102:	f000 f9c9 	bl	800d498 <__sccl>
 800d106:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d108:	4605      	mov	r5, r0
 800d10a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d10e:	9341      	str	r3, [sp, #260]	; 0x104
 800d110:	2301      	movs	r3, #1
 800d112:	e7a8      	b.n	800d066 <__ssvfiscanf_r+0x142>
 800d114:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d11a:	9341      	str	r3, [sp, #260]	; 0x104
 800d11c:	2300      	movs	r3, #0
 800d11e:	e7a2      	b.n	800d066 <__ssvfiscanf_r+0x142>
 800d120:	9841      	ldr	r0, [sp, #260]	; 0x104
 800d122:	06c3      	lsls	r3, r0, #27
 800d124:	f53f af2e 	bmi.w	800cf84 <__ssvfiscanf_r+0x60>
 800d128:	9b00      	ldr	r3, [sp, #0]
 800d12a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d12c:	1d19      	adds	r1, r3, #4
 800d12e:	9100      	str	r1, [sp, #0]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	07c0      	lsls	r0, r0, #31
 800d134:	bf4c      	ite	mi
 800d136:	801a      	strhmi	r2, [r3, #0]
 800d138:	601a      	strpl	r2, [r3, #0]
 800d13a:	e723      	b.n	800cf84 <__ssvfiscanf_r+0x60>
 800d13c:	2305      	movs	r3, #5
 800d13e:	e792      	b.n	800d066 <__ssvfiscanf_r+0x142>
 800d140:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d142:	4621      	mov	r1, r4
 800d144:	4630      	mov	r0, r6
 800d146:	4798      	blx	r3
 800d148:	2800      	cmp	r0, #0
 800d14a:	d090      	beq.n	800d06e <__ssvfiscanf_r+0x14a>
 800d14c:	e7c8      	b.n	800d0e0 <__ssvfiscanf_r+0x1bc>
 800d14e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d150:	3201      	adds	r2, #1
 800d152:	9245      	str	r2, [sp, #276]	; 0x114
 800d154:	6862      	ldr	r2, [r4, #4]
 800d156:	3a01      	subs	r2, #1
 800d158:	2a00      	cmp	r2, #0
 800d15a:	6062      	str	r2, [r4, #4]
 800d15c:	dd02      	ble.n	800d164 <__ssvfiscanf_r+0x240>
 800d15e:	3301      	adds	r3, #1
 800d160:	6023      	str	r3, [r4, #0]
 800d162:	e787      	b.n	800d074 <__ssvfiscanf_r+0x150>
 800d164:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d166:	4621      	mov	r1, r4
 800d168:	4630      	mov	r0, r6
 800d16a:	4798      	blx	r3
 800d16c:	2800      	cmp	r0, #0
 800d16e:	d081      	beq.n	800d074 <__ssvfiscanf_r+0x150>
 800d170:	e7b6      	b.n	800d0e0 <__ssvfiscanf_r+0x1bc>
 800d172:	2b04      	cmp	r3, #4
 800d174:	dc06      	bgt.n	800d184 <__ssvfiscanf_r+0x260>
 800d176:	466b      	mov	r3, sp
 800d178:	4622      	mov	r2, r4
 800d17a:	a941      	add	r1, sp, #260	; 0x104
 800d17c:	4630      	mov	r0, r6
 800d17e:	f000 f883 	bl	800d288 <_scanf_i>
 800d182:	e788      	b.n	800d096 <__ssvfiscanf_r+0x172>
 800d184:	4b0e      	ldr	r3, [pc, #56]	; (800d1c0 <__ssvfiscanf_r+0x29c>)
 800d186:	2b00      	cmp	r3, #0
 800d188:	f43f aefc 	beq.w	800cf84 <__ssvfiscanf_r+0x60>
 800d18c:	466b      	mov	r3, sp
 800d18e:	4622      	mov	r2, r4
 800d190:	a941      	add	r1, sp, #260	; 0x104
 800d192:	4630      	mov	r0, r6
 800d194:	f3af 8000 	nop.w
 800d198:	e77d      	b.n	800d096 <__ssvfiscanf_r+0x172>
 800d19a:	89a3      	ldrh	r3, [r4, #12]
 800d19c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d1a0:	bf18      	it	ne
 800d1a2:	f04f 30ff 	movne.w	r0, #4294967295
 800d1a6:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800d1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ae:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d1b0:	e7f9      	b.n	800d1a6 <__ssvfiscanf_r+0x282>
 800d1b2:	bf00      	nop
 800d1b4:	0800ce6f 	.word	0x0800ce6f
 800d1b8:	0800cee9 	.word	0x0800cee9
 800d1bc:	0800dcba 	.word	0x0800dcba
 800d1c0:	00000000 	.word	0x00000000

0800d1c4 <_scanf_chars>:
 800d1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1c8:	4615      	mov	r5, r2
 800d1ca:	688a      	ldr	r2, [r1, #8]
 800d1cc:	4680      	mov	r8, r0
 800d1ce:	460c      	mov	r4, r1
 800d1d0:	b932      	cbnz	r2, 800d1e0 <_scanf_chars+0x1c>
 800d1d2:	698a      	ldr	r2, [r1, #24]
 800d1d4:	2a00      	cmp	r2, #0
 800d1d6:	bf14      	ite	ne
 800d1d8:	f04f 32ff 	movne.w	r2, #4294967295
 800d1dc:	2201      	moveq	r2, #1
 800d1de:	608a      	str	r2, [r1, #8]
 800d1e0:	2600      	movs	r6, #0
 800d1e2:	6822      	ldr	r2, [r4, #0]
 800d1e4:	06d1      	lsls	r1, r2, #27
 800d1e6:	bf5f      	itttt	pl
 800d1e8:	681a      	ldrpl	r2, [r3, #0]
 800d1ea:	1d11      	addpl	r1, r2, #4
 800d1ec:	6019      	strpl	r1, [r3, #0]
 800d1ee:	6817      	ldrpl	r7, [r2, #0]
 800d1f0:	69a3      	ldr	r3, [r4, #24]
 800d1f2:	b1db      	cbz	r3, 800d22c <_scanf_chars+0x68>
 800d1f4:	2b01      	cmp	r3, #1
 800d1f6:	d107      	bne.n	800d208 <_scanf_chars+0x44>
 800d1f8:	682b      	ldr	r3, [r5, #0]
 800d1fa:	6962      	ldr	r2, [r4, #20]
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	5cd3      	ldrb	r3, [r2, r3]
 800d200:	b9a3      	cbnz	r3, 800d22c <_scanf_chars+0x68>
 800d202:	2e00      	cmp	r6, #0
 800d204:	d131      	bne.n	800d26a <_scanf_chars+0xa6>
 800d206:	e006      	b.n	800d216 <_scanf_chars+0x52>
 800d208:	2b02      	cmp	r3, #2
 800d20a:	d007      	beq.n	800d21c <_scanf_chars+0x58>
 800d20c:	2e00      	cmp	r6, #0
 800d20e:	d12c      	bne.n	800d26a <_scanf_chars+0xa6>
 800d210:	69a3      	ldr	r3, [r4, #24]
 800d212:	2b01      	cmp	r3, #1
 800d214:	d129      	bne.n	800d26a <_scanf_chars+0xa6>
 800d216:	2001      	movs	r0, #1
 800d218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d21c:	f7ff fdb6 	bl	800cd8c <__locale_ctype_ptr>
 800d220:	682b      	ldr	r3, [r5, #0]
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	4418      	add	r0, r3
 800d226:	7843      	ldrb	r3, [r0, #1]
 800d228:	071b      	lsls	r3, r3, #28
 800d22a:	d4ef      	bmi.n	800d20c <_scanf_chars+0x48>
 800d22c:	6823      	ldr	r3, [r4, #0]
 800d22e:	3601      	adds	r6, #1
 800d230:	06da      	lsls	r2, r3, #27
 800d232:	bf5e      	ittt	pl
 800d234:	682b      	ldrpl	r3, [r5, #0]
 800d236:	781b      	ldrbpl	r3, [r3, #0]
 800d238:	703b      	strbpl	r3, [r7, #0]
 800d23a:	682a      	ldr	r2, [r5, #0]
 800d23c:	686b      	ldr	r3, [r5, #4]
 800d23e:	f102 0201 	add.w	r2, r2, #1
 800d242:	602a      	str	r2, [r5, #0]
 800d244:	68a2      	ldr	r2, [r4, #8]
 800d246:	f103 33ff 	add.w	r3, r3, #4294967295
 800d24a:	f102 32ff 	add.w	r2, r2, #4294967295
 800d24e:	606b      	str	r3, [r5, #4]
 800d250:	bf58      	it	pl
 800d252:	3701      	addpl	r7, #1
 800d254:	60a2      	str	r2, [r4, #8]
 800d256:	b142      	cbz	r2, 800d26a <_scanf_chars+0xa6>
 800d258:	2b00      	cmp	r3, #0
 800d25a:	dcc9      	bgt.n	800d1f0 <_scanf_chars+0x2c>
 800d25c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d260:	4629      	mov	r1, r5
 800d262:	4640      	mov	r0, r8
 800d264:	4798      	blx	r3
 800d266:	2800      	cmp	r0, #0
 800d268:	d0c2      	beq.n	800d1f0 <_scanf_chars+0x2c>
 800d26a:	6823      	ldr	r3, [r4, #0]
 800d26c:	f013 0310 	ands.w	r3, r3, #16
 800d270:	d105      	bne.n	800d27e <_scanf_chars+0xba>
 800d272:	68e2      	ldr	r2, [r4, #12]
 800d274:	3201      	adds	r2, #1
 800d276:	60e2      	str	r2, [r4, #12]
 800d278:	69a2      	ldr	r2, [r4, #24]
 800d27a:	b102      	cbz	r2, 800d27e <_scanf_chars+0xba>
 800d27c:	703b      	strb	r3, [r7, #0]
 800d27e:	6923      	ldr	r3, [r4, #16]
 800d280:	2000      	movs	r0, #0
 800d282:	441e      	add	r6, r3
 800d284:	6126      	str	r6, [r4, #16]
 800d286:	e7c7      	b.n	800d218 <_scanf_chars+0x54>

0800d288 <_scanf_i>:
 800d288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d28c:	460c      	mov	r4, r1
 800d28e:	469a      	mov	sl, r3
 800d290:	4b74      	ldr	r3, [pc, #464]	; (800d464 <_scanf_i+0x1dc>)
 800d292:	b087      	sub	sp, #28
 800d294:	4683      	mov	fp, r0
 800d296:	4616      	mov	r6, r2
 800d298:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d29c:	ab03      	add	r3, sp, #12
 800d29e:	68a7      	ldr	r7, [r4, #8]
 800d2a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d2a4:	4b70      	ldr	r3, [pc, #448]	; (800d468 <_scanf_i+0x1e0>)
 800d2a6:	69a1      	ldr	r1, [r4, #24]
 800d2a8:	4a70      	ldr	r2, [pc, #448]	; (800d46c <_scanf_i+0x1e4>)
 800d2aa:	f104 091c 	add.w	r9, r4, #28
 800d2ae:	2903      	cmp	r1, #3
 800d2b0:	bf08      	it	eq
 800d2b2:	461a      	moveq	r2, r3
 800d2b4:	1e7b      	subs	r3, r7, #1
 800d2b6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800d2ba:	bf84      	itt	hi
 800d2bc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d2c0:	60a3      	strhi	r3, [r4, #8]
 800d2c2:	6823      	ldr	r3, [r4, #0]
 800d2c4:	bf88      	it	hi
 800d2c6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d2ca:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800d2ce:	6023      	str	r3, [r4, #0]
 800d2d0:	bf98      	it	ls
 800d2d2:	2700      	movls	r7, #0
 800d2d4:	464b      	mov	r3, r9
 800d2d6:	f04f 0800 	mov.w	r8, #0
 800d2da:	9200      	str	r2, [sp, #0]
 800d2dc:	bf88      	it	hi
 800d2de:	197f      	addhi	r7, r7, r5
 800d2e0:	6831      	ldr	r1, [r6, #0]
 800d2e2:	9301      	str	r3, [sp, #4]
 800d2e4:	ab03      	add	r3, sp, #12
 800d2e6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d2ea:	2202      	movs	r2, #2
 800d2ec:	7809      	ldrb	r1, [r1, #0]
 800d2ee:	f7fe fe0b 	bl	800bf08 <memchr>
 800d2f2:	9b01      	ldr	r3, [sp, #4]
 800d2f4:	b330      	cbz	r0, 800d344 <_scanf_i+0xbc>
 800d2f6:	f1b8 0f01 	cmp.w	r8, #1
 800d2fa:	d15a      	bne.n	800d3b2 <_scanf_i+0x12a>
 800d2fc:	6862      	ldr	r2, [r4, #4]
 800d2fe:	b92a      	cbnz	r2, 800d30c <_scanf_i+0x84>
 800d300:	2108      	movs	r1, #8
 800d302:	6822      	ldr	r2, [r4, #0]
 800d304:	6061      	str	r1, [r4, #4]
 800d306:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d30a:	6022      	str	r2, [r4, #0]
 800d30c:	6822      	ldr	r2, [r4, #0]
 800d30e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800d312:	6022      	str	r2, [r4, #0]
 800d314:	68a2      	ldr	r2, [r4, #8]
 800d316:	1e51      	subs	r1, r2, #1
 800d318:	60a1      	str	r1, [r4, #8]
 800d31a:	b19a      	cbz	r2, 800d344 <_scanf_i+0xbc>
 800d31c:	6832      	ldr	r2, [r6, #0]
 800d31e:	1c5d      	adds	r5, r3, #1
 800d320:	1c51      	adds	r1, r2, #1
 800d322:	6031      	str	r1, [r6, #0]
 800d324:	7812      	ldrb	r2, [r2, #0]
 800d326:	701a      	strb	r2, [r3, #0]
 800d328:	6873      	ldr	r3, [r6, #4]
 800d32a:	3b01      	subs	r3, #1
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	6073      	str	r3, [r6, #4]
 800d330:	dc07      	bgt.n	800d342 <_scanf_i+0xba>
 800d332:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d336:	4631      	mov	r1, r6
 800d338:	4658      	mov	r0, fp
 800d33a:	4798      	blx	r3
 800d33c:	2800      	cmp	r0, #0
 800d33e:	f040 8087 	bne.w	800d450 <_scanf_i+0x1c8>
 800d342:	462b      	mov	r3, r5
 800d344:	f108 0801 	add.w	r8, r8, #1
 800d348:	f1b8 0f03 	cmp.w	r8, #3
 800d34c:	d1c8      	bne.n	800d2e0 <_scanf_i+0x58>
 800d34e:	6862      	ldr	r2, [r4, #4]
 800d350:	b90a      	cbnz	r2, 800d356 <_scanf_i+0xce>
 800d352:	220a      	movs	r2, #10
 800d354:	6062      	str	r2, [r4, #4]
 800d356:	6862      	ldr	r2, [r4, #4]
 800d358:	4945      	ldr	r1, [pc, #276]	; (800d470 <_scanf_i+0x1e8>)
 800d35a:	6960      	ldr	r0, [r4, #20]
 800d35c:	1a89      	subs	r1, r1, r2
 800d35e:	9301      	str	r3, [sp, #4]
 800d360:	f000 f89a 	bl	800d498 <__sccl>
 800d364:	9b01      	ldr	r3, [sp, #4]
 800d366:	f04f 0800 	mov.w	r8, #0
 800d36a:	461d      	mov	r5, r3
 800d36c:	68a3      	ldr	r3, [r4, #8]
 800d36e:	6822      	ldr	r2, [r4, #0]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d03b      	beq.n	800d3ec <_scanf_i+0x164>
 800d374:	6831      	ldr	r1, [r6, #0]
 800d376:	6960      	ldr	r0, [r4, #20]
 800d378:	f891 c000 	ldrb.w	ip, [r1]
 800d37c:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d380:	2800      	cmp	r0, #0
 800d382:	d033      	beq.n	800d3ec <_scanf_i+0x164>
 800d384:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800d388:	d121      	bne.n	800d3ce <_scanf_i+0x146>
 800d38a:	0510      	lsls	r0, r2, #20
 800d38c:	d51f      	bpl.n	800d3ce <_scanf_i+0x146>
 800d38e:	f108 0801 	add.w	r8, r8, #1
 800d392:	b117      	cbz	r7, 800d39a <_scanf_i+0x112>
 800d394:	3301      	adds	r3, #1
 800d396:	3f01      	subs	r7, #1
 800d398:	60a3      	str	r3, [r4, #8]
 800d39a:	6873      	ldr	r3, [r6, #4]
 800d39c:	3b01      	subs	r3, #1
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	6073      	str	r3, [r6, #4]
 800d3a2:	dd1c      	ble.n	800d3de <_scanf_i+0x156>
 800d3a4:	6833      	ldr	r3, [r6, #0]
 800d3a6:	3301      	adds	r3, #1
 800d3a8:	6033      	str	r3, [r6, #0]
 800d3aa:	68a3      	ldr	r3, [r4, #8]
 800d3ac:	3b01      	subs	r3, #1
 800d3ae:	60a3      	str	r3, [r4, #8]
 800d3b0:	e7dc      	b.n	800d36c <_scanf_i+0xe4>
 800d3b2:	f1b8 0f02 	cmp.w	r8, #2
 800d3b6:	d1ad      	bne.n	800d314 <_scanf_i+0x8c>
 800d3b8:	6822      	ldr	r2, [r4, #0]
 800d3ba:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800d3be:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d3c2:	d1bf      	bne.n	800d344 <_scanf_i+0xbc>
 800d3c4:	2110      	movs	r1, #16
 800d3c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d3ca:	6061      	str	r1, [r4, #4]
 800d3cc:	e7a1      	b.n	800d312 <_scanf_i+0x8a>
 800d3ce:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d3d2:	6022      	str	r2, [r4, #0]
 800d3d4:	780b      	ldrb	r3, [r1, #0]
 800d3d6:	3501      	adds	r5, #1
 800d3d8:	f805 3c01 	strb.w	r3, [r5, #-1]
 800d3dc:	e7dd      	b.n	800d39a <_scanf_i+0x112>
 800d3de:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d3e2:	4631      	mov	r1, r6
 800d3e4:	4658      	mov	r0, fp
 800d3e6:	4798      	blx	r3
 800d3e8:	2800      	cmp	r0, #0
 800d3ea:	d0de      	beq.n	800d3aa <_scanf_i+0x122>
 800d3ec:	6823      	ldr	r3, [r4, #0]
 800d3ee:	05d9      	lsls	r1, r3, #23
 800d3f0:	d50c      	bpl.n	800d40c <_scanf_i+0x184>
 800d3f2:	454d      	cmp	r5, r9
 800d3f4:	d908      	bls.n	800d408 <_scanf_i+0x180>
 800d3f6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d3fa:	1e6f      	subs	r7, r5, #1
 800d3fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d400:	4632      	mov	r2, r6
 800d402:	4658      	mov	r0, fp
 800d404:	4798      	blx	r3
 800d406:	463d      	mov	r5, r7
 800d408:	454d      	cmp	r5, r9
 800d40a:	d029      	beq.n	800d460 <_scanf_i+0x1d8>
 800d40c:	6822      	ldr	r2, [r4, #0]
 800d40e:	f012 0210 	ands.w	r2, r2, #16
 800d412:	d113      	bne.n	800d43c <_scanf_i+0x1b4>
 800d414:	702a      	strb	r2, [r5, #0]
 800d416:	6863      	ldr	r3, [r4, #4]
 800d418:	4649      	mov	r1, r9
 800d41a:	4658      	mov	r0, fp
 800d41c:	9e00      	ldr	r6, [sp, #0]
 800d41e:	47b0      	blx	r6
 800d420:	f8da 3000 	ldr.w	r3, [sl]
 800d424:	6821      	ldr	r1, [r4, #0]
 800d426:	1d1a      	adds	r2, r3, #4
 800d428:	f8ca 2000 	str.w	r2, [sl]
 800d42c:	f011 0f20 	tst.w	r1, #32
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	d010      	beq.n	800d456 <_scanf_i+0x1ce>
 800d434:	6018      	str	r0, [r3, #0]
 800d436:	68e3      	ldr	r3, [r4, #12]
 800d438:	3301      	adds	r3, #1
 800d43a:	60e3      	str	r3, [r4, #12]
 800d43c:	2000      	movs	r0, #0
 800d43e:	eba5 0509 	sub.w	r5, r5, r9
 800d442:	44a8      	add	r8, r5
 800d444:	6925      	ldr	r5, [r4, #16]
 800d446:	4445      	add	r5, r8
 800d448:	6125      	str	r5, [r4, #16]
 800d44a:	b007      	add	sp, #28
 800d44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d450:	f04f 0800 	mov.w	r8, #0
 800d454:	e7ca      	b.n	800d3ec <_scanf_i+0x164>
 800d456:	07ca      	lsls	r2, r1, #31
 800d458:	bf4c      	ite	mi
 800d45a:	8018      	strhmi	r0, [r3, #0]
 800d45c:	6018      	strpl	r0, [r3, #0]
 800d45e:	e7ea      	b.n	800d436 <_scanf_i+0x1ae>
 800d460:	2001      	movs	r0, #1
 800d462:	e7f2      	b.n	800d44a <_scanf_i+0x1c2>
 800d464:	0800d918 	.word	0x0800d918
 800d468:	0800d5f1 	.word	0x0800d5f1
 800d46c:	0800cca9 	.word	0x0800cca9
 800d470:	0800dcdf 	.word	0x0800dcdf

0800d474 <_read_r>:
 800d474:	b538      	push	{r3, r4, r5, lr}
 800d476:	4605      	mov	r5, r0
 800d478:	4608      	mov	r0, r1
 800d47a:	4611      	mov	r1, r2
 800d47c:	2200      	movs	r2, #0
 800d47e:	4c05      	ldr	r4, [pc, #20]	; (800d494 <_read_r+0x20>)
 800d480:	6022      	str	r2, [r4, #0]
 800d482:	461a      	mov	r2, r3
 800d484:	f7f5 fc68 	bl	8002d58 <_read>
 800d488:	1c43      	adds	r3, r0, #1
 800d48a:	d102      	bne.n	800d492 <_read_r+0x1e>
 800d48c:	6823      	ldr	r3, [r4, #0]
 800d48e:	b103      	cbz	r3, 800d492 <_read_r+0x1e>
 800d490:	602b      	str	r3, [r5, #0]
 800d492:	bd38      	pop	{r3, r4, r5, pc}
 800d494:	200011f0 	.word	0x200011f0

0800d498 <__sccl>:
 800d498:	b570      	push	{r4, r5, r6, lr}
 800d49a:	780b      	ldrb	r3, [r1, #0]
 800d49c:	1e44      	subs	r4, r0, #1
 800d49e:	2b5e      	cmp	r3, #94	; 0x5e
 800d4a0:	bf13      	iteet	ne
 800d4a2:	1c4a      	addne	r2, r1, #1
 800d4a4:	1c8a      	addeq	r2, r1, #2
 800d4a6:	784b      	ldrbeq	r3, [r1, #1]
 800d4a8:	2100      	movne	r1, #0
 800d4aa:	bf08      	it	eq
 800d4ac:	2101      	moveq	r1, #1
 800d4ae:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800d4b2:	f804 1f01 	strb.w	r1, [r4, #1]!
 800d4b6:	42ac      	cmp	r4, r5
 800d4b8:	d1fb      	bne.n	800d4b2 <__sccl+0x1a>
 800d4ba:	b913      	cbnz	r3, 800d4c2 <__sccl+0x2a>
 800d4bc:	3a01      	subs	r2, #1
 800d4be:	4610      	mov	r0, r2
 800d4c0:	bd70      	pop	{r4, r5, r6, pc}
 800d4c2:	f081 0401 	eor.w	r4, r1, #1
 800d4c6:	54c4      	strb	r4, [r0, r3]
 800d4c8:	1c51      	adds	r1, r2, #1
 800d4ca:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800d4ce:	1e4e      	subs	r6, r1, #1
 800d4d0:	2d2d      	cmp	r5, #45	; 0x2d
 800d4d2:	460a      	mov	r2, r1
 800d4d4:	d006      	beq.n	800d4e4 <__sccl+0x4c>
 800d4d6:	2d5d      	cmp	r5, #93	; 0x5d
 800d4d8:	d0f1      	beq.n	800d4be <__sccl+0x26>
 800d4da:	b90d      	cbnz	r5, 800d4e0 <__sccl+0x48>
 800d4dc:	4632      	mov	r2, r6
 800d4de:	e7ee      	b.n	800d4be <__sccl+0x26>
 800d4e0:	462b      	mov	r3, r5
 800d4e2:	e7f0      	b.n	800d4c6 <__sccl+0x2e>
 800d4e4:	780e      	ldrb	r6, [r1, #0]
 800d4e6:	2e5d      	cmp	r6, #93	; 0x5d
 800d4e8:	d0fa      	beq.n	800d4e0 <__sccl+0x48>
 800d4ea:	42b3      	cmp	r3, r6
 800d4ec:	dcf8      	bgt.n	800d4e0 <__sccl+0x48>
 800d4ee:	3301      	adds	r3, #1
 800d4f0:	429e      	cmp	r6, r3
 800d4f2:	54c4      	strb	r4, [r0, r3]
 800d4f4:	dcfb      	bgt.n	800d4ee <__sccl+0x56>
 800d4f6:	3102      	adds	r1, #2
 800d4f8:	e7e7      	b.n	800d4ca <__sccl+0x32>

0800d4fa <_strtol_l.isra.0>:
 800d4fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4fe:	4680      	mov	r8, r0
 800d500:	4689      	mov	r9, r1
 800d502:	4692      	mov	sl, r2
 800d504:	461e      	mov	r6, r3
 800d506:	460f      	mov	r7, r1
 800d508:	463d      	mov	r5, r7
 800d50a:	9808      	ldr	r0, [sp, #32]
 800d50c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d510:	f7ff fc38 	bl	800cd84 <__locale_ctype_ptr_l>
 800d514:	4420      	add	r0, r4
 800d516:	7843      	ldrb	r3, [r0, #1]
 800d518:	f013 0308 	ands.w	r3, r3, #8
 800d51c:	d132      	bne.n	800d584 <_strtol_l.isra.0+0x8a>
 800d51e:	2c2d      	cmp	r4, #45	; 0x2d
 800d520:	d132      	bne.n	800d588 <_strtol_l.isra.0+0x8e>
 800d522:	2201      	movs	r2, #1
 800d524:	787c      	ldrb	r4, [r7, #1]
 800d526:	1cbd      	adds	r5, r7, #2
 800d528:	2e00      	cmp	r6, #0
 800d52a:	d05d      	beq.n	800d5e8 <_strtol_l.isra.0+0xee>
 800d52c:	2e10      	cmp	r6, #16
 800d52e:	d109      	bne.n	800d544 <_strtol_l.isra.0+0x4a>
 800d530:	2c30      	cmp	r4, #48	; 0x30
 800d532:	d107      	bne.n	800d544 <_strtol_l.isra.0+0x4a>
 800d534:	782b      	ldrb	r3, [r5, #0]
 800d536:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d53a:	2b58      	cmp	r3, #88	; 0x58
 800d53c:	d14f      	bne.n	800d5de <_strtol_l.isra.0+0xe4>
 800d53e:	2610      	movs	r6, #16
 800d540:	786c      	ldrb	r4, [r5, #1]
 800d542:	3502      	adds	r5, #2
 800d544:	2a00      	cmp	r2, #0
 800d546:	bf14      	ite	ne
 800d548:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800d54c:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800d550:	2700      	movs	r7, #0
 800d552:	fbb1 fcf6 	udiv	ip, r1, r6
 800d556:	4638      	mov	r0, r7
 800d558:	fb06 1e1c 	mls	lr, r6, ip, r1
 800d55c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800d560:	2b09      	cmp	r3, #9
 800d562:	d817      	bhi.n	800d594 <_strtol_l.isra.0+0x9a>
 800d564:	461c      	mov	r4, r3
 800d566:	42a6      	cmp	r6, r4
 800d568:	dd23      	ble.n	800d5b2 <_strtol_l.isra.0+0xb8>
 800d56a:	1c7b      	adds	r3, r7, #1
 800d56c:	d007      	beq.n	800d57e <_strtol_l.isra.0+0x84>
 800d56e:	4584      	cmp	ip, r0
 800d570:	d31c      	bcc.n	800d5ac <_strtol_l.isra.0+0xb2>
 800d572:	d101      	bne.n	800d578 <_strtol_l.isra.0+0x7e>
 800d574:	45a6      	cmp	lr, r4
 800d576:	db19      	blt.n	800d5ac <_strtol_l.isra.0+0xb2>
 800d578:	2701      	movs	r7, #1
 800d57a:	fb00 4006 	mla	r0, r0, r6, r4
 800d57e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d582:	e7eb      	b.n	800d55c <_strtol_l.isra.0+0x62>
 800d584:	462f      	mov	r7, r5
 800d586:	e7bf      	b.n	800d508 <_strtol_l.isra.0+0xe>
 800d588:	2c2b      	cmp	r4, #43	; 0x2b
 800d58a:	bf04      	itt	eq
 800d58c:	1cbd      	addeq	r5, r7, #2
 800d58e:	787c      	ldrbeq	r4, [r7, #1]
 800d590:	461a      	mov	r2, r3
 800d592:	e7c9      	b.n	800d528 <_strtol_l.isra.0+0x2e>
 800d594:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800d598:	2b19      	cmp	r3, #25
 800d59a:	d801      	bhi.n	800d5a0 <_strtol_l.isra.0+0xa6>
 800d59c:	3c37      	subs	r4, #55	; 0x37
 800d59e:	e7e2      	b.n	800d566 <_strtol_l.isra.0+0x6c>
 800d5a0:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800d5a4:	2b19      	cmp	r3, #25
 800d5a6:	d804      	bhi.n	800d5b2 <_strtol_l.isra.0+0xb8>
 800d5a8:	3c57      	subs	r4, #87	; 0x57
 800d5aa:	e7dc      	b.n	800d566 <_strtol_l.isra.0+0x6c>
 800d5ac:	f04f 37ff 	mov.w	r7, #4294967295
 800d5b0:	e7e5      	b.n	800d57e <_strtol_l.isra.0+0x84>
 800d5b2:	1c7b      	adds	r3, r7, #1
 800d5b4:	d108      	bne.n	800d5c8 <_strtol_l.isra.0+0xce>
 800d5b6:	2322      	movs	r3, #34	; 0x22
 800d5b8:	4608      	mov	r0, r1
 800d5ba:	f8c8 3000 	str.w	r3, [r8]
 800d5be:	f1ba 0f00 	cmp.w	sl, #0
 800d5c2:	d107      	bne.n	800d5d4 <_strtol_l.isra.0+0xda>
 800d5c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5c8:	b102      	cbz	r2, 800d5cc <_strtol_l.isra.0+0xd2>
 800d5ca:	4240      	negs	r0, r0
 800d5cc:	f1ba 0f00 	cmp.w	sl, #0
 800d5d0:	d0f8      	beq.n	800d5c4 <_strtol_l.isra.0+0xca>
 800d5d2:	b10f      	cbz	r7, 800d5d8 <_strtol_l.isra.0+0xde>
 800d5d4:	f105 39ff 	add.w	r9, r5, #4294967295
 800d5d8:	f8ca 9000 	str.w	r9, [sl]
 800d5dc:	e7f2      	b.n	800d5c4 <_strtol_l.isra.0+0xca>
 800d5de:	2430      	movs	r4, #48	; 0x30
 800d5e0:	2e00      	cmp	r6, #0
 800d5e2:	d1af      	bne.n	800d544 <_strtol_l.isra.0+0x4a>
 800d5e4:	2608      	movs	r6, #8
 800d5e6:	e7ad      	b.n	800d544 <_strtol_l.isra.0+0x4a>
 800d5e8:	2c30      	cmp	r4, #48	; 0x30
 800d5ea:	d0a3      	beq.n	800d534 <_strtol_l.isra.0+0x3a>
 800d5ec:	260a      	movs	r6, #10
 800d5ee:	e7a9      	b.n	800d544 <_strtol_l.isra.0+0x4a>

0800d5f0 <_strtol_r>:
 800d5f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d5f2:	4c06      	ldr	r4, [pc, #24]	; (800d60c <_strtol_r+0x1c>)
 800d5f4:	4d06      	ldr	r5, [pc, #24]	; (800d610 <_strtol_r+0x20>)
 800d5f6:	6824      	ldr	r4, [r4, #0]
 800d5f8:	6a24      	ldr	r4, [r4, #32]
 800d5fa:	2c00      	cmp	r4, #0
 800d5fc:	bf08      	it	eq
 800d5fe:	462c      	moveq	r4, r5
 800d600:	9400      	str	r4, [sp, #0]
 800d602:	f7ff ff7a 	bl	800d4fa <_strtol_l.isra.0>
 800d606:	b003      	add	sp, #12
 800d608:	bd30      	pop	{r4, r5, pc}
 800d60a:	bf00      	nop
 800d60c:	20000028 	.word	0x20000028
 800d610:	200000f0 	.word	0x200000f0

0800d614 <__submore>:
 800d614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d618:	460c      	mov	r4, r1
 800d61a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d61c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d620:	4299      	cmp	r1, r3
 800d622:	d11b      	bne.n	800d65c <__submore+0x48>
 800d624:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d628:	f7fc fb7c 	bl	8009d24 <_malloc_r>
 800d62c:	b918      	cbnz	r0, 800d636 <__submore+0x22>
 800d62e:	f04f 30ff 	mov.w	r0, #4294967295
 800d632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d63a:	63a3      	str	r3, [r4, #56]	; 0x38
 800d63c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d640:	6360      	str	r0, [r4, #52]	; 0x34
 800d642:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d646:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d64a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d64e:	7043      	strb	r3, [r0, #1]
 800d650:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d654:	7003      	strb	r3, [r0, #0]
 800d656:	6020      	str	r0, [r4, #0]
 800d658:	2000      	movs	r0, #0
 800d65a:	e7ea      	b.n	800d632 <__submore+0x1e>
 800d65c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d65e:	0077      	lsls	r7, r6, #1
 800d660:	463a      	mov	r2, r7
 800d662:	f7ff fbde 	bl	800ce22 <_realloc_r>
 800d666:	4605      	mov	r5, r0
 800d668:	2800      	cmp	r0, #0
 800d66a:	d0e0      	beq.n	800d62e <__submore+0x1a>
 800d66c:	eb00 0806 	add.w	r8, r0, r6
 800d670:	4601      	mov	r1, r0
 800d672:	4632      	mov	r2, r6
 800d674:	4640      	mov	r0, r8
 800d676:	f7fe fc55 	bl	800bf24 <memcpy>
 800d67a:	f8c4 8000 	str.w	r8, [r4]
 800d67e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d682:	e7e9      	b.n	800d658 <__submore+0x44>

0800d684 <__ascii_wctomb>:
 800d684:	b149      	cbz	r1, 800d69a <__ascii_wctomb+0x16>
 800d686:	2aff      	cmp	r2, #255	; 0xff
 800d688:	bf8b      	itete	hi
 800d68a:	238a      	movhi	r3, #138	; 0x8a
 800d68c:	700a      	strbls	r2, [r1, #0]
 800d68e:	6003      	strhi	r3, [r0, #0]
 800d690:	2001      	movls	r0, #1
 800d692:	bf88      	it	hi
 800d694:	f04f 30ff 	movhi.w	r0, #4294967295
 800d698:	4770      	bx	lr
 800d69a:	4608      	mov	r0, r1
 800d69c:	4770      	bx	lr

0800d69e <_malloc_usable_size_r>:
 800d69e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6a2:	1f18      	subs	r0, r3, #4
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	bfbc      	itt	lt
 800d6a8:	580b      	ldrlt	r3, [r1, r0]
 800d6aa:	18c0      	addlt	r0, r0, r3
 800d6ac:	4770      	bx	lr
	...

0800d6b0 <_init>:
 800d6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6b2:	bf00      	nop
 800d6b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6b6:	bc08      	pop	{r3}
 800d6b8:	469e      	mov	lr, r3
 800d6ba:	4770      	bx	lr

0800d6bc <_fini>:
 800d6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6be:	bf00      	nop
 800d6c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6c2:	bc08      	pop	{r3}
 800d6c4:	469e      	mov	lr, r3
 800d6c6:	4770      	bx	lr
