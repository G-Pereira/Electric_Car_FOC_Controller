
fiat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b2c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000065c  08008c38  08008c38  00018c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009294  08009294  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08009294  08009294  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009294  08009294  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009294  08009294  00019294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009298  08009298  00019298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800929c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004884  20000088  08009324  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000490c  08009324  0002490c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013034  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c82  00000000  00000000  000330e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001110  00000000  00000000  00035d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fb8  00000000  00000000  00036e78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016cba  00000000  00000000  00037e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f5b9  00000000  00000000  0004eaea  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00077c93  00000000  00000000  0005e0a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d5d36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b20  00000000  00000000  000d5db4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08008c20 	.word	0x08008c20

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08008c20 	.word	0x08008c20

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2uiz>:
 80008e8:	004a      	lsls	r2, r1, #1
 80008ea:	d211      	bcs.n	8000910 <__aeabi_d2uiz+0x28>
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d211      	bcs.n	8000916 <__aeabi_d2uiz+0x2e>
 80008f2:	d50d      	bpl.n	8000910 <__aeabi_d2uiz+0x28>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d40e      	bmi.n	800091c <__aeabi_d2uiz+0x34>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	fa23 f002 	lsr.w	r0, r3, r2
 800090e:	4770      	bx	lr
 8000910:	f04f 0000 	mov.w	r0, #0
 8000914:	4770      	bx	lr
 8000916:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091a:	d102      	bne.n	8000922 <__aeabi_d2uiz+0x3a>
 800091c:	f04f 30ff 	mov.w	r0, #4294967295
 8000920:	4770      	bx	lr
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	4770      	bx	lr

08000928 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	2110      	movs	r1, #16
 8000930:	4802      	ldr	r0, [pc, #8]	; (800093c <SELECT+0x14>)
 8000932:	f002 f833 	bl	800299c <HAL_GPIO_WritePin>
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40010800 	.word	0x40010800

08000940 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000944:	2201      	movs	r2, #1
 8000946:	2110      	movs	r1, #16
 8000948:	4802      	ldr	r0, [pc, #8]	; (8000954 <DESELECT+0x14>)
 800094a:	f002 f827 	bl	800299c <HAL_GPIO_WritePin>
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40010800 	.word	0x40010800

08000958 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000962:	bf00      	nop
 8000964:	4808      	ldr	r0, [pc, #32]	; (8000988 <SPI_TxByte+0x30>)
 8000966:	f003 f97a 	bl	8003c5e <HAL_SPI_GetState>
 800096a:	4603      	mov	r3, r0
 800096c:	2b01      	cmp	r3, #1
 800096e:	d1f9      	bne.n	8000964 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000970:	1df9      	adds	r1, r7, #7
 8000972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000976:	2201      	movs	r2, #1
 8000978:	4803      	ldr	r0, [pc, #12]	; (8000988 <SPI_TxByte+0x30>)
 800097a:	f002 fe9a 	bl	80036b2 <HAL_SPI_Transmit>
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20001814 	.word	0x20001814

0800098c <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000992:	23ff      	movs	r3, #255	; 0xff
 8000994:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 800099a:	bf00      	nop
 800099c:	4809      	ldr	r0, [pc, #36]	; (80009c4 <SPI_RxByte+0x38>)
 800099e:	f003 f95e 	bl	8003c5e <HAL_SPI_GetState>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d1f9      	bne.n	800099c <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80009a8:	1dba      	adds	r2, r7, #6
 80009aa:	1df9      	adds	r1, r7, #7
 80009ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	2301      	movs	r3, #1
 80009b4:	4803      	ldr	r0, [pc, #12]	; (80009c4 <SPI_RxByte+0x38>)
 80009b6:	f002 ffb0 	bl	800391a <HAL_SPI_TransmitReceive>
  
  return data;
 80009ba:	79bb      	ldrb	r3, [r7, #6]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20001814 	.word	0x20001814

080009c8 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80009d0:	f7ff ffdc 	bl	800098c <SPI_RxByte>
 80009d4:	4603      	mov	r3, r0
 80009d6:	461a      	mov	r2, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	701a      	strb	r2, [r3, #0]
}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <SD_ReadyWait+0x34>)
 80009ec:	2232      	movs	r2, #50	; 0x32
 80009ee:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 80009f0:	f7ff ffcc 	bl	800098c <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 80009f4:	f7ff ffca 	bl	800098c <SPI_RxByte>
 80009f8:	4603      	mov	r3, r0
 80009fa:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	2bff      	cmp	r3, #255	; 0xff
 8000a00:	d004      	beq.n	8000a0c <SD_ReadyWait+0x28>
 8000a02:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <SD_ReadyWait+0x34>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d1f3      	bne.n	80009f4 <SD_ReadyWait+0x10>
  
  return res;
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	2000289c 	.word	0x2000289c

08000a1c <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000a22:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000a26:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8000a28:	f7ff ff8a 	bl	8000940 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	e005      	b.n	8000a3e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000a32:	20ff      	movs	r0, #255	; 0xff
 8000a34:	f7ff ff90 	bl	8000958 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	2b09      	cmp	r3, #9
 8000a42:	ddf6      	ble.n	8000a32 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8000a44:	f7ff ff70 	bl	8000928 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8000a48:	2340      	movs	r3, #64	; 0x40
 8000a4a:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000a5c:	2395      	movs	r3, #149	; 0x95
 8000a5e:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	e009      	b.n	8000a7a <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000a66:	1d3a      	adds	r2, r7, #4
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff ff72 	bl	8000958 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	3301      	adds	r3, #1
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	2b05      	cmp	r3, #5
 8000a7e:	ddf2      	ble.n	8000a66 <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8000a80:	e002      	b.n	8000a88 <SD_PowerOn+0x6c>
  {
    Count--;
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	3b01      	subs	r3, #1
 8000a86:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000a88:	f7ff ff80 	bl	800098c <SPI_RxByte>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d002      	beq.n	8000a98 <SD_PowerOn+0x7c>
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d1f4      	bne.n	8000a82 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8000a98:	f7ff ff52 	bl	8000940 <DESELECT>
  SPI_TxByte(0XFF);
 8000a9c:	20ff      	movs	r0, #255	; 0xff
 8000a9e:	f7ff ff5b 	bl	8000958 <SPI_TxByte>
  
  PowerFlag = 1;
 8000aa2:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <SD_PowerOn+0x94>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	701a      	strb	r2, [r3, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	3718      	adds	r7, #24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	200000a5 	.word	0x200000a5

08000ab4 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <SD_PowerOff+0x14>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	200000a5 	.word	0x200000a5

08000acc <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000ad0:	4b02      	ldr	r3, [pc, #8]	; (8000adc <SD_CheckPower+0x10>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr
 8000adc:	200000a5 	.word	0x200000a5

08000ae0 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8000aea:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <SD_RxDataBlock+0x68>)
 8000aec:	220a      	movs	r2, #10
 8000aee:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8000af0:	f7ff ff4c 	bl	800098c <SPI_RxByte>
 8000af4:	4603      	mov	r3, r0
 8000af6:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000af8:	7bfb      	ldrb	r3, [r7, #15]
 8000afa:	2bff      	cmp	r3, #255	; 0xff
 8000afc:	d104      	bne.n	8000b08 <SD_RxDataBlock+0x28>
 8000afe:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <SD_RxDataBlock+0x68>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d1f3      	bne.n	8000af0 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
 8000b0a:	2bfe      	cmp	r3, #254	; 0xfe
 8000b0c:	d001      	beq.n	8000b12 <SD_RxDataBlock+0x32>
    return FALSE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e016      	b.n	8000b40 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	1c5a      	adds	r2, r3, #1
 8000b16:	607a      	str	r2, [r7, #4]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ff55 	bl	80009c8 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	1c5a      	adds	r2, r3, #1
 8000b22:	607a      	str	r2, [r7, #4]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ff4f 	bl	80009c8 <SPI_RxBytePtr>
  } while(btr -= 2);
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	3b02      	subs	r3, #2
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d1ed      	bne.n	8000b12 <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8000b36:	f7ff ff29 	bl	800098c <SPI_RxByte>
  SPI_RxByte();
 8000b3a:	f7ff ff27 	bl	800098c <SPI_RxByte>
  
  return TRUE;
 8000b3e:	2301      	movs	r3, #1
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	2000289d 	.word	0x2000289d

08000b4c <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	460b      	mov	r3, r1
 8000b56:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000b5c:	f7ff ff42 	bl	80009e4 <SD_ReadyWait>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2bff      	cmp	r3, #255	; 0xff
 8000b64:	d001      	beq.n	8000b6a <SD_TxDataBlock+0x1e>
    return FALSE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	e040      	b.n	8000bec <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8000b6a:	78fb      	ldrb	r3, [r7, #3]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff fef3 	bl	8000958 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 8000b72:	78fb      	ldrb	r3, [r7, #3]
 8000b74:	2bfd      	cmp	r3, #253	; 0xfd
 8000b76:	d031      	beq.n	8000bdc <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	1c5a      	adds	r2, r3, #1
 8000b80:	607a      	str	r2, [r7, #4]
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fee7 	bl	8000958 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	1c5a      	adds	r2, r3, #1
 8000b8e:	607a      	str	r2, [r7, #4]
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fee0 	bl	8000958 <SPI_TxByte>
    } while (--wc);
 8000b98:	7bbb      	ldrb	r3, [r7, #14]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	73bb      	strb	r3, [r7, #14]
 8000b9e:	7bbb      	ldrb	r3, [r7, #14]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d1eb      	bne.n	8000b7c <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8000ba4:	f7ff fef2 	bl	800098c <SPI_RxByte>
    SPI_RxByte();
 8000ba8:	f7ff fef0 	bl	800098c <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8000bac:	e00b      	b.n	8000bc6 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8000bae:	f7ff feed 	bl	800098c <SPI_RxByte>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
 8000bb8:	f003 031f 	and.w	r3, r3, #31
 8000bbc:	2b05      	cmp	r3, #5
 8000bbe:	d006      	beq.n	8000bce <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8000bc0:	7b7b      	ldrb	r3, [r7, #13]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8000bc6:	7b7b      	ldrb	r3, [r7, #13]
 8000bc8:	2b40      	cmp	r3, #64	; 0x40
 8000bca:	d9f0      	bls.n	8000bae <SD_TxDataBlock+0x62>
 8000bcc:	e000      	b.n	8000bd0 <SD_TxDataBlock+0x84>
        break;
 8000bce:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000bd0:	bf00      	nop
 8000bd2:	f7ff fedb 	bl	800098c <SPI_RxByte>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d0fa      	beq.n	8000bd2 <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8000bdc:	7bfb      	ldrb	r3, [r7, #15]
 8000bde:	f003 031f 	and.w	r3, r3, #31
 8000be2:	2b05      	cmp	r3, #5
 8000be4:	d101      	bne.n	8000bea <SD_TxDataBlock+0x9e>
    return TRUE;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e000      	b.n	8000bec <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000bea:	2300      	movs	r3, #0
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000c00:	f7ff fef0 	bl	80009e4 <SD_ReadyWait>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2bff      	cmp	r3, #255	; 0xff
 8000c08:	d001      	beq.n	8000c0e <SD_SendCmd+0x1a>
    return 0xFF;
 8000c0a:	23ff      	movs	r3, #255	; 0xff
 8000c0c:	e040      	b.n	8000c90 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fea1 	bl	8000958 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	0e1b      	lsrs	r3, r3, #24
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fe9b 	bl	8000958 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	0c1b      	lsrs	r3, r3, #16
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fe95 	bl	8000958 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	0a1b      	lsrs	r3, r3, #8
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fe8f 	bl	8000958 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fe8a 	bl	8000958 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8000c44:	2300      	movs	r3, #0
 8000c46:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	2b40      	cmp	r3, #64	; 0x40
 8000c4c:	d101      	bne.n	8000c52 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000c4e:	2395      	movs	r3, #149	; 0x95
 8000c50:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	2b48      	cmp	r3, #72	; 0x48
 8000c56:	d101      	bne.n	8000c5c <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000c58:	2387      	movs	r3, #135	; 0x87
 8000c5a:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fe7a 	bl	8000958 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	2b4c      	cmp	r3, #76	; 0x4c
 8000c68:	d101      	bne.n	8000c6e <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000c6a:	f7ff fe8f 	bl	800098c <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8000c6e:	230a      	movs	r3, #10
 8000c70:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8000c72:	f7ff fe8b 	bl	800098c <SPI_RxByte>
 8000c76:	4603      	mov	r3, r0
 8000c78:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000c7a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	da05      	bge.n	8000c8e <SD_SendCmd+0x9a>
 8000c82:	7bbb      	ldrb	r3, [r7, #14]
 8000c84:	3b01      	subs	r3, #1
 8000c86:	73bb      	strb	r3, [r7, #14]
 8000c88:	7bbb      	ldrb	r3, [r7, #14]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d1f1      	bne.n	8000c72 <SD_SendCmd+0x7e>
  
  return res;
 8000c8e:	7b7b      	ldrb	r3, [r7, #13]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8000ca8:	2301      	movs	r3, #1
 8000caa:	e0d5      	b.n	8000e58 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000cac:	4b6c      	ldr	r3, [pc, #432]	; (8000e60 <SD_disk_initialize+0x1c8>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d003      	beq.n	8000cc2 <SD_disk_initialize+0x2a>
    return Stat;        
 8000cba:	4b69      	ldr	r3, [pc, #420]	; (8000e60 <SD_disk_initialize+0x1c8>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	e0ca      	b.n	8000e58 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 8000cc2:	f7ff feab 	bl	8000a1c <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8000cc6:	f7ff fe2f 	bl	8000928 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2040      	movs	r0, #64	; 0x40
 8000cd2:	f7ff ff8f 	bl	8000bf4 <SD_SendCmd>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	f040 80a5 	bne.w	8000e28 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000cde:	4b61      	ldr	r3, [pc, #388]	; (8000e64 <SD_disk_initialize+0x1cc>)
 8000ce0:	2264      	movs	r2, #100	; 0x64
 8000ce2:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8000ce4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000ce8:	2048      	movs	r0, #72	; 0x48
 8000cea:	f7ff ff83 	bl	8000bf4 <SD_SendCmd>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d158      	bne.n	8000da6 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	73fb      	strb	r3, [r7, #15]
 8000cf8:	e00c      	b.n	8000d14 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8000cfa:	7bfc      	ldrb	r4, [r7, #15]
 8000cfc:	f7ff fe46 	bl	800098c <SPI_RxByte>
 8000d00:	4603      	mov	r3, r0
 8000d02:	461a      	mov	r2, r3
 8000d04:	f107 0310 	add.w	r3, r7, #16
 8000d08:	4423      	add	r3, r4
 8000d0a:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
 8000d10:	3301      	adds	r3, #1
 8000d12:	73fb      	strb	r3, [r7, #15]
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
 8000d16:	2b03      	cmp	r3, #3
 8000d18:	d9ef      	bls.n	8000cfa <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8000d1a:	7abb      	ldrb	r3, [r7, #10]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	f040 8083 	bne.w	8000e28 <SD_disk_initialize+0x190>
 8000d22:	7afb      	ldrb	r3, [r7, #11]
 8000d24:	2baa      	cmp	r3, #170	; 0xaa
 8000d26:	d17f      	bne.n	8000e28 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2077      	movs	r0, #119	; 0x77
 8000d2c:	f7ff ff62 	bl	8000bf4 <SD_SendCmd>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d807      	bhi.n	8000d46 <SD_disk_initialize+0xae>
 8000d36:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000d3a:	2069      	movs	r0, #105	; 0x69
 8000d3c:	f7ff ff5a 	bl	8000bf4 <SD_SendCmd>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d005      	beq.n	8000d52 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8000d46:	4b47      	ldr	r3, [pc, #284]	; (8000e64 <SD_disk_initialize+0x1cc>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d1eb      	bne.n	8000d28 <SD_disk_initialize+0x90>
 8000d50:	e000      	b.n	8000d54 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000d52:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8000d54:	4b43      	ldr	r3, [pc, #268]	; (8000e64 <SD_disk_initialize+0x1cc>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d064      	beq.n	8000e28 <SD_disk_initialize+0x190>
 8000d5e:	2100      	movs	r1, #0
 8000d60:	207a      	movs	r0, #122	; 0x7a
 8000d62:	f7ff ff47 	bl	8000bf4 <SD_SendCmd>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d15d      	bne.n	8000e28 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	73fb      	strb	r3, [r7, #15]
 8000d70:	e00c      	b.n	8000d8c <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000d72:	7bfc      	ldrb	r4, [r7, #15]
 8000d74:	f7ff fe0a 	bl	800098c <SPI_RxByte>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	f107 0310 	add.w	r3, r7, #16
 8000d80:	4423      	add	r3, r4
 8000d82:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	d9ef      	bls.n	8000d72 <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8000d92:	7a3b      	ldrb	r3, [r7, #8]
 8000d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <SD_disk_initialize+0x108>
 8000d9c:	2306      	movs	r3, #6
 8000d9e:	e000      	b.n	8000da2 <SD_disk_initialize+0x10a>
 8000da0:	2302      	movs	r3, #2
 8000da2:	73bb      	strb	r3, [r7, #14]
 8000da4:	e040      	b.n	8000e28 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000da6:	2100      	movs	r1, #0
 8000da8:	2077      	movs	r0, #119	; 0x77
 8000daa:	f7ff ff23 	bl	8000bf4 <SD_SendCmd>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d808      	bhi.n	8000dc6 <SD_disk_initialize+0x12e>
 8000db4:	2100      	movs	r1, #0
 8000db6:	2069      	movs	r0, #105	; 0x69
 8000db8:	f7ff ff1c 	bl	8000bf4 <SD_SendCmd>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d801      	bhi.n	8000dc6 <SD_disk_initialize+0x12e>
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	e000      	b.n	8000dc8 <SD_disk_initialize+0x130>
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8000dca:	7bbb      	ldrb	r3, [r7, #14]
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d10e      	bne.n	8000dee <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2077      	movs	r0, #119	; 0x77
 8000dd4:	f7ff ff0e 	bl	8000bf4 <SD_SendCmd>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d80e      	bhi.n	8000dfc <SD_disk_initialize+0x164>
 8000dde:	2100      	movs	r1, #0
 8000de0:	2069      	movs	r0, #105	; 0x69
 8000de2:	f7ff ff07 	bl	8000bf4 <SD_SendCmd>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d107      	bne.n	8000dfc <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000dec:	e00d      	b.n	8000e0a <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000dee:	2100      	movs	r1, #0
 8000df0:	2041      	movs	r0, #65	; 0x41
 8000df2:	f7ff feff 	bl	8000bf4 <SD_SendCmd>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d005      	beq.n	8000e08 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000dfc:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <SD_disk_initialize+0x1cc>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d1e1      	bne.n	8000dca <SD_disk_initialize+0x132>
 8000e06:	e000      	b.n	8000e0a <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8000e08:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8000e0a:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <SD_disk_initialize+0x1cc>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d007      	beq.n	8000e24 <SD_disk_initialize+0x18c>
 8000e14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e18:	2050      	movs	r0, #80	; 0x50
 8000e1a:	f7ff feeb 	bl	8000bf4 <SD_SendCmd>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8000e28:	4a0f      	ldr	r2, [pc, #60]	; (8000e68 <SD_disk_initialize+0x1d0>)
 8000e2a:	7bbb      	ldrb	r3, [r7, #14]
 8000e2c:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8000e2e:	f7ff fd87 	bl	8000940 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000e32:	f7ff fdab 	bl	800098c <SPI_RxByte>
  
  if (type) 
 8000e36:	7bbb      	ldrb	r3, [r7, #14]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d008      	beq.n	8000e4e <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <SD_disk_initialize+0x1c8>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	f023 0301 	bic.w	r3, r3, #1
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <SD_disk_initialize+0x1c8>)
 8000e4a:	701a      	strb	r2, [r3, #0]
 8000e4c:	e001      	b.n	8000e52 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000e4e:	f7ff fe31 	bl	8000ab4 <SD_PowerOff>
  }
  
  return Stat;
 8000e52:	4b03      	ldr	r3, [pc, #12]	; (8000e60 <SD_disk_initialize+0x1c8>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	b2db      	uxtb	r3, r3
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd90      	pop	{r4, r7, pc}
 8000e60:	20000000 	.word	0x20000000
 8000e64:	2000289d 	.word	0x2000289d
 8000e68:	200000a4 	.word	0x200000a4

08000e6c <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <SD_disk_status+0x14>
    return STA_NOINIT; 
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e002      	b.n	8000e86 <SD_disk_status+0x1a>
  
  return Stat;
 8000e80:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <SD_disk_status+0x24>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	b2db      	uxtb	r3, r3
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	20000000 	.word	0x20000000

08000e94 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
 8000e9e:	603b      	str	r3, [r7, #0]
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d102      	bne.n	8000eb0 <SD_disk_read+0x1c>
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d101      	bne.n	8000eb4 <SD_disk_read+0x20>
    return RES_PARERR;
 8000eb0:	2304      	movs	r3, #4
 8000eb2:	e051      	b.n	8000f58 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8000eb4:	4b2a      	ldr	r3, [pc, #168]	; (8000f60 <SD_disk_read+0xcc>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e048      	b.n	8000f58 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8000ec6:	4b27      	ldr	r3, [pc, #156]	; (8000f64 <SD_disk_read+0xd0>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	f003 0304 	and.w	r3, r3, #4
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d102      	bne.n	8000ed8 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	025b      	lsls	r3, r3, #9
 8000ed6:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8000ed8:	f7ff fd26 	bl	8000928 <SELECT>
  
  if (count == 1) 
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d111      	bne.n	8000f06 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	2051      	movs	r0, #81	; 0x51
 8000ee6:	f7ff fe85 	bl	8000bf4 <SD_SendCmd>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d129      	bne.n	8000f44 <SD_disk_read+0xb0>
 8000ef0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ef4:	68b8      	ldr	r0, [r7, #8]
 8000ef6:	f7ff fdf3 	bl	8000ae0 <SD_RxDataBlock>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d021      	beq.n	8000f44 <SD_disk_read+0xb0>
      count = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	603b      	str	r3, [r7, #0]
 8000f04:	e01e      	b.n	8000f44 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	2052      	movs	r0, #82	; 0x52
 8000f0a:	f7ff fe73 	bl	8000bf4 <SD_SendCmd>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d117      	bne.n	8000f44 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000f14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f18:	68b8      	ldr	r0, [r7, #8]
 8000f1a:	f7ff fde1 	bl	8000ae0 <SD_RxDataBlock>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d00a      	beq.n	8000f3a <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f2a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	603b      	str	r3, [r7, #0]
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d1ed      	bne.n	8000f14 <SD_disk_read+0x80>
 8000f38:	e000      	b.n	8000f3c <SD_disk_read+0xa8>
          break;
 8000f3a:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	204c      	movs	r0, #76	; 0x4c
 8000f40:	f7ff fe58 	bl	8000bf4 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8000f44:	f7ff fcfc 	bl	8000940 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8000f48:	f7ff fd20 	bl	800098c <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	bf14      	ite	ne
 8000f52:	2301      	movne	r3, #1
 8000f54:	2300      	moveq	r3, #0
 8000f56:	b2db      	uxtb	r3, r3
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000000 	.word	0x20000000
 8000f64:	200000a4 	.word	0x200000a4

08000f68 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	607a      	str	r2, [r7, #4]
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	4603      	mov	r3, r0
 8000f76:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d102      	bne.n	8000f84 <SD_disk_write+0x1c>
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d101      	bne.n	8000f88 <SD_disk_write+0x20>
    return RES_PARERR;
 8000f84:	2304      	movs	r3, #4
 8000f86:	e06b      	b.n	8001060 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8000f88:	4b37      	ldr	r3, [pc, #220]	; (8001068 <SD_disk_write+0x100>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <SD_disk_write+0x32>
    return RES_NOTRDY;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e062      	b.n	8001060 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8000f9a:	4b33      	ldr	r3, [pc, #204]	; (8001068 <SD_disk_write+0x100>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	f003 0304 	and.w	r3, r3, #4
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <SD_disk_write+0x44>
    return RES_WRPRT;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	e059      	b.n	8001060 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8000fac:	4b2f      	ldr	r3, [pc, #188]	; (800106c <SD_disk_write+0x104>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	f003 0304 	and.w	r3, r3, #4
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d102      	bne.n	8000fbe <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	025b      	lsls	r3, r3, #9
 8000fbc:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8000fbe:	f7ff fcb3 	bl	8000928 <SELECT>
  
  if (count == 1) 
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d110      	bne.n	8000fea <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000fc8:	6879      	ldr	r1, [r7, #4]
 8000fca:	2058      	movs	r0, #88	; 0x58
 8000fcc:	f7ff fe12 	bl	8000bf4 <SD_SendCmd>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d13a      	bne.n	800104c <SD_disk_write+0xe4>
 8000fd6:	21fe      	movs	r1, #254	; 0xfe
 8000fd8:	68b8      	ldr	r0, [r7, #8]
 8000fda:	f7ff fdb7 	bl	8000b4c <SD_TxDataBlock>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d033      	beq.n	800104c <SD_disk_write+0xe4>
      count = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	e030      	b.n	800104c <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8000fea:	4b20      	ldr	r3, [pc, #128]	; (800106c <SD_disk_write+0x104>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d007      	beq.n	8001006 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	2077      	movs	r0, #119	; 0x77
 8000ffa:	f7ff fdfb 	bl	8000bf4 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000ffe:	6839      	ldr	r1, [r7, #0]
 8001000:	2057      	movs	r0, #87	; 0x57
 8001002:	f7ff fdf7 	bl	8000bf4 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	2059      	movs	r0, #89	; 0x59
 800100a:	f7ff fdf3 	bl	8000bf4 <SD_SendCmd>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d11b      	bne.n	800104c <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001014:	21fc      	movs	r1, #252	; 0xfc
 8001016:	68b8      	ldr	r0, [r7, #8]
 8001018:	f7ff fd98 	bl	8000b4c <SD_TxDataBlock>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d00a      	beq.n	8001038 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001028:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	3b01      	subs	r3, #1
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1ee      	bne.n	8001014 <SD_disk_write+0xac>
 8001036:	e000      	b.n	800103a <SD_disk_write+0xd2>
          break;
 8001038:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 800103a:	21fd      	movs	r1, #253	; 0xfd
 800103c:	2000      	movs	r0, #0
 800103e:	f7ff fd85 	bl	8000b4c <SD_TxDataBlock>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d101      	bne.n	800104c <SD_disk_write+0xe4>
      {        
        count = 1;
 8001048:	2301      	movs	r3, #1
 800104a:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 800104c:	f7ff fc78 	bl	8000940 <DESELECT>
  SPI_RxByte();
 8001050:	f7ff fc9c 	bl	800098c <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	bf14      	ite	ne
 800105a:	2301      	movne	r3, #1
 800105c:	2300      	moveq	r3, #0
 800105e:	b2db      	uxtb	r3, r3
}
 8001060:	4618      	mov	r0, r3
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000000 	.word	0x20000000
 800106c:	200000a4 	.word	0x200000a4

08001070 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b08b      	sub	sp, #44	; 0x2c
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	603a      	str	r2, [r7, #0]
 800107a:	71fb      	strb	r3, [r7, #7]
 800107c:	460b      	mov	r3, r1
 800107e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 800108a:	2304      	movs	r3, #4
 800108c:	e117      	b.n	80012be <SD_disk_ioctl+0x24e>
  
  res = RES_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8001094:	79bb      	ldrb	r3, [r7, #6]
 8001096:	2b05      	cmp	r3, #5
 8001098:	d126      	bne.n	80010e8 <SD_disk_ioctl+0x78>
  {
    switch (*ptr) 
 800109a:	6a3b      	ldr	r3, [r7, #32]
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d00e      	beq.n	80010c0 <SD_disk_ioctl+0x50>
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d012      	beq.n	80010cc <SD_disk_ioctl+0x5c>
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d11a      	bne.n	80010e0 <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 80010aa:	f7ff fd0f 	bl	8000acc <SD_CheckPower>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 80010b4:	f7ff fcfe 	bl	8000ab4 <SD_PowerOff>
      res = RES_OK;
 80010b8:	2300      	movs	r3, #0
 80010ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80010be:	e0fc      	b.n	80012ba <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 80010c0:	f7ff fcac 	bl	8000a1c <SD_PowerOn>
      res = RES_OK;
 80010c4:	2300      	movs	r3, #0
 80010c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80010ca:	e0f6      	b.n	80012ba <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80010cc:	6a3b      	ldr	r3, [r7, #32]
 80010ce:	1c5c      	adds	r4, r3, #1
 80010d0:	f7ff fcfc 	bl	8000acc <SD_CheckPower>
 80010d4:	4603      	mov	r3, r0
 80010d6:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 80010d8:	2300      	movs	r3, #0
 80010da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80010de:	e0ec      	b.n	80012ba <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 80010e0:	2304      	movs	r3, #4
 80010e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010e6:	e0e8      	b.n	80012ba <SD_disk_ioctl+0x24a>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 80010e8:	4b77      	ldr	r3, [pc, #476]	; (80012c8 <SD_disk_ioctl+0x258>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e0e1      	b.n	80012be <SD_disk_ioctl+0x24e>
    
    SELECT();
 80010fa:	f7ff fc15 	bl	8000928 <SELECT>
    
    switch (ctrl) 
 80010fe:	79bb      	ldrb	r3, [r7, #6]
 8001100:	2b0d      	cmp	r3, #13
 8001102:	f200 80cb 	bhi.w	800129c <SD_disk_ioctl+0x22c>
 8001106:	a201      	add	r2, pc, #4	; (adr r2, 800110c <SD_disk_ioctl+0x9c>)
 8001108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110c:	08001207 	.word	0x08001207
 8001110:	08001145 	.word	0x08001145
 8001114:	080011f7 	.word	0x080011f7
 8001118:	0800129d 	.word	0x0800129d
 800111c:	0800129d 	.word	0x0800129d
 8001120:	0800129d 	.word	0x0800129d
 8001124:	0800129d 	.word	0x0800129d
 8001128:	0800129d 	.word	0x0800129d
 800112c:	0800129d 	.word	0x0800129d
 8001130:	0800129d 	.word	0x0800129d
 8001134:	0800129d 	.word	0x0800129d
 8001138:	08001219 	.word	0x08001219
 800113c:	0800123d 	.word	0x0800123d
 8001140:	08001261 	.word	0x08001261
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8001144:	2100      	movs	r1, #0
 8001146:	2049      	movs	r0, #73	; 0x49
 8001148:	f7ff fd54 	bl	8000bf4 <SD_SendCmd>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	f040 80a8 	bne.w	80012a4 <SD_disk_ioctl+0x234>
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	2110      	movs	r1, #16
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fcc0 	bl	8000ae0 <SD_RxDataBlock>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	f000 809e 	beq.w	80012a4 <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1) 
 8001168:	7b3b      	ldrb	r3, [r7, #12]
 800116a:	099b      	lsrs	r3, r3, #6
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b01      	cmp	r3, #1
 8001170:	d10e      	bne.n	8001190 <SD_disk_ioctl+0x120>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001172:	7d7b      	ldrb	r3, [r7, #21]
 8001174:	b29a      	uxth	r2, r3
 8001176:	7d3b      	ldrb	r3, [r7, #20]
 8001178:	b29b      	uxth	r3, r3
 800117a:	021b      	lsls	r3, r3, #8
 800117c:	b29b      	uxth	r3, r3
 800117e:	4413      	add	r3, r2
 8001180:	b29b      	uxth	r3, r3
 8001182:	3301      	adds	r3, #1
 8001184:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001186:	8bfb      	ldrh	r3, [r7, #30]
 8001188:	029a      	lsls	r2, r3, #10
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	e02e      	b.n	80011ee <SD_disk_ioctl+0x17e>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001190:	7c7b      	ldrb	r3, [r7, #17]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	b2da      	uxtb	r2, r3
 8001198:	7dbb      	ldrb	r3, [r7, #22]
 800119a:	09db      	lsrs	r3, r3, #7
 800119c:	b2db      	uxtb	r3, r3
 800119e:	4413      	add	r3, r2
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	7d7b      	ldrb	r3, [r7, #21]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	f003 0306 	and.w	r3, r3, #6
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	4413      	add	r3, r2
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	3302      	adds	r3, #2
 80011b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80011b8:	7d3b      	ldrb	r3, [r7, #20]
 80011ba:	099b      	lsrs	r3, r3, #6
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	b29a      	uxth	r2, r3
 80011c0:	7cfb      	ldrb	r3, [r7, #19]
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	4413      	add	r3, r2
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	7cbb      	ldrb	r3, [r7, #18]
 80011ce:	029b      	lsls	r3, r3, #10
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	4413      	add	r3, r2
 80011da:	b29b      	uxth	r3, r3
 80011dc:	3301      	adds	r3, #1
 80011de:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80011e0:	8bfa      	ldrh	r2, [r7, #30]
 80011e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011e6:	3b09      	subs	r3, #9
 80011e8:	409a      	lsls	r2, r3
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 80011ee:	2300      	movs	r3, #0
 80011f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80011f4:	e056      	b.n	80012a4 <SD_disk_ioctl+0x234>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011fc:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001204:	e055      	b.n	80012b2 <SD_disk_ioctl+0x242>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001206:	f7ff fbed 	bl	80009e4 <SD_ReadyWait>
 800120a:	4603      	mov	r3, r0
 800120c:	2bff      	cmp	r3, #255	; 0xff
 800120e:	d14b      	bne.n	80012a8 <SD_disk_ioctl+0x238>
        res = RES_OK;
 8001210:	2300      	movs	r3, #0
 8001212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001216:	e047      	b.n	80012a8 <SD_disk_ioctl+0x238>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001218:	2100      	movs	r1, #0
 800121a:	2049      	movs	r0, #73	; 0x49
 800121c:	f7ff fcea 	bl	8000bf4 <SD_SendCmd>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d142      	bne.n	80012ac <SD_disk_ioctl+0x23c>
 8001226:	2110      	movs	r1, #16
 8001228:	6a38      	ldr	r0, [r7, #32]
 800122a:	f7ff fc59 	bl	8000ae0 <SD_RxDataBlock>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d03b      	beq.n	80012ac <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8001234:	2300      	movs	r3, #0
 8001236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800123a:	e037      	b.n	80012ac <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800123c:	2100      	movs	r1, #0
 800123e:	204a      	movs	r0, #74	; 0x4a
 8001240:	f7ff fcd8 	bl	8000bf4 <SD_SendCmd>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d132      	bne.n	80012b0 <SD_disk_ioctl+0x240>
 800124a:	2110      	movs	r1, #16
 800124c:	6a38      	ldr	r0, [r7, #32]
 800124e:	f7ff fc47 	bl	8000ae0 <SD_RxDataBlock>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d02b      	beq.n	80012b0 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001258:	2300      	movs	r3, #0
 800125a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800125e:	e027      	b.n	80012b0 <SD_disk_ioctl+0x240>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8001260:	2100      	movs	r1, #0
 8001262:	207a      	movs	r0, #122	; 0x7a
 8001264:	f7ff fcc6 	bl	8000bf4 <SD_SendCmd>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d116      	bne.n	800129c <SD_disk_ioctl+0x22c>
      {         
        for (n = 0; n < 4; n++)
 800126e:	2300      	movs	r3, #0
 8001270:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001274:	e00b      	b.n	800128e <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 8001276:	6a3c      	ldr	r4, [r7, #32]
 8001278:	1c63      	adds	r3, r4, #1
 800127a:	623b      	str	r3, [r7, #32]
 800127c:	f7ff fb86 	bl	800098c <SPI_RxByte>
 8001280:	4603      	mov	r3, r0
 8001282:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001284:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001288:	3301      	adds	r3, #1
 800128a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800128e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001292:	2b03      	cmp	r3, #3
 8001294:	d9ef      	bls.n	8001276 <SD_disk_ioctl+0x206>
        }
        
        res = RES_OK;
 8001296:	2300      	movs	r3, #0
 8001298:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 800129c:	2304      	movs	r3, #4
 800129e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012a2:	e006      	b.n	80012b2 <SD_disk_ioctl+0x242>
      break;
 80012a4:	bf00      	nop
 80012a6:	e004      	b.n	80012b2 <SD_disk_ioctl+0x242>
      break;
 80012a8:	bf00      	nop
 80012aa:	e002      	b.n	80012b2 <SD_disk_ioctl+0x242>
      break;
 80012ac:	bf00      	nop
 80012ae:	e000      	b.n	80012b2 <SD_disk_ioctl+0x242>
      break;
 80012b0:	bf00      	nop
    }
    
    DESELECT();
 80012b2:	f7ff fb45 	bl	8000940 <DESELECT>
    SPI_RxByte();
 80012b6:	f7ff fb69 	bl	800098c <SPI_RxByte>
  }
  
  return res;
 80012ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80012be:	4618      	mov	r0, r3
 80012c0:	372c      	adds	r7, #44	; 0x2c
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd90      	pop	{r4, r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000000 	.word	0x20000000

080012cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d2:	f000 fd9b 	bl	8001e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d6:	f000 f863 	bl	80013a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012da:	f000 f9b1 	bl	8001640 <MX_GPIO_Init>
  MX_ADC1_Init();
 80012de:	f000 f8af 	bl	8001440 <MX_ADC1_Init>
  MX_CAN_Init();
 80012e2:	f000 f8eb 	bl	80014bc <MX_CAN_Init>
  MX_SPI1_Init();
 80012e6:	f000 f94b 	bl	8001580 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80012ea:	f000 f97f 	bl	80015ec <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80012ee:	f000 f919 	bl	8001524 <MX_I2C1_Init>
  MX_FATFS_Init();
 80012f2:	f002 fe71 	bl	8003fd8 <MX_FATFS_Init>

  //f_getfree("", &fre_clust, &pfs);



  fresult=mount_card (&fs);
 80012f6:	481d      	ldr	r0, [pc, #116]	; (800136c <main+0xa0>)
 80012f8:	f000 fa52 	bl	80017a0 <mount_card>
 80012fc:	4603      	mov	r3, r0
 80012fe:	461a      	mov	r2, r3
 8001300:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <main+0xa4>)
 8001302:	701a      	strb	r2, [r3, #0]
  card_capacity (buffer, &free_space, &total, &pfs, &fre_clust);
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <main+0xa8>)
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <main+0xac>)
 800130a:	4a1c      	ldr	r2, [pc, #112]	; (800137c <main+0xb0>)
 800130c:	491c      	ldr	r1, [pc, #112]	; (8001380 <main+0xb4>)
 800130e:	481d      	ldr	r0, [pc, #116]	; (8001384 <main+0xb8>)
 8001310:	f000 fa56 	bl	80017c0 <card_capacity>
  bufclear(buffer);
 8001314:	481b      	ldr	r0, [pc, #108]	; (8001384 <main+0xb8>)
 8001316:	f000 fa2b 	bl	8001770 <bufclear>
  fresult=create_file (buffer, "nome.txt", "BLA BLA BLA", &fil, &bw);
 800131a:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <main+0xbc>)
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	4b1b      	ldr	r3, [pc, #108]	; (800138c <main+0xc0>)
 8001320:	4a1b      	ldr	r2, [pc, #108]	; (8001390 <main+0xc4>)
 8001322:	491c      	ldr	r1, [pc, #112]	; (8001394 <main+0xc8>)
 8001324:	4817      	ldr	r0, [pc, #92]	; (8001384 <main+0xb8>)
 8001326:	f000 faaf 	bl	8001888 <create_file>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <main+0xa4>)
 8001330:	701a      	strb	r2, [r3, #0]
  bufclear(buffer);
 8001332:	4814      	ldr	r0, [pc, #80]	; (8001384 <main+0xb8>)
 8001334:	f000 fa1c 	bl	8001770 <bufclear>
  //fresult=read_file (buffer, "nome.txt", &fil, &br);
  fresult=update_file(buffer, "nome.txt", "BLA2 BLA2 BLA2", &fil, &bw);
 8001338:	4b13      	ldr	r3, [pc, #76]	; (8001388 <main+0xbc>)
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	4b13      	ldr	r3, [pc, #76]	; (800138c <main+0xc0>)
 800133e:	4a16      	ldr	r2, [pc, #88]	; (8001398 <main+0xcc>)
 8001340:	4914      	ldr	r1, [pc, #80]	; (8001394 <main+0xc8>)
 8001342:	4810      	ldr	r0, [pc, #64]	; (8001384 <main+0xb8>)
 8001344:	f000 fac6 	bl	80018d4 <update_file>
 8001348:	4603      	mov	r3, r0
 800134a:	461a      	mov	r2, r3
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <main+0xa4>)
 800134e:	701a      	strb	r2, [r3, #0]
  bufclear(buffer);
 8001350:	480c      	ldr	r0, [pc, #48]	; (8001384 <main+0xb8>)
 8001352:	f000 fa0d 	bl	8001770 <bufclear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001356:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800135a:	4810      	ldr	r0, [pc, #64]	; (800139c <main+0xd0>)
 800135c:	f001 fb36 	bl	80029cc <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8001360:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001364:	f000 fdb4 	bl	8001ed0 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001368:	e7f5      	b.n	8001356 <main+0x8a>
 800136a:	bf00      	nop
 800136c:	200002e4 	.word	0x200002e4
 8001370:	20001810 	.word	0x20001810
 8001374:	200002e0 	.word	0x200002e0
 8001378:	2000180c 	.word	0x2000180c
 800137c:	2000186c 	.word	0x2000186c
 8001380:	200013c4 	.word	0x200013c4
 8001384:	20001408 	.word	0x20001408
 8001388:	20001808 	.word	0x20001808
 800138c:	20001870 	.word	0x20001870
 8001390:	08008c38 	.word	0x08008c38
 8001394:	08008c44 	.word	0x08008c44
 8001398:	08008c50 	.word	0x08008c50
 800139c:	40011000 	.word	0x40011000

080013a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b094      	sub	sp, #80	; 0x50
 80013a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013aa:	2228      	movs	r2, #40	; 0x28
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f007 f814 	bl	80083dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013d0:	2302      	movs	r3, #2
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013d4:	2301      	movs	r3, #1
 80013d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013d8:	2310      	movs	r3, #16
 80013da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013dc:	2300      	movs	r3, #0
 80013de:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013e4:	4618      	mov	r0, r3
 80013e6:	f001 fc31 	bl	8002c4c <HAL_RCC_OscConfig>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80013f0:	f000 f9a2 	bl	8001738 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f4:	230f      	movs	r3, #15
 80013f6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001404:	2300      	movs	r3, #0
 8001406:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f001 fe9c 	bl	800314c <HAL_RCC_ClockConfig>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800141a:	f000 f98d 	bl	8001738 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800141e:	2302      	movs	r3, #2
 8001420:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	4618      	mov	r0, r3
 800142a:	f002 f82b 	bl	8003484 <HAL_RCCEx_PeriphCLKConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001434:	f000 f980 	bl	8001738 <Error_Handler>
  }
}
 8001438:	bf00      	nop
 800143a:	3750      	adds	r7, #80	; 0x50
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001450:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <MX_ADC1_Init+0x74>)
 8001452:	4a19      	ldr	r2, [pc, #100]	; (80014b8 <MX_ADC1_Init+0x78>)
 8001454:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001456:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <MX_ADC1_Init+0x74>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <MX_ADC1_Init+0x74>)
 800145e:	2200      	movs	r2, #0
 8001460:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001462:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <MX_ADC1_Init+0x74>)
 8001464:	2200      	movs	r2, #0
 8001466:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <MX_ADC1_Init+0x74>)
 800146a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800146e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001470:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <MX_ADC1_Init+0x74>)
 8001472:	2200      	movs	r2, #0
 8001474:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001476:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <MX_ADC1_Init+0x74>)
 8001478:	2201      	movs	r2, #1
 800147a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800147c:	480d      	ldr	r0, [pc, #52]	; (80014b4 <MX_ADC1_Init+0x74>)
 800147e:	f000 fd49 	bl	8001f14 <HAL_ADC_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001488:	f000 f956 	bl	8001738 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001490:	2301      	movs	r3, #1
 8001492:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	4619      	mov	r1, r3
 800149c:	4805      	ldr	r0, [pc, #20]	; (80014b4 <MX_ADC1_Init+0x74>)
 800149e:	f000 fe11 	bl	80020c4 <HAL_ADC_ConfigChannel>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80014a8:	f000 f946 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014ac:	bf00      	nop
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20001394 	.word	0x20001394
 80014b8:	40012400 	.word	0x40012400

080014bc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80014c0:	4b16      	ldr	r3, [pc, #88]	; (800151c <MX_CAN_Init+0x60>)
 80014c2:	4a17      	ldr	r2, [pc, #92]	; (8001520 <MX_CAN_Init+0x64>)
 80014c4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80014c6:	4b15      	ldr	r3, [pc, #84]	; (800151c <MX_CAN_Init+0x60>)
 80014c8:	2210      	movs	r2, #16
 80014ca:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80014cc:	4b13      	ldr	r3, [pc, #76]	; (800151c <MX_CAN_Init+0x60>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80014d2:	4b12      	ldr	r3, [pc, #72]	; (800151c <MX_CAN_Init+0x60>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80014d8:	4b10      	ldr	r3, [pc, #64]	; (800151c <MX_CAN_Init+0x60>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80014de:	4b0f      	ldr	r3, [pc, #60]	; (800151c <MX_CAN_Init+0x60>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80014e4:	4b0d      	ldr	r3, [pc, #52]	; (800151c <MX_CAN_Init+0x60>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80014ea:	4b0c      	ldr	r3, [pc, #48]	; (800151c <MX_CAN_Init+0x60>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80014f0:	4b0a      	ldr	r3, [pc, #40]	; (800151c <MX_CAN_Init+0x60>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <MX_CAN_Init+0x60>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <MX_CAN_Init+0x60>)
 80014fe:	2200      	movs	r2, #0
 8001500:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <MX_CAN_Init+0x60>)
 8001504:	2200      	movs	r2, #0
 8001506:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001508:	4804      	ldr	r0, [pc, #16]	; (800151c <MX_CAN_Init+0x60>)
 800150a:	f000 ff0d 	bl	8002328 <HAL_CAN_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8001514:	f000 f910 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20001368 	.word	0x20001368
 8001520:	40006400 	.word	0x40006400

08001524 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <MX_I2C1_Init+0x50>)
 800152a:	4a13      	ldr	r2, [pc, #76]	; (8001578 <MX_I2C1_Init+0x54>)
 800152c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <MX_I2C1_Init+0x50>)
 8001530:	4a12      	ldr	r2, [pc, #72]	; (800157c <MX_I2C1_Init+0x58>)
 8001532:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <MX_I2C1_Init+0x50>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <MX_I2C1_Init+0x50>)
 800153c:	2200      	movs	r2, #0
 800153e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <MX_I2C1_Init+0x50>)
 8001542:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001546:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001548:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <MX_I2C1_Init+0x50>)
 800154a:	2200      	movs	r2, #0
 800154c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <MX_I2C1_Init+0x50>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001554:	4b07      	ldr	r3, [pc, #28]	; (8001574 <MX_I2C1_Init+0x50>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <MX_I2C1_Init+0x50>)
 800155c:	2200      	movs	r2, #0
 800155e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001560:	4804      	ldr	r0, [pc, #16]	; (8001574 <MX_I2C1_Init+0x50>)
 8001562:	f001 fa4b 	bl	80029fc <HAL_I2C_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800156c:	f000 f8e4 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20001314 	.word	0x20001314
 8001578:	40005400 	.word	0x40005400
 800157c:	000186a0 	.word	0x000186a0

08001580 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001584:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <MX_SPI1_Init+0x64>)
 8001586:	4a18      	ldr	r2, [pc, #96]	; (80015e8 <MX_SPI1_Init+0x68>)
 8001588:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800158a:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <MX_SPI1_Init+0x64>)
 800158c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001590:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001592:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <MX_SPI1_Init+0x64>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <MX_SPI1_Init+0x64>)
 800159a:	2200      	movs	r2, #0
 800159c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <MX_SPI1_Init+0x64>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <MX_SPI1_Init+0x64>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <MX_SPI1_Init+0x64>)
 80015ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015b2:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <MX_SPI1_Init+0x64>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015b8:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <MX_SPI1_Init+0x64>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <MX_SPI1_Init+0x64>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015c4:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <MX_SPI1_Init+0x64>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <MX_SPI1_Init+0x64>)
 80015cc:	220a      	movs	r2, #10
 80015ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015d0:	4804      	ldr	r0, [pc, #16]	; (80015e4 <MX_SPI1_Init+0x64>)
 80015d2:	f002 f80d 	bl	80035f0 <HAL_SPI_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015dc:	f000 f8ac 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20001814 	.word	0x20001814
 80015e8:	40013000 	.word	0x40013000

080015ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <MX_USART1_UART_Init+0x4c>)
 80015f2:	4a12      	ldr	r2, [pc, #72]	; (800163c <MX_USART1_UART_Init+0x50>)
 80015f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015f6:	4b10      	ldr	r3, [pc, #64]	; (8001638 <MX_USART1_UART_Init+0x4c>)
 80015f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015fe:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <MX_USART1_UART_Init+0x4c>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <MX_USART1_UART_Init+0x4c>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <MX_USART1_UART_Init+0x4c>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001610:	4b09      	ldr	r3, [pc, #36]	; (8001638 <MX_USART1_UART_Init+0x4c>)
 8001612:	220c      	movs	r2, #12
 8001614:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001616:	4b08      	ldr	r3, [pc, #32]	; (8001638 <MX_USART1_UART_Init+0x4c>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <MX_USART1_UART_Init+0x4c>)
 800161e:	2200      	movs	r2, #0
 8001620:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001622:	4805      	ldr	r0, [pc, #20]	; (8001638 <MX_USART1_UART_Init+0x4c>)
 8001624:	f002 fbb0 	bl	8003d88 <HAL_UART_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800162e:	f000 f883 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	200013c8 	.word	0x200013c8
 800163c:	40013800 	.word	0x40013800

08001640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001646:	f107 0310 	add.w	r3, r7, #16
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001654:	4b35      	ldr	r3, [pc, #212]	; (800172c <MX_GPIO_Init+0xec>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	4a34      	ldr	r2, [pc, #208]	; (800172c <MX_GPIO_Init+0xec>)
 800165a:	f043 0310 	orr.w	r3, r3, #16
 800165e:	6193      	str	r3, [r2, #24]
 8001660:	4b32      	ldr	r3, [pc, #200]	; (800172c <MX_GPIO_Init+0xec>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	f003 0310 	and.w	r3, r3, #16
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800166c:	4b2f      	ldr	r3, [pc, #188]	; (800172c <MX_GPIO_Init+0xec>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	4a2e      	ldr	r2, [pc, #184]	; (800172c <MX_GPIO_Init+0xec>)
 8001672:	f043 0320 	orr.w	r3, r3, #32
 8001676:	6193      	str	r3, [r2, #24]
 8001678:	4b2c      	ldr	r3, [pc, #176]	; (800172c <MX_GPIO_Init+0xec>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f003 0320 	and.w	r3, r3, #32
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001684:	4b29      	ldr	r3, [pc, #164]	; (800172c <MX_GPIO_Init+0xec>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	4a28      	ldr	r2, [pc, #160]	; (800172c <MX_GPIO_Init+0xec>)
 800168a:	f043 0304 	orr.w	r3, r3, #4
 800168e:	6193      	str	r3, [r2, #24]
 8001690:	4b26      	ldr	r3, [pc, #152]	; (800172c <MX_GPIO_Init+0xec>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	607b      	str	r3, [r7, #4]
 800169a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800169c:	4b23      	ldr	r3, [pc, #140]	; (800172c <MX_GPIO_Init+0xec>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	4a22      	ldr	r2, [pc, #136]	; (800172c <MX_GPIO_Init+0xec>)
 80016a2:	f043 0308 	orr.w	r3, r3, #8
 80016a6:	6193      	str	r3, [r2, #24]
 80016a8:	4b20      	ldr	r3, [pc, #128]	; (800172c <MX_GPIO_Init+0xec>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	603b      	str	r3, [r7, #0]
 80016b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80016b4:	2200      	movs	r2, #0
 80016b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ba:	481d      	ldr	r0, [pc, #116]	; (8001730 <MX_GPIO_Init+0xf0>)
 80016bc:	f001 f96e 	bl	800299c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDCard_CS_GPIO_Port, SDCard_CS_Pin, GPIO_PIN_RESET);
 80016c0:	2200      	movs	r2, #0
 80016c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016c6:	481b      	ldr	r0, [pc, #108]	; (8001734 <MX_GPIO_Init+0xf4>)
 80016c8:	f001 f968 	bl	800299c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80016cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d2:	2301      	movs	r3, #1
 80016d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	2302      	movs	r3, #2
 80016dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80016de:	f107 0310 	add.w	r3, r7, #16
 80016e2:	4619      	mov	r1, r3
 80016e4:	4812      	ldr	r0, [pc, #72]	; (8001730 <MX_GPIO_Init+0xf0>)
 80016e6:	f000 ffff 	bl	80026e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDCard_CS_Pin */
  GPIO_InitStruct.Pin = SDCard_CS_Pin;
 80016ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f0:	2301      	movs	r3, #1
 80016f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f8:	2302      	movs	r3, #2
 80016fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDCard_CS_GPIO_Port, &GPIO_InitStruct);
 80016fc:	f107 0310 	add.w	r3, r7, #16
 8001700:	4619      	mov	r1, r3
 8001702:	480c      	ldr	r0, [pc, #48]	; (8001734 <MX_GPIO_Init+0xf4>)
 8001704:	f000 fff0 	bl	80026e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDCard_Detect_Pin */
  GPIO_InitStruct.Pin = SDCard_Detect_Pin;
 8001708:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800170c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SDCard_Detect_GPIO_Port, &GPIO_InitStruct);
 8001716:	f107 0310 	add.w	r3, r7, #16
 800171a:	4619      	mov	r1, r3
 800171c:	4805      	ldr	r0, [pc, #20]	; (8001734 <MX_GPIO_Init+0xf4>)
 800171e:	f000 ffe3 	bl	80026e8 <HAL_GPIO_Init>

}
 8001722:	bf00      	nop
 8001724:	3720      	adds	r7, #32
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40021000 	.word	0x40021000
 8001730:	40011000 	.word	0x40011000
 8001734:	40010c00 	.word	0x40010c00

08001738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr

08001744 <bufsize>:
#include "stdio.h"


/* to find the size of data in the buffer */
int bufsize (char *buf)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	int i=0;
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 8001750:	e002      	b.n	8001758 <bufsize+0x14>
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	3301      	adds	r3, #1
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	607a      	str	r2, [r7, #4]
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1f6      	bne.n	8001752 <bufsize+0xe>
	return i;
 8001764:	68fb      	ldr	r3, [r7, #12]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr

08001770 <bufclear>:

void bufclear (char *buffer)  // clear buffer
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
	for (int i=0; i<1024; i++)
 8001778:	2300      	movs	r3, #0
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	e007      	b.n	800178e <bufclear+0x1e>
	{
		buffer[i] = '\0';
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	4413      	add	r3, r2
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<1024; i++)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	3301      	adds	r3, #1
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001794:	dbf3      	blt.n	800177e <bufclear+0xe>
	}
}
 8001796:	bf00      	nop
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <mount_card>:

/* Mount SD Card */
FRESULT mount_card (FATFS *fs)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
      return f_mount(fs, "", 0);
 80017a8:	2200      	movs	r2, #0
 80017aa:	4904      	ldr	r1, [pc, #16]	; (80017bc <mount_card+0x1c>)
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f005 f99b 	bl	8006ae8 <f_mount>
 80017b2:	4603      	mov	r3, r0
      //if fresult <>
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	08008c60 	.word	0x08008c60

080017c0 <card_capacity>:

/*************** Card capacity details ********************/
void card_capacity (char *buffer, uint32_t *free_space, uint32_t *total_space, FATFS **pfs, DWORD *fre_clust)
{
 80017c0:	b590      	push	{r4, r7, lr}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
 80017cc:	603b      	str	r3, [r7, #0]
	/* Check free space */
	f_getfree("", fre_clust, &(*pfs));
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	6a39      	ldr	r1, [r7, #32]
 80017d2:	4829      	ldr	r0, [pc, #164]	; (8001878 <card_capacity+0xb8>)
 80017d4:	f006 fbbc 	bl	8007f50 <f_getfree>

	*total_space = (uint32_t)(((*pfs)->n_fatent - 2) * ((*pfs)->csize) * 0.5);
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017e0:	3314      	adds	r3, #20
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	1e9a      	subs	r2, r3, #2
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ee:	3302      	adds	r3, #2
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	fb03 f302 	mul.w	r3, r3, r2
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe fdea 	bl	80003d0 <__aeabi_ui2d>
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	4b1e      	ldr	r3, [pc, #120]	; (800187c <card_capacity+0xbc>)
 8001802:	f7fe fe5f 	bl	80004c4 <__aeabi_dmul>
 8001806:	4603      	mov	r3, r0
 8001808:	460c      	mov	r4, r1
 800180a:	4618      	mov	r0, r3
 800180c:	4621      	mov	r1, r4
 800180e:	f7ff f86b 	bl	80008e8 <__aeabi_d2uiz>
 8001812:	4602      	mov	r2, r0
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	601a      	str	r2, [r3, #0]
	sprintf (buffer, "SD CARD Total Size: \t%lu\n", *total_space);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	4918      	ldr	r1, [pc, #96]	; (8001880 <card_capacity+0xc0>)
 8001820:	68f8      	ldr	r0, [r7, #12]
 8001822:	f006 fde3 	bl	80083ec <siprintf>
	bufclear(buffer);
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f7ff ffa2 	bl	8001770 <bufclear>
	*free_space = (uint32_t)(*fre_clust * ((*pfs)->csize) * 0.5);
 800182c:	6a3b      	ldr	r3, [r7, #32]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001838:	3302      	adds	r3, #2
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	fb03 f302 	mul.w	r3, r3, r2
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fdc5 	bl	80003d0 <__aeabi_ui2d>
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	4b0c      	ldr	r3, [pc, #48]	; (800187c <card_capacity+0xbc>)
 800184c:	f7fe fe3a 	bl	80004c4 <__aeabi_dmul>
 8001850:	4603      	mov	r3, r0
 8001852:	460c      	mov	r4, r1
 8001854:	4618      	mov	r0, r3
 8001856:	4621      	mov	r1, r4
 8001858:	f7ff f846 	bl	80008e8 <__aeabi_d2uiz>
 800185c:	4602      	mov	r2, r0
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	601a      	str	r2, [r3, #0]
	sprintf (buffer, "SD CARD Free Space: \t%lu\n",*free_space);
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	461a      	mov	r2, r3
 8001868:	4906      	ldr	r1, [pc, #24]	; (8001884 <card_capacity+0xc4>)
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f006 fdbe 	bl	80083ec <siprintf>
	//bufclear(buffer);
}
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	bd90      	pop	{r4, r7, pc}
 8001878:	08008c60 	.word	0x08008c60
 800187c:	3fe00000 	.word	0x3fe00000
 8001880:	08008c64 	.word	0x08008c64
 8001884:	08008c80 	.word	0x08008c80

08001888 <create_file>:

/**************** The following operation is using f_write and f_read **************************/

FRESULT create_file (char *buffer, char *filename, char *data, FIL *fil, UINT *bw){
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
 8001894:	603b      	str	r3, [r7, #0]

	FRESULT fresult;

	/* Create second file with read write access and open it */
	fresult = f_open(fil, filename , FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
 8001896:	220b      	movs	r2, #11
 8001898:	68b9      	ldr	r1, [r7, #8]
 800189a:	6838      	ldr	r0, [r7, #0]
 800189c:	f005 f96e 	bl	8006b7c <f_open>
 80018a0:	4603      	mov	r3, r0
 80018a2:	75fb      	strb	r3, [r7, #23]

	/* Writing text */
	strcpy (buffer, data); //pode precisar de um "\n"
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f006 fdc0 	bl	800842c <strcpy>

	fresult = f_write(fil, buffer, bufsize(buffer), bw);
 80018ac:	68f8      	ldr	r0, [r7, #12]
 80018ae:	f7ff ff49 	bl	8001744 <bufsize>
 80018b2:	4603      	mov	r3, r0
 80018b4:	461a      	mov	r2, r3
 80018b6:	6a3b      	ldr	r3, [r7, #32]
 80018b8:	68f9      	ldr	r1, [r7, #12]
 80018ba:	6838      	ldr	r0, [r7, #0]
 80018bc:	f005 fc98 	bl	80071f0 <f_write>
 80018c0:	4603      	mov	r3, r0
 80018c2:	75fb      	strb	r3, [r7, #23]


	/* Close file */
	f_close(fil);
 80018c4:	6838      	ldr	r0, [r7, #0]
 80018c6:	f005 ffe4 	bl	8007892 <f_close>

	return fresult;
 80018ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <update_file>:
	return fresult;
}

/*********************UPDATING an existing file ***************************/
FRESULT update_file(char *buffer, char *filename, char *data, FIL *fil, UINT *bw)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
 80018e0:	603b      	str	r3, [r7, #0]
	FRESULT fresult;

	/* Open the file with write access */
	fresult = f_open(fil, filename, FA_OPEN_ALWAYS | FA_WRITE);
 80018e2:	2212      	movs	r2, #18
 80018e4:	68b9      	ldr	r1, [r7, #8]
 80018e6:	6838      	ldr	r0, [r7, #0]
 80018e8:	f005 f948 	bl	8006b7c <f_open>
 80018ec:	4603      	mov	r3, r0
 80018ee:	75fb      	strb	r3, [r7, #23]

	/* Move to offset to the end of the file */
	fresult = f_lseek(fil, fil->fsize);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018f6:	330c      	adds	r3, #12
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4619      	mov	r1, r3
 80018fc:	6838      	ldr	r0, [r7, #0]
 80018fe:	f005 fff3 	bl	80078e8 <f_lseek>
 8001902:	4603      	mov	r3, r0
 8001904:	75fb      	strb	r3, [r7, #23]

	/* write the string to the file */
	fresult = f_puts(data, fil); //pode precisar de um "\n"
 8001906:	6839      	ldr	r1, [r7, #0]
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f006 fc40 	bl	800818e <f_puts>
 800190e:	4603      	mov	r3, r0
 8001910:	75fb      	strb	r3, [r7, #23]

	f_close (fil);
 8001912:	6838      	ldr	r0, [r7, #0]
 8001914:	f005 ffbd 	bl	8007892 <f_close>

	//bufclear(buffer);

	return fresult;
 8001918:	7dfb      	ldrb	r3, [r7, #23]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <HAL_MspInit+0x5c>)
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	4a14      	ldr	r2, [pc, #80]	; (8001980 <HAL_MspInit+0x5c>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6193      	str	r3, [r2, #24]
 8001936:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_MspInit+0x5c>)
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <HAL_MspInit+0x5c>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	4a0e      	ldr	r2, [pc, #56]	; (8001980 <HAL_MspInit+0x5c>)
 8001948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194c:	61d3      	str	r3, [r2, #28]
 800194e:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <HAL_MspInit+0x5c>)
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800195a:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <HAL_MspInit+0x60>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	4a04      	ldr	r2, [pc, #16]	; (8001984 <HAL_MspInit+0x60>)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001976:	bf00      	nop
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr
 8001980:	40021000 	.word	0x40021000
 8001984:	40010000 	.word	0x40010000

08001988 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b088      	sub	sp, #32
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 0310 	add.w	r3, r7, #16
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a14      	ldr	r2, [pc, #80]	; (80019f4 <HAL_ADC_MspInit+0x6c>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d121      	bne.n	80019ec <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019a8:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <HAL_ADC_MspInit+0x70>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	4a12      	ldr	r2, [pc, #72]	; (80019f8 <HAL_ADC_MspInit+0x70>)
 80019ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019b2:	6193      	str	r3, [r2, #24]
 80019b4:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <HAL_ADC_MspInit+0x70>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c0:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <HAL_ADC_MspInit+0x70>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	4a0c      	ldr	r2, [pc, #48]	; (80019f8 <HAL_ADC_MspInit+0x70>)
 80019c6:	f043 0304 	orr.w	r3, r3, #4
 80019ca:	6193      	str	r3, [r2, #24]
 80019cc:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <HAL_ADC_MspInit+0x70>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80019d8:	231f      	movs	r3, #31
 80019da:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019dc:	2303      	movs	r3, #3
 80019de:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e0:	f107 0310 	add.w	r3, r7, #16
 80019e4:	4619      	mov	r1, r3
 80019e6:	4805      	ldr	r0, [pc, #20]	; (80019fc <HAL_ADC_MspInit+0x74>)
 80019e8:	f000 fe7e 	bl	80026e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019ec:	bf00      	nop
 80019ee:	3720      	adds	r7, #32
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40012400 	.word	0x40012400
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40010800 	.word	0x40010800

08001a00 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b088      	sub	sp, #32
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 0310 	add.w	r3, r7, #16
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a1c      	ldr	r2, [pc, #112]	; (8001a8c <HAL_CAN_MspInit+0x8c>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d131      	bne.n	8001a84 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a20:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <HAL_CAN_MspInit+0x90>)
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	4a1a      	ldr	r2, [pc, #104]	; (8001a90 <HAL_CAN_MspInit+0x90>)
 8001a26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a2a:	61d3      	str	r3, [r2, #28]
 8001a2c:	4b18      	ldr	r3, [pc, #96]	; (8001a90 <HAL_CAN_MspInit+0x90>)
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a38:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <HAL_CAN_MspInit+0x90>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	4a14      	ldr	r2, [pc, #80]	; (8001a90 <HAL_CAN_MspInit+0x90>)
 8001a3e:	f043 0304 	orr.w	r3, r3, #4
 8001a42:	6193      	str	r3, [r2, #24]
 8001a44:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <HAL_CAN_MspInit+0x90>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5e:	f107 0310 	add.w	r3, r7, #16
 8001a62:	4619      	mov	r1, r3
 8001a64:	480b      	ldr	r0, [pc, #44]	; (8001a94 <HAL_CAN_MspInit+0x94>)
 8001a66:	f000 fe3f 	bl	80026e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a74:	2303      	movs	r3, #3
 8001a76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a78:	f107 0310 	add.w	r3, r7, #16
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4805      	ldr	r0, [pc, #20]	; (8001a94 <HAL_CAN_MspInit+0x94>)
 8001a80:	f000 fe32 	bl	80026e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001a84:	bf00      	nop
 8001a86:	3720      	adds	r7, #32
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40006400 	.word	0x40006400
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40010800 	.word	0x40010800

08001a98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b088      	sub	sp, #32
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 0310 	add.w	r3, r7, #16
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a15      	ldr	r2, [pc, #84]	; (8001b08 <HAL_I2C_MspInit+0x70>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d123      	bne.n	8001b00 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab8:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <HAL_I2C_MspInit+0x74>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	4a13      	ldr	r2, [pc, #76]	; (8001b0c <HAL_I2C_MspInit+0x74>)
 8001abe:	f043 0308 	orr.w	r3, r3, #8
 8001ac2:	6193      	str	r3, [r2, #24]
 8001ac4:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <HAL_I2C_MspInit+0x74>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	f003 0308 	and.w	r3, r3, #8
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ad0:	23c0      	movs	r3, #192	; 0xc0
 8001ad2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ad4:	2312      	movs	r3, #18
 8001ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001adc:	f107 0310 	add.w	r3, r7, #16
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	480b      	ldr	r0, [pc, #44]	; (8001b10 <HAL_I2C_MspInit+0x78>)
 8001ae4:	f000 fe00 	bl	80026e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ae8:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <HAL_I2C_MspInit+0x74>)
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	4a07      	ldr	r2, [pc, #28]	; (8001b0c <HAL_I2C_MspInit+0x74>)
 8001aee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001af2:	61d3      	str	r3, [r2, #28]
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <HAL_I2C_MspInit+0x74>)
 8001af6:	69db      	ldr	r3, [r3, #28]
 8001af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b00:	bf00      	nop
 8001b02:	3720      	adds	r7, #32
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40005400 	.word	0x40005400
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40010c00 	.word	0x40010c00

08001b14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b088      	sub	sp, #32
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	f107 0310 	add.w	r3, r7, #16
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a1b      	ldr	r2, [pc, #108]	; (8001b9c <HAL_SPI_MspInit+0x88>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d12f      	bne.n	8001b94 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b34:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <HAL_SPI_MspInit+0x8c>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	4a19      	ldr	r2, [pc, #100]	; (8001ba0 <HAL_SPI_MspInit+0x8c>)
 8001b3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b3e:	6193      	str	r3, [r2, #24]
 8001b40:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <HAL_SPI_MspInit+0x8c>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4c:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <HAL_SPI_MspInit+0x8c>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	4a13      	ldr	r2, [pc, #76]	; (8001ba0 <HAL_SPI_MspInit+0x8c>)
 8001b52:	f043 0304 	orr.w	r3, r3, #4
 8001b56:	6193      	str	r3, [r2, #24]
 8001b58:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <HAL_SPI_MspInit+0x8c>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001b64:	23a0      	movs	r3, #160	; 0xa0
 8001b66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b70:	f107 0310 	add.w	r3, r7, #16
 8001b74:	4619      	mov	r1, r3
 8001b76:	480b      	ldr	r0, [pc, #44]	; (8001ba4 <HAL_SPI_MspInit+0x90>)
 8001b78:	f000 fdb6 	bl	80026e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b7c:	2340      	movs	r3, #64	; 0x40
 8001b7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b88:	f107 0310 	add.w	r3, r7, #16
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <HAL_SPI_MspInit+0x90>)
 8001b90:	f000 fdaa 	bl	80026e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b94:	bf00      	nop
 8001b96:	3720      	adds	r7, #32
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40013000 	.word	0x40013000
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40010800 	.word	0x40010800

08001ba8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b088      	sub	sp, #32
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 0310 	add.w	r3, r7, #16
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a1c      	ldr	r2, [pc, #112]	; (8001c34 <HAL_UART_MspInit+0x8c>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d131      	bne.n	8001c2c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	; (8001c38 <HAL_UART_MspInit+0x90>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	4a1a      	ldr	r2, [pc, #104]	; (8001c38 <HAL_UART_MspInit+0x90>)
 8001bce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd2:	6193      	str	r3, [r2, #24]
 8001bd4:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <HAL_UART_MspInit+0x90>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be0:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <HAL_UART_MspInit+0x90>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	4a14      	ldr	r2, [pc, #80]	; (8001c38 <HAL_UART_MspInit+0x90>)
 8001be6:	f043 0304 	orr.w	r3, r3, #4
 8001bea:	6193      	str	r3, [r2, #24]
 8001bec:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <HAL_UART_MspInit+0x90>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bfc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c02:	2303      	movs	r3, #3
 8001c04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c06:	f107 0310 	add.w	r3, r7, #16
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	480b      	ldr	r0, [pc, #44]	; (8001c3c <HAL_UART_MspInit+0x94>)
 8001c0e:	f000 fd6b 	bl	80026e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c20:	f107 0310 	add.w	r3, r7, #16
 8001c24:	4619      	mov	r1, r3
 8001c26:	4805      	ldr	r0, [pc, #20]	; (8001c3c <HAL_UART_MspInit+0x94>)
 8001c28:	f000 fd5e 	bl	80026e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c2c:	bf00      	nop
 8001c2e:	3720      	adds	r7, #32
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40013800 	.word	0x40013800
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40010800 	.word	0x40010800

08001c40 <SDTimer_handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8001c44:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <SDTimer_handler+0x3c>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d006      	beq.n	8001c5c <SDTimer_handler+0x1c>
		Timer1--;
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <SDTimer_handler+0x3c>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	3b01      	subs	r3, #1
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <SDTimer_handler+0x3c>)
 8001c5a:	701a      	strb	r2, [r3, #0]
	if(Timer2 > 0)
 8001c5c:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <SDTimer_handler+0x40>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d006      	beq.n	8001c74 <SDTimer_handler+0x34>
		Timer2--;
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <SDTimer_handler+0x40>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <SDTimer_handler+0x40>)
 8001c72:	701a      	strb	r2, [r3, #0]
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr
 8001c7c:	2000289d 	.word	0x2000289d
 8001c80:	2000289c 	.word	0x2000289c

08001c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr

08001c90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <HardFault_Handler+0x4>

08001c96 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c9a:	e7fe      	b.n	8001c9a <MemManage_Handler+0x4>

08001c9c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <BusFault_Handler+0x4>

08001ca2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca6:	e7fe      	b.n	8001ca6 <UsageFault_Handler+0x4>

08001ca8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr

08001cc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr

08001ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFsCnt++;
 8001cd0:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <SysTick_Handler+0x30>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <SysTick_Handler+0x30>)
 8001cdc:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt > 10){
 8001cde:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <SysTick_Handler+0x30>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b0a      	cmp	r3, #10
 8001ce6:	d904      	bls.n	8001cf2 <SysTick_Handler+0x26>
		FatFsCnt=0;
 8001ce8:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <SysTick_Handler+0x30>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	701a      	strb	r2, [r3, #0]
		SDTimer_handler();
 8001cee:	f7ff ffa7 	bl	8001c40 <SDTimer_handler>
	}


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cf2:	f000 f8d1 	bl	8001e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	200000a6 	.word	0x200000a6

08001d00 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <_sbrk+0x50>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d102      	bne.n	8001d16 <_sbrk+0x16>
		heap_end = &end;
 8001d10:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <_sbrk+0x50>)
 8001d12:	4a10      	ldr	r2, [pc, #64]	; (8001d54 <_sbrk+0x54>)
 8001d14:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001d16:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <_sbrk+0x50>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <_sbrk+0x50>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4413      	add	r3, r2
 8001d24:	466a      	mov	r2, sp
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d907      	bls.n	8001d3a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001d2a:	f006 fb2d 	bl	8008388 <__errno>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	230c      	movs	r3, #12
 8001d32:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001d34:	f04f 33ff 	mov.w	r3, #4294967295
 8001d38:	e006      	b.n	8001d48 <_sbrk+0x48>
	}

	heap_end += incr;
 8001d3a:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <_sbrk+0x50>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	4a03      	ldr	r2, [pc, #12]	; (8001d50 <_sbrk+0x50>)
 8001d44:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001d46:	68fb      	ldr	r3, [r7, #12]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	200000a8 	.word	0x200000a8
 8001d54:	20004910 	.word	0x20004910

08001d58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001d5c:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <SystemInit+0x5c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a14      	ldr	r2, [pc, #80]	; (8001db4 <SystemInit+0x5c>)
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001d68:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <SystemInit+0x5c>)
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	4911      	ldr	r1, [pc, #68]	; (8001db4 <SystemInit+0x5c>)
 8001d6e:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <SystemInit+0x60>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001d74:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <SystemInit+0x5c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a0e      	ldr	r2, [pc, #56]	; (8001db4 <SystemInit+0x5c>)
 8001d7a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d82:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d84:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <SystemInit+0x5c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a0a      	ldr	r2, [pc, #40]	; (8001db4 <SystemInit+0x5c>)
 8001d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d8e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001d90:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <SystemInit+0x5c>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	4a07      	ldr	r2, [pc, #28]	; (8001db4 <SystemInit+0x5c>)
 8001d96:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001d9a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001d9c:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <SystemInit+0x5c>)
 8001d9e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001da2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001da4:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <SystemInit+0x64>)
 8001da6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001daa:	609a      	str	r2, [r3, #8]
#endif 
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr
 8001db4:	40021000 	.word	0x40021000
 8001db8:	f8ff0000 	.word	0xf8ff0000
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001dc0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001dc2:	e003      	b.n	8001dcc <LoopCopyDataInit>

08001dc4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001dc6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001dc8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001dca:	3104      	adds	r1, #4

08001dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001dcc:	480a      	ldr	r0, [pc, #40]	; (8001df8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001dce:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001dd0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001dd2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001dd4:	d3f6      	bcc.n	8001dc4 <CopyDataInit>
  ldr r2, =_sbss
 8001dd6:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001dd8:	e002      	b.n	8001de0 <LoopFillZerobss>

08001dda <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001dda:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001ddc:	f842 3b04 	str.w	r3, [r2], #4

08001de0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001de0:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001de2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001de4:	d3f9      	bcc.n	8001dda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001de6:	f7ff ffb7 	bl	8001d58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dea:	f006 fad3 	bl	8008394 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dee:	f7ff fa6d 	bl	80012cc <main>
  bx lr
 8001df2:	4770      	bx	lr
  ldr r3, =_sidata
 8001df4:	0800929c 	.word	0x0800929c
  ldr r0, =_sdata
 8001df8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001dfc:	20000088 	.word	0x20000088
  ldr r2, =_sbss
 8001e00:	20000088 	.word	0x20000088
  ldr r3, = _ebss
 8001e04:	2000490c 	.word	0x2000490c

08001e08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e08:	e7fe      	b.n	8001e08 <ADC1_2_IRQHandler>
	...

08001e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <HAL_Init+0x28>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a07      	ldr	r2, [pc, #28]	; (8001e34 <HAL_Init+0x28>)
 8001e16:	f043 0310 	orr.w	r3, r3, #16
 8001e1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e1c:	2003      	movs	r0, #3
 8001e1e:	f000 fc2f 	bl	8002680 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e22:	2000      	movs	r0, #0
 8001e24:	f000 f808 	bl	8001e38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e28:	f7ff fd7c 	bl	8001924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40022000 	.word	0x40022000

08001e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e40:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <HAL_InitTick+0x54>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <HAL_InitTick+0x58>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 fc39 	bl	80026ce <HAL_SYSTICK_Config>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e00e      	b.n	8001e84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b0f      	cmp	r3, #15
 8001e6a:	d80a      	bhi.n	8001e82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	f04f 30ff 	mov.w	r0, #4294967295
 8001e74:	f000 fc0f 	bl	8002696 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e78:	4a06      	ldr	r2, [pc, #24]	; (8001e94 <HAL_InitTick+0x5c>)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	e000      	b.n	8001e84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20000004 	.word	0x20000004
 8001e90:	2000000c 	.word	0x2000000c
 8001e94:	20000008 	.word	0x20000008

08001e98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <HAL_IncTick+0x1c>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <HAL_IncTick+0x20>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	4a03      	ldr	r2, [pc, #12]	; (8001eb8 <HAL_IncTick+0x20>)
 8001eaa:	6013      	str	r3, [r2, #0]
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr
 8001eb4:	2000000c 	.word	0x2000000c
 8001eb8:	200028a0 	.word	0x200028a0

08001ebc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec0:	4b02      	ldr	r3, [pc, #8]	; (8001ecc <HAL_GetTick+0x10>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	200028a0 	.word	0x200028a0

08001ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed8:	f7ff fff0 	bl	8001ebc <HAL_GetTick>
 8001edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee8:	d005      	beq.n	8001ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <HAL_Delay+0x40>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ef6:	bf00      	nop
 8001ef8:	f7ff ffe0 	bl	8001ebc <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d8f7      	bhi.n	8001ef8 <HAL_Delay+0x28>
  {
  }
}
 8001f08:	bf00      	nop
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	2000000c 	.word	0x2000000c

08001f14 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e0be      	b.n	80020b4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d109      	bne.n	8001f58 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff fd18 	bl	8001988 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f9ab 	bl	80022b4 <ADC_ConversionStop_Disable>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f66:	f003 0310 	and.w	r3, r3, #16
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f040 8099 	bne.w	80020a2 <HAL_ADC_Init+0x18e>
 8001f70:	7dfb      	ldrb	r3, [r7, #23]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f040 8095 	bne.w	80020a2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f80:	f023 0302 	bic.w	r3, r3, #2
 8001f84:	f043 0202 	orr.w	r2, r3, #2
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f94:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	7b1b      	ldrb	r3, [r3, #12]
 8001f9a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f9c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fac:	d003      	beq.n	8001fb6 <HAL_ADC_Init+0xa2>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d102      	bne.n	8001fbc <HAL_ADC_Init+0xa8>
 8001fb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fba:	e000      	b.n	8001fbe <HAL_ADC_Init+0xaa>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	7d1b      	ldrb	r3, [r3, #20]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d119      	bne.n	8002000 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	7b1b      	ldrb	r3, [r3, #12]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d109      	bne.n	8001fe8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	035a      	lsls	r2, r3, #13
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	e00b      	b.n	8002000 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fec:	f043 0220 	orr.w	r2, r3, #32
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff8:	f043 0201 	orr.w	r2, r3, #1
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	430a      	orrs	r2, r1
 8002012:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	4b28      	ldr	r3, [pc, #160]	; (80020bc <HAL_ADC_Init+0x1a8>)
 800201c:	4013      	ands	r3, r2
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6812      	ldr	r2, [r2, #0]
 8002022:	68b9      	ldr	r1, [r7, #8]
 8002024:	430b      	orrs	r3, r1
 8002026:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002030:	d003      	beq.n	800203a <HAL_ADC_Init+0x126>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d104      	bne.n	8002044 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	3b01      	subs	r3, #1
 8002040:	051b      	lsls	r3, r3, #20
 8002042:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	430a      	orrs	r2, r1
 8002056:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <HAL_ADC_Init+0x1ac>)
 8002060:	4013      	ands	r3, r2
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	429a      	cmp	r2, r3
 8002066:	d10b      	bne.n	8002080 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002072:	f023 0303 	bic.w	r3, r3, #3
 8002076:	f043 0201 	orr.w	r2, r3, #1
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800207e:	e018      	b.n	80020b2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002084:	f023 0312 	bic.w	r3, r3, #18
 8002088:	f043 0210 	orr.w	r2, r3, #16
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002094:	f043 0201 	orr.w	r2, r3, #1
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020a0:	e007      	b.n	80020b2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a6:	f043 0210 	orr.w	r2, r3, #16
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	ffe1f7fd 	.word	0xffe1f7fd
 80020c0:	ff1f0efe 	.word	0xff1f0efe

080020c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d101      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x20>
 80020e0:	2302      	movs	r3, #2
 80020e2:	e0dc      	b.n	800229e <HAL_ADC_ConfigChannel+0x1da>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b06      	cmp	r3, #6
 80020f2:	d81c      	bhi.n	800212e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	4613      	mov	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	3b05      	subs	r3, #5
 8002106:	221f      	movs	r2, #31
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	4019      	ands	r1, r3
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	6818      	ldr	r0, [r3, #0]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	3b05      	subs	r3, #5
 8002120:	fa00 f203 	lsl.w	r2, r0, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	635a      	str	r2, [r3, #52]	; 0x34
 800212c:	e03c      	b.n	80021a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b0c      	cmp	r3, #12
 8002134:	d81c      	bhi.n	8002170 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	3b23      	subs	r3, #35	; 0x23
 8002148:	221f      	movs	r2, #31
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	4019      	ands	r1, r3
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	6818      	ldr	r0, [r3, #0]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	3b23      	subs	r3, #35	; 0x23
 8002162:	fa00 f203 	lsl.w	r2, r0, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	631a      	str	r2, [r3, #48]	; 0x30
 800216e:	e01b      	b.n	80021a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	3b41      	subs	r3, #65	; 0x41
 8002182:	221f      	movs	r2, #31
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	4019      	ands	r1, r3
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	6818      	ldr	r0, [r3, #0]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	3b41      	subs	r3, #65	; 0x41
 800219c:	fa00 f203 	lsl.w	r2, r0, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b09      	cmp	r3, #9
 80021ae:	d91c      	bls.n	80021ea <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68d9      	ldr	r1, [r3, #12]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	4613      	mov	r3, r2
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	4413      	add	r3, r2
 80021c0:	3b1e      	subs	r3, #30
 80021c2:	2207      	movs	r2, #7
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	4019      	ands	r1, r3
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	6898      	ldr	r0, [r3, #8]
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	4613      	mov	r3, r2
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	4413      	add	r3, r2
 80021da:	3b1e      	subs	r3, #30
 80021dc:	fa00 f203 	lsl.w	r2, r0, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	60da      	str	r2, [r3, #12]
 80021e8:	e019      	b.n	800221e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6919      	ldr	r1, [r3, #16]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4613      	mov	r3, r2
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	4413      	add	r3, r2
 80021fa:	2207      	movs	r2, #7
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	4019      	ands	r1, r3
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	6898      	ldr	r0, [r3, #8]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4613      	mov	r3, r2
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	4413      	add	r3, r2
 8002212:	fa00 f203 	lsl.w	r2, r0, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2b10      	cmp	r3, #16
 8002224:	d003      	beq.n	800222e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800222a:	2b11      	cmp	r3, #17
 800222c:	d132      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a1d      	ldr	r2, [pc, #116]	; (80022a8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d125      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d126      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002254:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2b10      	cmp	r3, #16
 800225c:	d11a      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800225e:	4b13      	ldr	r3, [pc, #76]	; (80022ac <HAL_ADC_ConfigChannel+0x1e8>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a13      	ldr	r2, [pc, #76]	; (80022b0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002264:	fba2 2303 	umull	r2, r3, r2, r3
 8002268:	0c9a      	lsrs	r2, r3, #18
 800226a:	4613      	mov	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002274:	e002      	b.n	800227c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	3b01      	subs	r3, #1
 800227a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f9      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x1b2>
 8002282:	e007      	b.n	8002294 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002288:	f043 0220 	orr.w	r2, r3, #32
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800229c:	7bfb      	ldrb	r3, [r7, #15]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr
 80022a8:	40012400 	.word	0x40012400
 80022ac:	20000004 	.word	0x20000004
 80022b0:	431bde83 	.word	0x431bde83

080022b4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d127      	bne.n	800231e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0201 	bic.w	r2, r2, #1
 80022dc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022de:	f7ff fded 	bl	8001ebc <HAL_GetTick>
 80022e2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022e4:	e014      	b.n	8002310 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022e6:	f7ff fde9 	bl	8001ebc <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d90d      	bls.n	8002310 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f8:	f043 0210 	orr.w	r2, r3, #16
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002304:	f043 0201 	orr.w	r2, r3, #1
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e007      	b.n	8002320 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b01      	cmp	r3, #1
 800231c:	d0e3      	beq.n	80022e6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e0ed      	b.n	8002516 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d102      	bne.n	800234c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff fb5a 	bl	8001a00 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 0202 	bic.w	r2, r2, #2
 800235a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800235c:	f7ff fdae 	bl	8001ebc <HAL_GetTick>
 8002360:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002362:	e012      	b.n	800238a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002364:	f7ff fdaa 	bl	8001ebc <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b0a      	cmp	r3, #10
 8002370:	d90b      	bls.n	800238a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2205      	movs	r2, #5
 8002382:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e0c5      	b.n	8002516 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1e5      	bne.n	8002364 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0201 	orr.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023a8:	f7ff fd88 	bl	8001ebc <HAL_GetTick>
 80023ac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023ae:	e012      	b.n	80023d6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023b0:	f7ff fd84 	bl	8001ebc <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b0a      	cmp	r3, #10
 80023bc:	d90b      	bls.n	80023d6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2205      	movs	r2, #5
 80023ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e09f      	b.n	8002516 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0e5      	beq.n	80023b0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	7e1b      	ldrb	r3, [r3, #24]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d108      	bne.n	80023fe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	e007      	b.n	800240e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800240c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	7e5b      	ldrb	r3, [r3, #25]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d108      	bne.n	8002428 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	e007      	b.n	8002438 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002436:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	7e9b      	ldrb	r3, [r3, #26]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d108      	bne.n	8002452 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0220 	orr.w	r2, r2, #32
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	e007      	b.n	8002462 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 0220 	bic.w	r2, r2, #32
 8002460:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	7edb      	ldrb	r3, [r3, #27]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d108      	bne.n	800247c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0210 	bic.w	r2, r2, #16
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	e007      	b.n	800248c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0210 	orr.w	r2, r2, #16
 800248a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	7f1b      	ldrb	r3, [r3, #28]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d108      	bne.n	80024a6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0208 	orr.w	r2, r2, #8
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	e007      	b.n	80024b6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 0208 	bic.w	r2, r2, #8
 80024b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	7f5b      	ldrb	r3, [r3, #29]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d108      	bne.n	80024d0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f042 0204 	orr.w	r2, r2, #4
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	e007      	b.n	80024e0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0204 	bic.w	r2, r2, #4
 80024de:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	431a      	orrs	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	ea42 0103 	orr.w	r1, r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	1e5a      	subs	r2, r3, #1
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	430a      	orrs	r2, r1
 8002504:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002530:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <__NVIC_SetPriorityGrouping+0x44>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800253c:	4013      	ands	r3, r2
 800253e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002548:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800254c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002552:	4a04      	ldr	r2, [pc, #16]	; (8002564 <__NVIC_SetPriorityGrouping+0x44>)
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	60d3      	str	r3, [r2, #12]
}
 8002558:	bf00      	nop
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	bc80      	pop	{r7}
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800256c:	4b04      	ldr	r3, [pc, #16]	; (8002580 <__NVIC_GetPriorityGrouping+0x18>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	0a1b      	lsrs	r3, r3, #8
 8002572:	f003 0307 	and.w	r3, r3, #7
}
 8002576:	4618      	mov	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	6039      	str	r1, [r7, #0]
 800258e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002594:	2b00      	cmp	r3, #0
 8002596:	db0a      	blt.n	80025ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	b2da      	uxtb	r2, r3
 800259c:	490c      	ldr	r1, [pc, #48]	; (80025d0 <__NVIC_SetPriority+0x4c>)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	0112      	lsls	r2, r2, #4
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	440b      	add	r3, r1
 80025a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025ac:	e00a      	b.n	80025c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	4908      	ldr	r1, [pc, #32]	; (80025d4 <__NVIC_SetPriority+0x50>)
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	3b04      	subs	r3, #4
 80025bc:	0112      	lsls	r2, r2, #4
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	440b      	add	r3, r1
 80025c2:	761a      	strb	r2, [r3, #24]
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	e000e100 	.word	0xe000e100
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025d8:	b480      	push	{r7}
 80025da:	b089      	sub	sp, #36	; 0x24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f1c3 0307 	rsb	r3, r3, #7
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	bf28      	it	cs
 80025f6:	2304      	movcs	r3, #4
 80025f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	3304      	adds	r3, #4
 80025fe:	2b06      	cmp	r3, #6
 8002600:	d902      	bls.n	8002608 <NVIC_EncodePriority+0x30>
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	3b03      	subs	r3, #3
 8002606:	e000      	b.n	800260a <NVIC_EncodePriority+0x32>
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800260c:	f04f 32ff 	mov.w	r2, #4294967295
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43da      	mvns	r2, r3
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	401a      	ands	r2, r3
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002620:	f04f 31ff 	mov.w	r1, #4294967295
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	fa01 f303 	lsl.w	r3, r1, r3
 800262a:	43d9      	mvns	r1, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002630:	4313      	orrs	r3, r2
         );
}
 8002632:	4618      	mov	r0, r3
 8002634:	3724      	adds	r7, #36	; 0x24
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr

0800263c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3b01      	subs	r3, #1
 8002648:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800264c:	d301      	bcc.n	8002652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800264e:	2301      	movs	r3, #1
 8002650:	e00f      	b.n	8002672 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002652:	4a0a      	ldr	r2, [pc, #40]	; (800267c <SysTick_Config+0x40>)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3b01      	subs	r3, #1
 8002658:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800265a:	210f      	movs	r1, #15
 800265c:	f04f 30ff 	mov.w	r0, #4294967295
 8002660:	f7ff ff90 	bl	8002584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002664:	4b05      	ldr	r3, [pc, #20]	; (800267c <SysTick_Config+0x40>)
 8002666:	2200      	movs	r2, #0
 8002668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800266a:	4b04      	ldr	r3, [pc, #16]	; (800267c <SysTick_Config+0x40>)
 800266c:	2207      	movs	r2, #7
 800266e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	e000e010 	.word	0xe000e010

08002680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff ff49 	bl	8002520 <__NVIC_SetPriorityGrouping>
}
 800268e:	bf00      	nop
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002696:	b580      	push	{r7, lr}
 8002698:	b086      	sub	sp, #24
 800269a:	af00      	add	r7, sp, #0
 800269c:	4603      	mov	r3, r0
 800269e:	60b9      	str	r1, [r7, #8]
 80026a0:	607a      	str	r2, [r7, #4]
 80026a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026a8:	f7ff ff5e 	bl	8002568 <__NVIC_GetPriorityGrouping>
 80026ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	68b9      	ldr	r1, [r7, #8]
 80026b2:	6978      	ldr	r0, [r7, #20]
 80026b4:	f7ff ff90 	bl	80025d8 <NVIC_EncodePriority>
 80026b8:	4602      	mov	r2, r0
 80026ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026be:	4611      	mov	r1, r2
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff ff5f 	bl	8002584 <__NVIC_SetPriority>
}
 80026c6:	bf00      	nop
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff ffb0 	bl	800263c <SysTick_Config>
 80026dc:	4603      	mov	r3, r0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b08b      	sub	sp, #44	; 0x2c
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026f2:	2300      	movs	r3, #0
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026f6:	2300      	movs	r3, #0
 80026f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026fa:	e127      	b.n	800294c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026fc:	2201      	movs	r2, #1
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	69fa      	ldr	r2, [r7, #28]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	429a      	cmp	r2, r3
 8002716:	f040 8116 	bne.w	8002946 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b12      	cmp	r3, #18
 8002720:	d034      	beq.n	800278c <HAL_GPIO_Init+0xa4>
 8002722:	2b12      	cmp	r3, #18
 8002724:	d80d      	bhi.n	8002742 <HAL_GPIO_Init+0x5a>
 8002726:	2b02      	cmp	r3, #2
 8002728:	d02b      	beq.n	8002782 <HAL_GPIO_Init+0x9a>
 800272a:	2b02      	cmp	r3, #2
 800272c:	d804      	bhi.n	8002738 <HAL_GPIO_Init+0x50>
 800272e:	2b00      	cmp	r3, #0
 8002730:	d031      	beq.n	8002796 <HAL_GPIO_Init+0xae>
 8002732:	2b01      	cmp	r3, #1
 8002734:	d01c      	beq.n	8002770 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002736:	e048      	b.n	80027ca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002738:	2b03      	cmp	r3, #3
 800273a:	d043      	beq.n	80027c4 <HAL_GPIO_Init+0xdc>
 800273c:	2b11      	cmp	r3, #17
 800273e:	d01b      	beq.n	8002778 <HAL_GPIO_Init+0x90>
          break;
 8002740:	e043      	b.n	80027ca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002742:	4a89      	ldr	r2, [pc, #548]	; (8002968 <HAL_GPIO_Init+0x280>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d026      	beq.n	8002796 <HAL_GPIO_Init+0xae>
 8002748:	4a87      	ldr	r2, [pc, #540]	; (8002968 <HAL_GPIO_Init+0x280>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d806      	bhi.n	800275c <HAL_GPIO_Init+0x74>
 800274e:	4a87      	ldr	r2, [pc, #540]	; (800296c <HAL_GPIO_Init+0x284>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d020      	beq.n	8002796 <HAL_GPIO_Init+0xae>
 8002754:	4a86      	ldr	r2, [pc, #536]	; (8002970 <HAL_GPIO_Init+0x288>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d01d      	beq.n	8002796 <HAL_GPIO_Init+0xae>
          break;
 800275a:	e036      	b.n	80027ca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800275c:	4a85      	ldr	r2, [pc, #532]	; (8002974 <HAL_GPIO_Init+0x28c>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d019      	beq.n	8002796 <HAL_GPIO_Init+0xae>
 8002762:	4a85      	ldr	r2, [pc, #532]	; (8002978 <HAL_GPIO_Init+0x290>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d016      	beq.n	8002796 <HAL_GPIO_Init+0xae>
 8002768:	4a84      	ldr	r2, [pc, #528]	; (800297c <HAL_GPIO_Init+0x294>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d013      	beq.n	8002796 <HAL_GPIO_Init+0xae>
          break;
 800276e:	e02c      	b.n	80027ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	623b      	str	r3, [r7, #32]
          break;
 8002776:	e028      	b.n	80027ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	3304      	adds	r3, #4
 800277e:	623b      	str	r3, [r7, #32]
          break;
 8002780:	e023      	b.n	80027ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	3308      	adds	r3, #8
 8002788:	623b      	str	r3, [r7, #32]
          break;
 800278a:	e01e      	b.n	80027ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	330c      	adds	r3, #12
 8002792:	623b      	str	r3, [r7, #32]
          break;
 8002794:	e019      	b.n	80027ca <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d102      	bne.n	80027a4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800279e:	2304      	movs	r3, #4
 80027a0:	623b      	str	r3, [r7, #32]
          break;
 80027a2:	e012      	b.n	80027ca <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d105      	bne.n	80027b8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027ac:	2308      	movs	r3, #8
 80027ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69fa      	ldr	r2, [r7, #28]
 80027b4:	611a      	str	r2, [r3, #16]
          break;
 80027b6:	e008      	b.n	80027ca <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027b8:	2308      	movs	r3, #8
 80027ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69fa      	ldr	r2, [r7, #28]
 80027c0:	615a      	str	r2, [r3, #20]
          break;
 80027c2:	e002      	b.n	80027ca <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027c4:	2300      	movs	r3, #0
 80027c6:	623b      	str	r3, [r7, #32]
          break;
 80027c8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	2bff      	cmp	r3, #255	; 0xff
 80027ce:	d801      	bhi.n	80027d4 <HAL_GPIO_Init+0xec>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	e001      	b.n	80027d8 <HAL_GPIO_Init+0xf0>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3304      	adds	r3, #4
 80027d8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	2bff      	cmp	r3, #255	; 0xff
 80027de:	d802      	bhi.n	80027e6 <HAL_GPIO_Init+0xfe>
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	e002      	b.n	80027ec <HAL_GPIO_Init+0x104>
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	3b08      	subs	r3, #8
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	210f      	movs	r1, #15
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	fa01 f303 	lsl.w	r3, r1, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	401a      	ands	r2, r3
 80027fe:	6a39      	ldr	r1, [r7, #32]
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	fa01 f303 	lsl.w	r3, r1, r3
 8002806:	431a      	orrs	r2, r3
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 8096 	beq.w	8002946 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800281a:	4b59      	ldr	r3, [pc, #356]	; (8002980 <HAL_GPIO_Init+0x298>)
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	4a58      	ldr	r2, [pc, #352]	; (8002980 <HAL_GPIO_Init+0x298>)
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	6193      	str	r3, [r2, #24]
 8002826:	4b56      	ldr	r3, [pc, #344]	; (8002980 <HAL_GPIO_Init+0x298>)
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002832:	4a54      	ldr	r2, [pc, #336]	; (8002984 <HAL_GPIO_Init+0x29c>)
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	089b      	lsrs	r3, r3, #2
 8002838:	3302      	adds	r3, #2
 800283a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	220f      	movs	r2, #15
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	4013      	ands	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a4b      	ldr	r2, [pc, #300]	; (8002988 <HAL_GPIO_Init+0x2a0>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d013      	beq.n	8002886 <HAL_GPIO_Init+0x19e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a4a      	ldr	r2, [pc, #296]	; (800298c <HAL_GPIO_Init+0x2a4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d00d      	beq.n	8002882 <HAL_GPIO_Init+0x19a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a49      	ldr	r2, [pc, #292]	; (8002990 <HAL_GPIO_Init+0x2a8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d007      	beq.n	800287e <HAL_GPIO_Init+0x196>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a48      	ldr	r2, [pc, #288]	; (8002994 <HAL_GPIO_Init+0x2ac>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d101      	bne.n	800287a <HAL_GPIO_Init+0x192>
 8002876:	2303      	movs	r3, #3
 8002878:	e006      	b.n	8002888 <HAL_GPIO_Init+0x1a0>
 800287a:	2304      	movs	r3, #4
 800287c:	e004      	b.n	8002888 <HAL_GPIO_Init+0x1a0>
 800287e:	2302      	movs	r3, #2
 8002880:	e002      	b.n	8002888 <HAL_GPIO_Init+0x1a0>
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <HAL_GPIO_Init+0x1a0>
 8002886:	2300      	movs	r3, #0
 8002888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800288a:	f002 0203 	and.w	r2, r2, #3
 800288e:	0092      	lsls	r2, r2, #2
 8002890:	4093      	lsls	r3, r2
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	4313      	orrs	r3, r2
 8002896:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002898:	493a      	ldr	r1, [pc, #232]	; (8002984 <HAL_GPIO_Init+0x29c>)
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	089b      	lsrs	r3, r3, #2
 800289e:	3302      	adds	r3, #2
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d006      	beq.n	80028c0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028b2:	4b39      	ldr	r3, [pc, #228]	; (8002998 <HAL_GPIO_Init+0x2b0>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	4938      	ldr	r1, [pc, #224]	; (8002998 <HAL_GPIO_Init+0x2b0>)
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	600b      	str	r3, [r1, #0]
 80028be:	e006      	b.n	80028ce <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028c0:	4b35      	ldr	r3, [pc, #212]	; (8002998 <HAL_GPIO_Init+0x2b0>)
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	43db      	mvns	r3, r3
 80028c8:	4933      	ldr	r1, [pc, #204]	; (8002998 <HAL_GPIO_Init+0x2b0>)
 80028ca:	4013      	ands	r3, r2
 80028cc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d006      	beq.n	80028e8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028da:	4b2f      	ldr	r3, [pc, #188]	; (8002998 <HAL_GPIO_Init+0x2b0>)
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	492e      	ldr	r1, [pc, #184]	; (8002998 <HAL_GPIO_Init+0x2b0>)
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	604b      	str	r3, [r1, #4]
 80028e6:	e006      	b.n	80028f6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028e8:	4b2b      	ldr	r3, [pc, #172]	; (8002998 <HAL_GPIO_Init+0x2b0>)
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	43db      	mvns	r3, r3
 80028f0:	4929      	ldr	r1, [pc, #164]	; (8002998 <HAL_GPIO_Init+0x2b0>)
 80028f2:	4013      	ands	r3, r2
 80028f4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d006      	beq.n	8002910 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002902:	4b25      	ldr	r3, [pc, #148]	; (8002998 <HAL_GPIO_Init+0x2b0>)
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	4924      	ldr	r1, [pc, #144]	; (8002998 <HAL_GPIO_Init+0x2b0>)
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	4313      	orrs	r3, r2
 800290c:	608b      	str	r3, [r1, #8]
 800290e:	e006      	b.n	800291e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002910:	4b21      	ldr	r3, [pc, #132]	; (8002998 <HAL_GPIO_Init+0x2b0>)
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	43db      	mvns	r3, r3
 8002918:	491f      	ldr	r1, [pc, #124]	; (8002998 <HAL_GPIO_Init+0x2b0>)
 800291a:	4013      	ands	r3, r2
 800291c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d006      	beq.n	8002938 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800292a:	4b1b      	ldr	r3, [pc, #108]	; (8002998 <HAL_GPIO_Init+0x2b0>)
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	491a      	ldr	r1, [pc, #104]	; (8002998 <HAL_GPIO_Init+0x2b0>)
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	4313      	orrs	r3, r2
 8002934:	60cb      	str	r3, [r1, #12]
 8002936:	e006      	b.n	8002946 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002938:	4b17      	ldr	r3, [pc, #92]	; (8002998 <HAL_GPIO_Init+0x2b0>)
 800293a:	68da      	ldr	r2, [r3, #12]
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	43db      	mvns	r3, r3
 8002940:	4915      	ldr	r1, [pc, #84]	; (8002998 <HAL_GPIO_Init+0x2b0>)
 8002942:	4013      	ands	r3, r2
 8002944:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	3301      	adds	r3, #1
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	fa22 f303 	lsr.w	r3, r2, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	f47f aed0 	bne.w	80026fc <HAL_GPIO_Init+0x14>
  }
}
 800295c:	bf00      	nop
 800295e:	372c      	adds	r7, #44	; 0x2c
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	10210000 	.word	0x10210000
 800296c:	10110000 	.word	0x10110000
 8002970:	10120000 	.word	0x10120000
 8002974:	10310000 	.word	0x10310000
 8002978:	10320000 	.word	0x10320000
 800297c:	10220000 	.word	0x10220000
 8002980:	40021000 	.word	0x40021000
 8002984:	40010000 	.word	0x40010000
 8002988:	40010800 	.word	0x40010800
 800298c:	40010c00 	.word	0x40010c00
 8002990:	40011000 	.word	0x40011000
 8002994:	40011400 	.word	0x40011400
 8002998:	40010400 	.word	0x40010400

0800299c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	807b      	strh	r3, [r7, #2]
 80029a8:	4613      	mov	r3, r2
 80029aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029ac:	787b      	ldrb	r3, [r7, #1]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029b2:	887a      	ldrh	r2, [r7, #2]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029b8:	e003      	b.n	80029c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029ba:	887b      	ldrh	r3, [r7, #2]
 80029bc:	041a      	lsls	r2, r3, #16
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	611a      	str	r2, [r3, #16]
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr

080029cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	887b      	ldrh	r3, [r7, #2]
 80029de:	4013      	ands	r3, r2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029e4:	887a      	ldrh	r2, [r7, #2]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80029ea:	e002      	b.n	80029f2 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029ec:	887a      	ldrh	r2, [r7, #2]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	611a      	str	r2, [r3, #16]
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e10f      	b.n	8002c2e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d106      	bne.n	8002a28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7ff f838 	bl	8001a98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2224      	movs	r2, #36	; 0x24
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0201 	bic.w	r2, r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a40:	f000 fcda 	bl	80033f8 <HAL_RCC_GetPCLK1Freq>
 8002a44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	4a7b      	ldr	r2, [pc, #492]	; (8002c38 <HAL_I2C_Init+0x23c>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d807      	bhi.n	8002a60 <HAL_I2C_Init+0x64>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4a7a      	ldr	r2, [pc, #488]	; (8002c3c <HAL_I2C_Init+0x240>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	bf94      	ite	ls
 8002a58:	2301      	movls	r3, #1
 8002a5a:	2300      	movhi	r3, #0
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	e006      	b.n	8002a6e <HAL_I2C_Init+0x72>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4a77      	ldr	r2, [pc, #476]	; (8002c40 <HAL_I2C_Init+0x244>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	bf94      	ite	ls
 8002a68:	2301      	movls	r3, #1
 8002a6a:	2300      	movhi	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e0db      	b.n	8002c2e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	4a72      	ldr	r2, [pc, #456]	; (8002c44 <HAL_I2C_Init+0x248>)
 8002a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7e:	0c9b      	lsrs	r3, r3, #18
 8002a80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	4a64      	ldr	r2, [pc, #400]	; (8002c38 <HAL_I2C_Init+0x23c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d802      	bhi.n	8002ab0 <HAL_I2C_Init+0xb4>
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	3301      	adds	r3, #1
 8002aae:	e009      	b.n	8002ac4 <HAL_I2C_Init+0xc8>
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ab6:	fb02 f303 	mul.w	r3, r2, r3
 8002aba:	4a63      	ldr	r2, [pc, #396]	; (8002c48 <HAL_I2C_Init+0x24c>)
 8002abc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac0:	099b      	lsrs	r3, r3, #6
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6812      	ldr	r2, [r2, #0]
 8002ac8:	430b      	orrs	r3, r1
 8002aca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ad6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	4956      	ldr	r1, [pc, #344]	; (8002c38 <HAL_I2C_Init+0x23c>)
 8002ae0:	428b      	cmp	r3, r1
 8002ae2:	d80d      	bhi.n	8002b00 <HAL_I2C_Init+0x104>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	1e59      	subs	r1, r3, #1
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	fbb1 f3f3 	udiv	r3, r1, r3
 8002af2:	3301      	adds	r3, #1
 8002af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002af8:	2b04      	cmp	r3, #4
 8002afa:	bf38      	it	cc
 8002afc:	2304      	movcc	r3, #4
 8002afe:	e04f      	b.n	8002ba0 <HAL_I2C_Init+0x1a4>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d111      	bne.n	8002b2c <HAL_I2C_Init+0x130>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	1e58      	subs	r0, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6859      	ldr	r1, [r3, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	440b      	add	r3, r1
 8002b16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	bf0c      	ite	eq
 8002b24:	2301      	moveq	r3, #1
 8002b26:	2300      	movne	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	e012      	b.n	8002b52 <HAL_I2C_Init+0x156>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	1e58      	subs	r0, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6859      	ldr	r1, [r3, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	0099      	lsls	r1, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b42:	3301      	adds	r3, #1
 8002b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	bf0c      	ite	eq
 8002b4c:	2301      	moveq	r3, #1
 8002b4e:	2300      	movne	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_I2C_Init+0x15e>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e022      	b.n	8002ba0 <HAL_I2C_Init+0x1a4>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10e      	bne.n	8002b80 <HAL_I2C_Init+0x184>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	1e58      	subs	r0, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6859      	ldr	r1, [r3, #4]
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	440b      	add	r3, r1
 8002b70:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b74:	3301      	adds	r3, #1
 8002b76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b7e:	e00f      	b.n	8002ba0 <HAL_I2C_Init+0x1a4>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	1e58      	subs	r0, r3, #1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6859      	ldr	r1, [r3, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	0099      	lsls	r1, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b96:	3301      	adds	r3, #1
 8002b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	6809      	ldr	r1, [r1, #0]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69da      	ldr	r2, [r3, #28]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002bce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6911      	ldr	r1, [r2, #16]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	68d2      	ldr	r2, [r2, #12]
 8002bda:	4311      	orrs	r1, r2
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6812      	ldr	r2, [r2, #0]
 8002be0:	430b      	orrs	r3, r1
 8002be2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2220      	movs	r2, #32
 8002c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	000186a0 	.word	0x000186a0
 8002c3c:	001e847f 	.word	0x001e847f
 8002c40:	003d08ff 	.word	0x003d08ff
 8002c44:	431bde83 	.word	0x431bde83
 8002c48:	10624dd3 	.word	0x10624dd3

08002c4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e26c      	b.n	8003138 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 8087 	beq.w	8002d7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c6c:	4b92      	ldr	r3, [pc, #584]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f003 030c 	and.w	r3, r3, #12
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d00c      	beq.n	8002c92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c78:	4b8f      	ldr	r3, [pc, #572]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f003 030c 	and.w	r3, r3, #12
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d112      	bne.n	8002caa <HAL_RCC_OscConfig+0x5e>
 8002c84:	4b8c      	ldr	r3, [pc, #560]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c90:	d10b      	bne.n	8002caa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c92:	4b89      	ldr	r3, [pc, #548]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d06c      	beq.n	8002d78 <HAL_RCC_OscConfig+0x12c>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d168      	bne.n	8002d78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e246      	b.n	8003138 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb2:	d106      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x76>
 8002cb4:	4b80      	ldr	r3, [pc, #512]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a7f      	ldr	r2, [pc, #508]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002cba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cbe:	6013      	str	r3, [r2, #0]
 8002cc0:	e02e      	b.n	8002d20 <HAL_RCC_OscConfig+0xd4>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10c      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x98>
 8002cca:	4b7b      	ldr	r3, [pc, #492]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a7a      	ldr	r2, [pc, #488]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002cd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	4b78      	ldr	r3, [pc, #480]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a77      	ldr	r2, [pc, #476]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002cdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	e01d      	b.n	8002d20 <HAL_RCC_OscConfig+0xd4>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cec:	d10c      	bne.n	8002d08 <HAL_RCC_OscConfig+0xbc>
 8002cee:	4b72      	ldr	r3, [pc, #456]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a71      	ldr	r2, [pc, #452]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	4b6f      	ldr	r3, [pc, #444]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a6e      	ldr	r2, [pc, #440]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	e00b      	b.n	8002d20 <HAL_RCC_OscConfig+0xd4>
 8002d08:	4b6b      	ldr	r3, [pc, #428]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a6a      	ldr	r2, [pc, #424]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d12:	6013      	str	r3, [r2, #0]
 8002d14:	4b68      	ldr	r3, [pc, #416]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a67      	ldr	r2, [pc, #412]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002d1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d013      	beq.n	8002d50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d28:	f7ff f8c8 	bl	8001ebc <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d30:	f7ff f8c4 	bl	8001ebc <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b64      	cmp	r3, #100	; 0x64
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e1fa      	b.n	8003138 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d42:	4b5d      	ldr	r3, [pc, #372]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCC_OscConfig+0xe4>
 8002d4e:	e014      	b.n	8002d7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d50:	f7ff f8b4 	bl	8001ebc <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d58:	f7ff f8b0 	bl	8001ebc <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b64      	cmp	r3, #100	; 0x64
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e1e6      	b.n	8003138 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d6a:	4b53      	ldr	r3, [pc, #332]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f0      	bne.n	8002d58 <HAL_RCC_OscConfig+0x10c>
 8002d76:	e000      	b.n	8002d7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d063      	beq.n	8002e4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d86:	4b4c      	ldr	r3, [pc, #304]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f003 030c 	and.w	r3, r3, #12
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00b      	beq.n	8002daa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d92:	4b49      	ldr	r3, [pc, #292]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f003 030c 	and.w	r3, r3, #12
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d11c      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x18c>
 8002d9e:	4b46      	ldr	r3, [pc, #280]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d116      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002daa:	4b43      	ldr	r3, [pc, #268]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d005      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x176>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d001      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e1ba      	b.n	8003138 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc2:	4b3d      	ldr	r3, [pc, #244]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	4939      	ldr	r1, [pc, #228]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd6:	e03a      	b.n	8002e4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d020      	beq.n	8002e22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002de0:	4b36      	ldr	r3, [pc, #216]	; (8002ebc <HAL_RCC_OscConfig+0x270>)
 8002de2:	2201      	movs	r2, #1
 8002de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de6:	f7ff f869 	bl	8001ebc <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dee:	f7ff f865 	bl	8001ebc <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e19b      	b.n	8003138 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e00:	4b2d      	ldr	r3, [pc, #180]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0f0      	beq.n	8002dee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0c:	4b2a      	ldr	r3, [pc, #168]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	4927      	ldr	r1, [pc, #156]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	600b      	str	r3, [r1, #0]
 8002e20:	e015      	b.n	8002e4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e22:	4b26      	ldr	r3, [pc, #152]	; (8002ebc <HAL_RCC_OscConfig+0x270>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e28:	f7ff f848 	bl	8001ebc <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e30:	f7ff f844 	bl	8001ebc <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e17a      	b.n	8003138 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e42:	4b1d      	ldr	r3, [pc, #116]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f0      	bne.n	8002e30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d03a      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d019      	beq.n	8002e96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e62:	4b17      	ldr	r3, [pc, #92]	; (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e68:	f7ff f828 	bl	8001ebc <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e70:	f7ff f824 	bl	8001ebc <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e15a      	b.n	8003138 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e82:	4b0d      	ldr	r3, [pc, #52]	; (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e8e:	2001      	movs	r0, #1
 8002e90:	f000 fada 	bl	8003448 <RCC_Delay>
 8002e94:	e01c      	b.n	8002ed0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e96:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e9c:	f7ff f80e 	bl	8001ebc <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ea2:	e00f      	b.n	8002ec4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ea4:	f7ff f80a 	bl	8001ebc <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d908      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e140      	b.n	8003138 <HAL_RCC_OscConfig+0x4ec>
 8002eb6:	bf00      	nop
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	42420000 	.word	0x42420000
 8002ec0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec4:	4b9e      	ldr	r3, [pc, #632]	; (8003140 <HAL_RCC_OscConfig+0x4f4>)
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1e9      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 80a6 	beq.w	800302a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ee2:	4b97      	ldr	r3, [pc, #604]	; (8003140 <HAL_RCC_OscConfig+0x4f4>)
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10d      	bne.n	8002f0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eee:	4b94      	ldr	r3, [pc, #592]	; (8003140 <HAL_RCC_OscConfig+0x4f4>)
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	4a93      	ldr	r2, [pc, #588]	; (8003140 <HAL_RCC_OscConfig+0x4f4>)
 8002ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef8:	61d3      	str	r3, [r2, #28]
 8002efa:	4b91      	ldr	r3, [pc, #580]	; (8003140 <HAL_RCC_OscConfig+0x4f4>)
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f02:	60bb      	str	r3, [r7, #8]
 8002f04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f06:	2301      	movs	r3, #1
 8002f08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0a:	4b8e      	ldr	r3, [pc, #568]	; (8003144 <HAL_RCC_OscConfig+0x4f8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d118      	bne.n	8002f48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f16:	4b8b      	ldr	r3, [pc, #556]	; (8003144 <HAL_RCC_OscConfig+0x4f8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a8a      	ldr	r2, [pc, #552]	; (8003144 <HAL_RCC_OscConfig+0x4f8>)
 8002f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f22:	f7fe ffcb 	bl	8001ebc <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f2a:	f7fe ffc7 	bl	8001ebc <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b64      	cmp	r3, #100	; 0x64
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e0fd      	b.n	8003138 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3c:	4b81      	ldr	r3, [pc, #516]	; (8003144 <HAL_RCC_OscConfig+0x4f8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0f0      	beq.n	8002f2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d106      	bne.n	8002f5e <HAL_RCC_OscConfig+0x312>
 8002f50:	4b7b      	ldr	r3, [pc, #492]	; (8003140 <HAL_RCC_OscConfig+0x4f4>)
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	4a7a      	ldr	r2, [pc, #488]	; (8003140 <HAL_RCC_OscConfig+0x4f4>)
 8002f56:	f043 0301 	orr.w	r3, r3, #1
 8002f5a:	6213      	str	r3, [r2, #32]
 8002f5c:	e02d      	b.n	8002fba <HAL_RCC_OscConfig+0x36e>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10c      	bne.n	8002f80 <HAL_RCC_OscConfig+0x334>
 8002f66:	4b76      	ldr	r3, [pc, #472]	; (8003140 <HAL_RCC_OscConfig+0x4f4>)
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	4a75      	ldr	r2, [pc, #468]	; (8003140 <HAL_RCC_OscConfig+0x4f4>)
 8002f6c:	f023 0301 	bic.w	r3, r3, #1
 8002f70:	6213      	str	r3, [r2, #32]
 8002f72:	4b73      	ldr	r3, [pc, #460]	; (8003140 <HAL_RCC_OscConfig+0x4f4>)
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	4a72      	ldr	r2, [pc, #456]	; (8003140 <HAL_RCC_OscConfig+0x4f4>)
 8002f78:	f023 0304 	bic.w	r3, r3, #4
 8002f7c:	6213      	str	r3, [r2, #32]
 8002f7e:	e01c      	b.n	8002fba <HAL_RCC_OscConfig+0x36e>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	2b05      	cmp	r3, #5
 8002f86:	d10c      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x356>
 8002f88:	4b6d      	ldr	r3, [pc, #436]	; (8003140 <HAL_RCC_OscConfig+0x4f4>)
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	4a6c      	ldr	r2, [pc, #432]	; (8003140 <HAL_RCC_OscConfig+0x4f4>)
 8002f8e:	f043 0304 	orr.w	r3, r3, #4
 8002f92:	6213      	str	r3, [r2, #32]
 8002f94:	4b6a      	ldr	r3, [pc, #424]	; (8003140 <HAL_RCC_OscConfig+0x4f4>)
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	4a69      	ldr	r2, [pc, #420]	; (8003140 <HAL_RCC_OscConfig+0x4f4>)
 8002f9a:	f043 0301 	orr.w	r3, r3, #1
 8002f9e:	6213      	str	r3, [r2, #32]
 8002fa0:	e00b      	b.n	8002fba <HAL_RCC_OscConfig+0x36e>
 8002fa2:	4b67      	ldr	r3, [pc, #412]	; (8003140 <HAL_RCC_OscConfig+0x4f4>)
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	4a66      	ldr	r2, [pc, #408]	; (8003140 <HAL_RCC_OscConfig+0x4f4>)
 8002fa8:	f023 0301 	bic.w	r3, r3, #1
 8002fac:	6213      	str	r3, [r2, #32]
 8002fae:	4b64      	ldr	r3, [pc, #400]	; (8003140 <HAL_RCC_OscConfig+0x4f4>)
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	4a63      	ldr	r2, [pc, #396]	; (8003140 <HAL_RCC_OscConfig+0x4f4>)
 8002fb4:	f023 0304 	bic.w	r3, r3, #4
 8002fb8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d015      	beq.n	8002fee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc2:	f7fe ff7b 	bl	8001ebc <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc8:	e00a      	b.n	8002fe0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fca:	f7fe ff77 	bl	8001ebc <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e0ab      	b.n	8003138 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe0:	4b57      	ldr	r3, [pc, #348]	; (8003140 <HAL_RCC_OscConfig+0x4f4>)
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0ee      	beq.n	8002fca <HAL_RCC_OscConfig+0x37e>
 8002fec:	e014      	b.n	8003018 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fee:	f7fe ff65 	bl	8001ebc <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff4:	e00a      	b.n	800300c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff6:	f7fe ff61 	bl	8001ebc <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	f241 3288 	movw	r2, #5000	; 0x1388
 8003004:	4293      	cmp	r3, r2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e095      	b.n	8003138 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800300c:	4b4c      	ldr	r3, [pc, #304]	; (8003140 <HAL_RCC_OscConfig+0x4f4>)
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1ee      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003018:	7dfb      	ldrb	r3, [r7, #23]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d105      	bne.n	800302a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800301e:	4b48      	ldr	r3, [pc, #288]	; (8003140 <HAL_RCC_OscConfig+0x4f4>)
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	4a47      	ldr	r2, [pc, #284]	; (8003140 <HAL_RCC_OscConfig+0x4f4>)
 8003024:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003028:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 8081 	beq.w	8003136 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003034:	4b42      	ldr	r3, [pc, #264]	; (8003140 <HAL_RCC_OscConfig+0x4f4>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 030c 	and.w	r3, r3, #12
 800303c:	2b08      	cmp	r3, #8
 800303e:	d061      	beq.n	8003104 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	2b02      	cmp	r3, #2
 8003046:	d146      	bne.n	80030d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003048:	4b3f      	ldr	r3, [pc, #252]	; (8003148 <HAL_RCC_OscConfig+0x4fc>)
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304e:	f7fe ff35 	bl	8001ebc <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003056:	f7fe ff31 	bl	8001ebc <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e067      	b.n	8003138 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003068:	4b35      	ldr	r3, [pc, #212]	; (8003140 <HAL_RCC_OscConfig+0x4f4>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1f0      	bne.n	8003056 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800307c:	d108      	bne.n	8003090 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800307e:	4b30      	ldr	r3, [pc, #192]	; (8003140 <HAL_RCC_OscConfig+0x4f4>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	492d      	ldr	r1, [pc, #180]	; (8003140 <HAL_RCC_OscConfig+0x4f4>)
 800308c:	4313      	orrs	r3, r2
 800308e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003090:	4b2b      	ldr	r3, [pc, #172]	; (8003140 <HAL_RCC_OscConfig+0x4f4>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a19      	ldr	r1, [r3, #32]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	430b      	orrs	r3, r1
 80030a2:	4927      	ldr	r1, [pc, #156]	; (8003140 <HAL_RCC_OscConfig+0x4f4>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030a8:	4b27      	ldr	r3, [pc, #156]	; (8003148 <HAL_RCC_OscConfig+0x4fc>)
 80030aa:	2201      	movs	r2, #1
 80030ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ae:	f7fe ff05 	bl	8001ebc <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b6:	f7fe ff01 	bl	8001ebc <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e037      	b.n	8003138 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030c8:	4b1d      	ldr	r3, [pc, #116]	; (8003140 <HAL_RCC_OscConfig+0x4f4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0f0      	beq.n	80030b6 <HAL_RCC_OscConfig+0x46a>
 80030d4:	e02f      	b.n	8003136 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d6:	4b1c      	ldr	r3, [pc, #112]	; (8003148 <HAL_RCC_OscConfig+0x4fc>)
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030dc:	f7fe feee 	bl	8001ebc <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e4:	f7fe feea 	bl	8001ebc <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e020      	b.n	8003138 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030f6:	4b12      	ldr	r3, [pc, #72]	; (8003140 <HAL_RCC_OscConfig+0x4f4>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f0      	bne.n	80030e4 <HAL_RCC_OscConfig+0x498>
 8003102:	e018      	b.n	8003136 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e013      	b.n	8003138 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003110:	4b0b      	ldr	r3, [pc, #44]	; (8003140 <HAL_RCC_OscConfig+0x4f4>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	429a      	cmp	r2, r3
 8003122:	d106      	bne.n	8003132 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312e:	429a      	cmp	r2, r3
 8003130:	d001      	beq.n	8003136 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e000      	b.n	8003138 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3718      	adds	r7, #24
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40021000 	.word	0x40021000
 8003144:	40007000 	.word	0x40007000
 8003148:	42420060 	.word	0x42420060

0800314c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e0d0      	b.n	8003302 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003160:	4b6a      	ldr	r3, [pc, #424]	; (800330c <HAL_RCC_ClockConfig+0x1c0>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	429a      	cmp	r2, r3
 800316c:	d910      	bls.n	8003190 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316e:	4b67      	ldr	r3, [pc, #412]	; (800330c <HAL_RCC_ClockConfig+0x1c0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f023 0207 	bic.w	r2, r3, #7
 8003176:	4965      	ldr	r1, [pc, #404]	; (800330c <HAL_RCC_ClockConfig+0x1c0>)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	4313      	orrs	r3, r2
 800317c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800317e:	4b63      	ldr	r3, [pc, #396]	; (800330c <HAL_RCC_ClockConfig+0x1c0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	429a      	cmp	r2, r3
 800318a:	d001      	beq.n	8003190 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e0b8      	b.n	8003302 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d020      	beq.n	80031de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d005      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031a8:	4b59      	ldr	r3, [pc, #356]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	4a58      	ldr	r2, [pc, #352]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80031ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0308 	and.w	r3, r3, #8
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d005      	beq.n	80031cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031c0:	4b53      	ldr	r3, [pc, #332]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	4a52      	ldr	r2, [pc, #328]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80031c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80031ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031cc:	4b50      	ldr	r3, [pc, #320]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	494d      	ldr	r1, [pc, #308]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d040      	beq.n	800326c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d107      	bne.n	8003202 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f2:	4b47      	ldr	r3, [pc, #284]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d115      	bne.n	800322a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e07f      	b.n	8003302 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2b02      	cmp	r3, #2
 8003208:	d107      	bne.n	800321a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800320a:	4b41      	ldr	r3, [pc, #260]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d109      	bne.n	800322a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e073      	b.n	8003302 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321a:	4b3d      	ldr	r3, [pc, #244]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e06b      	b.n	8003302 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800322a:	4b39      	ldr	r3, [pc, #228]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f023 0203 	bic.w	r2, r3, #3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	4936      	ldr	r1, [pc, #216]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 8003238:	4313      	orrs	r3, r2
 800323a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800323c:	f7fe fe3e 	bl	8001ebc <HAL_GetTick>
 8003240:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003242:	e00a      	b.n	800325a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003244:	f7fe fe3a 	bl	8001ebc <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003252:	4293      	cmp	r3, r2
 8003254:	d901      	bls.n	800325a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e053      	b.n	8003302 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325a:	4b2d      	ldr	r3, [pc, #180]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f003 020c 	and.w	r2, r3, #12
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	429a      	cmp	r2, r3
 800326a:	d1eb      	bne.n	8003244 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800326c:	4b27      	ldr	r3, [pc, #156]	; (800330c <HAL_RCC_ClockConfig+0x1c0>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d210      	bcs.n	800329c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327a:	4b24      	ldr	r3, [pc, #144]	; (800330c <HAL_RCC_ClockConfig+0x1c0>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f023 0207 	bic.w	r2, r3, #7
 8003282:	4922      	ldr	r1, [pc, #136]	; (800330c <HAL_RCC_ClockConfig+0x1c0>)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	4313      	orrs	r3, r2
 8003288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800328a:	4b20      	ldr	r3, [pc, #128]	; (800330c <HAL_RCC_ClockConfig+0x1c0>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	429a      	cmp	r2, r3
 8003296:	d001      	beq.n	800329c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e032      	b.n	8003302 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d008      	beq.n	80032ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032a8:	4b19      	ldr	r3, [pc, #100]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	4916      	ldr	r1, [pc, #88]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d009      	beq.n	80032da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032c6:	4b12      	ldr	r3, [pc, #72]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	490e      	ldr	r1, [pc, #56]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032da:	f000 f821 	bl	8003320 <HAL_RCC_GetSysClockFreq>
 80032de:	4601      	mov	r1, r0
 80032e0:	4b0b      	ldr	r3, [pc, #44]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	091b      	lsrs	r3, r3, #4
 80032e6:	f003 030f 	and.w	r3, r3, #15
 80032ea:	4a0a      	ldr	r2, [pc, #40]	; (8003314 <HAL_RCC_ClockConfig+0x1c8>)
 80032ec:	5cd3      	ldrb	r3, [r2, r3]
 80032ee:	fa21 f303 	lsr.w	r3, r1, r3
 80032f2:	4a09      	ldr	r2, [pc, #36]	; (8003318 <HAL_RCC_ClockConfig+0x1cc>)
 80032f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032f6:	4b09      	ldr	r3, [pc, #36]	; (800331c <HAL_RCC_ClockConfig+0x1d0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fe fd9c 	bl	8001e38 <HAL_InitTick>

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40022000 	.word	0x40022000
 8003310:	40021000 	.word	0x40021000
 8003314:	08008cf8 	.word	0x08008cf8
 8003318:	20000004 	.word	0x20000004
 800331c:	20000008 	.word	0x20000008

08003320 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003320:	b490      	push	{r4, r7}
 8003322:	b08a      	sub	sp, #40	; 0x28
 8003324:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003326:	4b2a      	ldr	r3, [pc, #168]	; (80033d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003328:	1d3c      	adds	r4, r7, #4
 800332a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800332c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003330:	4b28      	ldr	r3, [pc, #160]	; (80033d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003336:	2300      	movs	r3, #0
 8003338:	61fb      	str	r3, [r7, #28]
 800333a:	2300      	movs	r3, #0
 800333c:	61bb      	str	r3, [r7, #24]
 800333e:	2300      	movs	r3, #0
 8003340:	627b      	str	r3, [r7, #36]	; 0x24
 8003342:	2300      	movs	r3, #0
 8003344:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003346:	2300      	movs	r3, #0
 8003348:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800334a:	4b23      	ldr	r3, [pc, #140]	; (80033d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	f003 030c 	and.w	r3, r3, #12
 8003356:	2b04      	cmp	r3, #4
 8003358:	d002      	beq.n	8003360 <HAL_RCC_GetSysClockFreq+0x40>
 800335a:	2b08      	cmp	r3, #8
 800335c:	d003      	beq.n	8003366 <HAL_RCC_GetSysClockFreq+0x46>
 800335e:	e02d      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003360:	4b1e      	ldr	r3, [pc, #120]	; (80033dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003362:	623b      	str	r3, [r7, #32]
      break;
 8003364:	e02d      	b.n	80033c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	0c9b      	lsrs	r3, r3, #18
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003372:	4413      	add	r3, r2
 8003374:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003378:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d013      	beq.n	80033ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003384:	4b14      	ldr	r3, [pc, #80]	; (80033d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	0c5b      	lsrs	r3, r3, #17
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003392:	4413      	add	r3, r2
 8003394:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003398:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	4a0f      	ldr	r2, [pc, #60]	; (80033dc <HAL_RCC_GetSysClockFreq+0xbc>)
 800339e:	fb02 f203 	mul.w	r2, r2, r3
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a8:	627b      	str	r3, [r7, #36]	; 0x24
 80033aa:	e004      	b.n	80033b6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	4a0c      	ldr	r2, [pc, #48]	; (80033e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033b0:	fb02 f303 	mul.w	r3, r2, r3
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	623b      	str	r3, [r7, #32]
      break;
 80033ba:	e002      	b.n	80033c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033bc:	4b07      	ldr	r3, [pc, #28]	; (80033dc <HAL_RCC_GetSysClockFreq+0xbc>)
 80033be:	623b      	str	r3, [r7, #32]
      break;
 80033c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033c2:	6a3b      	ldr	r3, [r7, #32]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3728      	adds	r7, #40	; 0x28
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bc90      	pop	{r4, r7}
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	08008c9c 	.word	0x08008c9c
 80033d4:	08008cac 	.word	0x08008cac
 80033d8:	40021000 	.word	0x40021000
 80033dc:	007a1200 	.word	0x007a1200
 80033e0:	003d0900 	.word	0x003d0900

080033e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033e8:	4b02      	ldr	r3, [pc, #8]	; (80033f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80033ea:	681b      	ldr	r3, [r3, #0]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bc80      	pop	{r7}
 80033f2:	4770      	bx	lr
 80033f4:	20000004 	.word	0x20000004

080033f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033fc:	f7ff fff2 	bl	80033e4 <HAL_RCC_GetHCLKFreq>
 8003400:	4601      	mov	r1, r0
 8003402:	4b05      	ldr	r3, [pc, #20]	; (8003418 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	0a1b      	lsrs	r3, r3, #8
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	4a03      	ldr	r2, [pc, #12]	; (800341c <HAL_RCC_GetPCLK1Freq+0x24>)
 800340e:	5cd3      	ldrb	r3, [r2, r3]
 8003410:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003414:	4618      	mov	r0, r3
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40021000 	.word	0x40021000
 800341c:	08008d08 	.word	0x08008d08

08003420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003424:	f7ff ffde 	bl	80033e4 <HAL_RCC_GetHCLKFreq>
 8003428:	4601      	mov	r1, r0
 800342a:	4b05      	ldr	r3, [pc, #20]	; (8003440 <HAL_RCC_GetPCLK2Freq+0x20>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	0adb      	lsrs	r3, r3, #11
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	4a03      	ldr	r2, [pc, #12]	; (8003444 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003436:	5cd3      	ldrb	r3, [r2, r3]
 8003438:	fa21 f303 	lsr.w	r3, r1, r3
}
 800343c:	4618      	mov	r0, r3
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40021000 	.word	0x40021000
 8003444:	08008d08 	.word	0x08008d08

08003448 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003450:	4b0a      	ldr	r3, [pc, #40]	; (800347c <RCC_Delay+0x34>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a0a      	ldr	r2, [pc, #40]	; (8003480 <RCC_Delay+0x38>)
 8003456:	fba2 2303 	umull	r2, r3, r2, r3
 800345a:	0a5b      	lsrs	r3, r3, #9
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	fb02 f303 	mul.w	r3, r2, r3
 8003462:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003464:	bf00      	nop
  }
  while (Delay --);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	1e5a      	subs	r2, r3, #1
 800346a:	60fa      	str	r2, [r7, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1f9      	bne.n	8003464 <RCC_Delay+0x1c>
}
 8003470:	bf00      	nop
 8003472:	3714      	adds	r7, #20
 8003474:	46bd      	mov	sp, r7
 8003476:	bc80      	pop	{r7}
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	20000004 	.word	0x20000004
 8003480:	10624dd3 	.word	0x10624dd3

08003484 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	613b      	str	r3, [r7, #16]
 8003490:	2300      	movs	r3, #0
 8003492:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d07d      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80034a0:	2300      	movs	r3, #0
 80034a2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034a4:	4b4f      	ldr	r3, [pc, #316]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10d      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b0:	4b4c      	ldr	r3, [pc, #304]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	4a4b      	ldr	r2, [pc, #300]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ba:	61d3      	str	r3, [r2, #28]
 80034bc:	4b49      	ldr	r3, [pc, #292]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c4:	60bb      	str	r3, [r7, #8]
 80034c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034c8:	2301      	movs	r3, #1
 80034ca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034cc:	4b46      	ldr	r3, [pc, #280]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d118      	bne.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034d8:	4b43      	ldr	r3, [pc, #268]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a42      	ldr	r2, [pc, #264]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034e4:	f7fe fcea 	bl	8001ebc <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ea:	e008      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ec:	f7fe fce6 	bl	8001ebc <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b64      	cmp	r3, #100	; 0x64
 80034f8:	d901      	bls.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e06d      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034fe:	4b3a      	ldr	r3, [pc, #232]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f0      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800350a:	4b36      	ldr	r3, [pc, #216]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003512:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d02e      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	429a      	cmp	r2, r3
 8003526:	d027      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003528:	4b2e      	ldr	r3, [pc, #184]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003530:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003532:	4b2e      	ldr	r3, [pc, #184]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003534:	2201      	movs	r2, #1
 8003536:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003538:	4b2c      	ldr	r3, [pc, #176]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800353e:	4a29      	ldr	r2, [pc, #164]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d014      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354e:	f7fe fcb5 	bl	8001ebc <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003554:	e00a      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003556:	f7fe fcb1 	bl	8001ebc <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	f241 3288 	movw	r2, #5000	; 0x1388
 8003564:	4293      	cmp	r3, r2
 8003566:	d901      	bls.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e036      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800356c:	4b1d      	ldr	r3, [pc, #116]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0ee      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003578:	4b1a      	ldr	r3, [pc, #104]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	4917      	ldr	r1, [pc, #92]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003586:	4313      	orrs	r3, r2
 8003588:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800358a:	7dfb      	ldrb	r3, [r7, #23]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d105      	bne.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003590:	4b14      	ldr	r3, [pc, #80]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	4a13      	ldr	r2, [pc, #76]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800359a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d008      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035a8:	4b0e      	ldr	r3, [pc, #56]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	490b      	ldr	r1, [pc, #44]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0310 	and.w	r3, r3, #16
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d008      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035c6:	4b07      	ldr	r3, [pc, #28]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	4904      	ldr	r1, [pc, #16]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3718      	adds	r7, #24
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40021000 	.word	0x40021000
 80035e8:	40007000 	.word	0x40007000
 80035ec:	42420440 	.word	0x42420440

080035f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e053      	b.n	80036aa <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b00      	cmp	r3, #0
 8003612:	d106      	bne.n	8003622 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f7fe fa79 	bl	8001b14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2202      	movs	r2, #2
 8003626:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003638:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	431a      	orrs	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	431a      	orrs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800365e:	431a      	orrs	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	431a      	orrs	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	ea42 0103 	orr.w	r1, r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	0c1a      	lsrs	r2, r3, #16
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f002 0204 	and.w	r2, r2, #4
 8003688:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	69da      	ldr	r2, [r3, #28]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003698:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b088      	sub	sp, #32
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	60f8      	str	r0, [r7, #12]
 80036ba:	60b9      	str	r1, [r7, #8]
 80036bc:	603b      	str	r3, [r7, #0]
 80036be:	4613      	mov	r3, r2
 80036c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80036c2:	2300      	movs	r3, #0
 80036c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d101      	bne.n	80036d4 <HAL_SPI_Transmit+0x22>
 80036d0:	2302      	movs	r3, #2
 80036d2:	e11e      	b.n	8003912 <HAL_SPI_Transmit+0x260>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036dc:	f7fe fbee 	bl	8001ebc <HAL_GetTick>
 80036e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80036e2:	88fb      	ldrh	r3, [r7, #6]
 80036e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d002      	beq.n	80036f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80036f2:	2302      	movs	r3, #2
 80036f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036f6:	e103      	b.n	8003900 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d002      	beq.n	8003704 <HAL_SPI_Transmit+0x52>
 80036fe:	88fb      	ldrh	r3, [r7, #6]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d102      	bne.n	800370a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003708:	e0fa      	b.n	8003900 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2203      	movs	r2, #3
 800370e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	88fa      	ldrh	r2, [r7, #6]
 8003722:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	88fa      	ldrh	r2, [r7, #6]
 8003728:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003750:	d107      	bne.n	8003762 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003760:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376c:	2b40      	cmp	r3, #64	; 0x40
 800376e:	d007      	beq.n	8003780 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800377e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003788:	d14b      	bne.n	8003822 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d002      	beq.n	8003798 <HAL_SPI_Transmit+0xe6>
 8003792:	8afb      	ldrh	r3, [r7, #22]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d13e      	bne.n	8003816 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379c:	881a      	ldrh	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a8:	1c9a      	adds	r2, r3, #2
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80037bc:	e02b      	b.n	8003816 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d112      	bne.n	80037f2 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d0:	881a      	ldrh	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037dc:	1c9a      	adds	r2, r3, #2
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80037f0:	e011      	b.n	8003816 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037f2:	f7fe fb63 	bl	8001ebc <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d803      	bhi.n	800380a <HAL_SPI_Transmit+0x158>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003808:	d102      	bne.n	8003810 <HAL_SPI_Transmit+0x15e>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d102      	bne.n	8003816 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003814:	e074      	b.n	8003900 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800381a:	b29b      	uxth	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1ce      	bne.n	80037be <HAL_SPI_Transmit+0x10c>
 8003820:	e04c      	b.n	80038bc <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <HAL_SPI_Transmit+0x17e>
 800382a:	8afb      	ldrh	r3, [r7, #22]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d140      	bne.n	80038b2 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	330c      	adds	r3, #12
 800383a:	7812      	ldrb	r2, [r2, #0]
 800383c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800384c:	b29b      	uxth	r3, r3
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003856:	e02c      	b.n	80038b2 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b02      	cmp	r3, #2
 8003864:	d113      	bne.n	800388e <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	330c      	adds	r3, #12
 8003870:	7812      	ldrb	r2, [r2, #0]
 8003872:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003878:	1c5a      	adds	r2, r3, #1
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003882:	b29b      	uxth	r3, r3
 8003884:	3b01      	subs	r3, #1
 8003886:	b29a      	uxth	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	86da      	strh	r2, [r3, #54]	; 0x36
 800388c:	e011      	b.n	80038b2 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800388e:	f7fe fb15 	bl	8001ebc <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d803      	bhi.n	80038a6 <HAL_SPI_Transmit+0x1f4>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a4:	d102      	bne.n	80038ac <HAL_SPI_Transmit+0x1fa>
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d102      	bne.n	80038b2 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80038b0:	e026      	b.n	8003900 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1cd      	bne.n	8003858 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	6839      	ldr	r1, [r7, #0]
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 fa43 	bl	8003d4c <SPI_EndRxTxTransaction>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d002      	beq.n	80038d2 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2220      	movs	r2, #32
 80038d0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10a      	bne.n	80038f0 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038da:	2300      	movs	r3, #0
 80038dc:	613b      	str	r3, [r7, #16]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	613b      	str	r3, [r7, #16]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	613b      	str	r3, [r7, #16]
 80038ee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	77fb      	strb	r3, [r7, #31]
 80038fc:	e000      	b.n	8003900 <HAL_SPI_Transmit+0x24e>
  }

error:
 80038fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003910:	7ffb      	ldrb	r3, [r7, #31]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3720      	adds	r7, #32
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b08c      	sub	sp, #48	; 0x30
 800391e:	af00      	add	r7, sp, #0
 8003920:	60f8      	str	r0, [r7, #12]
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	607a      	str	r2, [r7, #4]
 8003926:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003928:	2301      	movs	r3, #1
 800392a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800392c:	2300      	movs	r3, #0
 800392e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003938:	2b01      	cmp	r3, #1
 800393a:	d101      	bne.n	8003940 <HAL_SPI_TransmitReceive+0x26>
 800393c:	2302      	movs	r3, #2
 800393e:	e18a      	b.n	8003c56 <HAL_SPI_TransmitReceive+0x33c>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003948:	f7fe fab8 	bl	8001ebc <HAL_GetTick>
 800394c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003954:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800395e:	887b      	ldrh	r3, [r7, #2]
 8003960:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003962:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003966:	2b01      	cmp	r3, #1
 8003968:	d00f      	beq.n	800398a <HAL_SPI_TransmitReceive+0x70>
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003970:	d107      	bne.n	8003982 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d103      	bne.n	8003982 <HAL_SPI_TransmitReceive+0x68>
 800397a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800397e:	2b04      	cmp	r3, #4
 8003980:	d003      	beq.n	800398a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003982:	2302      	movs	r3, #2
 8003984:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003988:	e15b      	b.n	8003c42 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d005      	beq.n	800399c <HAL_SPI_TransmitReceive+0x82>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <HAL_SPI_TransmitReceive+0x82>
 8003996:	887b      	ldrh	r3, [r7, #2]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d103      	bne.n	80039a4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80039a2:	e14e      	b.n	8003c42 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d003      	beq.n	80039b8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2205      	movs	r2, #5
 80039b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	887a      	ldrh	r2, [r7, #2]
 80039c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	887a      	ldrh	r2, [r7, #2]
 80039ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	887a      	ldrh	r2, [r7, #2]
 80039da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	887a      	ldrh	r2, [r7, #2]
 80039e0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f8:	2b40      	cmp	r3, #64	; 0x40
 80039fa:	d007      	beq.n	8003a0c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a14:	d178      	bne.n	8003b08 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <HAL_SPI_TransmitReceive+0x10a>
 8003a1e:	8b7b      	ldrh	r3, [r7, #26]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d166      	bne.n	8003af2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a28:	881a      	ldrh	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a34:	1c9a      	adds	r2, r3, #2
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a48:	e053      	b.n	8003af2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d11b      	bne.n	8003a90 <HAL_SPI_TransmitReceive+0x176>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d016      	beq.n	8003a90 <HAL_SPI_TransmitReceive+0x176>
 8003a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d113      	bne.n	8003a90 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6c:	881a      	ldrh	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a78:	1c9a      	adds	r2, r3, #2
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d119      	bne.n	8003ad2 <HAL_SPI_TransmitReceive+0x1b8>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d014      	beq.n	8003ad2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab2:	b292      	uxth	r2, r2
 8003ab4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aba:	1c9a      	adds	r2, r3, #2
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ad2:	f7fe f9f3 	bl	8001ebc <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d807      	bhi.n	8003af2 <HAL_SPI_TransmitReceive+0x1d8>
 8003ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae8:	d003      	beq.n	8003af2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003af0:	e0a7      	b.n	8003c42 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1a6      	bne.n	8003a4a <HAL_SPI_TransmitReceive+0x130>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1a1      	bne.n	8003a4a <HAL_SPI_TransmitReceive+0x130>
 8003b06:	e07c      	b.n	8003c02 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <HAL_SPI_TransmitReceive+0x1fc>
 8003b10:	8b7b      	ldrh	r3, [r7, #26]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d16b      	bne.n	8003bee <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	330c      	adds	r3, #12
 8003b20:	7812      	ldrb	r2, [r2, #0]
 8003b22:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b28:	1c5a      	adds	r2, r3, #1
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b3c:	e057      	b.n	8003bee <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d11c      	bne.n	8003b86 <HAL_SPI_TransmitReceive+0x26c>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d017      	beq.n	8003b86 <HAL_SPI_TransmitReceive+0x26c>
 8003b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d114      	bne.n	8003b86 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	330c      	adds	r3, #12
 8003b66:	7812      	ldrb	r2, [r2, #0]
 8003b68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	1c5a      	adds	r2, r3, #1
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b82:	2300      	movs	r3, #0
 8003b84:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d119      	bne.n	8003bc8 <HAL_SPI_TransmitReceive+0x2ae>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d014      	beq.n	8003bc8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68da      	ldr	r2, [r3, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba8:	b2d2      	uxtb	r2, r2
 8003baa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb0:	1c5a      	adds	r2, r3, #1
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003bc8:	f7fe f978 	bl	8001ebc <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d803      	bhi.n	8003be0 <HAL_SPI_TransmitReceive+0x2c6>
 8003bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bde:	d102      	bne.n	8003be6 <HAL_SPI_TransmitReceive+0x2cc>
 8003be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d103      	bne.n	8003bee <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003bec:	e029      	b.n	8003c42 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1a2      	bne.n	8003b3e <HAL_SPI_TransmitReceive+0x224>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d19d      	bne.n	8003b3e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 f8a0 	bl	8003d4c <SPI_EndRxTxTransaction>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d006      	beq.n	8003c20 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003c1e:	e010      	b.n	8003c42 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10b      	bne.n	8003c40 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c28:	2300      	movs	r3, #0
 8003c2a:	617b      	str	r3, [r7, #20]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	617b      	str	r3, [r7, #20]
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	e000      	b.n	8003c42 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003c40:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3730      	adds	r7, #48	; 0x30
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c6c:	b2db      	uxtb	r3, r3
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bc80      	pop	{r7}
 8003c76:	4770      	bx	lr

08003c78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	603b      	str	r3, [r7, #0]
 8003c84:	4613      	mov	r3, r2
 8003c86:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c88:	e04c      	b.n	8003d24 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c90:	d048      	beq.n	8003d24 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003c92:	f7fe f913 	bl	8001ebc <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d902      	bls.n	8003ca8 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d13d      	bne.n	8003d24 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003cb6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cc0:	d111      	bne.n	8003ce6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cca:	d004      	beq.n	8003cd6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd4:	d107      	bne.n	8003ce6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ce4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cee:	d10f      	bne.n	8003d10 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d0e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e00f      	b.n	8003d44 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689a      	ldr	r2, [r3, #8]
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	bf0c      	ite	eq
 8003d34:	2301      	moveq	r3, #1
 8003d36:	2300      	movne	r3, #0
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	79fb      	ldrb	r3, [r7, #7]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d1a3      	bne.n	8003c8a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af02      	add	r7, sp, #8
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	2180      	movs	r1, #128	; 0x80
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f7ff ff88 	bl	8003c78 <SPI_WaitFlagStateUntilTimeout>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d007      	beq.n	8003d7e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d72:	f043 0220 	orr.w	r2, r3, #32
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e000      	b.n	8003d80 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e03f      	b.n	8003e1a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d106      	bne.n	8003db4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7fd fefa 	bl	8001ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2224      	movs	r2, #36	; 0x24
 8003db8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f829 	bl	8003e24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	691a      	ldr	r2, [r3, #16]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003de0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	695a      	ldr	r2, [r3, #20]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003df0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
	...

08003e24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68da      	ldr	r2, [r3, #12]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689a      	ldr	r2, [r3, #8]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e5e:	f023 030c 	bic.w	r3, r3, #12
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6812      	ldr	r2, [r2, #0]
 8003e66:	68f9      	ldr	r1, [r7, #12]
 8003e68:	430b      	orrs	r3, r1
 8003e6a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	699a      	ldr	r2, [r3, #24]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a52      	ldr	r2, [pc, #328]	; (8003fd0 <UART_SetConfig+0x1ac>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d14e      	bne.n	8003f2a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e8c:	f7ff fac8 	bl	8003420 <HAL_RCC_GetPCLK2Freq>
 8003e90:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	4613      	mov	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	009a      	lsls	r2, r3, #2
 8003e9c:	441a      	add	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea8:	4a4a      	ldr	r2, [pc, #296]	; (8003fd4 <UART_SetConfig+0x1b0>)
 8003eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003eae:	095b      	lsrs	r3, r3, #5
 8003eb0:	0119      	lsls	r1, r3, #4
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	009a      	lsls	r2, r3, #2
 8003ebc:	441a      	add	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ec8:	4b42      	ldr	r3, [pc, #264]	; (8003fd4 <UART_SetConfig+0x1b0>)
 8003eca:	fba3 0302 	umull	r0, r3, r3, r2
 8003ece:	095b      	lsrs	r3, r3, #5
 8003ed0:	2064      	movs	r0, #100	; 0x64
 8003ed2:	fb00 f303 	mul.w	r3, r0, r3
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	011b      	lsls	r3, r3, #4
 8003eda:	3332      	adds	r3, #50	; 0x32
 8003edc:	4a3d      	ldr	r2, [pc, #244]	; (8003fd4 <UART_SetConfig+0x1b0>)
 8003ede:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee2:	095b      	lsrs	r3, r3, #5
 8003ee4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ee8:	4419      	add	r1, r3
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	4613      	mov	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	009a      	lsls	r2, r3, #2
 8003ef4:	441a      	add	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f00:	4b34      	ldr	r3, [pc, #208]	; (8003fd4 <UART_SetConfig+0x1b0>)
 8003f02:	fba3 0302 	umull	r0, r3, r3, r2
 8003f06:	095b      	lsrs	r3, r3, #5
 8003f08:	2064      	movs	r0, #100	; 0x64
 8003f0a:	fb00 f303 	mul.w	r3, r0, r3
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	011b      	lsls	r3, r3, #4
 8003f12:	3332      	adds	r3, #50	; 0x32
 8003f14:	4a2f      	ldr	r2, [pc, #188]	; (8003fd4 <UART_SetConfig+0x1b0>)
 8003f16:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1a:	095b      	lsrs	r3, r3, #5
 8003f1c:	f003 020f 	and.w	r2, r3, #15
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	440a      	add	r2, r1
 8003f26:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003f28:	e04d      	b.n	8003fc6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f2a:	f7ff fa65 	bl	80033f8 <HAL_RCC_GetPCLK1Freq>
 8003f2e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	4613      	mov	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4413      	add	r3, r2
 8003f38:	009a      	lsls	r2, r3, #2
 8003f3a:	441a      	add	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f46:	4a23      	ldr	r2, [pc, #140]	; (8003fd4 <UART_SetConfig+0x1b0>)
 8003f48:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4c:	095b      	lsrs	r3, r3, #5
 8003f4e:	0119      	lsls	r1, r3, #4
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	4613      	mov	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	009a      	lsls	r2, r3, #2
 8003f5a:	441a      	add	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f66:	4b1b      	ldr	r3, [pc, #108]	; (8003fd4 <UART_SetConfig+0x1b0>)
 8003f68:	fba3 0302 	umull	r0, r3, r3, r2
 8003f6c:	095b      	lsrs	r3, r3, #5
 8003f6e:	2064      	movs	r0, #100	; 0x64
 8003f70:	fb00 f303 	mul.w	r3, r0, r3
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	011b      	lsls	r3, r3, #4
 8003f78:	3332      	adds	r3, #50	; 0x32
 8003f7a:	4a16      	ldr	r2, [pc, #88]	; (8003fd4 <UART_SetConfig+0x1b0>)
 8003f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f80:	095b      	lsrs	r3, r3, #5
 8003f82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f86:	4419      	add	r1, r3
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	009a      	lsls	r2, r3, #2
 8003f92:	441a      	add	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f9e:	4b0d      	ldr	r3, [pc, #52]	; (8003fd4 <UART_SetConfig+0x1b0>)
 8003fa0:	fba3 0302 	umull	r0, r3, r3, r2
 8003fa4:	095b      	lsrs	r3, r3, #5
 8003fa6:	2064      	movs	r0, #100	; 0x64
 8003fa8:	fb00 f303 	mul.w	r3, r0, r3
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	011b      	lsls	r3, r3, #4
 8003fb0:	3332      	adds	r3, #50	; 0x32
 8003fb2:	4a08      	ldr	r2, [pc, #32]	; (8003fd4 <UART_SetConfig+0x1b0>)
 8003fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb8:	095b      	lsrs	r3, r3, #5
 8003fba:	f003 020f 	and.w	r2, r3, #15
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	440a      	add	r2, r1
 8003fc4:	609a      	str	r2, [r3, #8]
}
 8003fc6:	bf00      	nop
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	40013800 	.word	0x40013800
 8003fd4:	51eb851f 	.word	0x51eb851f

08003fd8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003fdc:	4904      	ldr	r1, [pc, #16]	; (8003ff0 <MX_FATFS_Init+0x18>)
 8003fde:	4805      	ldr	r0, [pc, #20]	; (8003ff4 <MX_FATFS_Init+0x1c>)
 8003fe0:	f004 f95a 	bl	8008298 <FATFS_LinkDriver>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	4b03      	ldr	r3, [pc, #12]	; (8003ff8 <MX_FATFS_Init+0x20>)
 8003fea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8003fec:	bf00      	nop
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	200028a4 	.word	0x200028a4
 8003ff4:	20000010 	.word	0x20000010
 8003ff8:	200028a8 	.word	0x200028a8

08003ffc <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004000:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8004002:	4618      	mov	r0, r3
 8004004:	46bd      	mov	sp, r7
 8004006:	bc80      	pop	{r7}
 8004008:	4770      	bx	lr

0800400a <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b082      	sub	sp, #8
 800400e:	af00      	add	r7, sp, #0
 8004010:	4603      	mov	r3, r0
 8004012:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
   // Stat = STA_NOINIT;
    return SD_disk_initialize(pdrv);//Stat;
 8004014:	79fb      	ldrb	r3, [r7, #7]
 8004016:	4618      	mov	r0, r3
 8004018:	f7fc fe3e 	bl	8000c98 <SD_disk_initialize>
 800401c:	4603      	mov	r3, r0
 800401e:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004020:	4618      	mov	r0, r3
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	4603      	mov	r3, r0
 8004030:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    return SD_disk_status(pdrv);//Stat;
 8004032:	79fb      	ldrb	r3, [r7, #7]
 8004034:	4618      	mov	r0, r3
 8004036:	f7fc ff19 	bl	8000e6c <SD_disk_status>
 800403a:	4603      	mov	r3, r0
 800403c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b084      	sub	sp, #16
 800404a:	af00      	add	r7, sp, #0
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
 8004050:	603b      	str	r3, [r7, #0]
 8004052:	4603      	mov	r3, r0
 8004054:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);//RES_OK;
 8004056:	7bf8      	ldrb	r0, [r7, #15]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	68b9      	ldr	r1, [r7, #8]
 800405e:	f7fc ff19 	bl	8000e94 <SD_disk_read>
 8004062:	4603      	mov	r3, r0
 8004064:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 800406e:	b580      	push	{r7, lr}
 8004070:	b084      	sub	sp, #16
 8004072:	af00      	add	r7, sp, #0
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
 8004078:	603b      	str	r3, [r7, #0]
 800407a:	4603      	mov	r3, r0
 800407c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);//RES_OK;
 800407e:	7bf8      	ldrb	r0, [r7, #15]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	68b9      	ldr	r1, [r7, #8]
 8004086:	f7fc ff6f 	bl	8000f68 <SD_disk_write>
 800408a:	4603      	mov	r3, r0
 800408c:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800408e:	4618      	mov	r0, r3
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b082      	sub	sp, #8
 800409a:	af00      	add	r7, sp, #0
 800409c:	4603      	mov	r3, r0
 800409e:	603a      	str	r2, [r7, #0]
 80040a0:	71fb      	strb	r3, [r7, #7]
 80040a2:	460b      	mov	r3, r1
 80040a4:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    return SD_disk_ioctl(pdrv, cmd, buff);//res;
 80040a6:	79fb      	ldrb	r3, [r7, #7]
 80040a8:	79b9      	ldrb	r1, [r7, #6]
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7fc ffdf 	bl	8001070 <SD_disk_ioctl>
 80040b2:	4603      	mov	r3, r0
 80040b4:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	4603      	mov	r3, r0
 80040c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80040ca:	79fb      	ldrb	r3, [r7, #7]
 80040cc:	4a08      	ldr	r2, [pc, #32]	; (80040f0 <disk_status+0x30>)
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	79fa      	ldrb	r2, [r7, #7]
 80040d8:	4905      	ldr	r1, [pc, #20]	; (80040f0 <disk_status+0x30>)
 80040da:	440a      	add	r2, r1
 80040dc:	7a12      	ldrb	r2, [r2, #8]
 80040de:	4610      	mov	r0, r2
 80040e0:	4798      	blx	r3
 80040e2:	4603      	mov	r3, r0
 80040e4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80040e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	200002cc 	.word	0x200002cc

080040f4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4603      	mov	r3, r0
 80040fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8004102:	79fb      	ldrb	r3, [r7, #7]
 8004104:	4a0d      	ldr	r2, [pc, #52]	; (800413c <disk_initialize+0x48>)
 8004106:	5cd3      	ldrb	r3, [r2, r3]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d111      	bne.n	8004130 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800410c:	79fb      	ldrb	r3, [r7, #7]
 800410e:	4a0b      	ldr	r2, [pc, #44]	; (800413c <disk_initialize+0x48>)
 8004110:	2101      	movs	r1, #1
 8004112:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004114:	79fb      	ldrb	r3, [r7, #7]
 8004116:	4a09      	ldr	r2, [pc, #36]	; (800413c <disk_initialize+0x48>)
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	4413      	add	r3, r2
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	79fa      	ldrb	r2, [r7, #7]
 8004122:	4906      	ldr	r1, [pc, #24]	; (800413c <disk_initialize+0x48>)
 8004124:	440a      	add	r2, r1
 8004126:	7a12      	ldrb	r2, [r2, #8]
 8004128:	4610      	mov	r0, r2
 800412a:	4798      	blx	r3
 800412c:	4603      	mov	r3, r0
 800412e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004130:	7bfb      	ldrb	r3, [r7, #15]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	200002cc 	.word	0x200002cc

08004140 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004140:	b590      	push	{r4, r7, lr}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	607a      	str	r2, [r7, #4]
 800414a:	603b      	str	r3, [r7, #0]
 800414c:	4603      	mov	r3, r0
 800414e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004150:	7bfb      	ldrb	r3, [r7, #15]
 8004152:	4a0a      	ldr	r2, [pc, #40]	; (800417c <disk_read+0x3c>)
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4413      	add	r3, r2
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	689c      	ldr	r4, [r3, #8]
 800415c:	7bfb      	ldrb	r3, [r7, #15]
 800415e:	4a07      	ldr	r2, [pc, #28]	; (800417c <disk_read+0x3c>)
 8004160:	4413      	add	r3, r2
 8004162:	7a18      	ldrb	r0, [r3, #8]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	68b9      	ldr	r1, [r7, #8]
 800416a:	47a0      	blx	r4
 800416c:	4603      	mov	r3, r0
 800416e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004170:	7dfb      	ldrb	r3, [r7, #23]
}
 8004172:	4618      	mov	r0, r3
 8004174:	371c      	adds	r7, #28
 8004176:	46bd      	mov	sp, r7
 8004178:	bd90      	pop	{r4, r7, pc}
 800417a:	bf00      	nop
 800417c:	200002cc 	.word	0x200002cc

08004180 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004180:	b590      	push	{r4, r7, lr}
 8004182:	b087      	sub	sp, #28
 8004184:	af00      	add	r7, sp, #0
 8004186:	60b9      	str	r1, [r7, #8]
 8004188:	607a      	str	r2, [r7, #4]
 800418a:	603b      	str	r3, [r7, #0]
 800418c:	4603      	mov	r3, r0
 800418e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004190:	7bfb      	ldrb	r3, [r7, #15]
 8004192:	4a0a      	ldr	r2, [pc, #40]	; (80041bc <disk_write+0x3c>)
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	68dc      	ldr	r4, [r3, #12]
 800419c:	7bfb      	ldrb	r3, [r7, #15]
 800419e:	4a07      	ldr	r2, [pc, #28]	; (80041bc <disk_write+0x3c>)
 80041a0:	4413      	add	r3, r2
 80041a2:	7a18      	ldrb	r0, [r3, #8]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	68b9      	ldr	r1, [r7, #8]
 80041aa:	47a0      	blx	r4
 80041ac:	4603      	mov	r3, r0
 80041ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80041b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	371c      	adds	r7, #28
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd90      	pop	{r4, r7, pc}
 80041ba:	bf00      	nop
 80041bc:	200002cc 	.word	0x200002cc

080041c0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	4603      	mov	r3, r0
 80041c8:	603a      	str	r2, [r7, #0]
 80041ca:	71fb      	strb	r3, [r7, #7]
 80041cc:	460b      	mov	r3, r1
 80041ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80041d0:	79fb      	ldrb	r3, [r7, #7]
 80041d2:	4a09      	ldr	r2, [pc, #36]	; (80041f8 <disk_ioctl+0x38>)
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4413      	add	r3, r2
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	79fa      	ldrb	r2, [r7, #7]
 80041de:	4906      	ldr	r1, [pc, #24]	; (80041f8 <disk_ioctl+0x38>)
 80041e0:	440a      	add	r2, r1
 80041e2:	7a10      	ldrb	r0, [r2, #8]
 80041e4:	79b9      	ldrb	r1, [r7, #6]
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	4798      	blx	r3
 80041ea:	4603      	mov	r3, r0
 80041ec:	73fb      	strb	r3, [r7, #15]
  return res;
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	200002cc 	.word	0x200002cc

080041fc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80041fc:	b480      	push	{r7}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8004210:	e007      	b.n	8004222 <mem_cpy+0x26>
		*d++ = *s++;
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	1c53      	adds	r3, r2, #1
 8004216:	613b      	str	r3, [r7, #16]
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	1c59      	adds	r1, r3, #1
 800421c:	6179      	str	r1, [r7, #20]
 800421e:	7812      	ldrb	r2, [r2, #0]
 8004220:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	1e5a      	subs	r2, r3, #1
 8004226:	607a      	str	r2, [r7, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1f2      	bne.n	8004212 <mem_cpy+0x16>
}
 800422c:	bf00      	nop
 800422e:	371c      	adds	r7, #28
 8004230:	46bd      	mov	sp, r7
 8004232:	bc80      	pop	{r7}
 8004234:	4770      	bx	lr

08004236 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004236:	b480      	push	{r7}
 8004238:	b087      	sub	sp, #28
 800423a:	af00      	add	r7, sp, #0
 800423c:	60f8      	str	r0, [r7, #12]
 800423e:	60b9      	str	r1, [r7, #8]
 8004240:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8004246:	e005      	b.n	8004254 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	1c5a      	adds	r2, r3, #1
 800424c:	617a      	str	r2, [r7, #20]
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	b2d2      	uxtb	r2, r2
 8004252:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	1e5a      	subs	r2, r3, #1
 8004258:	607a      	str	r2, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1f4      	bne.n	8004248 <mem_set+0x12>
}
 800425e:	bf00      	nop
 8004260:	371c      	adds	r7, #28
 8004262:	46bd      	mov	sp, r7
 8004264:	bc80      	pop	{r7}
 8004266:	4770      	bx	lr

08004268 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8004268:	b480      	push	{r7}
 800426a:	b089      	sub	sp, #36	; 0x24
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	61fb      	str	r3, [r7, #28]
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800427c:	2300      	movs	r3, #0
 800427e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004280:	bf00      	nop
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	1e5a      	subs	r2, r3, #1
 8004286:	607a      	str	r2, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00d      	beq.n	80042a8 <mem_cmp+0x40>
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	1c5a      	adds	r2, r3, #1
 8004290:	61fa      	str	r2, [r7, #28]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	4619      	mov	r1, r3
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	61ba      	str	r2, [r7, #24]
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	1acb      	subs	r3, r1, r3
 80042a0:	617b      	str	r3, [r7, #20]
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0ec      	beq.n	8004282 <mem_cmp+0x1a>
	return r;
 80042a8:	697b      	ldr	r3, [r7, #20]
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3724      	adds	r7, #36	; 0x24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bc80      	pop	{r7}
 80042b2:	4770      	bx	lr

080042b4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80042be:	e002      	b.n	80042c6 <chk_chr+0x12>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3301      	adds	r3, #1
 80042c4:	607b      	str	r3, [r7, #4]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d005      	beq.n	80042da <chk_chr+0x26>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	461a      	mov	r2, r3
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d1f2      	bne.n	80042c0 <chk_chr+0xc>
	return *str;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	781b      	ldrb	r3, [r3, #0]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr

080042e8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80042f2:	2300      	movs	r3, #0
 80042f4:	60bb      	str	r3, [r7, #8]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	60fb      	str	r3, [r7, #12]
 80042fa:	e03d      	b.n	8004378 <chk_lock+0x90>
		if (Files[i].fs) {	/* Existing entry */
 80042fc:	4932      	ldr	r1, [pc, #200]	; (80043c8 <chk_lock+0xe0>)
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	4613      	mov	r3, r2
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d02e      	beq.n	800436e <chk_lock+0x86>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004310:	492d      	ldr	r1, [pc, #180]	; (80043c8 <chk_lock+0xe0>)
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	4613      	mov	r3, r2
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	4413      	add	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	440b      	add	r3, r1
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	429a      	cmp	r2, r3
 800432a:	d122      	bne.n	8004372 <chk_lock+0x8a>
				Files[i].clu == dp->sclust &&
 800432c:	4926      	ldr	r1, [pc, #152]	; (80043c8 <chk_lock+0xe0>)
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	4613      	mov	r3, r2
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	4413      	add	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	440b      	add	r3, r1
 800433a:	3304      	adds	r3, #4
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004344:	3308      	adds	r3, #8
 8004346:	681b      	ldr	r3, [r3, #0]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004348:	429a      	cmp	r2, r3
 800434a:	d112      	bne.n	8004372 <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 800434c:	491e      	ldr	r1, [pc, #120]	; (80043c8 <chk_lock+0xe0>)
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	4613      	mov	r3, r2
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	4413      	add	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	440b      	add	r3, r1
 800435a:	3308      	adds	r3, #8
 800435c:	881a      	ldrh	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004364:	3306      	adds	r3, #6
 8004366:	881b      	ldrh	r3, [r3, #0]
				Files[i].clu == dp->sclust &&
 8004368:	429a      	cmp	r2, r3
 800436a:	d102      	bne.n	8004372 <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 800436c:	e007      	b.n	800437e <chk_lock+0x96>
		} else {			/* Blank entry */
			be = 1;
 800436e:	2301      	movs	r3, #1
 8004370:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	3301      	adds	r3, #1
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d9be      	bls.n	80042fc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2b02      	cmp	r3, #2
 8004382:	d109      	bne.n	8004398 <chk_lock+0xb0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d102      	bne.n	8004390 <chk_lock+0xa8>
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	2b02      	cmp	r3, #2
 800438e:	d101      	bne.n	8004394 <chk_lock+0xac>
 8004390:	2300      	movs	r3, #0
 8004392:	e013      	b.n	80043bc <chk_lock+0xd4>
 8004394:	2312      	movs	r3, #18
 8004396:	e011      	b.n	80043bc <chk_lock+0xd4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10b      	bne.n	80043b6 <chk_lock+0xce>
 800439e:	490a      	ldr	r1, [pc, #40]	; (80043c8 <chk_lock+0xe0>)
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	4613      	mov	r3, r2
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	4413      	add	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	440b      	add	r3, r1
 80043ac:	330a      	adds	r3, #10
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043b4:	d101      	bne.n	80043ba <chk_lock+0xd2>
 80043b6:	2310      	movs	r3, #16
 80043b8:	e000      	b.n	80043bc <chk_lock+0xd4>
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	200000b4 	.word	0x200000b4

080043cc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80043d2:	2300      	movs	r3, #0
 80043d4:	607b      	str	r3, [r7, #4]
 80043d6:	e002      	b.n	80043de <enq_lock+0x12>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3301      	adds	r3, #1
 80043dc:	607b      	str	r3, [r7, #4]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d809      	bhi.n	80043f8 <enq_lock+0x2c>
 80043e4:	490a      	ldr	r1, [pc, #40]	; (8004410 <enq_lock+0x44>)
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	4613      	mov	r3, r2
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	4413      	add	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	440b      	add	r3, r1
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1ef      	bne.n	80043d8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	bf14      	ite	ne
 80043fe:	2301      	movne	r3, #1
 8004400:	2300      	moveq	r3, #0
 8004402:	b2db      	uxtb	r3, r3
}
 8004404:	4618      	mov	r0, r3
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	bc80      	pop	{r7}
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	200000b4 	.word	0x200000b4

08004414 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800441e:	2300      	movs	r3, #0
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	e030      	b.n	8004486 <inc_lock+0x72>
		if (Files[i].fs == dp->fs &&
 8004424:	495a      	ldr	r1, [pc, #360]	; (8004590 <inc_lock+0x17c>)
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	4613      	mov	r3, r2
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	4413      	add	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	429a      	cmp	r2, r3
 800443e:	d11f      	bne.n	8004480 <inc_lock+0x6c>
			Files[i].clu == dp->sclust &&
 8004440:	4953      	ldr	r1, [pc, #332]	; (8004590 <inc_lock+0x17c>)
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	4613      	mov	r3, r2
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	4413      	add	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	440b      	add	r3, r1
 800444e:	3304      	adds	r3, #4
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004458:	3308      	adds	r3, #8
 800445a:	681b      	ldr	r3, [r3, #0]
		if (Files[i].fs == dp->fs &&
 800445c:	429a      	cmp	r2, r3
 800445e:	d10f      	bne.n	8004480 <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 8004460:	494b      	ldr	r1, [pc, #300]	; (8004590 <inc_lock+0x17c>)
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	4613      	mov	r3, r2
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	4413      	add	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	440b      	add	r3, r1
 800446e:	3308      	adds	r3, #8
 8004470:	881a      	ldrh	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004478:	3306      	adds	r3, #6
 800447a:	881b      	ldrh	r3, [r3, #0]
			Files[i].clu == dp->sclust &&
 800447c:	429a      	cmp	r2, r3
 800447e:	d006      	beq.n	800448e <inc_lock+0x7a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	3301      	adds	r3, #1
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d9cb      	bls.n	8004424 <inc_lock+0x10>
 800448c:	e000      	b.n	8004490 <inc_lock+0x7c>
			Files[i].idx == dp->index) break;
 800448e:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2b02      	cmp	r3, #2
 8004494:	d14a      	bne.n	800452c <inc_lock+0x118>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004496:	2300      	movs	r3, #0
 8004498:	60fb      	str	r3, [r7, #12]
 800449a:	e002      	b.n	80044a2 <inc_lock+0x8e>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	3301      	adds	r3, #1
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d809      	bhi.n	80044bc <inc_lock+0xa8>
 80044a8:	4939      	ldr	r1, [pc, #228]	; (8004590 <inc_lock+0x17c>)
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	4613      	mov	r3, r2
 80044ae:	005b      	lsls	r3, r3, #1
 80044b0:	4413      	add	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	440b      	add	r3, r1
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1ef      	bne.n	800449c <inc_lock+0x88>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d101      	bne.n	80044c6 <inc_lock+0xb2>
 80044c2:	2300      	movs	r3, #0
 80044c4:	e05f      	b.n	8004586 <inc_lock+0x172>
		Files[i].fs = dp->fs;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044cc:	6819      	ldr	r1, [r3, #0]
 80044ce:	4830      	ldr	r0, [pc, #192]	; (8004590 <inc_lock+0x17c>)
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	4613      	mov	r3, r2
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	4413      	add	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4403      	add	r3, r0
 80044dc:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044e4:	3308      	adds	r3, #8
 80044e6:	6819      	ldr	r1, [r3, #0]
 80044e8:	4829      	ldr	r0, [pc, #164]	; (8004590 <inc_lock+0x17c>)
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	4613      	mov	r3, r2
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	4413      	add	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4403      	add	r3, r0
 80044f6:	3304      	adds	r3, #4
 80044f8:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004500:	3306      	adds	r3, #6
 8004502:	8818      	ldrh	r0, [r3, #0]
 8004504:	4922      	ldr	r1, [pc, #136]	; (8004590 <inc_lock+0x17c>)
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	4613      	mov	r3, r2
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	4413      	add	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	3308      	adds	r3, #8
 8004514:	4602      	mov	r2, r0
 8004516:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8004518:	491d      	ldr	r1, [pc, #116]	; (8004590 <inc_lock+0x17c>)
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	4613      	mov	r3, r2
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	4413      	add	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	440b      	add	r3, r1
 8004526:	330a      	adds	r3, #10
 8004528:	2200      	movs	r2, #0
 800452a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00c      	beq.n	800454c <inc_lock+0x138>
 8004532:	4917      	ldr	r1, [pc, #92]	; (8004590 <inc_lock+0x17c>)
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	4613      	mov	r3, r2
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	4413      	add	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	440b      	add	r3, r1
 8004540:	330a      	adds	r3, #10
 8004542:	881b      	ldrh	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d001      	beq.n	800454c <inc_lock+0x138>
 8004548:	2300      	movs	r3, #0
 800454a:	e01c      	b.n	8004586 <inc_lock+0x172>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10b      	bne.n	800456a <inc_lock+0x156>
 8004552:	490f      	ldr	r1, [pc, #60]	; (8004590 <inc_lock+0x17c>)
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	4613      	mov	r3, r2
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	4413      	add	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	440b      	add	r3, r1
 8004560:	330a      	adds	r3, #10
 8004562:	881b      	ldrh	r3, [r3, #0]
 8004564:	3301      	adds	r3, #1
 8004566:	b299      	uxth	r1, r3
 8004568:	e001      	b.n	800456e <inc_lock+0x15a>
 800456a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800456e:	4808      	ldr	r0, [pc, #32]	; (8004590 <inc_lock+0x17c>)
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	4613      	mov	r3, r2
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	4413      	add	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4403      	add	r3, r0
 800457c:	330a      	adds	r3, #10
 800457e:	460a      	mov	r2, r1
 8004580:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	3301      	adds	r3, #1
}
 8004586:	4618      	mov	r0, r3
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	bc80      	pop	{r7}
 800458e:	4770      	bx	lr
 8004590:	200000b4 	.word	0x200000b4

08004594 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	3b01      	subs	r3, #1
 80045a0:	607b      	str	r3, [r7, #4]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d82e      	bhi.n	8004606 <dec_lock+0x72>
		n = Files[i].ctr;
 80045a8:	491b      	ldr	r1, [pc, #108]	; (8004618 <dec_lock+0x84>)
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	4613      	mov	r3, r2
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	4413      	add	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	440b      	add	r3, r1
 80045b6:	330a      	adds	r3, #10
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80045bc:	89fb      	ldrh	r3, [r7, #14]
 80045be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045c2:	d101      	bne.n	80045c8 <dec_lock+0x34>
 80045c4:	2300      	movs	r3, #0
 80045c6:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80045c8:	89fb      	ldrh	r3, [r7, #14]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d002      	beq.n	80045d4 <dec_lock+0x40>
 80045ce:	89fb      	ldrh	r3, [r7, #14]
 80045d0:	3b01      	subs	r3, #1
 80045d2:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80045d4:	4910      	ldr	r1, [pc, #64]	; (8004618 <dec_lock+0x84>)
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	4613      	mov	r3, r2
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	4413      	add	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	440b      	add	r3, r1
 80045e2:	330a      	adds	r3, #10
 80045e4:	89fa      	ldrh	r2, [r7, #14]
 80045e6:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80045e8:	89fb      	ldrh	r3, [r7, #14]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d108      	bne.n	8004600 <dec_lock+0x6c>
 80045ee:	490a      	ldr	r1, [pc, #40]	; (8004618 <dec_lock+0x84>)
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	4613      	mov	r3, r2
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	4413      	add	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	440b      	add	r3, r1
 80045fc:	2200      	movs	r2, #0
 80045fe:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004600:	2300      	movs	r3, #0
 8004602:	737b      	strb	r3, [r7, #13]
 8004604:	e001      	b.n	800460a <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004606:	2302      	movs	r3, #2
 8004608:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800460a:	7b7b      	ldrb	r3, [r7, #13]
}
 800460c:	4618      	mov	r0, r3
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	bc80      	pop	{r7}
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	200000b4 	.word	0x200000b4

0800461c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004624:	2300      	movs	r3, #0
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	e016      	b.n	8004658 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800462a:	490f      	ldr	r1, [pc, #60]	; (8004668 <clear_lock+0x4c>)
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	4613      	mov	r3, r2
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	4413      	add	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	440b      	add	r3, r1
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	429a      	cmp	r2, r3
 800463e:	d108      	bne.n	8004652 <clear_lock+0x36>
 8004640:	4909      	ldr	r1, [pc, #36]	; (8004668 <clear_lock+0x4c>)
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	4613      	mov	r3, r2
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	4413      	add	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	440b      	add	r3, r1
 800464e:	2200      	movs	r2, #0
 8004650:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	3301      	adds	r3, #1
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d9e5      	bls.n	800462a <clear_lock+0xe>
	}
}
 800465e:	bf00      	nop
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	bc80      	pop	{r7}
 8004666:	4770      	bx	lr
 8004668:	200000b4 	.word	0x200000b4

0800466c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004674:	2300      	movs	r3, #0
 8004676:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800467e:	3304      	adds	r3, #4
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d047      	beq.n	8004716 <sync_window+0xaa>
		wsect = fs->winsect;	/* Current sector number */
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800468c:	330c      	adds	r3, #12
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004698:	3301      	adds	r3, #1
 800469a:	7818      	ldrb	r0, [r3, #0]
 800469c:	6879      	ldr	r1, [r7, #4]
 800469e:	2301      	movs	r3, #1
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	f7ff fd6d 	bl	8004180 <disk_write>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d002      	beq.n	80046b2 <sync_window+0x46>
			res = FR_DISK_ERR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	73fb      	strb	r3, [r7, #15]
 80046b0:	e031      	b.n	8004716 <sync_window+0xaa>
		} else {
			fs->wflag = 0;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046b8:	3304      	adds	r3, #4
 80046ba:	2200      	movs	r2, #0
 80046bc:	701a      	strb	r2, [r3, #0]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	1ad2      	subs	r2, r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046d0:	3318      	adds	r3, #24
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d21e      	bcs.n	8004716 <sync_window+0xaa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046de:	3303      	adds	r3, #3
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	613b      	str	r3, [r7, #16]
 80046e4:	e014      	b.n	8004710 <sync_window+0xa4>
					wsect += fs->fsize;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ec:	3318      	adds	r3, #24
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	4413      	add	r3, r2
 80046f4:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046fc:	3301      	adds	r3, #1
 80046fe:	7818      	ldrb	r0, [r3, #0]
 8004700:	6879      	ldr	r1, [r7, #4]
 8004702:	2301      	movs	r3, #1
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	f7ff fd3b 	bl	8004180 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	3b01      	subs	r3, #1
 800470e:	613b      	str	r3, [r7, #16]
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d8e7      	bhi.n	80046e6 <sync_window+0x7a>
				}
			}
		}
	}
	return res;
 8004716:	7bfb      	ldrb	r3, [r7, #15]
}
 8004718:	4618      	mov	r0, r3
 800471a:	3718      	adds	r7, #24
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800472a:	2300      	movs	r3, #0
 800472c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004734:	330c      	adds	r3, #12
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	429a      	cmp	r2, r3
 800473c:	d01f      	beq.n	800477e <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7ff ff94 	bl	800466c <sync_window>
 8004744:	4603      	mov	r3, r0
 8004746:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004748:	7bfb      	ldrb	r3, [r7, #15]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d117      	bne.n	800477e <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004754:	3301      	adds	r3, #1
 8004756:	7818      	ldrb	r0, [r3, #0]
 8004758:	6879      	ldr	r1, [r7, #4]
 800475a:	2301      	movs	r3, #1
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	f7ff fcef 	bl	8004140 <disk_read>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d004      	beq.n	8004772 <move_window+0x52>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004768:	f04f 33ff 	mov.w	r3, #4294967295
 800476c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800476e:	2301      	movs	r3, #1
 8004770:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004778:	330c      	adds	r3, #12
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	601a      	str	r2, [r3, #0]
		}
	}
	return res;
 800477e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004780:	4618      	mov	r0, r3
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7ff ff6b 	bl	800466c <sync_window>
 8004796:	4603      	mov	r3, r0
 8004798:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800479a:	7bfb      	ldrb	r3, [r7, #15]
 800479c:	2b00      	cmp	r3, #0
 800479e:	f040 80bd 	bne.w	800491c <sync_fs+0x194>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	2b03      	cmp	r3, #3
 80047ac:	f040 80a7 	bne.w	80048fe <sync_fs+0x176>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047b6:	3305      	adds	r3, #5
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	f040 809f 	bne.w	80048fe <sync_fs+0x176>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047c8:	330a      	adds	r3, #10
 80047ca:	881b      	ldrh	r3, [r3, #0]
 80047cc:	461a      	mov	r2, r3
 80047ce:	2100      	movs	r1, #0
 80047d0:	f7ff fd31 	bl	8004236 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2255      	movs	r2, #85	; 0x55
 80047d8:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	22aa      	movs	r2, #170	; 0xaa
 80047e0:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2252      	movs	r2, #82	; 0x52
 80047e8:	701a      	strb	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2252      	movs	r2, #82	; 0x52
 80047ee:	705a      	strb	r2, [r3, #1]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2261      	movs	r2, #97	; 0x61
 80047f4:	709a      	strb	r2, [r3, #2]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2241      	movs	r2, #65	; 0x41
 80047fa:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2272      	movs	r2, #114	; 0x72
 8004800:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2272      	movs	r2, #114	; 0x72
 8004808:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2241      	movs	r2, #65	; 0x41
 8004810:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2261      	movs	r2, #97	; 0x61
 8004818:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004822:	3310      	adds	r3, #16
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	b2da      	uxtb	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004834:	3310      	adds	r3, #16
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	b29b      	uxth	r3, r3
 800483a:	0a1b      	lsrs	r3, r3, #8
 800483c:	b29b      	uxth	r3, r3
 800483e:	b2da      	uxtb	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800484c:	3310      	adds	r3, #16
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	0c1b      	lsrs	r3, r3, #16
 8004852:	b2da      	uxtb	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004860:	3310      	adds	r3, #16
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	0e1b      	lsrs	r3, r3, #24
 8004866:	b2da      	uxtb	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004874:	330c      	adds	r3, #12
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	b2da      	uxtb	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004886:	330c      	adds	r3, #12
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	b29b      	uxth	r3, r3
 800488c:	0a1b      	lsrs	r3, r3, #8
 800488e:	b29b      	uxth	r3, r3
 8004890:	b2da      	uxtb	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800489e:	330c      	adds	r3, #12
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	0c1b      	lsrs	r3, r3, #16
 80048a4:	b2da      	uxtb	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048b2:	330c      	adds	r3, #12
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	0e1b      	lsrs	r3, r3, #24
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048c6:	331c      	adds	r3, #28
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80048d2:	330c      	adds	r3, #12
 80048d4:	601a      	str	r2, [r3, #0]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048dc:	3301      	adds	r3, #1
 80048de:	7818      	ldrb	r0, [r3, #0]
 80048e0:	6879      	ldr	r1, [r7, #4]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80048e8:	330c      	adds	r3, #12
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	2301      	movs	r3, #1
 80048ee:	f7ff fc47 	bl	8004180 <disk_write>
			fs->fsi_flag = 0;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048f8:	3305      	adds	r3, #5
 80048fa:	2200      	movs	r2, #0
 80048fc:	701a      	strb	r2, [r3, #0]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004904:	3301      	adds	r3, #1
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	2200      	movs	r2, #0
 800490a:	2100      	movs	r1, #0
 800490c:	4618      	mov	r0, r3
 800490e:	f7ff fc57 	bl	80041c0 <disk_ioctl>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <sync_fs+0x194>
			res = FR_DISK_ERR;
 8004918:	2301      	movs	r3, #1
 800491a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800491c:	7bfb      	ldrb	r3, [r7, #15]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004926:	b480      	push	{r7}
 8004928:	b083      	sub	sp, #12
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
 800492e:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	3b02      	subs	r3, #2
 8004934:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800493c:	3314      	adds	r3, #20
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	3b02      	subs	r3, #2
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	429a      	cmp	r2, r3
 8004946:	d301      	bcc.n	800494c <clust2sect+0x26>
 8004948:	2300      	movs	r3, #0
 800494a:	e00e      	b.n	800496a <clust2sect+0x44>
	return clst * fs->csize + fs->database;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004952:	3302      	adds	r3, #2
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	461a      	mov	r2, r3
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	fb03 f202 	mul.w	r2, r3, r2
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004964:	3308      	adds	r3, #8
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4413      	add	r3, r2
}
 800496a:	4618      	mov	r0, r3
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	bc80      	pop	{r7}
 8004972:	4770      	bx	lr

08004974 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d907      	bls.n	8004994 <get_fat+0x20>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800498a:	3314      	adds	r3, #20
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d302      	bcc.n	800499a <get_fat+0x26>
		val = 1;	/* Internal error */
 8004994:	2301      	movs	r3, #1
 8004996:	617b      	str	r3, [r7, #20]
 8004998:	e0e9      	b.n	8004b6e <get_fat+0x1fa>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800499a:	f04f 33ff 	mov.w	r3, #4294967295
 800499e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d068      	beq.n	8004a7e <get_fat+0x10a>
 80049ac:	2b03      	cmp	r3, #3
 80049ae:	f000 8099 	beq.w	8004ae4 <get_fat+0x170>
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	f040 80d1 	bne.w	8004b5a <get_fat+0x1e6>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	085b      	lsrs	r3, r3, #1
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	4413      	add	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049d4:	330a      	adds	r3, #10
 80049d6:	881b      	ldrh	r3, [r3, #0]
 80049d8:	4619      	mov	r1, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80049e0:	4413      	add	r3, r2
 80049e2:	4619      	mov	r1, r3
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f7ff fe9b 	bl	8004720 <move_window>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f040 80b7 	bne.w	8004b60 <get_fat+0x1ec>
			wc = fs->win.d8[bc++ % SS(fs)];
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	1c5a      	adds	r2, r3, #1
 80049f6:	60fa      	str	r2, [r7, #12]
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80049fe:	320a      	adds	r2, #10
 8004a00:	8812      	ldrh	r2, [r2, #0]
 8004a02:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a06:	fb02 f201 	mul.w	r2, r2, r1
 8004a0a:	1a9b      	subs	r3, r3, r2
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	5cd3      	ldrb	r3, [r2, r3]
 8004a10:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a20:	330a      	adds	r3, #10
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	4619      	mov	r1, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a2c:	4413      	add	r3, r2
 8004a2e:	4619      	mov	r1, r3
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f7ff fe75 	bl	8004720 <move_window>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f040 8093 	bne.w	8004b64 <get_fat+0x1f0>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a44:	330a      	adds	r3, #10
 8004a46:	881b      	ldrh	r3, [r3, #0]
 8004a48:	461a      	mov	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a50:	fb02 f201 	mul.w	r2, r2, r1
 8004a54:	1a9b      	subs	r3, r3, r2
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	5cd3      	ldrb	r3, [r2, r3]
 8004a5a:	021b      	lsls	r3, r3, #8
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <get_fat+0x100>
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	091b      	lsrs	r3, r3, #4
 8004a72:	e002      	b.n	8004a7a <get_fat+0x106>
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a7a:	617b      	str	r3, [r7, #20]
			break;
 8004a7c:	e077      	b.n	8004b6e <get_fat+0x1fa>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a8c:	330a      	adds	r3, #10
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	085b      	lsrs	r3, r3, #1
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	4619      	mov	r1, r3
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a9c:	4413      	add	r3, r2
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f7ff fe3d 	bl	8004720 <move_window>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d15d      	bne.n	8004b68 <get_fat+0x1f4>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	005a      	lsls	r2, r3, #1
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ab6:	330a      	adds	r3, #10
 8004ab8:	881b      	ldrh	r3, [r3, #0]
 8004aba:	fbb2 f1f3 	udiv	r1, r2, r3
 8004abe:	fb03 f301 	mul.w	r3, r3, r1
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	3301      	adds	r3, #1
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	021b      	lsls	r3, r3, #8
 8004ad2:	b21a      	sxth	r2, r3
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	b21b      	sxth	r3, r3
 8004ada:	4313      	orrs	r3, r2
 8004adc:	b21b      	sxth	r3, r3
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	617b      	str	r3, [r7, #20]
			break;
 8004ae2:	e044      	b.n	8004b6e <get_fat+0x1fa>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004af2:	330a      	adds	r3, #10
 8004af4:	881b      	ldrh	r3, [r3, #0]
 8004af6:	089b      	lsrs	r3, r3, #2
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	4619      	mov	r1, r3
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b02:	4413      	add	r3, r2
 8004b04:	4619      	mov	r1, r3
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7ff fe0a 	bl	8004720 <move_window>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d12c      	bne.n	8004b6c <get_fat+0x1f8>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	009a      	lsls	r2, r3, #2
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b1c:	330a      	adds	r3, #10
 8004b1e:	881b      	ldrh	r3, [r3, #0]
 8004b20:	fbb2 f1f3 	udiv	r1, r2, r3
 8004b24:	fb03 f301 	mul.w	r3, r3, r1
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	3303      	adds	r3, #3
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	061a      	lsls	r2, r3, #24
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	3302      	adds	r3, #2
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	041b      	lsls	r3, r3, #16
 8004b40:	4313      	orrs	r3, r2
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	3201      	adds	r2, #1
 8004b46:	7812      	ldrb	r2, [r2, #0]
 8004b48:	0212      	lsls	r2, r2, #8
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	7812      	ldrb	r2, [r2, #0]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004b56:	617b      	str	r3, [r7, #20]
			break;
 8004b58:	e009      	b.n	8004b6e <get_fat+0x1fa>

		default:
			val = 1;	/* Internal error */
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	617b      	str	r3, [r7, #20]
 8004b5e:	e006      	b.n	8004b6e <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004b60:	bf00      	nop
 8004b62:	e004      	b.n	8004b6e <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004b64:	bf00      	nop
 8004b66:	e002      	b.n	8004b6e <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004b68:	bf00      	nop
 8004b6a:	e000      	b.n	8004b6e <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004b6c:	bf00      	nop
		}
	}

	return val;
 8004b6e:	697b      	ldr	r3, [r7, #20]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3718      	adds	r7, #24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b088      	sub	sp, #32
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d907      	bls.n	8004b9a <put_fat+0x22>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b90:	3314      	adds	r3, #20
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d302      	bcc.n	8004ba0 <put_fat+0x28>
		res = FR_INT_ERR;
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	77fb      	strb	r3, [r7, #31]
 8004b9e:	e143      	b.n	8004e28 <put_fat+0x2b0>

	} else {
		switch (fs->fs_type) {
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	f000 809a 	beq.w	8004ce2 <put_fat+0x16a>
 8004bae:	2b03      	cmp	r3, #3
 8004bb0:	f000 80d3 	beq.w	8004d5a <put_fat+0x1e2>
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	f040 812d 	bne.w	8004e14 <put_fat+0x29c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	617b      	str	r3, [r7, #20]
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	085b      	lsrs	r3, r3, #1
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bd6:	330a      	adds	r3, #10
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	4619      	mov	r1, r3
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8004be2:	4413      	add	r3, r2
 8004be4:	4619      	mov	r1, r3
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f7ff fd9a 	bl	8004720 <move_window>
 8004bec:	4603      	mov	r3, r0
 8004bee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004bf0:	7ffb      	ldrb	r3, [r7, #31]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f040 8111 	bne.w	8004e1a <put_fat+0x2a2>
			p = &fs->win.d8[bc++ % SS(fs)];
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	1c5a      	adds	r2, r3, #1
 8004bfc:	617a      	str	r2, [r7, #20]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004c04:	320a      	adds	r2, #10
 8004c06:	8812      	ldrh	r2, [r2, #0]
 8004c08:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c0c:	fb02 f201 	mul.w	r2, r2, r1
 8004c10:	1a9b      	subs	r3, r3, r2
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	4413      	add	r3, r2
 8004c16:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00d      	beq.n	8004c3e <put_fat+0xc6>
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	b25b      	sxtb	r3, r3
 8004c28:	f003 030f 	and.w	r3, r3, #15
 8004c2c:	b25a      	sxtb	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	011b      	lsls	r3, r3, #4
 8004c34:	b25b      	sxtb	r3, r3
 8004c36:	4313      	orrs	r3, r2
 8004c38:	b25b      	sxtb	r3, r3
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	e001      	b.n	8004c42 <put_fat+0xca>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	2201      	movs	r2, #1
 8004c50:	701a      	strb	r2, [r3, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c60:	330a      	adds	r3, #10
 8004c62:	881b      	ldrh	r3, [r3, #0]
 8004c64:	4619      	mov	r1, r3
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c6c:	4413      	add	r3, r2
 8004c6e:	4619      	mov	r1, r3
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f7ff fd55 	bl	8004720 <move_window>
 8004c76:	4603      	mov	r3, r0
 8004c78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004c7a:	7ffb      	ldrb	r3, [r7, #31]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f040 80ce 	bne.w	8004e1e <put_fat+0x2a6>
			p = &fs->win.d8[bc % SS(fs)];
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c88:	330a      	adds	r3, #10
 8004c8a:	881b      	ldrh	r3, [r3, #0]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c94:	fb02 f201 	mul.w	r2, r2, r1
 8004c98:	1a9b      	subs	r3, r3, r2
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <put_fat+0x13a>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	091b      	lsrs	r3, r3, #4
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	e00e      	b.n	8004cd0 <put_fat+0x158>
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	b25b      	sxtb	r3, r3
 8004cb8:	f023 030f 	bic.w	r3, r3, #15
 8004cbc:	b25a      	sxtb	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	0a1b      	lsrs	r3, r3, #8
 8004cc2:	b25b      	sxtb	r3, r3
 8004cc4:	f003 030f 	and.w	r3, r3, #15
 8004cc8:	b25b      	sxtb	r3, r3
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	b25b      	sxtb	r3, r3
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cda:	3304      	adds	r3, #4
 8004cdc:	2201      	movs	r2, #1
 8004cde:	701a      	strb	r2, [r3, #0]
			break;
 8004ce0:	e0a2      	b.n	8004e28 <put_fat+0x2b0>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cf0:	330a      	adds	r3, #10
 8004cf2:	881b      	ldrh	r3, [r3, #0]
 8004cf4:	085b      	lsrs	r3, r3, #1
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d00:	4413      	add	r3, r2
 8004d02:	4619      	mov	r1, r3
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f7ff fd0b 	bl	8004720 <move_window>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004d0e:	7ffb      	ldrb	r3, [r7, #31]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f040 8086 	bne.w	8004e22 <put_fat+0x2aa>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	005a      	lsls	r2, r3, #1
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d20:	330a      	adds	r3, #10
 8004d22:	881b      	ldrh	r3, [r3, #0]
 8004d24:	fbb2 f1f3 	udiv	r1, r2, r3
 8004d28:	fb03 f301 	mul.w	r3, r3, r1
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	4413      	add	r3, r2
 8004d32:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	701a      	strb	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	0a1b      	lsrs	r3, r3, #8
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	3301      	adds	r3, #1
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d52:	3304      	adds	r3, #4
 8004d54:	2201      	movs	r2, #1
 8004d56:	701a      	strb	r2, [r3, #0]
			break;
 8004d58:	e066      	b.n	8004e28 <put_fat+0x2b0>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d68:	330a      	adds	r3, #10
 8004d6a:	881b      	ldrh	r3, [r3, #0]
 8004d6c:	089b      	lsrs	r3, r3, #2
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	4619      	mov	r1, r3
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d78:	4413      	add	r3, r2
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f7ff fccf 	bl	8004720 <move_window>
 8004d82:	4603      	mov	r3, r0
 8004d84:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004d86:	7ffb      	ldrb	r3, [r7, #31]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d14c      	bne.n	8004e26 <put_fat+0x2ae>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	009a      	lsls	r2, r3, #2
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d96:	330a      	adds	r3, #10
 8004d98:	881b      	ldrh	r3, [r3, #0]
 8004d9a:	fbb2 f1f3 	udiv	r1, r2, r3
 8004d9e:	fb03 f301 	mul.w	r3, r3, r1
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	4413      	add	r3, r2
 8004da8:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	3303      	adds	r3, #3
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	061a      	lsls	r2, r3, #24
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	3302      	adds	r3, #2
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	041b      	lsls	r3, r3, #16
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	3201      	adds	r2, #1
 8004dc0:	7812      	ldrb	r2, [r2, #0]
 8004dc2:	0212      	lsls	r2, r2, #8
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	7812      	ldrb	r2, [r2, #0]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	701a      	strb	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	0a1b      	lsrs	r3, r3, #8
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	3301      	adds	r3, #1
 8004dea:	b2d2      	uxtb	r2, r2
 8004dec:	701a      	strb	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	0c1a      	lsrs	r2, r3, #16
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	3302      	adds	r3, #2
 8004df6:	b2d2      	uxtb	r2, r2
 8004df8:	701a      	strb	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	0e1a      	lsrs	r2, r3, #24
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	3303      	adds	r3, #3
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e0c:	3304      	adds	r3, #4
 8004e0e:	2201      	movs	r2, #1
 8004e10:	701a      	strb	r2, [r3, #0]
			break;
 8004e12:	e009      	b.n	8004e28 <put_fat+0x2b0>

		default :
			res = FR_INT_ERR;
 8004e14:	2302      	movs	r3, #2
 8004e16:	77fb      	strb	r3, [r7, #31]
 8004e18:	e006      	b.n	8004e28 <put_fat+0x2b0>
			if (res != FR_OK) break;
 8004e1a:	bf00      	nop
 8004e1c:	e004      	b.n	8004e28 <put_fat+0x2b0>
			if (res != FR_OK) break;
 8004e1e:	bf00      	nop
 8004e20:	e002      	b.n	8004e28 <put_fat+0x2b0>
			if (res != FR_OK) break;
 8004e22:	bf00      	nop
 8004e24:	e000      	b.n	8004e28 <put_fat+0x2b0>
			if (res != FR_OK) break;
 8004e26:	bf00      	nop
		}
	}

	return res;
 8004e28:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3720      	adds	r7, #32
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b084      	sub	sp, #16
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
 8004e3a:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d907      	bls.n	8004e52 <remove_chain+0x20>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e48:	3314      	adds	r3, #20
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	683a      	ldr	r2, [r7, #0]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d302      	bcc.n	8004e58 <remove_chain+0x26>
		res = FR_INT_ERR;
 8004e52:	2302      	movs	r3, #2
 8004e54:	73fb      	strb	r3, [r7, #15]
 8004e56:	e04f      	b.n	8004ef8 <remove_chain+0xc6>

	} else {
		res = FR_OK;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004e5c:	e040      	b.n	8004ee0 <remove_chain+0xae>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8004e5e:	6839      	ldr	r1, [r7, #0]
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f7ff fd87 	bl	8004974 <get_fat>
 8004e66:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d041      	beq.n	8004ef2 <remove_chain+0xc0>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d102      	bne.n	8004e7a <remove_chain+0x48>
 8004e74:	2302      	movs	r3, #2
 8004e76:	73fb      	strb	r3, [r7, #15]
 8004e78:	e03e      	b.n	8004ef8 <remove_chain+0xc6>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e80:	d102      	bne.n	8004e88 <remove_chain+0x56>
 8004e82:	2301      	movs	r3, #1
 8004e84:	73fb      	strb	r3, [r7, #15]
 8004e86:	e037      	b.n	8004ef8 <remove_chain+0xc6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8004e88:	2200      	movs	r2, #0
 8004e8a:	6839      	ldr	r1, [r7, #0]
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f7ff fe73 	bl	8004b78 <put_fat>
 8004e92:	4603      	mov	r3, r0
 8004e94:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004e96:	7bfb      	ldrb	r3, [r7, #15]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d12c      	bne.n	8004ef6 <remove_chain+0xc4>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ea2:	3310      	adds	r3, #16
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eaa:	d017      	beq.n	8004edc <remove_chain+0xaa>
				fs->free_clust++;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eb2:	3310      	adds	r3, #16
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	1c5a      	adds	r2, r3, #1
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ebe:	3310      	adds	r3, #16
 8004ec0:	601a      	str	r2, [r3, #0]
				fs->fsi_flag |= 1;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ec8:	3305      	adds	r3, #5
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	f043 0301 	orr.w	r3, r3, #1
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ed8:	3305      	adds	r3, #5
 8004eda:	701a      	strb	r2, [r3, #0]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ee6:	3314      	adds	r3, #20
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d3b6      	bcc.n	8004e5e <remove_chain+0x2c>
 8004ef0:	e002      	b.n	8004ef8 <remove_chain+0xc6>
			if (nxt == 0) break;				/* Empty cluster? */
 8004ef2:	bf00      	nop
 8004ef4:	e000      	b.n	8004ef8 <remove_chain+0xc6>
			if (res != FR_OK) break;
 8004ef6:	bf00      	nop
		}
	}

	return res;
 8004ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b086      	sub	sp, #24
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
 8004f0a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d113      	bne.n	8004f3a <create_chain+0x38>
		scl = fs->last_clust;			/* Get suggested start point */
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f18:	330c      	adds	r3, #12
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d007      	beq.n	8004f34 <create_chain+0x32>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f2a:	3314      	adds	r3, #20
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d31e      	bcc.n	8004f72 <create_chain+0x70>
 8004f34:	2301      	movs	r3, #1
 8004f36:	613b      	str	r3, [r7, #16]
 8004f38:	e01b      	b.n	8004f72 <create_chain+0x70>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8004f3a:	6839      	ldr	r1, [r7, #0]
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7ff fd19 	bl	8004974 <get_fat>
 8004f42:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d801      	bhi.n	8004f4e <create_chain+0x4c>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e086      	b.n	800505c <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f54:	d101      	bne.n	8004f5a <create_chain+0x58>
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	e080      	b.n	800505c <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f60:	3314      	adds	r3, #20
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d201      	bcs.n	8004f6e <create_chain+0x6c>
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	e076      	b.n	800505c <create_chain+0x15a>
		scl = clst;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f82:	3314      	adds	r3, #20
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d307      	bcc.n	8004f9c <create_chain+0x9a>
			ncl = 2;
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d901      	bls.n	8004f9c <create_chain+0x9a>
 8004f98:	2300      	movs	r3, #0
 8004f9a:	e05f      	b.n	800505c <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8004f9c:	6979      	ldr	r1, [r7, #20]
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7ff fce8 	bl	8004974 <get_fat>
 8004fa4:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00e      	beq.n	8004fca <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb2:	d002      	beq.n	8004fba <create_chain+0xb8>
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d101      	bne.n	8004fbe <create_chain+0xbc>
			return cs;
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	e04e      	b.n	800505c <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d1d7      	bne.n	8004f76 <create_chain+0x74>
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	e048      	b.n	800505c <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 8004fca:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8004fcc:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8004fd0:	6979      	ldr	r1, [r7, #20]
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7ff fdd0 	bl	8004b78 <put_fat>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8004fdc:	7bfb      	ldrb	r3, [r7, #15]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d109      	bne.n	8004ff6 <create_chain+0xf4>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d006      	beq.n	8004ff6 <create_chain+0xf4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	6839      	ldr	r1, [r7, #0]
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f7ff fdc3 	bl	8004b78 <put_fat>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8004ff6:	7bfb      	ldrb	r3, [r7, #15]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d126      	bne.n	800504a <create_chain+0x148>
		fs->last_clust = ncl;			/* Update FSINFO */
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005002:	330c      	adds	r3, #12
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	601a      	str	r2, [r3, #0]
		if (fs->free_clust != 0xFFFFFFFF) {
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800500e:	3310      	adds	r3, #16
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005016:	d020      	beq.n	800505a <create_chain+0x158>
			fs->free_clust--;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800501e:	3310      	adds	r3, #16
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	1e5a      	subs	r2, r3, #1
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800502a:	3310      	adds	r3, #16
 800502c:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005034:	3305      	adds	r3, #5
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	f043 0301 	orr.w	r3, r3, #1
 800503c:	b2da      	uxtb	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005044:	3305      	adds	r3, #5
 8005046:	701a      	strb	r2, [r3, #0]
 8005048:	e007      	b.n	800505a <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800504a:	7bfb      	ldrb	r3, [r7, #15]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d102      	bne.n	8005056 <create_chain+0x154>
 8005050:	f04f 33ff 	mov.w	r3, #4294967295
 8005054:	e000      	b.n	8005058 <create_chain+0x156>
 8005056:	2301      	movs	r3, #1
 8005058:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800505a:	697b      	ldr	r3, [r7, #20]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3718      	adds	r7, #24
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8005064:	b480      	push	{r7}
 8005066:	b087      	sub	sp, #28
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005074:	3304      	adds	r3, #4
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	3304      	adds	r3, #4
 800507a:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005088:	330a      	adds	r3, #10
 800508a:	881b      	ldrh	r3, [r3, #0]
 800508c:	461a      	mov	r2, r3
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	fbb3 f2f2 	udiv	r2, r3, r2
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050a0:	3302      	adds	r3, #2
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	1d1a      	adds	r2, r3, #4
 80050ae:	613a      	str	r2, [r7, #16]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d101      	bne.n	80050be <clmt_clust+0x5a>
 80050ba:	2300      	movs	r3, #0
 80050bc:	e010      	b.n	80050e0 <clmt_clust+0x7c>
		if (cl < ncl) break;	/* In this fragment? */
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d307      	bcc.n	80050d6 <clmt_clust+0x72>
		cl -= ncl; tbl++;		/* Next fragment */
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	617b      	str	r3, [r7, #20]
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	3304      	adds	r3, #4
 80050d2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80050d4:	e7e9      	b.n	80050aa <clmt_clust+0x46>
		if (cl < ncl) break;	/* In this fragment? */
 80050d6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	4413      	add	r3, r2
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	371c      	adds	r7, #28
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bc80      	pop	{r7}
 80050e8:	4770      	bx	lr

080050ea <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b086      	sub	sp, #24
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050fe:	3306      	adds	r3, #6
 8005100:	801a      	strh	r2, [r3, #0]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005108:	3308      	adds	r3, #8
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d00a      	beq.n	800512a <dir_sdi+0x40>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005120:	3314      	adds	r3, #20
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	429a      	cmp	r2, r3
 8005128:	d301      	bcc.n	800512e <dir_sdi+0x44>
		return FR_INT_ERR;
 800512a:	2302      	movs	r3, #2
 800512c:	e0b4      	b.n	8005298 <dir_sdi+0x1ae>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d111      	bne.n	8005158 <dir_sdi+0x6e>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	2b03      	cmp	r3, #3
 8005144:	d108      	bne.n	8005158 <dir_sdi+0x6e>
		clst = dp->fs->dirbase;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005152:	3304      	adds	r3, #4
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d117      	bne.n	800518e <dir_sdi+0xa4>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800516a:	3308      	adds	r3, #8
 800516c:	881b      	ldrh	r3, [r3, #0]
 800516e:	461a      	mov	r2, r3
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	4293      	cmp	r3, r2
 8005174:	d301      	bcc.n	800517a <dir_sdi+0x90>
			return FR_INT_ERR;
 8005176:	2302      	movs	r3, #2
 8005178:	e08e      	b.n	8005298 <dir_sdi+0x1ae>
		sect = dp->fs->dirbase;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005186:	3304      	adds	r3, #4
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	613b      	str	r3, [r7, #16]
 800518c:	e046      	b.n	800521c <dir_sdi+0x132>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800519a:	330a      	adds	r3, #10
 800519c:	881b      	ldrh	r3, [r3, #0]
 800519e:	095b      	lsrs	r3, r3, #5
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	461a      	mov	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051b0:	3302      	adds	r3, #2
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	fb03 f302 	mul.w	r3, r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80051ba:	e022      	b.n	8005202 <dir_sdi+0x118>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6979      	ldr	r1, [r7, #20]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7ff fbd4 	bl	8004974 <get_fat>
 80051cc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d4:	d101      	bne.n	80051da <dir_sdi+0xf0>
 80051d6:	2301      	movs	r3, #1
 80051d8:	e05e      	b.n	8005298 <dir_sdi+0x1ae>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d90a      	bls.n	80051f6 <dir_sdi+0x10c>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051ec:	3314      	adds	r3, #20
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d301      	bcc.n	80051fa <dir_sdi+0x110>
				return FR_INT_ERR;
 80051f6:	2302      	movs	r3, #2
 80051f8:	e04e      	b.n	8005298 <dir_sdi+0x1ae>
			idx -= ic;
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	429a      	cmp	r2, r3
 8005208:	d2d8      	bcs.n	80051bc <dir_sdi+0xd2>
		}
		sect = clust2sect(dp->fs, clst);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6979      	ldr	r1, [r7, #20]
 8005214:	4618      	mov	r0, r3
 8005216:	f7ff fb86 	bl	8004926 <clust2sect>
 800521a:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005222:	330c      	adds	r3, #12
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	601a      	str	r2, [r3, #0]
	if (!sect) return FR_INT_ERR;
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <dir_sdi+0x148>
 800522e:	2302      	movs	r3, #2
 8005230:	e032      	b.n	8005298 <dir_sdi+0x1ae>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800523e:	330a      	adds	r3, #10
 8005240:	881b      	ldrh	r3, [r3, #0]
 8005242:	095b      	lsrs	r3, r3, #5
 8005244:	b29b      	uxth	r3, r3
 8005246:	461a      	mov	r2, r3
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	fbb3 f2f2 	udiv	r2, r3, r2
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	441a      	add	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005258:	3310      	adds	r3, #16
 800525a:	601a      	str	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4618      	mov	r0, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005272:	330a      	adds	r3, #10
 8005274:	881b      	ldrh	r3, [r3, #0]
 8005276:	095b      	lsrs	r3, r3, #5
 8005278:	b29b      	uxth	r3, r3
 800527a:	461a      	mov	r2, r3
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005282:	fb02 f201 	mul.w	r2, r2, r1
 8005286:	1a9b      	subs	r3, r3, r2
 8005288:	015b      	lsls	r3, r3, #5
 800528a:	18c2      	adds	r2, r0, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005292:	3314      	adds	r3, #20
 8005294:	601a      	str	r2, [r3, #0]

	return FR_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80052a0:	b590      	push	{r4, r7, lr}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052b0:	3306      	adds	r3, #6
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	3301      	adds	r3, #1
 80052b6:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d006      	beq.n	80052ce <dir_next+0x2e>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052c6:	3310      	adds	r3, #16
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <dir_next+0x32>
		return FR_NO_FILE;
 80052ce:	2304      	movs	r3, #4
 80052d0:	e144      	b.n	800555c <dir_next+0x2bc>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052de:	330a      	adds	r3, #10
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	095b      	lsrs	r3, r3, #5
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	461a      	mov	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80052ee:	fb02 f201 	mul.w	r2, r2, r1
 80052f2:	1a9b      	subs	r3, r3, r2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f040 810c 	bne.w	8005512 <dir_next+0x272>
		dp->sect++;					/* Next sector */
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005300:	3310      	adds	r3, #16
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	1c5a      	adds	r2, r3, #1
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800530c:	3310      	adds	r3, #16
 800530e:	601a      	str	r2, [r3, #0]

		if (!dp->clust) {		/* Static table */
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005316:	330c      	adds	r3, #12
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10e      	bne.n	800533c <dir_next+0x9c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800532a:	3308      	adds	r3, #8
 800532c:	881b      	ldrh	r3, [r3, #0]
 800532e:	461a      	mov	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4293      	cmp	r3, r2
 8005334:	f0c0 80ed 	bcc.w	8005512 <dir_next+0x272>
				return FR_NO_FILE;
 8005338:	2304      	movs	r3, #4
 800533a:	e10f      	b.n	800555c <dir_next+0x2bc>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005348:	330a      	adds	r3, #10
 800534a:	881b      	ldrh	r3, [r3, #0]
 800534c:	095b      	lsrs	r3, r3, #5
 800534e:	b29b      	uxth	r3, r3
 8005350:	461a      	mov	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	fbb3 f2f2 	udiv	r2, r3, r2
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005364:	3302      	adds	r3, #2
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	3b01      	subs	r3, #1
 800536a:	4013      	ands	r3, r2
 800536c:	2b00      	cmp	r3, #0
 800536e:	f040 80d0 	bne.w	8005512 <dir_next+0x272>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005380:	330c      	adds	r3, #12
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4619      	mov	r1, r3
 8005386:	4610      	mov	r0, r2
 8005388:	f7ff faf4 	bl	8004974 <get_fat>
 800538c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d801      	bhi.n	8005398 <dir_next+0xf8>
 8005394:	2302      	movs	r3, #2
 8005396:	e0e1      	b.n	800555c <dir_next+0x2bc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539e:	d101      	bne.n	80053a4 <dir_next+0x104>
 80053a0:	2301      	movs	r3, #1
 80053a2:	e0db      	b.n	800555c <dir_next+0x2bc>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053b0:	3314      	adds	r3, #20
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	f0c0 8097 	bcc.w	80054ea <dir_next+0x24a>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <dir_next+0x126>
 80053c2:	2304      	movs	r3, #4
 80053c4:	e0ca      	b.n	800555c <dir_next+0x2bc>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053d4:	330c      	adds	r3, #12
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4619      	mov	r1, r3
 80053da:	4610      	mov	r0, r2
 80053dc:	f7ff fd91 	bl	8004f02 <create_chain>
 80053e0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d101      	bne.n	80053ec <dir_next+0x14c>
 80053e8:	2307      	movs	r3, #7
 80053ea:	e0b7      	b.n	800555c <dir_next+0x2bc>
					if (clst == 1) return FR_INT_ERR;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d101      	bne.n	80053f6 <dir_next+0x156>
 80053f2:	2302      	movs	r3, #2
 80053f4:	e0b2      	b.n	800555c <dir_next+0x2bc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fc:	d101      	bne.n	8005402 <dir_next+0x162>
 80053fe:	2301      	movs	r3, #1
 8005400:	e0ac      	b.n	800555c <dir_next+0x2bc>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4618      	mov	r0, r3
 800540c:	f7ff f92e 	bl	800466c <sync_window>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <dir_next+0x17a>
 8005416:	2301      	movs	r3, #1
 8005418:	e0a0      	b.n	800555c <dir_next+0x2bc>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4618      	mov	r0, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005430:	330a      	adds	r3, #10
 8005432:	881b      	ldrh	r3, [r3, #0]
 8005434:	461a      	mov	r2, r3
 8005436:	2100      	movs	r1, #0
 8005438:	f7fe fefd 	bl	8004236 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800544a:	681c      	ldr	r4, [r3, #0]
 800544c:	6979      	ldr	r1, [r7, #20]
 800544e:	4610      	mov	r0, r2
 8005450:	f7ff fa69 	bl	8004926 <clust2sect>
 8005454:	4602      	mov	r2, r0
 8005456:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 800545a:	330c      	adds	r3, #12
 800545c:	601a      	str	r2, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800545e:	2300      	movs	r3, #0
 8005460:	613b      	str	r3, [r7, #16]
 8005462:	e024      	b.n	80054ae <dir_next+0x20e>
						dp->fs->wflag = 1;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005470:	3304      	adds	r3, #4
 8005472:	2201      	movs	r2, #1
 8005474:	701a      	strb	r2, [r3, #0]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4618      	mov	r0, r3
 8005480:	f7ff f8f4 	bl	800466c <sync_window>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <dir_next+0x1ee>
 800548a:	2301      	movs	r3, #1
 800548c:	e066      	b.n	800555c <dir_next+0x2bc>
						dp->fs->winsect++;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 800549a:	330c      	adds	r3, #12
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	1c59      	adds	r1, r3, #1
 80054a0:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 80054a4:	330c      	adds	r3, #12
 80054a6:	6019      	str	r1, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	3301      	adds	r3, #1
 80054ac:	613b      	str	r3, [r7, #16]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054ba:	3302      	adds	r3, #2
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	461a      	mov	r2, r3
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d3ce      	bcc.n	8005464 <dir_next+0x1c4>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80054d2:	330c      	adds	r3, #12
 80054d4:	6819      	ldr	r1, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	1a8a      	subs	r2, r1, r2
 80054e2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80054e6:	330c      	adds	r3, #12
 80054e8:	601a      	str	r2, [r3, #0]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054f0:	330c      	adds	r3, #12
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	601a      	str	r2, [r3, #0]
				dp->sect = clust2sect(dp->fs, clst);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	6979      	ldr	r1, [r7, #20]
 8005500:	4618      	mov	r0, r3
 8005502:	f7ff fa10 	bl	8004926 <clust2sect>
 8005506:	4602      	mov	r2, r0
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800550e:	3310      	adds	r3, #16
 8005510:	601a      	str	r2, [r3, #0]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	b29a      	uxth	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800551c:	3306      	adds	r3, #6
 800551e:	801a      	strh	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4618      	mov	r0, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005536:	330a      	adds	r3, #10
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	095b      	lsrs	r3, r3, #5
 800553c:	b29b      	uxth	r3, r3
 800553e:	461a      	mov	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	fbb3 f1f2 	udiv	r1, r3, r2
 8005546:	fb02 f201 	mul.w	r2, r2, r1
 800554a:	1a9b      	subs	r3, r3, r2
 800554c:	015b      	lsls	r3, r3, #5
 800554e:	18c2      	adds	r2, r0, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005556:	3314      	adds	r3, #20
 8005558:	601a      	str	r2, [r3, #0]

	return FR_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	371c      	adds	r7, #28
 8005560:	46bd      	mov	sp, r7
 8005562:	bd90      	pop	{r4, r7, pc}

08005564 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800556e:	2100      	movs	r1, #0
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7ff fdba 	bl	80050ea <dir_sdi>
 8005576:	4603      	mov	r3, r0
 8005578:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800557a:	7bfb      	ldrb	r3, [r7, #15]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d138      	bne.n	80055f2 <dir_alloc+0x8e>
		n = 0;
 8005580:	2300      	movs	r3, #0
 8005582:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005592:	3310      	adds	r3, #16
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4619      	mov	r1, r3
 8005598:	4610      	mov	r0, r2
 800559a:	f7ff f8c1 	bl	8004720 <move_window>
 800559e:	4603      	mov	r3, r0
 80055a0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80055a2:	7bfb      	ldrb	r3, [r7, #15]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d123      	bne.n	80055f0 <dir_alloc+0x8c>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055ae:	3314      	adds	r3, #20
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2be5      	cmp	r3, #229	; 0xe5
 80055b6:	d007      	beq.n	80055c8 <dir_alloc+0x64>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055be:	3314      	adds	r3, #20
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d107      	bne.n	80055d8 <dir_alloc+0x74>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	3301      	adds	r3, #1
 80055cc:	60bb      	str	r3, [r7, #8]
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d102      	bne.n	80055dc <dir_alloc+0x78>
 80055d6:	e00c      	b.n	80055f2 <dir_alloc+0x8e>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80055d8:	2300      	movs	r3, #0
 80055da:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80055dc:	2101      	movs	r1, #1
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7ff fe5e 	bl	80052a0 <dir_next>
 80055e4:	4603      	mov	r3, r0
 80055e6:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80055e8:	7bfb      	ldrb	r3, [r7, #15]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d0ca      	beq.n	8005584 <dir_alloc+0x20>
 80055ee:	e000      	b.n	80055f2 <dir_alloc+0x8e>
			if (res != FR_OK) break;
 80055f0:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80055f2:	7bfb      	ldrb	r3, [r7, #15]
 80055f4:	2b04      	cmp	r3, #4
 80055f6:	d101      	bne.n	80055fc <dir_alloc+0x98>
 80055f8:	2307      	movs	r3, #7
 80055fa:	73fb      	strb	r3, [r7, #15]
	return res;
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8005606:	b480      	push	{r7}
 8005608:	b085      	sub	sp, #20
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
 800560e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	331b      	adds	r3, #27
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	021b      	lsls	r3, r3, #8
 8005618:	b21a      	sxth	r2, r3
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	331a      	adds	r3, #26
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	b21b      	sxth	r3, r3
 8005622:	4313      	orrs	r3, r2
 8005624:	b21b      	sxth	r3, r3
 8005626:	b29b      	uxth	r3, r3
 8005628:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	2b03      	cmp	r3, #3
 8005634:	d10f      	bne.n	8005656 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	3315      	adds	r3, #21
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	021b      	lsls	r3, r3, #8
 800563e:	b21a      	sxth	r2, r3
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	3314      	adds	r3, #20
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	b21b      	sxth	r3, r3
 8005648:	4313      	orrs	r3, r2
 800564a:	b21b      	sxth	r3, r3
 800564c:	b29b      	uxth	r3, r3
 800564e:	041b      	lsls	r3, r3, #16
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	4313      	orrs	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]

	return cl;
 8005656:	68fb      	ldr	r3, [r7, #12]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	bc80      	pop	{r7}
 8005660:	4770      	bx	lr

08005662 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8005662:	b480      	push	{r7}
 8005664:	b083      	sub	sp, #12
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
 800566a:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	331a      	adds	r3, #26
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	b2d2      	uxtb	r2, r2
 8005674:	701a      	strb	r2, [r3, #0]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	b29b      	uxth	r3, r3
 800567a:	0a1b      	lsrs	r3, r3, #8
 800567c:	b29a      	uxth	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	331b      	adds	r3, #27
 8005682:	b2d2      	uxtb	r2, r2
 8005684:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	0c1a      	lsrs	r2, r3, #16
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	3314      	adds	r3, #20
 800568e:	b2d2      	uxtb	r2, r2
 8005690:	701a      	strb	r2, [r3, #0]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	0c1b      	lsrs	r3, r3, #16
 8005696:	b29b      	uxth	r3, r3
 8005698:	0a1b      	lsrs	r3, r3, #8
 800569a:	b29a      	uxth	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	3315      	adds	r3, #21
 80056a0:	b2d2      	uxtb	r2, r2
 80056a2:	701a      	strb	r2, [r3, #0]
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bc80      	pop	{r7}
 80056ac:	4770      	bx	lr
	...

080056b0 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056c2:	1e5a      	subs	r2, r3, #1
 80056c4:	4613      	mov	r3, r2
 80056c6:	005b      	lsls	r3, r3, #1
 80056c8:	4413      	add	r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4413      	add	r3, r2
 80056ce:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 80056d0:	2300      	movs	r3, #0
 80056d2:	613b      	str	r3, [r7, #16]
 80056d4:	2301      	movs	r3, #1
 80056d6:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 80056d8:	4a2b      	ldr	r2, [pc, #172]	; (8005788 <cmp_lfn+0xd8>)
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	4413      	add	r3, r2
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	3301      	adds	r3, #1
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	4413      	add	r3, r2
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	021b      	lsls	r3, r3, #8
 80056ea:	b21a      	sxth	r2, r3
 80056ec:	4926      	ldr	r1, [pc, #152]	; (8005788 <cmp_lfn+0xd8>)
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	440b      	add	r3, r1
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	4619      	mov	r1, r3
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	440b      	add	r3, r1
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	b21b      	sxth	r3, r3
 80056fe:	4313      	orrs	r3, r2
 8005700:	b21b      	sxth	r3, r3
 8005702:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8005704:	89fb      	ldrh	r3, [r7, #14]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d019      	beq.n	800573e <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800570a:	89bb      	ldrh	r3, [r7, #12]
 800570c:	4618      	mov	r0, r3
 800570e:	f002 fe0d 	bl	800832c <ff_wtoupper>
 8005712:	4603      	mov	r3, r0
 8005714:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	2bfe      	cmp	r3, #254	; 0xfe
 800571a:	d80e      	bhi.n	800573a <cmp_lfn+0x8a>
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	1c5a      	adds	r2, r3, #1
 8005720:	617a      	str	r2, [r7, #20]
 8005722:	005b      	lsls	r3, r3, #1
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	4413      	add	r3, r2
 8005728:	881b      	ldrh	r3, [r3, #0]
 800572a:	4618      	mov	r0, r3
 800572c:	f002 fdfe 	bl	800832c <ff_wtoupper>
 8005730:	4603      	mov	r3, r0
 8005732:	461a      	mov	r2, r3
 8005734:	89fb      	ldrh	r3, [r7, #14]
 8005736:	4293      	cmp	r3, r2
 8005738:	d008      	beq.n	800574c <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800573a:	2300      	movs	r3, #0
 800573c:	e01f      	b.n	800577e <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800573e:	89bb      	ldrh	r3, [r7, #12]
 8005740:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005744:	4293      	cmp	r3, r2
 8005746:	d001      	beq.n	800574c <cmp_lfn+0x9c>
 8005748:	2300      	movs	r3, #0
 800574a:	e018      	b.n	800577e <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	3301      	adds	r3, #1
 8005750:	613b      	str	r3, [r7, #16]
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	2b0c      	cmp	r3, #12
 8005756:	d9bf      	bls.n	80056d8 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00b      	beq.n	800577c <cmp_lfn+0xcc>
 8005764:	89fb      	ldrh	r3, [r7, #14]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d008      	beq.n	800577c <cmp_lfn+0xcc>
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	005b      	lsls	r3, r3, #1
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	4413      	add	r3, r2
 8005772:	881b      	ldrh	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d001      	beq.n	800577c <cmp_lfn+0xcc>
		return 0;
 8005778:	2300      	movs	r3, #0
 800577a:	e000      	b.n	800577e <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800577c:	2301      	movs	r3, #1
}
 800577e:	4618      	mov	r0, r3
 8005780:	3718      	adds	r7, #24
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	08008d90 	.word	0x08008d90

0800578c <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800578c:	b480      	push	{r7}
 800578e:	b089      	sub	sp, #36	; 0x24
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	4611      	mov	r1, r2
 8005798:	461a      	mov	r2, r3
 800579a:	460b      	mov	r3, r1
 800579c:	71fb      	strb	r3, [r7, #7]
 800579e:	4613      	mov	r3, r2
 80057a0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	330d      	adds	r3, #13
 80057a6:	79ba      	ldrb	r2, [r7, #6]
 80057a8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	330b      	adds	r3, #11
 80057ae:	220f      	movs	r2, #15
 80057b0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	330c      	adds	r3, #12
 80057b6:	2200      	movs	r2, #0
 80057b8:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	331a      	adds	r3, #26
 80057be:	2200      	movs	r2, #0
 80057c0:	701a      	strb	r2, [r3, #0]
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	331b      	adds	r3, #27
 80057c6:	2200      	movs	r2, #0
 80057c8:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80057ca:	79fb      	ldrb	r3, [r7, #7]
 80057cc:	1e5a      	subs	r2, r3, #1
 80057ce:	4613      	mov	r3, r2
 80057d0:	005b      	lsls	r3, r3, #1
 80057d2:	4413      	add	r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4413      	add	r3, r2
 80057d8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80057da:	2300      	movs	r3, #0
 80057dc:	82fb      	strh	r3, [r7, #22]
 80057de:	2300      	movs	r3, #0
 80057e0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 80057e2:	8afb      	ldrh	r3, [r7, #22]
 80057e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d007      	beq.n	80057fc <fit_lfn+0x70>
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	1c5a      	adds	r2, r3, #1
 80057f0:	61fa      	str	r2, [r7, #28]
 80057f2:	005b      	lsls	r3, r3, #1
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	4413      	add	r3, r2
 80057f8:	881b      	ldrh	r3, [r3, #0]
 80057fa:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 80057fc:	4a1c      	ldr	r2, [pc, #112]	; (8005870 <fit_lfn+0xe4>)
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	4413      	add	r3, r2
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	461a      	mov	r2, r3
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	4413      	add	r3, r2
 800580a:	8afa      	ldrh	r2, [r7, #22]
 800580c:	b2d2      	uxtb	r2, r2
 800580e:	701a      	strb	r2, [r3, #0]
 8005810:	8afb      	ldrh	r3, [r7, #22]
 8005812:	0a1b      	lsrs	r3, r3, #8
 8005814:	b299      	uxth	r1, r3
 8005816:	4a16      	ldr	r2, [pc, #88]	; (8005870 <fit_lfn+0xe4>)
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	4413      	add	r3, r2
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	3301      	adds	r3, #1
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	4413      	add	r3, r2
 8005824:	b2ca      	uxtb	r2, r1
 8005826:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8005828:	8afb      	ldrh	r3, [r7, #22]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d102      	bne.n	8005834 <fit_lfn+0xa8>
 800582e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005832:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	3301      	adds	r3, #1
 8005838:	61bb      	str	r3, [r7, #24]
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	2b0c      	cmp	r3, #12
 800583e:	d9d0      	bls.n	80057e2 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8005840:	8afb      	ldrh	r3, [r7, #22]
 8005842:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005846:	4293      	cmp	r3, r2
 8005848:	d006      	beq.n	8005858 <fit_lfn+0xcc>
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4413      	add	r3, r2
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d103      	bne.n	8005860 <fit_lfn+0xd4>
 8005858:	79fb      	ldrb	r3, [r7, #7]
 800585a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800585e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	79fa      	ldrb	r2, [r7, #7]
 8005864:	701a      	strb	r2, [r3, #0]
}
 8005866:	bf00      	nop
 8005868:	3724      	adds	r7, #36	; 0x24
 800586a:	46bd      	mov	sp, r7
 800586c:	bc80      	pop	{r7}
 800586e:	4770      	bx	lr
 8005870:	08008d90 	.word	0x08008d90

08005874 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b08c      	sub	sp, #48	; 0x30
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
 8005880:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005882:	220b      	movs	r2, #11
 8005884:	68b9      	ldr	r1, [r7, #8]
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f7fe fcb8 	bl	80041fc <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	2b05      	cmp	r3, #5
 8005890:	d92b      	bls.n	80058ea <gen_numname+0x76>
		sr = seq;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005896:	e022      	b.n	80058de <gen_numname+0x6a>
			wc = *lfn++;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	1c9a      	adds	r2, r3, #2
 800589c:	607a      	str	r2, [r7, #4]
 800589e:	881b      	ldrh	r3, [r3, #0]
 80058a0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80058a2:	2300      	movs	r3, #0
 80058a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80058a6:	e017      	b.n	80058d8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	005a      	lsls	r2, r3, #1
 80058ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	4413      	add	r3, r2
 80058b4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80058b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80058b8:	085b      	lsrs	r3, r3, #1
 80058ba:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d005      	beq.n	80058d2 <gen_numname+0x5e>
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80058cc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80058d0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80058d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d4:	3301      	adds	r3, #1
 80058d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80058d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058da:	2b0f      	cmp	r3, #15
 80058dc:	d9e4      	bls.n	80058a8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	881b      	ldrh	r3, [r3, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1d8      	bne.n	8005898 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80058ea:	2307      	movs	r3, #7
 80058ec:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	f003 030f 	and.w	r3, r3, #15
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	3330      	adds	r3, #48	; 0x30
 80058fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80058fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005902:	2b39      	cmp	r3, #57	; 0x39
 8005904:	d904      	bls.n	8005910 <gen_numname+0x9c>
 8005906:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800590a:	3307      	adds	r3, #7
 800590c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8005910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005912:	1e5a      	subs	r2, r3, #1
 8005914:	62ba      	str	r2, [r7, #40]	; 0x28
 8005916:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800591a:	4413      	add	r3, r2
 800591c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005920:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	091b      	lsrs	r3, r3, #4
 8005928:	603b      	str	r3, [r7, #0]
	} while (seq);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1de      	bne.n	80058ee <gen_numname+0x7a>
	ns[i] = '~';
 8005930:	f107 0214 	add.w	r2, r7, #20
 8005934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005936:	4413      	add	r3, r2
 8005938:	227e      	movs	r2, #126	; 0x7e
 800593a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800593c:	2300      	movs	r3, #0
 800593e:	627b      	str	r3, [r7, #36]	; 0x24
 8005940:	e002      	b.n	8005948 <gen_numname+0xd4>
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	3301      	adds	r3, #1
 8005946:	627b      	str	r3, [r7, #36]	; 0x24
 8005948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800594a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594c:	429a      	cmp	r2, r3
 800594e:	d205      	bcs.n	800595c <gen_numname+0xe8>
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	4413      	add	r3, r2
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	2b20      	cmp	r3, #32
 800595a:	d1f2      	bne.n	8005942 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800595c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595e:	2b07      	cmp	r3, #7
 8005960:	d808      	bhi.n	8005974 <gen_numname+0x100>
 8005962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005964:	1c5a      	adds	r2, r3, #1
 8005966:	62ba      	str	r2, [r7, #40]	; 0x28
 8005968:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800596c:	4413      	add	r3, r2
 800596e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005972:	e000      	b.n	8005976 <gen_numname+0x102>
 8005974:	2120      	movs	r1, #32
 8005976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005978:	1c5a      	adds	r2, r3, #1
 800597a:	627a      	str	r2, [r7, #36]	; 0x24
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	4413      	add	r3, r2
 8005980:	460a      	mov	r2, r1
 8005982:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005986:	2b07      	cmp	r3, #7
 8005988:	d9e8      	bls.n	800595c <gen_numname+0xe8>
}
 800598a:	bf00      	nop
 800598c:	3730      	adds	r7, #48	; 0x30
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005992:	b480      	push	{r7}
 8005994:	b085      	sub	sp, #20
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800599a:	2300      	movs	r3, #0
 800599c:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800599e:	230b      	movs	r3, #11
 80059a0:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80059a2:	7bfb      	ldrb	r3, [r7, #15]
 80059a4:	b2da      	uxtb	r2, r3
 80059a6:	0852      	lsrs	r2, r2, #1
 80059a8:	01db      	lsls	r3, r3, #7
 80059aa:	4313      	orrs	r3, r2
 80059ac:	b2da      	uxtb	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	1c59      	adds	r1, r3, #1
 80059b2:	6079      	str	r1, [r7, #4]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	4413      	add	r3, r2
 80059b8:	73fb      	strb	r3, [r7, #15]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	3b01      	subs	r3, #1
 80059be:	60bb      	str	r3, [r7, #8]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1ed      	bne.n	80059a2 <sum_sfn+0x10>
	return sum;
 80059c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3714      	adds	r7, #20
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bc80      	pop	{r7}
 80059d0:	4770      	bx	lr

080059d2 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b086      	sub	sp, #24
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80059da:	2100      	movs	r1, #0
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f7ff fb84 	bl	80050ea <dir_sdi>
 80059e2:	4603      	mov	r3, r0
 80059e4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80059e6:	7dfb      	ldrb	r3, [r7, #23]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d001      	beq.n	80059f0 <dir_find+0x1e>
 80059ec:	7dfb      	ldrb	r3, [r7, #23]
 80059ee:	e0c1      	b.n	8005b74 <dir_find+0x1a2>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80059f0:	23ff      	movs	r3, #255	; 0xff
 80059f2:	753b      	strb	r3, [r7, #20]
 80059f4:	7d3b      	ldrb	r3, [r7, #20]
 80059f6:	757b      	strb	r3, [r7, #21]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80059fe:	3304      	adds	r3, #4
 8005a00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a04:	801a      	strh	r2, [r3, #0]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a14:	3310      	adds	r3, #16
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4619      	mov	r1, r3
 8005a1a:	4610      	mov	r0, r2
 8005a1c:	f7fe fe80 	bl	8004720 <move_window>
 8005a20:	4603      	mov	r3, r0
 8005a22:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005a24:	7dfb      	ldrb	r3, [r7, #23]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f040 809e 	bne.w	8005b68 <dir_find+0x196>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a32:	3314      	adds	r3, #20
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005a3e:	7dbb      	ldrb	r3, [r7, #22]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d102      	bne.n	8005a4a <dir_find+0x78>
 8005a44:	2304      	movs	r3, #4
 8005a46:	75fb      	strb	r3, [r7, #23]
 8005a48:	e093      	b.n	8005b72 <dir_find+0x1a0>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	330b      	adds	r3, #11
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a54:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005a56:	7dbb      	ldrb	r3, [r7, #22]
 8005a58:	2be5      	cmp	r3, #229	; 0xe5
 8005a5a:	d007      	beq.n	8005a6c <dir_find+0x9a>
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
 8005a5e:	f003 0308 	and.w	r3, r3, #8
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00c      	beq.n	8005a80 <dir_find+0xae>
 8005a66:	7bfb      	ldrb	r3, [r7, #15]
 8005a68:	2b0f      	cmp	r3, #15
 8005a6a:	d009      	beq.n	8005a80 <dir_find+0xae>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8005a6c:	23ff      	movs	r3, #255	; 0xff
 8005a6e:	757b      	strb	r3, [r7, #21]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005a76:	3304      	adds	r3, #4
 8005a78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a7c:	801a      	strh	r2, [r3, #0]
 8005a7e:	e068      	b.n	8005b52 <dir_find+0x180>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005a80:	7bfb      	ldrb	r3, [r7, #15]
 8005a82:	2b0f      	cmp	r3, #15
 8005a84:	d139      	bne.n	8005afa <dir_find+0x128>
				if (dp->lfn) {
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d05f      	beq.n	8005b52 <dir_find+0x180>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005a92:	7dbb      	ldrb	r3, [r7, #22]
 8005a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d012      	beq.n	8005ac2 <dir_find+0xf0>
						sum = dir[LDIR_Chksum];
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	7b5b      	ldrb	r3, [r3, #13]
 8005aa0:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8005aa2:	7dbb      	ldrb	r3, [r7, #22]
 8005aa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aa8:	75bb      	strb	r3, [r7, #22]
 8005aaa:	7dbb      	ldrb	r3, [r7, #22]
 8005aac:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ab4:	3306      	adds	r3, #6
 8005ab6:	881a      	ldrh	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005abe:	3304      	adds	r3, #4
 8005ac0:	801a      	strh	r2, [r3, #0]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8005ac2:	7dba      	ldrb	r2, [r7, #22]
 8005ac4:	7d7b      	ldrb	r3, [r7, #21]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d114      	bne.n	8005af4 <dir_find+0x122>
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	330d      	adds	r3, #13
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	7d3a      	ldrb	r2, [r7, #20]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d10e      	bne.n	8005af4 <dir_find+0x122>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6939      	ldr	r1, [r7, #16]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7ff fde5 	bl	80056b0 <cmp_lfn>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d003      	beq.n	8005af4 <dir_find+0x122>
 8005aec:	7d7b      	ldrb	r3, [r7, #21]
 8005aee:	3b01      	subs	r3, #1
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	e000      	b.n	8005af6 <dir_find+0x124>
 8005af4:	23ff      	movs	r3, #255	; 0xff
 8005af6:	757b      	strb	r3, [r7, #21]
 8005af8:	e02b      	b.n	8005b52 <dir_find+0x180>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8005afa:	7d7b      	ldrb	r3, [r7, #21]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d107      	bne.n	8005b10 <dir_find+0x13e>
 8005b00:	6938      	ldr	r0, [r7, #16]
 8005b02:	f7ff ff46 	bl	8005992 <sum_sfn>
 8005b06:	4603      	mov	r3, r0
 8005b08:	461a      	mov	r2, r3
 8005b0a:	7d3b      	ldrb	r3, [r7, #20]
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d02d      	beq.n	8005b6c <dir_find+0x19a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b16:	3318      	adds	r3, #24
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	330b      	adds	r3, #11
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10c      	bne.n	8005b40 <dir_find+0x16e>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b2c:	3318      	adds	r3, #24
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	220b      	movs	r2, #11
 8005b32:	4619      	mov	r1, r3
 8005b34:	6938      	ldr	r0, [r7, #16]
 8005b36:	f7fe fb97 	bl	8004268 <mem_cmp>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d017      	beq.n	8005b70 <dir_find+0x19e>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8005b40:	23ff      	movs	r3, #255	; 0xff
 8005b42:	757b      	strb	r3, [r7, #21]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005b4a:	3304      	adds	r3, #4
 8005b4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b50:	801a      	strh	r2, [r3, #0]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8005b52:	2100      	movs	r1, #0
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f7ff fba3 	bl	80052a0 <dir_next>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005b5e:	7dfb      	ldrb	r3, [r7, #23]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f43f af50 	beq.w	8005a06 <dir_find+0x34>
 8005b66:	e004      	b.n	8005b72 <dir_find+0x1a0>
		if (res != FR_OK) break;
 8005b68:	bf00      	nop
 8005b6a:	e002      	b.n	8005b72 <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8005b6c:	bf00      	nop
 8005b6e:	e000      	b.n	8005b72 <dir_find+0x1a0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8005b70:	bf00      	nop

	return res;
 8005b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3718      	adds	r7, #24
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b08c      	sub	sp, #48	; 0x30
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b8a:	3318      	adds	r3, #24
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	623b      	str	r3, [r7, #32]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8005b9a:	f107 030c 	add.w	r3, r7, #12
 8005b9e:	220c      	movs	r2, #12
 8005ba0:	6a39      	ldr	r1, [r7, #32]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7fe fb2a 	bl	80041fc <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005ba8:	7dfb      	ldrb	r3, [r7, #23]
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d039      	beq.n	8005c26 <dir_register+0xaa>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8005bb2:	6a3b      	ldr	r3, [r7, #32]
 8005bb4:	330b      	adds	r3, #11
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	701a      	strb	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	601a      	str	r2, [r3, #0]
		for (n = 1; n < 100; n++) {
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bc8:	e013      	b.n	8005bf2 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8005bca:	f107 010c 	add.w	r1, r7, #12
 8005bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd0:	69fa      	ldr	r2, [r7, #28]
 8005bd2:	6a38      	ldr	r0, [r7, #32]
 8005bd4:	f7ff fe4e 	bl	8005874 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f7ff fefa 	bl	80059d2 <dir_find>
 8005bde:	4603      	mov	r3, r0
 8005be0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8005be4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d106      	bne.n	8005bfa <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8005bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bee:	3301      	adds	r3, #1
 8005bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf4:	2b63      	cmp	r3, #99	; 0x63
 8005bf6:	d9e8      	bls.n	8005bca <dir_register+0x4e>
 8005bf8:	e000      	b.n	8005bfc <dir_register+0x80>
			if (res != FR_OK) break;
 8005bfa:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfe:	2b64      	cmp	r3, #100	; 0x64
 8005c00:	d101      	bne.n	8005c06 <dir_register+0x8a>
 8005c02:	2307      	movs	r3, #7
 8005c04:	e0e3      	b.n	8005dce <dir_register+0x252>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005c06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c0a:	2b04      	cmp	r3, #4
 8005c0c:	d002      	beq.n	8005c14 <dir_register+0x98>
 8005c0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c12:	e0dc      	b.n	8005dce <dir_register+0x252>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8005c14:	6a3b      	ldr	r3, [r7, #32]
 8005c16:	330b      	adds	r3, #11
 8005c18:	7dfa      	ldrb	r2, [r7, #23]
 8005c1a:	701a      	strb	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005c22:	69fa      	ldr	r2, [r7, #28]
 8005c24:	601a      	str	r2, [r3, #0]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8005c26:	7dfb      	ldrb	r3, [r7, #23]
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d014      	beq.n	8005c5a <dir_register+0xde>
		for (n = 0; lfn[n]; n++) ;
 8005c30:	2300      	movs	r3, #0
 8005c32:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c34:	e002      	b.n	8005c3c <dir_register+0xc0>
 8005c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c38:	3301      	adds	r3, #1
 8005c3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3e:	005b      	lsls	r3, r3, #1
 8005c40:	69fa      	ldr	r2, [r7, #28]
 8005c42:	4413      	add	r3, r2
 8005c44:	881b      	ldrh	r3, [r3, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1f5      	bne.n	8005c36 <dir_register+0xba>
		nent = (n + 25) / 13;
 8005c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4c:	3319      	adds	r3, #25
 8005c4e:	4a62      	ldr	r2, [pc, #392]	; (8005dd8 <dir_register+0x25c>)
 8005c50:	fba2 2303 	umull	r2, r3, r2, r3
 8005c54:	089b      	lsrs	r3, r3, #2
 8005c56:	627b      	str	r3, [r7, #36]	; 0x24
 8005c58:	e001      	b.n	8005c5e <dir_register+0xe2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005c5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f7ff fc7f 	bl	8005564 <dir_alloc>
 8005c66:	4603      	mov	r3, r0
 8005c68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005c6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d160      	bne.n	8005d36 <dir_register+0x1ba>
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	3b01      	subs	r3, #1
 8005c78:	627b      	str	r3, [r7, #36]	; 0x24
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d05a      	beq.n	8005d36 <dir_register+0x1ba>
		res = dir_sdi(dp, dp->index - nent);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c86:	3306      	adds	r3, #6
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	4619      	mov	r1, r3
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7ff fa29 	bl	80050ea <dir_sdi>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005c9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d147      	bne.n	8005d36 <dir_register+0x1ba>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cac:	3318      	adds	r3, #24
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7ff fe6e 	bl	8005992 <sum_sfn>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cc8:	3310      	adds	r3, #16
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4619      	mov	r1, r3
 8005cce:	4610      	mov	r0, r2
 8005cd0:	f7fe fd26 	bl	8004720 <move_window>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8005cda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d128      	bne.n	8005d34 <dir_register+0x1b8>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005ce8:	6818      	ldr	r0, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cf0:	3314      	adds	r3, #20
 8005cf2:	6819      	ldr	r1, [r3, #0]
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	b2da      	uxtb	r2, r3
 8005cf8:	7efb      	ldrb	r3, [r7, #27]
 8005cfa:	f7ff fd47 	bl	800578c <fit_lfn>
				dp->fs->wflag = 1;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d0a:	3304      	adds	r3, #4
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	701a      	strb	r2, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 8005d10:	2100      	movs	r1, #0
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7ff fac4 	bl	80052a0 <dir_next>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8005d1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d107      	bne.n	8005d36 <dir_register+0x1ba>
 8005d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1c3      	bne.n	8005cba <dir_register+0x13e>
 8005d32:	e000      	b.n	8005d36 <dir_register+0x1ba>
				if (res != FR_OK) break;
 8005d34:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8005d36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d145      	bne.n	8005dca <dir_register+0x24e>
		res = move_window(dp->fs, dp->sect);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d4c:	3310      	adds	r3, #16
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4619      	mov	r1, r3
 8005d52:	4610      	mov	r0, r2
 8005d54:	f7fe fce4 	bl	8004720 <move_window>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005d5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d131      	bne.n	8005dca <dir_register+0x24e>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d6c:	3314      	adds	r3, #20
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2220      	movs	r2, #32
 8005d72:	2100      	movs	r1, #0
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7fe fa5e 	bl	8004236 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d80:	3314      	adds	r3, #20
 8005d82:	6818      	ldr	r0, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d8a:	3318      	adds	r3, #24
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	220b      	movs	r2, #11
 8005d90:	4619      	mov	r1, r3
 8005d92:	f7fe fa33 	bl	80041fc <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d9c:	3318      	adds	r3, #24
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	330b      	adds	r3, #11
 8005da2:	781a      	ldrb	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005daa:	3314      	adds	r3, #20
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	330c      	adds	r3, #12
 8005db0:	f002 0218 	and.w	r2, r2, #24
 8005db4:	b2d2      	uxtb	r2, r2
 8005db6:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dc4:	3304      	adds	r3, #4
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	701a      	strb	r2, [r3, #0]
		}
	}

	return res;
 8005dca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3730      	adds	r7, #48	; 0x30
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	4ec4ec4f 	.word	0x4ec4ec4f

08005ddc <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b08a      	sub	sp, #40	; 0x28
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	613b      	str	r3, [r7, #16]
 8005dec:	e002      	b.n	8005df4 <create_name+0x18>
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	3301      	adds	r3, #1
 8005df2:	613b      	str	r3, [r7, #16]
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	2b2f      	cmp	r3, #47	; 0x2f
 8005dfa:	d0f8      	beq.n	8005dee <create_name+0x12>
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	2b5c      	cmp	r3, #92	; 0x5c
 8005e02:	d0f4      	beq.n	8005dee <create_name+0x12>
	lfn = dp->lfn;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	617b      	str	r3, [r7, #20]
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	61ba      	str	r2, [r7, #24]
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	4413      	add	r3, r2
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8005e24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e26:	2b1f      	cmp	r3, #31
 8005e28:	d92f      	bls.n	8005e8a <create_name+0xae>
 8005e2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e2c:	2b2f      	cmp	r3, #47	; 0x2f
 8005e2e:	d02c      	beq.n	8005e8a <create_name+0xae>
 8005e30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e32:	2b5c      	cmp	r3, #92	; 0x5c
 8005e34:	d029      	beq.n	8005e8a <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	2bfe      	cmp	r3, #254	; 0xfe
 8005e3a:	d901      	bls.n	8005e40 <create_name+0x64>
			return FR_INVALID_NAME;
 8005e3c:	2306      	movs	r3, #6
 8005e3e:	e18b      	b.n	8006158 <create_name+0x37c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005e40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005e46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e48:	2101      	movs	r1, #1
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f002 fa34 	bl	80082b8 <ff_convert>
 8005e50:	4603      	mov	r3, r0
 8005e52:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005e54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <create_name+0x82>
 8005e5a:	2306      	movs	r3, #6
 8005e5c:	e17c      	b.n	8006158 <create_name+0x37c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8005e5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e60:	2b7f      	cmp	r3, #127	; 0x7f
 8005e62:	d809      	bhi.n	8005e78 <create_name+0x9c>
 8005e64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e66:	4619      	mov	r1, r3
 8005e68:	488f      	ldr	r0, [pc, #572]	; (80060a8 <create_name+0x2cc>)
 8005e6a:	f7fe fa23 	bl	80042b4 <chk_chr>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <create_name+0x9c>
			return FR_INVALID_NAME;
 8005e74:	2306      	movs	r3, #6
 8005e76:	e16f      	b.n	8006158 <create_name+0x37c>
		lfn[di++] = w;					/* Store the Unicode character */
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	1c5a      	adds	r2, r3, #1
 8005e7c:	617a      	str	r2, [r7, #20]
 8005e7e:	005b      	lsls	r3, r3, #1
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	4413      	add	r3, r2
 8005e84:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005e86:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005e88:	e7c5      	b.n	8005e16 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	441a      	add	r2, r3
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8005e94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e96:	2b1f      	cmp	r3, #31
 8005e98:	d801      	bhi.n	8005e9e <create_name+0xc2>
 8005e9a:	2304      	movs	r3, #4
 8005e9c:	e000      	b.n	8005ea0 <create_name+0xc4>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8005ea4:	e011      	b.n	8005eca <create_name+0xee>
		w = lfn[di - 1];
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005eac:	3b01      	subs	r3, #1
 8005eae:	005b      	lsls	r3, r3, #1
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	881b      	ldrh	r3, [r3, #0]
 8005eb6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8005eb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005eba:	2b20      	cmp	r3, #32
 8005ebc:	d002      	beq.n	8005ec4 <create_name+0xe8>
 8005ebe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ec0:	2b2e      	cmp	r3, #46	; 0x2e
 8005ec2:	d106      	bne.n	8005ed2 <create_name+0xf6>
		di--;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1ea      	bne.n	8005ea6 <create_name+0xca>
 8005ed0:	e000      	b.n	8005ed4 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8005ed2:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <create_name+0x102>
 8005eda:	2306      	movs	r3, #6
 8005edc:	e13c      	b.n	8006158 <create_name+0x37c>

	lfn[di] = 0;						/* LFN is created */
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	005b      	lsls	r3, r3, #1
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ef0:	3318      	adds	r3, #24
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	220b      	movs	r2, #11
 8005ef6:	2120      	movs	r1, #32
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7fe f99c 	bl	8004236 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005efe:	2300      	movs	r3, #0
 8005f00:	61bb      	str	r3, [r7, #24]
 8005f02:	e002      	b.n	8005f0a <create_name+0x12e>
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	3301      	adds	r3, #1
 8005f08:	61bb      	str	r3, [r7, #24]
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	005b      	lsls	r3, r3, #1
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	4413      	add	r3, r2
 8005f12:	881b      	ldrh	r3, [r3, #0]
 8005f14:	2b20      	cmp	r3, #32
 8005f16:	d0f5      	beq.n	8005f04 <create_name+0x128>
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	005b      	lsls	r3, r3, #1
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	4413      	add	r3, r2
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	2b2e      	cmp	r3, #46	; 0x2e
 8005f24:	d0ee      	beq.n	8005f04 <create_name+0x128>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d009      	beq.n	8005f40 <create_name+0x164>
 8005f2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005f30:	f043 0303 	orr.w	r3, r3, #3
 8005f34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005f38:	e002      	b.n	8005f40 <create_name+0x164>
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	617b      	str	r3, [r7, #20]
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d009      	beq.n	8005f5a <create_name+0x17e>
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	005b      	lsls	r3, r3, #1
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	4413      	add	r3, r2
 8005f54:	881b      	ldrh	r3, [r3, #0]
 8005f56:	2b2e      	cmp	r3, #46	; 0x2e
 8005f58:	d1ef      	bne.n	8005f3a <create_name+0x15e>

	b = i = 0; ni = 8;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	623b      	str	r3, [r7, #32]
 8005f5e:	2300      	movs	r3, #0
 8005f60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005f64:	2308      	movs	r3, #8
 8005f66:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	1c5a      	adds	r2, r3, #1
 8005f6c:	61ba      	str	r2, [r7, #24]
 8005f6e:	005b      	lsls	r3, r3, #1
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	4413      	add	r3, r2
 8005f74:	881b      	ldrh	r3, [r3, #0]
 8005f76:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005f78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f000 8092 	beq.w	80060a4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005f80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f82:	2b20      	cmp	r3, #32
 8005f84:	d006      	beq.n	8005f94 <create_name+0x1b8>
 8005f86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f88:	2b2e      	cmp	r3, #46	; 0x2e
 8005f8a:	d10a      	bne.n	8005fa2 <create_name+0x1c6>
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d006      	beq.n	8005fa2 <create_name+0x1c6>
			cf |= NS_LOSS | NS_LFN; continue;
 8005f94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005f98:	f043 0303 	orr.w	r3, r3, #3
 8005f9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005fa0:	e07f      	b.n	80060a2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005fa2:	6a3a      	ldr	r2, [r7, #32]
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d203      	bcs.n	8005fb2 <create_name+0x1d6>
 8005faa:	69ba      	ldr	r2, [r7, #24]
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d123      	bne.n	8005ffa <create_name+0x21e>
			if (ni == 11) {				/* Long extension */
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	2b0b      	cmp	r3, #11
 8005fb6:	d106      	bne.n	8005fc6 <create_name+0x1ea>
				cf |= NS_LOSS | NS_LFN; break;
 8005fb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005fbc:	f043 0303 	orr.w	r3, r3, #3
 8005fc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005fc4:	e077      	b.n	80060b6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005fc6:	69ba      	ldr	r2, [r7, #24]
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d005      	beq.n	8005fda <create_name+0x1fe>
 8005fce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005fd2:	f043 0303 	orr.w	r3, r3, #3
 8005fd6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 8005fda:	69ba      	ldr	r2, [r7, #24]
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d868      	bhi.n	80060b4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	61bb      	str	r3, [r7, #24]
 8005fe6:	2308      	movs	r3, #8
 8005fe8:	623b      	str	r3, [r7, #32]
 8005fea:	230b      	movs	r3, #11
 8005fec:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005fee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005ff8:	e053      	b.n	80060a2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005ffa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ffc:	2b7f      	cmp	r3, #127	; 0x7f
 8005ffe:	d914      	bls.n	800602a <create_name+0x24e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006000:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006002:	2100      	movs	r1, #0
 8006004:	4618      	mov	r0, r3
 8006006:	f002 f957 	bl	80082b8 <ff_convert>
 800600a:	4603      	mov	r3, r0
 800600c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800600e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006010:	2b00      	cmp	r3, #0
 8006012:	d004      	beq.n	800601e <create_name+0x242>
 8006014:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006016:	3b80      	subs	r3, #128	; 0x80
 8006018:	4a24      	ldr	r2, [pc, #144]	; (80060ac <create_name+0x2d0>)
 800601a:	5cd3      	ldrb	r3, [r2, r3]
 800601c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800601e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006022:	f043 0302 	orr.w	r3, r3, #2
 8006026:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800602a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800602c:	2b00      	cmp	r3, #0
 800602e:	d007      	beq.n	8006040 <create_name+0x264>
 8006030:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006032:	4619      	mov	r1, r3
 8006034:	481e      	ldr	r0, [pc, #120]	; (80060b0 <create_name+0x2d4>)
 8006036:	f7fe f93d 	bl	80042b4 <chk_chr>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d008      	beq.n	8006052 <create_name+0x276>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006040:	235f      	movs	r3, #95	; 0x5f
 8006042:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006044:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006048:	f043 0303 	orr.w	r3, r3, #3
 800604c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006050:	e01b      	b.n	800608a <create_name+0x2ae>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006052:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006054:	2b40      	cmp	r3, #64	; 0x40
 8006056:	d909      	bls.n	800606c <create_name+0x290>
 8006058:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800605a:	2b5a      	cmp	r3, #90	; 0x5a
 800605c:	d806      	bhi.n	800606c <create_name+0x290>
					b |= 2;
 800605e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006062:	f043 0302 	orr.w	r3, r3, #2
 8006066:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800606a:	e00e      	b.n	800608a <create_name+0x2ae>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800606c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800606e:	2b60      	cmp	r3, #96	; 0x60
 8006070:	d90b      	bls.n	800608a <create_name+0x2ae>
 8006072:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006074:	2b7a      	cmp	r3, #122	; 0x7a
 8006076:	d808      	bhi.n	800608a <create_name+0x2ae>
						b |= 1; w -= 0x20;
 8006078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800607c:	f043 0301 	orr.w	r3, r3, #1
 8006080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006084:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006086:	3b20      	subs	r3, #32
 8006088:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006090:	3318      	adds	r3, #24
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	6a3b      	ldr	r3, [r7, #32]
 8006096:	1c59      	adds	r1, r3, #1
 8006098:	6239      	str	r1, [r7, #32]
 800609a:	4413      	add	r3, r2
 800609c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800609e:	b2d2      	uxtb	r2, r2
 80060a0:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 80060a2:	e761      	b.n	8005f68 <create_name+0x18c>
		if (!w) break;					/* Break on end of the LFN */
 80060a4:	bf00      	nop
 80060a6:	e006      	b.n	80060b6 <create_name+0x2da>
 80060a8:	08008cb0 	.word	0x08008cb0
 80060ac:	08008d10 	.word	0x08008d10
 80060b0:	08008cbc 	.word	0x08008cbc
			if (si > di) break;			/* No extension */
 80060b4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060bc:	3318      	adds	r3, #24
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	2be5      	cmp	r3, #229	; 0xe5
 80060c4:	d106      	bne.n	80060d4 <create_name+0x2f8>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060cc:	3318      	adds	r3, #24
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2205      	movs	r2, #5
 80060d2:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	2b08      	cmp	r3, #8
 80060d8:	d104      	bne.n	80060e4 <create_name+0x308>
 80060da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 80060e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060e8:	f003 030c 	and.w	r3, r3, #12
 80060ec:	2b0c      	cmp	r3, #12
 80060ee:	d005      	beq.n	80060fc <create_name+0x320>
 80060f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060f4:	f003 0303 	and.w	r3, r3, #3
 80060f8:	2b03      	cmp	r3, #3
 80060fa:	d105      	bne.n	8006108 <create_name+0x32c>
		cf |= NS_LFN;
 80060fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006100:	f043 0302 	orr.w	r3, r3, #2
 8006104:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006108:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800610c:	f003 0302 	and.w	r3, r3, #2
 8006110:	2b00      	cmp	r3, #0
 8006112:	d117      	bne.n	8006144 <create_name+0x368>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006114:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006118:	f003 0303 	and.w	r3, r3, #3
 800611c:	2b01      	cmp	r3, #1
 800611e:	d105      	bne.n	800612c <create_name+0x350>
 8006120:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006124:	f043 0310 	orr.w	r3, r3, #16
 8006128:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800612c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006130:	f003 030c 	and.w	r3, r3, #12
 8006134:	2b04      	cmp	r3, #4
 8006136:	d105      	bne.n	8006144 <create_name+0x368>
 8006138:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800613c:	f043 0308 	orr.w	r3, r3, #8
 8006140:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800614a:	3318      	adds	r3, #24
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	330b      	adds	r3, #11
 8006150:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006154:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006156:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8006158:	4618      	mov	r0, r3
 800615a:	3728      	adds	r7, #40	; 0x28
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	2b2f      	cmp	r3, #47	; 0x2f
 8006170:	d003      	beq.n	800617a <follow_path+0x1a>
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	2b5c      	cmp	r3, #92	; 0x5c
 8006178:	d102      	bne.n	8006180 <follow_path+0x20>
		path++;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	3301      	adds	r3, #1
 800617e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006186:	3308      	adds	r3, #8
 8006188:	2200      	movs	r2, #0
 800618a:	601a      	str	r2, [r3, #0]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	2b1f      	cmp	r3, #31
 8006192:	d80c      	bhi.n	80061ae <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8006194:	2100      	movs	r1, #0
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7fe ffa7 	bl	80050ea <dir_sdi>
 800619c:	4603      	mov	r3, r0
 800619e:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061a6:	3314      	adds	r3, #20
 80061a8:	2200      	movs	r2, #0
 80061aa:	601a      	str	r2, [r3, #0]
 80061ac:	e04c      	b.n	8006248 <follow_path+0xe8>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80061ae:	463b      	mov	r3, r7
 80061b0:	4619      	mov	r1, r3
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7ff fe12 	bl	8005ddc <create_name>
 80061b8:	4603      	mov	r3, r0
 80061ba:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80061bc:	7bfb      	ldrb	r3, [r7, #15]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d13d      	bne.n	800623e <follow_path+0xde>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7ff fc05 	bl	80059d2 <dir_find>
 80061c8:	4603      	mov	r3, r0
 80061ca:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061d2:	3318      	adds	r3, #24
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	7adb      	ldrb	r3, [r3, #11]
 80061d8:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80061da:	7bfb      	ldrb	r3, [r7, #15]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00a      	beq.n	80061f6 <follow_path+0x96>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80061e0:	7bfb      	ldrb	r3, [r7, #15]
 80061e2:	2b04      	cmp	r3, #4
 80061e4:	d12d      	bne.n	8006242 <follow_path+0xe2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80061e6:	7bbb      	ldrb	r3, [r7, #14]
 80061e8:	f003 0304 	and.w	r3, r3, #4
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d128      	bne.n	8006242 <follow_path+0xe2>
 80061f0:	2305      	movs	r3, #5
 80061f2:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80061f4:	e025      	b.n	8006242 <follow_path+0xe2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80061f6:	7bbb      	ldrb	r3, [r7, #14]
 80061f8:	f003 0304 	and.w	r3, r3, #4
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d122      	bne.n	8006246 <follow_path+0xe6>
			dir = dp->dir;						/* Follow the sub-directory */
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006206:	3314      	adds	r3, #20
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	330b      	adds	r3, #11
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	f003 0310 	and.w	r3, r3, #16
 8006216:	2b00      	cmp	r3, #0
 8006218:	d102      	bne.n	8006220 <follow_path+0xc0>
				res = FR_NO_PATH; break;
 800621a:	2305      	movs	r3, #5
 800621c:	73fb      	strb	r3, [r7, #15]
 800621e:	e013      	b.n	8006248 <follow_path+0xe8>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68b9      	ldr	r1, [r7, #8]
 800622a:	4618      	mov	r0, r3
 800622c:	f7ff f9eb 	bl	8005606 <ld_clust>
 8006230:	4602      	mov	r2, r0
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006238:	3308      	adds	r3, #8
 800623a:	601a      	str	r2, [r3, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800623c:	e7b7      	b.n	80061ae <follow_path+0x4e>
			if (res != FR_OK) break;
 800623e:	bf00      	nop
 8006240:	e002      	b.n	8006248 <follow_path+0xe8>
				break;
 8006242:	bf00      	nop
 8006244:	e000      	b.n	8006248 <follow_path+0xe8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006246:	bf00      	nop
		}
	}

	return res;
 8006248:	7bfb      	ldrb	r3, [r7, #15]
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006252:	b480      	push	{r7}
 8006254:	b087      	sub	sp, #28
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800625a:	f04f 33ff 	mov.w	r3, #4294967295
 800625e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d031      	beq.n	80062cc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	617b      	str	r3, [r7, #20]
 800626e:	e002      	b.n	8006276 <get_ldnumber+0x24>
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	3301      	adds	r3, #1
 8006274:	617b      	str	r3, [r7, #20]
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	2b1f      	cmp	r3, #31
 800627c:	d903      	bls.n	8006286 <get_ldnumber+0x34>
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	2b3a      	cmp	r3, #58	; 0x3a
 8006284:	d1f4      	bne.n	8006270 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	2b3a      	cmp	r3, #58	; 0x3a
 800628c:	d11c      	bne.n	80062c8 <get_ldnumber+0x76>
			tp = *path;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	1c5a      	adds	r2, r3, #1
 8006298:	60fa      	str	r2, [r7, #12]
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	3b30      	subs	r3, #48	; 0x30
 800629e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	2b09      	cmp	r3, #9
 80062a4:	d80e      	bhi.n	80062c4 <get_ldnumber+0x72>
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d10a      	bne.n	80062c4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d107      	bne.n	80062c4 <get_ldnumber+0x72>
					vol = (int)i;
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	3301      	adds	r3, #1
 80062bc:	617b      	str	r3, [r7, #20]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	e002      	b.n	80062ce <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80062c8:	2300      	movs	r3, #0
 80062ca:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80062cc:	693b      	ldr	r3, [r7, #16]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	371c      	adds	r7, #28
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bc80      	pop	{r7}
 80062d6:	4770      	bx	lr

080062d8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062e8:	3304      	adds	r3, #4
 80062ea:	2200      	movs	r2, #0
 80062ec:	701a      	strb	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80062f4:	330c      	adds	r3, #12
 80062f6:	f04f 32ff 	mov.w	r2, #4294967295
 80062fa:	601a      	str	r2, [r3, #0]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80062fc:	6839      	ldr	r1, [r7, #0]
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7fe fa0e 	bl	8004720 <move_window>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <check_fs+0x36>
		return 3;
 800630a:	2303      	movs	r3, #3
 800630c:	e04a      	b.n	80063a4 <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006314:	3301      	adds	r3, #1
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	021b      	lsls	r3, r3, #8
 800631a:	b21a      	sxth	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8006322:	b21b      	sxth	r3, r3
 8006324:	4313      	orrs	r3, r2
 8006326:	b21b      	sxth	r3, r3
 8006328:	4a20      	ldr	r2, [pc, #128]	; (80063ac <check_fs+0xd4>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d001      	beq.n	8006332 <check_fs+0x5a>
		return 2;
 800632e:	2302      	movs	r3, #2
 8006330:	e038      	b.n	80063a4 <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	3336      	adds	r3, #54	; 0x36
 8006336:	3303      	adds	r3, #3
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	061a      	lsls	r2, r3, #24
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	3336      	adds	r3, #54	; 0x36
 8006340:	3302      	adds	r3, #2
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	041b      	lsls	r3, r3, #16
 8006346:	4313      	orrs	r3, r2
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	3236      	adds	r2, #54	; 0x36
 800634c:	3201      	adds	r2, #1
 800634e:	7812      	ldrb	r2, [r2, #0]
 8006350:	0212      	lsls	r2, r2, #8
 8006352:	4313      	orrs	r3, r2
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800635a:	4313      	orrs	r3, r2
 800635c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006360:	4a13      	ldr	r2, [pc, #76]	; (80063b0 <check_fs+0xd8>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d101      	bne.n	800636a <check_fs+0x92>
		return 0;
 8006366:	2300      	movs	r3, #0
 8006368:	e01c      	b.n	80063a4 <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	3352      	adds	r3, #82	; 0x52
 800636e:	3303      	adds	r3, #3
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	061a      	lsls	r2, r3, #24
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	3352      	adds	r3, #82	; 0x52
 8006378:	3302      	adds	r3, #2
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	041b      	lsls	r3, r3, #16
 800637e:	4313      	orrs	r3, r2
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	3252      	adds	r2, #82	; 0x52
 8006384:	3201      	adds	r2, #1
 8006386:	7812      	ldrb	r2, [r2, #0]
 8006388:	0212      	lsls	r2, r2, #8
 800638a:	4313      	orrs	r3, r2
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8006392:	4313      	orrs	r3, r2
 8006394:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006398:	4a05      	ldr	r2, [pc, #20]	; (80063b0 <check_fs+0xd8>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d101      	bne.n	80063a2 <check_fs+0xca>
		return 0;
 800639e:	2300      	movs	r3, #0
 80063a0:	e000      	b.n	80063a4 <check_fs+0xcc>

	return 1;
 80063a2:	2301      	movs	r3, #1
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3708      	adds	r7, #8
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	ffffaa55 	.word	0xffffaa55
 80063b0:	00544146 	.word	0x00544146

080063b4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b096      	sub	sp, #88	; 0x58
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	4613      	mov	r3, r2
 80063c0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80063c8:	68b8      	ldr	r0, [r7, #8]
 80063ca:	f7ff ff42 	bl	8006252 <get_ldnumber>
 80063ce:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80063d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	da01      	bge.n	80063da <find_volume+0x26>
 80063d6:	230b      	movs	r3, #11
 80063d8:	e33c      	b.n	8006a54 <find_volume+0x6a0>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80063da:	4ab3      	ldr	r2, [pc, #716]	; (80066a8 <find_volume+0x2f4>)
 80063dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063e2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80063e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <find_volume+0x3a>
 80063ea:	230c      	movs	r3, #12
 80063ec:	e332      	b.n	8006a54 <find_volume+0x6a0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063f2:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80063f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d01d      	beq.n	800643c <find_volume+0x88>
		stat = disk_status(fs->drv);
 8006400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006406:	3301      	adds	r3, #1
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	4618      	mov	r0, r3
 800640c:	f7fd fe58 	bl	80040c0 <disk_status>
 8006410:	4603      	mov	r3, r0
 8006412:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006416:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10c      	bne.n	800643c <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8006422:	79fb      	ldrb	r3, [r7, #7]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d007      	beq.n	8006438 <find_volume+0x84>
 8006428:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800642c:	f003 0304 	and.w	r3, r3, #4
 8006430:	2b00      	cmp	r3, #0
 8006432:	d001      	beq.n	8006438 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8006434:	230a      	movs	r3, #10
 8006436:	e30d      	b.n	8006a54 <find_volume+0x6a0>
			return FR_OK;				/* The file system object is valid */
 8006438:	2300      	movs	r3, #0
 800643a:	e30b      	b.n	8006a54 <find_volume+0x6a0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800643c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006442:	2200      	movs	r2, #0
 8006444:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006448:	b2da      	uxtb	r2, r3
 800644a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006450:	3301      	adds	r3, #1
 8006452:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800645a:	3301      	adds	r3, #1
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	4618      	mov	r0, r3
 8006460:	f7fd fe48 	bl	80040f4 <disk_initialize>
 8006464:	4603      	mov	r3, r0
 8006466:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800646a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	2b00      	cmp	r3, #0
 8006474:	d001      	beq.n	800647a <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006476:	2303      	movs	r3, #3
 8006478:	e2ec      	b.n	8006a54 <find_volume+0x6a0>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800647a:	79fb      	ldrb	r3, [r7, #7]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d007      	beq.n	8006490 <find_volume+0xdc>
 8006480:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006484:	f003 0304 	and.w	r3, r3, #4
 8006488:	2b00      	cmp	r3, #0
 800648a:	d001      	beq.n	8006490 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800648c:	230a      	movs	r3, #10
 800648e:	e2e1      	b.n	8006a54 <find_volume+0x6a0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8006490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006496:	3301      	adds	r3, #1
 8006498:	7818      	ldrb	r0, [r3, #0]
 800649a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064a0:	330a      	adds	r3, #10
 80064a2:	461a      	mov	r2, r3
 80064a4:	2102      	movs	r1, #2
 80064a6:	f7fd fe8b 	bl	80041c0 <disk_ioctl>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10f      	bne.n	80064d0 <find_volume+0x11c>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 80064b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064b6:	330a      	adds	r3, #10
 80064b8:	881b      	ldrh	r3, [r3, #0]
 80064ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064be:	d307      	bcc.n	80064d0 <find_volume+0x11c>
 80064c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064c6:	330a      	adds	r3, #10
 80064c8:	881b      	ldrh	r3, [r3, #0]
 80064ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ce:	d901      	bls.n	80064d4 <find_volume+0x120>
 80064d0:	2301      	movs	r3, #1
 80064d2:	e2bf      	b.n	8006a54 <find_volume+0x6a0>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80064d4:	2300      	movs	r3, #0
 80064d6:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80064d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80064da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80064dc:	f7ff fefc 	bl	80062d8 <check_fs>
 80064e0:	4603      	mov	r3, r0
 80064e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80064e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d155      	bne.n	800659a <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80064ee:	2300      	movs	r3, #0
 80064f0:	643b      	str	r3, [r7, #64]	; 0x40
 80064f2:	e029      	b.n	8006548 <find_volume+0x194>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80064f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064f8:	011b      	lsls	r3, r3, #4
 80064fa:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80064fe:	4413      	add	r3, r2
 8006500:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8006502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006504:	3304      	adds	r3, #4
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d012      	beq.n	8006532 <find_volume+0x17e>
 800650c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650e:	330b      	adds	r3, #11
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	061a      	lsls	r2, r3, #24
 8006514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006516:	330a      	adds	r3, #10
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	041b      	lsls	r3, r3, #16
 800651c:	4313      	orrs	r3, r2
 800651e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006520:	3209      	adds	r2, #9
 8006522:	7812      	ldrb	r2, [r2, #0]
 8006524:	0212      	lsls	r2, r2, #8
 8006526:	4313      	orrs	r3, r2
 8006528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800652a:	3208      	adds	r2, #8
 800652c:	7812      	ldrb	r2, [r2, #0]
 800652e:	431a      	orrs	r2, r3
 8006530:	e000      	b.n	8006534 <find_volume+0x180>
 8006532:	2200      	movs	r2, #0
 8006534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800653c:	440b      	add	r3, r1
 800653e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006544:	3301      	adds	r3, #1
 8006546:	643b      	str	r3, [r7, #64]	; 0x40
 8006548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800654a:	2b03      	cmp	r3, #3
 800654c:	d9d2      	bls.n	80064f4 <find_volume+0x140>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800654e:	2300      	movs	r3, #0
 8006550:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006554:	2b00      	cmp	r3, #0
 8006556:	d002      	beq.n	800655e <find_volume+0x1aa>
 8006558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800655a:	3b01      	subs	r3, #1
 800655c:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800655e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006566:	4413      	add	r3, r2
 8006568:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800656c:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800656e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006570:	2b00      	cmp	r3, #0
 8006572:	d005      	beq.n	8006580 <find_volume+0x1cc>
 8006574:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006576:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006578:	f7ff feae 	bl	80062d8 <check_fs>
 800657c:	4603      	mov	r3, r0
 800657e:	e000      	b.n	8006582 <find_volume+0x1ce>
 8006580:	2302      	movs	r3, #2
 8006582:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8006586:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800658a:	2b00      	cmp	r3, #0
 800658c:	d005      	beq.n	800659a <find_volume+0x1e6>
 800658e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006590:	3301      	adds	r3, #1
 8006592:	643b      	str	r3, [r7, #64]	; 0x40
 8006594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006596:	2b03      	cmp	r3, #3
 8006598:	d9e1      	bls.n	800655e <find_volume+0x1aa>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800659a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800659e:	2b03      	cmp	r3, #3
 80065a0:	d101      	bne.n	80065a6 <find_volume+0x1f2>
 80065a2:	2301      	movs	r3, #1
 80065a4:	e256      	b.n	8006a54 <find_volume+0x6a0>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80065a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <find_volume+0x1fe>
 80065ae:	230d      	movs	r3, #13
 80065b0:	e250      	b.n	8006a54 <find_volume+0x6a0>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80065b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b4:	7b1b      	ldrb	r3, [r3, #12]
 80065b6:	021b      	lsls	r3, r3, #8
 80065b8:	b21a      	sxth	r2, r3
 80065ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065bc:	7adb      	ldrb	r3, [r3, #11]
 80065be:	b21b      	sxth	r3, r3
 80065c0:	4313      	orrs	r3, r2
 80065c2:	b21b      	sxth	r3, r3
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065cc:	330a      	adds	r3, #10
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d001      	beq.n	80065d8 <find_volume+0x224>
		return FR_NO_FILESYSTEM;
 80065d4:	230d      	movs	r3, #13
 80065d6:	e23d      	b.n	8006a54 <find_volume+0x6a0>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80065d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065da:	7ddb      	ldrb	r3, [r3, #23]
 80065dc:	021b      	lsls	r3, r3, #8
 80065de:	b21a      	sxth	r2, r3
 80065e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e2:	7d9b      	ldrb	r3, [r3, #22]
 80065e4:	b21b      	sxth	r3, r3
 80065e6:	4313      	orrs	r3, r2
 80065e8:	b21b      	sxth	r3, r3
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80065ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d112      	bne.n	800661a <find_volume+0x266>
 80065f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80065fa:	061a      	lsls	r2, r3, #24
 80065fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fe:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006602:	041b      	lsls	r3, r3, #16
 8006604:	4313      	orrs	r3, r2
 8006606:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006608:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800660c:	0212      	lsls	r2, r2, #8
 800660e:	4313      	orrs	r3, r2
 8006610:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006612:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8006616:	4313      	orrs	r3, r2
 8006618:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800661a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006620:	3318      	adds	r3, #24
 8006622:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006624:	601a      	str	r2, [r3, #0]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8006626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006628:	7c1a      	ldrb	r2, [r3, #16]
 800662a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006630:	3303      	adds	r3, #3
 8006632:	701a      	strb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8006634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800663a:	3303      	adds	r3, #3
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d008      	beq.n	8006654 <find_volume+0x2a0>
 8006642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006648:	3303      	adds	r3, #3
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	2b02      	cmp	r3, #2
 800664e:	d001      	beq.n	8006654 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8006650:	230d      	movs	r3, #13
 8006652:	e1ff      	b.n	8006a54 <find_volume+0x6a0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8006654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800665a:	3303      	adds	r3, #3
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	461a      	mov	r2, r3
 8006660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006662:	fb02 f303 	mul.w	r3, r2, r3
 8006666:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8006668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666a:	7b5a      	ldrb	r2, [r3, #13]
 800666c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006672:	3302      	adds	r3, #2
 8006674:	701a      	strb	r2, [r3, #0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8006676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800667c:	3302      	adds	r3, #2
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00e      	beq.n	80066a2 <find_volume+0x2ee>
 8006684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800668a:	3302      	adds	r3, #2
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	461a      	mov	r2, r3
 8006690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006696:	3302      	adds	r3, #2
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	3b01      	subs	r3, #1
 800669c:	4013      	ands	r3, r2
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d004      	beq.n	80066ac <find_volume+0x2f8>
		return FR_NO_FILESYSTEM;
 80066a2:	230d      	movs	r3, #13
 80066a4:	e1d6      	b.n	8006a54 <find_volume+0x6a0>
 80066a6:	bf00      	nop
 80066a8:	200000ac 	.word	0x200000ac

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80066ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ae:	7c9b      	ldrb	r3, [r3, #18]
 80066b0:	021b      	lsls	r3, r3, #8
 80066b2:	b21a      	sxth	r2, r3
 80066b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b6:	7c5b      	ldrb	r3, [r3, #17]
 80066b8:	b21b      	sxth	r3, r3
 80066ba:	4313      	orrs	r3, r2
 80066bc:	b21b      	sxth	r3, r3
 80066be:	b29a      	uxth	r2, r3
 80066c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066c6:	3308      	adds	r3, #8
 80066c8:	801a      	strh	r2, [r3, #0]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80066ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066d0:	3308      	adds	r3, #8
 80066d2:	881a      	ldrh	r2, [r3, #0]
 80066d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066da:	330a      	adds	r3, #10
 80066dc:	881b      	ldrh	r3, [r3, #0]
 80066de:	095b      	lsrs	r3, r3, #5
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	fbb2 f1f3 	udiv	r1, r2, r3
 80066e6:	fb03 f301 	mul.w	r3, r3, r1
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d001      	beq.n	80066f6 <find_volume+0x342>
		return FR_NO_FILESYSTEM;
 80066f2:	230d      	movs	r3, #13
 80066f4:	e1ae      	b.n	8006a54 <find_volume+0x6a0>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80066f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f8:	7d1b      	ldrb	r3, [r3, #20]
 80066fa:	021b      	lsls	r3, r3, #8
 80066fc:	b21a      	sxth	r2, r3
 80066fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006700:	7cdb      	ldrb	r3, [r3, #19]
 8006702:	b21b      	sxth	r3, r3
 8006704:	4313      	orrs	r3, r2
 8006706:	b21b      	sxth	r3, r3
 8006708:	b29b      	uxth	r3, r3
 800670a:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800670c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800670e:	2b00      	cmp	r3, #0
 8006710:	d112      	bne.n	8006738 <find_volume+0x384>
 8006712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006714:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006718:	061a      	lsls	r2, r3, #24
 800671a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800671c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006720:	041b      	lsls	r3, r3, #16
 8006722:	4313      	orrs	r3, r2
 8006724:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006726:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800672a:	0212      	lsls	r2, r2, #8
 800672c:	4313      	orrs	r3, r2
 800672e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006730:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006734:	4313      	orrs	r3, r2
 8006736:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8006738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673a:	7bdb      	ldrb	r3, [r3, #15]
 800673c:	021b      	lsls	r3, r3, #8
 800673e:	b21a      	sxth	r2, r3
 8006740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006742:	7b9b      	ldrb	r3, [r3, #14]
 8006744:	b21b      	sxth	r3, r3
 8006746:	4313      	orrs	r3, r2
 8006748:	b21b      	sxth	r3, r3
 800674a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800674c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <find_volume+0x3a2>
 8006752:	230d      	movs	r3, #13
 8006754:	e17e      	b.n	8006a54 <find_volume+0x6a0>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8006756:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800675a:	441a      	add	r2, r3
 800675c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006762:	3308      	adds	r3, #8
 8006764:	8819      	ldrh	r1, [r3, #0]
 8006766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800676c:	330a      	adds	r3, #10
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	095b      	lsrs	r3, r3, #5
 8006772:	b29b      	uxth	r3, r3
 8006774:	fbb1 f3f3 	udiv	r3, r1, r3
 8006778:	b29b      	uxth	r3, r3
 800677a:	4413      	add	r3, r2
 800677c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800677e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006782:	429a      	cmp	r2, r3
 8006784:	d201      	bcs.n	800678a <find_volume+0x3d6>
 8006786:	230d      	movs	r3, #13
 8006788:	e164      	b.n	8006a54 <find_volume+0x6a0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800678a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800678c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678e:	1ad2      	subs	r2, r2, r3
 8006790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006796:	3302      	adds	r3, #2
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	fbb2 f3f3 	udiv	r3, r2, r3
 800679e:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d101      	bne.n	80067aa <find_volume+0x3f6>
 80067a6:	230d      	movs	r3, #13
 80067a8:	e154      	b.n	8006a54 <find_volume+0x6a0>
	fmt = FS_FAT12;
 80067aa:	2301      	movs	r3, #1
 80067ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80067b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d902      	bls.n	80067c0 <find_volume+0x40c>
 80067ba:	2302      	movs	r3, #2
 80067bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80067c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d902      	bls.n	80067d0 <find_volume+0x41c>
 80067ca:	2303      	movs	r3, #3
 80067cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	1c9a      	adds	r2, r3, #2
 80067d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067da:	3314      	adds	r3, #20
 80067dc:	601a      	str	r2, [r3, #0]
	fs->volbase = bsect;								/* Volume start sector */
 80067de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067e4:	331c      	adds	r3, #28
 80067e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80067e8:	601a      	str	r2, [r3, #0]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80067ea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80067ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067ee:	441a      	add	r2, r3
 80067f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80067f6:	601a      	str	r2, [r3, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 80067f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80067fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fc:	441a      	add	r2, r3
 80067fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006800:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006804:	3308      	adds	r3, #8
 8006806:	601a      	str	r2, [r3, #0]
	if (fmt == FS_FAT32) {
 8006808:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800680c:	2b03      	cmp	r3, #3
 800680e:	d127      	bne.n	8006860 <find_volume+0x4ac>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8006810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006816:	3308      	adds	r3, #8
 8006818:	881b      	ldrh	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d001      	beq.n	8006822 <find_volume+0x46e>
 800681e:	230d      	movs	r3, #13
 8006820:	e118      	b.n	8006a54 <find_volume+0x6a0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8006822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006824:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006828:	061a      	lsls	r2, r3, #24
 800682a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006830:	041b      	lsls	r3, r3, #16
 8006832:	4313      	orrs	r3, r2
 8006834:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006836:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800683a:	0212      	lsls	r2, r2, #8
 800683c:	4313      	orrs	r3, r2
 800683e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006840:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8006844:	431a      	orrs	r2, r3
 8006846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006848:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800684c:	3304      	adds	r3, #4
 800684e:	601a      	str	r2, [r3, #0]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8006850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006856:	3314      	adds	r3, #20
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	647b      	str	r3, [r7, #68]	; 0x44
 800685e:	e030      	b.n	80068c2 <find_volume+0x50e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8006860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006866:	3308      	adds	r3, #8
 8006868:	881b      	ldrh	r3, [r3, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <find_volume+0x4be>
 800686e:	230d      	movs	r3, #13
 8006870:	e0f0      	b.n	8006a54 <find_volume+0x6a0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8006872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006874:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800687c:	441a      	add	r2, r3
 800687e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006880:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006884:	3304      	adds	r3, #4
 8006886:	601a      	str	r2, [r3, #0]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006888:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800688c:	2b02      	cmp	r3, #2
 800688e:	d106      	bne.n	800689e <find_volume+0x4ea>
 8006890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006896:	3314      	adds	r3, #20
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	005b      	lsls	r3, r3, #1
 800689c:	e010      	b.n	80068c0 <find_volume+0x50c>
 800689e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068a4:	3314      	adds	r3, #20
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	4613      	mov	r3, r2
 80068aa:	005b      	lsls	r3, r3, #1
 80068ac:	4413      	add	r3, r2
 80068ae:	085a      	lsrs	r2, r3, #1
 80068b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068b6:	3314      	adds	r3, #20
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80068c0:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80068c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068c8:	3318      	adds	r3, #24
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068d2:	330a      	adds	r3, #10
 80068d4:	881b      	ldrh	r3, [r3, #0]
 80068d6:	4619      	mov	r1, r3
 80068d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068da:	440b      	add	r3, r1
 80068dc:	1e59      	subs	r1, r3, #1
 80068de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068e4:	330a      	adds	r3, #10
 80068e6:	881b      	ldrh	r3, [r3, #0]
 80068e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d201      	bcs.n	80068f4 <find_volume+0x540>
		return FR_NO_FILESYSTEM;
 80068f0:	230d      	movs	r3, #13
 80068f2:	e0af      	b.n	8006a54 <find_volume+0x6a0>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80068f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068fa:	3310      	adds	r3, #16
 80068fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006900:	601a      	str	r2, [r3, #0]
 8006902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006908:	3310      	adds	r3, #16
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006912:	330c      	adds	r3, #12
 8006914:	601a      	str	r2, [r3, #0]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8006916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800691c:	3305      	adds	r3, #5
 800691e:	2280      	movs	r2, #128	; 0x80
 8006920:	701a      	strb	r2, [r3, #0]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8006922:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006926:	2b03      	cmp	r3, #3
 8006928:	d17d      	bne.n	8006a26 <find_volume+0x672>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800692a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006930:	021b      	lsls	r3, r3, #8
 8006932:	b21a      	sxth	r2, r3
 8006934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006936:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800693a:	b21b      	sxth	r3, r3
 800693c:	4313      	orrs	r3, r2
 800693e:	b21b      	sxth	r3, r3
 8006940:	2b01      	cmp	r3, #1
 8006942:	d170      	bne.n	8006a26 <find_volume+0x672>
		&& move_window(fs, bsect + 1) == FR_OK)
 8006944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006946:	3301      	adds	r3, #1
 8006948:	4619      	mov	r1, r3
 800694a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800694c:	f7fd fee8 	bl	8004720 <move_window>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d167      	bne.n	8006a26 <find_volume+0x672>
	{
		fs->fsi_flag = 0;
 8006956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800695c:	3305      	adds	r3, #5
 800695e:	2200      	movs	r2, #0
 8006960:	701a      	strb	r2, [r3, #0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006964:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8006968:	021b      	lsls	r3, r3, #8
 800696a:	b21a      	sxth	r2, r3
 800696c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696e:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8006972:	b21b      	sxth	r3, r3
 8006974:	4313      	orrs	r3, r2
 8006976:	b21b      	sxth	r3, r3
 8006978:	4a38      	ldr	r2, [pc, #224]	; (8006a5c <find_volume+0x6a8>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d153      	bne.n	8006a26 <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800697e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006980:	78db      	ldrb	r3, [r3, #3]
 8006982:	061a      	lsls	r2, r3, #24
 8006984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006986:	789b      	ldrb	r3, [r3, #2]
 8006988:	041b      	lsls	r3, r3, #16
 800698a:	4313      	orrs	r3, r2
 800698c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800698e:	7852      	ldrb	r2, [r2, #1]
 8006990:	0212      	lsls	r2, r2, #8
 8006992:	4313      	orrs	r3, r2
 8006994:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006996:	7812      	ldrb	r2, [r2, #0]
 8006998:	4313      	orrs	r3, r2
 800699a:	4a31      	ldr	r2, [pc, #196]	; (8006a60 <find_volume+0x6ac>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d142      	bne.n	8006a26 <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80069a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a2:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 80069a6:	061a      	lsls	r2, r3, #24
 80069a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069aa:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 80069ae:	041b      	lsls	r3, r3, #16
 80069b0:	4313      	orrs	r3, r2
 80069b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069b4:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 80069b8:	0212      	lsls	r2, r2, #8
 80069ba:	4313      	orrs	r3, r2
 80069bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069be:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 80069c2:	4313      	orrs	r3, r2
 80069c4:	4a27      	ldr	r2, [pc, #156]	; (8006a64 <find_volume+0x6b0>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d12d      	bne.n	8006a26 <find_volume+0x672>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80069ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069cc:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 80069d0:	061a      	lsls	r2, r3, #24
 80069d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d4:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 80069d8:	041b      	lsls	r3, r3, #16
 80069da:	4313      	orrs	r3, r2
 80069dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069de:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 80069e2:	0212      	lsls	r2, r2, #8
 80069e4:	4313      	orrs	r3, r2
 80069e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069e8:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 80069ec:	431a      	orrs	r2, r3
 80069ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069f4:	3310      	adds	r3, #16
 80069f6:	601a      	str	r2, [r3, #0]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80069f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fa:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 80069fe:	061a      	lsls	r2, r3, #24
 8006a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a02:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8006a06:	041b      	lsls	r3, r3, #16
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a0c:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8006a10:	0212      	lsls	r2, r2, #8
 8006a12:	4313      	orrs	r3, r2
 8006a14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a16:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8006a1a:	431a      	orrs	r2, r3
 8006a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a22:	330c      	adds	r3, #12
 8006a24:	601a      	str	r2, [r3, #0]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8006a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a2c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006a30:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8006a32:	4b0d      	ldr	r3, [pc, #52]	; (8006a68 <find_volume+0x6b4>)
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	3301      	adds	r3, #1
 8006a38:	b29a      	uxth	r2, r3
 8006a3a:	4b0b      	ldr	r3, [pc, #44]	; (8006a68 <find_volume+0x6b4>)
 8006a3c:	801a      	strh	r2, [r3, #0]
 8006a3e:	4b0a      	ldr	r3, [pc, #40]	; (8006a68 <find_volume+0x6b4>)
 8006a40:	881a      	ldrh	r2, [r3, #0]
 8006a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a48:	3306      	adds	r3, #6
 8006a4a:	801a      	strh	r2, [r3, #0]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8006a4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a4e:	f7fd fde5 	bl	800461c <clear_lock>
#endif

	return FR_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3758      	adds	r7, #88	; 0x58
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	ffffaa55 	.word	0xffffaa55
 8006a60:	41615252 	.word	0x41615252
 8006a64:	61417272 	.word	0x61417272
 8006a68:	200000b0 	.word	0x200000b0

08006a6c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d02d      	beq.n	8006ada <validate+0x6e>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d027      	beq.n	8006ada <validate+0x6e>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d01e      	beq.n	8006ada <validate+0x6e>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aa8:	3306      	adds	r3, #6
 8006aaa:	881a      	ldrh	r2, [r3, #0]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ab2:	3304      	adds	r3, #4
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d10f      	bne.n	8006ada <validate+0x6e>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7fd faf8 	bl	80040c0 <disk_status>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d001      	beq.n	8006ade <validate+0x72>
		return FR_INVALID_OBJECT;
 8006ada:	2309      	movs	r3, #9
 8006adc:	e000      	b.n	8006ae0 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b088      	sub	sp, #32
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	4613      	mov	r3, r2
 8006af4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8006afa:	f107 0310 	add.w	r3, r7, #16
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7ff fba7 	bl	8006252 <get_ldnumber>
 8006b04:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	da01      	bge.n	8006b10 <f_mount+0x28>
 8006b0c:	230b      	movs	r3, #11
 8006b0e:	e02f      	b.n	8006b70 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006b10:	4a19      	ldr	r2, [pc, #100]	; (8006b78 <f_mount+0x90>)
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b18:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d007      	beq.n	8006b30 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8006b20:	69b8      	ldr	r0, [r7, #24]
 8006b22:	f7fd fd7b 	bl	800461c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d004      	beq.n	8006b40 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	490d      	ldr	r1, [pc, #52]	; (8006b78 <f_mount+0x90>)
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d002      	beq.n	8006b56 <f_mount+0x6e>
 8006b50:	79fb      	ldrb	r3, [r7, #7]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d001      	beq.n	8006b5a <f_mount+0x72>
 8006b56:	2300      	movs	r3, #0
 8006b58:	e00a      	b.n	8006b70 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8006b5a:	f107 0108 	add.w	r1, r7, #8
 8006b5e:	f107 030c 	add.w	r3, r7, #12
 8006b62:	2200      	movs	r2, #0
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7ff fc25 	bl	80063b4 <find_volume>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3720      	adds	r7, #32
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	200000ac 	.word	0x200000ac

08006b7c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8006b82:	b086      	sub	sp, #24
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	f107 0318 	add.w	r3, r7, #24
 8006b8a:	3b0c      	subs	r3, #12
 8006b8c:	6018      	str	r0, [r3, #0]
 8006b8e:	f107 0318 	add.w	r3, r7, #24
 8006b92:	3b10      	subs	r3, #16
 8006b94:	6019      	str	r1, [r3, #0]
 8006b96:	f107 0318 	add.w	r3, r7, #24
 8006b9a:	3b11      	subs	r3, #17
 8006b9c:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8006b9e:	f107 0318 	add.w	r3, r7, #24
 8006ba2:	3b0c      	subs	r3, #12
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d101      	bne.n	8006bae <f_open+0x32>
 8006baa:	2309      	movs	r3, #9
 8006bac:	e319      	b.n	80071e2 <f_open+0x666>
	fp->fs = 0;			/* Clear file object */
 8006bae:	f107 0318 	add.w	r3, r7, #24
 8006bb2:	3b0c      	subs	r3, #12
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bba:	2200      	movs	r2, #0
 8006bbc:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8006bbe:	f107 0318 	add.w	r3, r7, #24
 8006bc2:	3b11      	subs	r3, #17
 8006bc4:	f107 0218 	add.w	r2, r7, #24
 8006bc8:	3a11      	subs	r2, #17
 8006bca:	7812      	ldrb	r2, [r2, #0]
 8006bcc:	f002 021f 	and.w	r2, r2, #31
 8006bd0:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8006bd2:	f107 0318 	add.w	r3, r7, #24
 8006bd6:	3b11      	subs	r3, #17
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	f023 0301 	bic.w	r3, r3, #1
 8006bde:	b2da      	uxtb	r2, r3
 8006be0:	f107 0118 	add.w	r1, r7, #24
 8006be4:	3910      	subs	r1, #16
 8006be6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006bea:	3b18      	subs	r3, #24
 8006bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7ff fbdf 	bl	80063b4 <find_volume>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006bfc:	f102 0217 	add.w	r2, r2, #23
 8006c00:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8006c02:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006c06:	f103 0317 	add.w	r3, r3, #23
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	f040 82e3 	bne.w	80071d8 <f_open+0x65c>
		INIT_BUF(dj);
 8006c12:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006c16:	3b18      	subs	r3, #24
 8006c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c1c:	3318      	adds	r3, #24
 8006c1e:	f107 0218 	add.w	r2, r7, #24
 8006c22:	3a04      	subs	r2, #4
 8006c24:	601a      	str	r2, [r3, #0]
 8006c26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006c2a:	3b18      	subs	r3, #24
 8006c2c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006c30:	4ad1      	ldr	r2, [pc, #836]	; (8006f78 <f_open+0x3fc>)
 8006c32:	601a      	str	r2, [r3, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 8006c34:	f107 0318 	add.w	r3, r7, #24
 8006c38:	3b10      	subs	r3, #16
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006c40:	3b18      	subs	r3, #24
 8006c42:	4611      	mov	r1, r2
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7ff fa8b 	bl	8006160 <follow_path>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006c50:	f102 0217 	add.w	r2, r2, #23
 8006c54:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8006c56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006c5a:	3b18      	subs	r3, #24
 8006c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c60:	3314      	adds	r3, #20
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006c68:	f102 0210 	add.w	r2, r2, #16
 8006c6c:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006c6e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006c72:	f103 0317 	add.w	r3, r3, #23
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d126      	bne.n	8006cca <f_open+0x14e>
			if (!dir)	/* Default directory itself */
 8006c7c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006c80:	f103 0310 	add.w	r3, r3, #16
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d106      	bne.n	8006c98 <f_open+0x11c>
				res = FR_INVALID_NAME;
 8006c8a:	2306      	movs	r3, #6
 8006c8c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006c90:	f102 0217 	add.w	r2, r2, #23
 8006c94:	7013      	strb	r3, [r2, #0]
 8006c96:	e018      	b.n	8006cca <f_open+0x14e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006c98:	f107 0318 	add.w	r3, r7, #24
 8006c9c:	3b11      	subs	r3, #17
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	f023 0301 	bic.w	r3, r3, #1
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	bf14      	ite	ne
 8006ca8:	2301      	movne	r3, #1
 8006caa:	2300      	moveq	r3, #0
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	461a      	mov	r2, r3
 8006cb0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006cb4:	3b18      	subs	r3, #24
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7fd fb15 	bl	80042e8 <chk_lock>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006cc4:	f102 0217 	add.w	r2, r2, #23
 8006cc8:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006cca:	f107 0318 	add.w	r3, r7, #24
 8006cce:	3b11      	subs	r3, #17
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	f003 031c 	and.w	r3, r3, #28
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f000 8150 	beq.w	8006f7c <f_open+0x400>
			if (res != FR_OK) {					/* No file, create new */
 8006cdc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006ce0:	f103 0317 	add.w	r3, r3, #23
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d030      	beq.n	8006d4c <f_open+0x1d0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8006cea:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006cee:	f103 0317 	add.w	r3, r3, #23
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	2b04      	cmp	r3, #4
 8006cf6:	d112      	bne.n	8006d1e <f_open+0x1a2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006cf8:	f7fd fb68 	bl	80043cc <enq_lock>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d007      	beq.n	8006d12 <f_open+0x196>
 8006d02:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006d06:	3b18      	subs	r3, #24
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7fe ff37 	bl	8005b7c <dir_register>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	e000      	b.n	8006d14 <f_open+0x198>
 8006d12:	2312      	movs	r3, #18
 8006d14:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006d18:	f102 0217 	add.w	r2, r2, #23
 8006d1c:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006d1e:	f107 0318 	add.w	r3, r7, #24
 8006d22:	3b11      	subs	r3, #17
 8006d24:	f107 0218 	add.w	r2, r7, #24
 8006d28:	3a11      	subs	r2, #17
 8006d2a:	7812      	ldrb	r2, [r2, #0]
 8006d2c:	f042 0208 	orr.w	r2, r2, #8
 8006d30:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8006d32:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006d36:	3b18      	subs	r3, #24
 8006d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d3c:	3314      	adds	r3, #20
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006d44:	f102 0210 	add.w	r2, r2, #16
 8006d48:	6013      	str	r3, [r2, #0]
 8006d4a:	e01f      	b.n	8006d8c <f_open+0x210>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006d4c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006d50:	f103 0310 	add.w	r3, r3, #16
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	330b      	adds	r3, #11
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	f003 0311 	and.w	r3, r3, #17
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d006      	beq.n	8006d70 <f_open+0x1f4>
					res = FR_DENIED;
 8006d62:	2307      	movs	r3, #7
 8006d64:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006d68:	f102 0217 	add.w	r2, r2, #23
 8006d6c:	7013      	strb	r3, [r2, #0]
 8006d6e:	e00d      	b.n	8006d8c <f_open+0x210>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8006d70:	f107 0318 	add.w	r3, r7, #24
 8006d74:	3b11      	subs	r3, #17
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	f003 0304 	and.w	r3, r3, #4
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d005      	beq.n	8006d8c <f_open+0x210>
						res = FR_EXIST;
 8006d80:	2308      	movs	r3, #8
 8006d82:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006d86:	f102 0217 	add.w	r2, r2, #23
 8006d8a:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006d8c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006d90:	f103 0317 	add.w	r3, r3, #23
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f040 8122 	bne.w	8006fe0 <f_open+0x464>
 8006d9c:	f107 0318 	add.w	r3, r7, #24
 8006da0:	3b11      	subs	r3, #17
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	f003 0308 	and.w	r3, r3, #8
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f000 8119 	beq.w	8006fe0 <f_open+0x464>
				dw = GET_FATTIME();				/* Created time */
 8006dae:	f7fd f925 	bl	8003ffc <get_fattime>
 8006db2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006db6:	f103 030c 	add.w	r3, r3, #12
 8006dba:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8006dbc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006dc0:	f103 0310 	add.w	r3, r3, #16
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	330e      	adds	r3, #14
 8006dc8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006dcc:	f102 020c 	add.w	r2, r2, #12
 8006dd0:	6812      	ldr	r2, [r2, #0]
 8006dd2:	b2d2      	uxtb	r2, r2
 8006dd4:	701a      	strb	r2, [r3, #0]
 8006dd6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006dda:	f103 030c 	add.w	r3, r3, #12
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	0a1b      	lsrs	r3, r3, #8
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006dea:	f103 0310 	add.w	r3, r3, #16
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	330f      	adds	r3, #15
 8006df2:	b2d2      	uxtb	r2, r2
 8006df4:	701a      	strb	r2, [r3, #0]
 8006df6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006dfa:	f103 030c 	add.w	r3, r3, #12
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	0c1a      	lsrs	r2, r3, #16
 8006e02:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006e06:	f103 0310 	add.w	r3, r3, #16
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	3310      	adds	r3, #16
 8006e0e:	b2d2      	uxtb	r2, r2
 8006e10:	701a      	strb	r2, [r3, #0]
 8006e12:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006e16:	f103 030c 	add.w	r3, r3, #12
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	0e1a      	lsrs	r2, r3, #24
 8006e1e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006e22:	f103 0310 	add.w	r3, r3, #16
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	3311      	adds	r3, #17
 8006e2a:	b2d2      	uxtb	r2, r2
 8006e2c:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8006e2e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006e32:	f103 0310 	add.w	r3, r3, #16
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	330b      	adds	r3, #11
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8006e3e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006e42:	f103 0310 	add.w	r3, r3, #16
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	331c      	adds	r3, #28
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	701a      	strb	r2, [r3, #0]
 8006e4e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006e52:	f103 0310 	add.w	r3, r3, #16
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	331d      	adds	r3, #29
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	701a      	strb	r2, [r3, #0]
 8006e5e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006e62:	f103 0310 	add.w	r3, r3, #16
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	331e      	adds	r3, #30
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	701a      	strb	r2, [r3, #0]
 8006e6e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006e72:	f103 0310 	add.w	r3, r3, #16
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	331f      	adds	r3, #31
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8006e7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006e82:	3b18      	subs	r3, #24
 8006e84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006e8e:	f102 0210 	add.w	r2, r2, #16
 8006e92:	6811      	ldr	r1, [r2, #0]
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7fe fbb6 	bl	8005606 <ld_clust>
 8006e9a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006e9e:	f103 0308 	add.w	r3, r3, #8
 8006ea2:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006eaa:	f103 0310 	add.w	r3, r3, #16
 8006eae:	6818      	ldr	r0, [r3, #0]
 8006eb0:	f7fe fbd7 	bl	8005662 <st_clust>
				dj.fs->wflag = 1;
 8006eb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006eb8:	3b18      	subs	r3, #24
 8006eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	701a      	strb	r2, [r3, #0]
				if (cl) {						/* Remove the cluster chain if exist */
 8006eca:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006ece:	f103 0308 	add.w	r3, r3, #8
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 8083 	beq.w	8006fe0 <f_open+0x464>
					dw = dj.fs->winsect;
 8006eda:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006ede:	3b18      	subs	r3, #24
 8006ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006eea:	330c      	adds	r3, #12
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006ef2:	f102 020c 	add.w	r2, r2, #12
 8006ef6:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8006ef8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006efc:	3b18      	subs	r3, #24
 8006efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006f08:	f102 0208 	add.w	r2, r2, #8
 8006f0c:	6811      	ldr	r1, [r2, #0]
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fd ff8f 	bl	8004e32 <remove_chain>
 8006f14:	4603      	mov	r3, r0
 8006f16:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006f1a:	f102 0217 	add.w	r2, r2, #23
 8006f1e:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8006f20:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006f24:	f103 0317 	add.w	r3, r3, #23
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d158      	bne.n	8006fe0 <f_open+0x464>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8006f2e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006f32:	3b18      	subs	r3, #24
 8006f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006f3e:	f102 0208 	add.w	r2, r2, #8
 8006f42:	6812      	ldr	r2, [r2, #0]
 8006f44:	3a01      	subs	r2, #1
 8006f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f4a:	330c      	adds	r3, #12
 8006f4c:	601a      	str	r2, [r3, #0]
						res = move_window(dj.fs, dw);
 8006f4e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006f52:	3b18      	subs	r3, #24
 8006f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006f5e:	f102 020c 	add.w	r2, r2, #12
 8006f62:	6811      	ldr	r1, [r2, #0]
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7fd fbdb 	bl	8004720 <move_window>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006f70:	f102 0217 	add.w	r2, r2, #23
 8006f74:	7013      	strb	r3, [r2, #0]
 8006f76:	e033      	b.n	8006fe0 <f_open+0x464>
 8006f78:	200000cc 	.word	0x200000cc
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8006f7c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006f80:	f103 0317 	add.w	r3, r3, #23
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d12a      	bne.n	8006fe0 <f_open+0x464>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8006f8a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006f8e:	f103 0310 	add.w	r3, r3, #16
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	330b      	adds	r3, #11
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	f003 0310 	and.w	r3, r3, #16
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d006      	beq.n	8006fae <f_open+0x432>
					res = FR_NO_FILE;
 8006fa0:	2304      	movs	r3, #4
 8006fa2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006fa6:	f102 0217 	add.w	r2, r2, #23
 8006faa:	7013      	strb	r3, [r2, #0]
 8006fac:	e018      	b.n	8006fe0 <f_open+0x464>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8006fae:	f107 0318 	add.w	r3, r7, #24
 8006fb2:	3b11      	subs	r3, #17
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	f003 0302 	and.w	r3, r3, #2
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d010      	beq.n	8006fe0 <f_open+0x464>
 8006fbe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006fc2:	f103 0310 	add.w	r3, r3, #16
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	330b      	adds	r3, #11
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	f003 0301 	and.w	r3, r3, #1
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d005      	beq.n	8006fe0 <f_open+0x464>
						res = FR_DENIED;
 8006fd4:	2307      	movs	r3, #7
 8006fd6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006fda:	f102 0217 	add.w	r2, r2, #23
 8006fde:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8006fe0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006fe4:	f103 0317 	add.w	r3, r3, #23
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d15b      	bne.n	80070a6 <f_open+0x52a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006fee:	f107 0318 	add.w	r3, r7, #24
 8006ff2:	3b11      	subs	r3, #17
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	f003 0308 	and.w	r3, r3, #8
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d009      	beq.n	8007012 <f_open+0x496>
				mode |= FA__WRITTEN;
 8006ffe:	f107 0318 	add.w	r3, r7, #24
 8007002:	3b11      	subs	r3, #17
 8007004:	f107 0218 	add.w	r2, r7, #24
 8007008:	3a11      	subs	r2, #17
 800700a:	7812      	ldrb	r2, [r2, #0]
 800700c:	f042 0220 	orr.w	r2, r2, #32
 8007010:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8007012:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007016:	3b18      	subs	r3, #24
 8007018:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007022:	330c      	adds	r3, #12
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	f107 0318 	add.w	r3, r7, #24
 800702a:	3b0c      	subs	r3, #12
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007032:	331c      	adds	r3, #28
 8007034:	601a      	str	r2, [r3, #0]
			fp->dir_ptr = dir;
 8007036:	f107 0318 	add.w	r3, r7, #24
 800703a:	3b0c      	subs	r3, #12
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007042:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007046:	f102 0210 	add.w	r2, r2, #16
 800704a:	6812      	ldr	r2, [r2, #0]
 800704c:	601a      	str	r2, [r3, #0]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800704e:	f107 0318 	add.w	r3, r7, #24
 8007052:	3b11      	subs	r3, #17
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	f023 0301 	bic.w	r3, r3, #1
 800705a:	2b00      	cmp	r3, #0
 800705c:	bf14      	ite	ne
 800705e:	2301      	movne	r3, #1
 8007060:	2300      	moveq	r3, #0
 8007062:	b2db      	uxtb	r3, r3
 8007064:	461a      	mov	r2, r3
 8007066:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800706a:	3b18      	subs	r3, #24
 800706c:	4611      	mov	r1, r2
 800706e:	4618      	mov	r0, r3
 8007070:	f7fd f9d0 	bl	8004414 <inc_lock>
 8007074:	4602      	mov	r2, r0
 8007076:	f107 0318 	add.w	r3, r7, #24
 800707a:	3b0c      	subs	r3, #12
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007082:	3308      	adds	r3, #8
 8007084:	601a      	str	r2, [r3, #0]
			if (!fp->lockid) res = FR_INT_ERR;
 8007086:	f107 0318 	add.w	r3, r7, #24
 800708a:	3b0c      	subs	r3, #12
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007092:	3308      	adds	r3, #8
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d105      	bne.n	80070a6 <f_open+0x52a>
 800709a:	2302      	movs	r3, #2
 800709c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80070a0:	f102 0217 	add.w	r2, r2, #23
 80070a4:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80070a6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80070aa:	f103 0317 	add.w	r3, r3, #23
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f040 8091 	bne.w	80071d8 <f_open+0x65c>
			fp->flag = mode;					/* File access mode */
 80070b6:	f107 0318 	add.w	r3, r7, #24
 80070ba:	3b0c      	subs	r3, #12
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070c2:	3306      	adds	r3, #6
 80070c4:	f107 0218 	add.w	r2, r7, #24
 80070c8:	3a11      	subs	r2, #17
 80070ca:	7812      	ldrb	r2, [r2, #0]
 80070cc:	701a      	strb	r2, [r3, #0]
			fp->err = 0;						/* Clear error flag */
 80070ce:	f107 0318 	add.w	r3, r7, #24
 80070d2:	3b0c      	subs	r3, #12
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070da:	3307      	adds	r3, #7
 80070dc:	2200      	movs	r2, #0
 80070de:	701a      	strb	r2, [r3, #0]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80070e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80070e4:	3b18      	subs	r3, #24
 80070e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80070f0:	f102 0210 	add.w	r2, r2, #16
 80070f4:	6811      	ldr	r1, [r2, #0]
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7fe fa85 	bl	8005606 <ld_clust>
 80070fc:	4602      	mov	r2, r0
 80070fe:	f107 0318 	add.w	r3, r7, #24
 8007102:	3b0c      	subs	r3, #12
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800710a:	3310      	adds	r3, #16
 800710c:	601a      	str	r2, [r3, #0]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800710e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007112:	f103 0310 	add.w	r3, r3, #16
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	331f      	adds	r3, #31
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	061a      	lsls	r2, r3, #24
 800711e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007122:	f103 0310 	add.w	r3, r3, #16
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	331e      	adds	r3, #30
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	041b      	lsls	r3, r3, #16
 800712e:	4313      	orrs	r3, r2
 8007130:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007134:	f102 0210 	add.w	r2, r2, #16
 8007138:	6812      	ldr	r2, [r2, #0]
 800713a:	321d      	adds	r2, #29
 800713c:	7812      	ldrb	r2, [r2, #0]
 800713e:	0212      	lsls	r2, r2, #8
 8007140:	4313      	orrs	r3, r2
 8007142:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007146:	f102 0210 	add.w	r2, r2, #16
 800714a:	6812      	ldr	r2, [r2, #0]
 800714c:	321c      	adds	r2, #28
 800714e:	7812      	ldrb	r2, [r2, #0]
 8007150:	431a      	orrs	r2, r3
 8007152:	f107 0318 	add.w	r3, r7, #24
 8007156:	3b0c      	subs	r3, #12
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800715e:	330c      	adds	r3, #12
 8007160:	601a      	str	r2, [r3, #0]
			fp->fptr = 0;						/* File pointer */
 8007162:	f107 0318 	add.w	r3, r7, #24
 8007166:	3b0c      	subs	r3, #12
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800716e:	3308      	adds	r3, #8
 8007170:	2200      	movs	r2, #0
 8007172:	601a      	str	r2, [r3, #0]
			fp->dsect = 0;
 8007174:	f107 0318 	add.w	r3, r7, #24
 8007178:	3b0c      	subs	r3, #12
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007180:	3318      	adds	r3, #24
 8007182:	2200      	movs	r2, #0
 8007184:	601a      	str	r2, [r3, #0]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8007186:	f107 0318 	add.w	r3, r7, #24
 800718a:	3b0c      	subs	r3, #12
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007192:	3304      	adds	r3, #4
 8007194:	2200      	movs	r2, #0
 8007196:	601a      	str	r2, [r3, #0]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8007198:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800719c:	3b18      	subs	r3, #24
 800719e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	f107 0318 	add.w	r3, r7, #24
 80071a8:	3b0c      	subs	r3, #12
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071b0:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 80071b2:	f107 0318 	add.w	r3, r7, #24
 80071b6:	3b0c      	subs	r3, #12
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071c4:	3306      	adds	r3, #6
 80071c6:	881a      	ldrh	r2, [r3, #0]
 80071c8:	f107 0318 	add.w	r3, r7, #24
 80071cc:	3b0c      	subs	r3, #12
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071d4:	3304      	adds	r3, #4
 80071d6:	801a      	strh	r2, [r3, #0]
		}
	}

	LEAVE_FF(dj.fs, res);
 80071d8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80071dc:	f103 0317 	add.w	r3, r3, #23
 80071e0:	781b      	ldrb	r3, [r3, #0]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 80071e8:	3718      	adds	r7, #24
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop

080071f0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b08a      	sub	sp, #40	; 0x28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
 80071fc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	2200      	movs	r2, #0
 8007206:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f7ff fc2f 	bl	8006a6c <validate>
 800720e:	4603      	mov	r3, r0
 8007210:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007212:	7dfb      	ldrb	r3, [r7, #23]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d001      	beq.n	800721c <f_write+0x2c>
 8007218:	7dfb      	ldrb	r3, [r7, #23]
 800721a:	e258      	b.n	80076ce <f_write+0x4de>
	if (fp->err)							/* Check error */
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007222:	3307      	adds	r3, #7
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d005      	beq.n	8007236 <f_write+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007230:	3307      	adds	r3, #7
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	e24b      	b.n	80076ce <f_write+0x4de>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800723c:	3306      	adds	r3, #6
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	f003 0302 	and.w	r3, r3, #2
 8007244:	2b00      	cmp	r3, #0
 8007246:	d101      	bne.n	800724c <f_write+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 8007248:	2307      	movs	r3, #7
 800724a:	e240      	b.n	80076ce <f_write+0x4de>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007252:	3308      	adds	r3, #8
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	441a      	add	r2, r3
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007260:	3308      	adds	r3, #8
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	429a      	cmp	r2, r3
 8007266:	f080 8208 	bcs.w	800767a <f_write+0x48a>
 800726a:	2300      	movs	r3, #0
 800726c:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800726e:	e204      	b.n	800767a <f_write+0x48a>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007276:	3308      	adds	r3, #8
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007286:	330a      	adds	r3, #10
 8007288:	881b      	ldrh	r3, [r3, #0]
 800728a:	fbb2 f1f3 	udiv	r1, r2, r3
 800728e:	fb03 f301 	mul.w	r3, r3, r1
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	2b00      	cmp	r3, #0
 8007296:	f040 818d 	bne.w	80075b4 <f_write+0x3c4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072a0:	3308      	adds	r3, #8
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072b0:	330a      	adds	r3, #10
 80072b2:	881b      	ldrh	r3, [r3, #0]
 80072b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072c6:	3302      	adds	r3, #2
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	3b01      	subs	r3, #1
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	4013      	ands	r3, r2
 80072d0:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 80072d2:	7dbb      	ldrb	r3, [r7, #22]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d167      	bne.n	80073a8 <f_write+0x1b8>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072de:	3308      	adds	r3, #8
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d112      	bne.n	800730c <f_write+0x11c>
					clst = fp->sclust;		/* Follow from the origin */
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072ec:	3310      	adds	r3, #16
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 80072f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d129      	bne.n	800734c <f_write+0x15c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2100      	movs	r1, #0
 8007302:	4618      	mov	r0, r3
 8007304:	f7fd fdfd 	bl	8004f02 <create_chain>
 8007308:	6278      	str	r0, [r7, #36]	; 0x24
 800730a:	e01f      	b.n	800734c <f_write+0x15c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007312:	3304      	adds	r3, #4
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00a      	beq.n	8007330 <f_write+0x140>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007320:	3308      	adds	r3, #8
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4619      	mov	r1, r3
 8007326:	68f8      	ldr	r0, [r7, #12]
 8007328:	f7fd fe9c 	bl	8005064 <clmt_clust>
 800732c:	6278      	str	r0, [r7, #36]	; 0x24
 800732e:	e00d      	b.n	800734c <f_write+0x15c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800733e:	3314      	adds	r3, #20
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4619      	mov	r1, r3
 8007344:	4610      	mov	r0, r2
 8007346:	f7fd fddc 	bl	8004f02 <create_chain>
 800734a:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800734c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734e:	2b00      	cmp	r3, #0
 8007350:	f000 8198 	beq.w	8007684 <f_write+0x494>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8007354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007356:	2b01      	cmp	r3, #1
 8007358:	d107      	bne.n	800736a <f_write+0x17a>
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007360:	3307      	adds	r3, #7
 8007362:	2202      	movs	r2, #2
 8007364:	701a      	strb	r2, [r3, #0]
 8007366:	2302      	movs	r3, #2
 8007368:	e1b1      	b.n	80076ce <f_write+0x4de>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007370:	d107      	bne.n	8007382 <f_write+0x192>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007378:	3307      	adds	r3, #7
 800737a:	2201      	movs	r2, #1
 800737c:	701a      	strb	r2, [r3, #0]
 800737e:	2301      	movs	r3, #1
 8007380:	e1a5      	b.n	80076ce <f_write+0x4de>
				fp->clust = clst;			/* Update current cluster */
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007388:	3314      	adds	r3, #20
 800738a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800738c:	601a      	str	r2, [r3, #0]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007394:	3310      	adds	r3, #16
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d105      	bne.n	80073a8 <f_write+0x1b8>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073a2:	3310      	adds	r3, #16
 80073a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073a6:	601a      	str	r2, [r3, #0]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073ae:	3306      	adds	r3, #6
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d028      	beq.n	800740c <f_write+0x21c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073c6:	3301      	adds	r3, #1
 80073c8:	7818      	ldrb	r0, [r3, #0]
 80073ca:	68f9      	ldr	r1, [r7, #12]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073d2:	3318      	adds	r3, #24
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	2301      	movs	r3, #1
 80073d8:	f7fc fed2 	bl	8004180 <disk_write>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d007      	beq.n	80073f2 <f_write+0x202>
					ABORT(fp->fs, FR_DISK_ERR);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073e8:	3307      	adds	r3, #7
 80073ea:	2201      	movs	r2, #1
 80073ec:	701a      	strb	r2, [r3, #0]
 80073ee:	2301      	movs	r3, #1
 80073f0:	e16d      	b.n	80076ce <f_write+0x4de>
				fp->flag &= ~FA__DIRTY;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073f8:	3306      	adds	r3, #6
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007400:	b2da      	uxtb	r2, r3
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007408:	3306      	adds	r3, #6
 800740a:	701a      	strb	r2, [r3, #0]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800741a:	3314      	adds	r3, #20
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4619      	mov	r1, r3
 8007420:	4610      	mov	r0, r2
 8007422:	f7fd fa80 	bl	8004926 <clust2sect>
 8007426:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d107      	bne.n	800743e <f_write+0x24e>
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007434:	3307      	adds	r3, #7
 8007436:	2202      	movs	r2, #2
 8007438:	701a      	strb	r2, [r3, #0]
 800743a:	2302      	movs	r3, #2
 800743c:	e147      	b.n	80076ce <f_write+0x4de>
			sect += csect;
 800743e:	7dbb      	ldrb	r3, [r7, #22]
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	4413      	add	r3, r2
 8007444:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007452:	330a      	adds	r3, #10
 8007454:	881b      	ldrh	r3, [r3, #0]
 8007456:	461a      	mov	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	fbb3 f3f2 	udiv	r3, r3, r2
 800745e:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d074      	beq.n	8007550 <f_write+0x360>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007466:	7dba      	ldrb	r2, [r7, #22]
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	441a      	add	r2, r3
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007478:	3302      	adds	r3, #2
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	429a      	cmp	r2, r3
 800747e:	d90b      	bls.n	8007498 <f_write+0x2a8>
					cc = fp->fs->csize - csect;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800748c:	3302      	adds	r3, #2
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	461a      	mov	r2, r3
 8007492:	7dbb      	ldrb	r3, [r7, #22]
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074a4:	3301      	adds	r3, #1
 80074a6:	7818      	ldrb	r0, [r3, #0]
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	693a      	ldr	r2, [r7, #16]
 80074ac:	69b9      	ldr	r1, [r7, #24]
 80074ae:	f7fc fe67 	bl	8004180 <disk_write>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d007      	beq.n	80074c8 <f_write+0x2d8>
					ABORT(fp->fs, FR_DISK_ERR);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074be:	3307      	adds	r3, #7
 80074c0:	2201      	movs	r2, #1
 80074c2:	701a      	strb	r2, [r3, #0]
 80074c4:	2301      	movs	r3, #1
 80074c6:	e102      	b.n	80076ce <f_write+0x4de>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074ce:	3318      	adds	r3, #24
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	69fa      	ldr	r2, [r7, #28]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d92b      	bls.n	8007534 <f_write+0x344>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074e4:	3318      	adds	r3, #24
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	1ad2      	subs	r2, r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074f8:	330a      	adds	r3, #10
 80074fa:	881b      	ldrh	r3, [r3, #0]
 80074fc:	fb03 f302 	mul.w	r3, r3, r2
 8007500:	69ba      	ldr	r2, [r7, #24]
 8007502:	18d1      	adds	r1, r2, r3
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007510:	330a      	adds	r3, #10
 8007512:	881b      	ldrh	r3, [r3, #0]
 8007514:	461a      	mov	r2, r3
 8007516:	f7fc fe71 	bl	80041fc <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007520:	3306      	adds	r3, #6
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007528:	b2da      	uxtb	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007530:	3306      	adds	r3, #6
 8007532:	701a      	strb	r2, [r3, #0]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007540:	330a      	adds	r3, #10
 8007542:	881b      	ldrh	r3, [r3, #0]
 8007544:	461a      	mov	r2, r3
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	fb02 f303 	mul.w	r3, r2, r3
 800754c:	623b      	str	r3, [r7, #32]
				continue;
 800754e:	e07a      	b.n	8007646 <f_write+0x456>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007556:	3318      	adds	r3, #24
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	693a      	ldr	r2, [r7, #16]
 800755c:	429a      	cmp	r2, r3
 800755e:	d023      	beq.n	80075a8 <f_write+0x3b8>
				if (fp->fptr < fp->fsize &&
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007566:	3308      	adds	r3, #8
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007570:	330c      	adds	r3, #12
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	429a      	cmp	r2, r3
 8007576:	d217      	bcs.n	80075a8 <f_write+0x3b8>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007584:	3301      	adds	r3, #1
 8007586:	7818      	ldrb	r0, [r3, #0]
 8007588:	68f9      	ldr	r1, [r7, #12]
 800758a:	2301      	movs	r3, #1
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	f7fc fdd7 	bl	8004140 <disk_read>
 8007592:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8007594:	2b00      	cmp	r3, #0
 8007596:	d007      	beq.n	80075a8 <f_write+0x3b8>
						ABORT(fp->fs, FR_DISK_ERR);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800759e:	3307      	adds	r3, #7
 80075a0:	2201      	movs	r2, #1
 80075a2:	701a      	strb	r2, [r3, #0]
 80075a4:	2301      	movs	r3, #1
 80075a6:	e092      	b.n	80076ce <f_write+0x4de>
			}
#endif
			fp->dsect = sect;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ae:	3318      	adds	r3, #24
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	601a      	str	r2, [r3, #0]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075c0:	330a      	adds	r3, #10
 80075c2:	881b      	ldrh	r3, [r3, #0]
 80075c4:	4618      	mov	r0, r3
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075cc:	3308      	adds	r3, #8
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075dc:	330a      	adds	r3, #10
 80075de:	881b      	ldrh	r3, [r3, #0]
 80075e0:	fbb2 f1f3 	udiv	r1, r2, r3
 80075e4:	fb03 f301 	mul.w	r3, r3, r1
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	1ac3      	subs	r3, r0, r3
 80075ec:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 80075ee:	6a3a      	ldr	r2, [r7, #32]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d901      	bls.n	80075fa <f_write+0x40a>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007600:	3308      	adds	r3, #8
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007610:	330a      	adds	r3, #10
 8007612:	881b      	ldrh	r3, [r3, #0]
 8007614:	fbb2 f1f3 	udiv	r1, r2, r3
 8007618:	fb03 f301 	mul.w	r3, r3, r1
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	4413      	add	r3, r2
 8007622:	6a3a      	ldr	r2, [r7, #32]
 8007624:	69b9      	ldr	r1, [r7, #24]
 8007626:	4618      	mov	r0, r3
 8007628:	f7fc fde8 	bl	80041fc <mem_cpy>
		fp->flag |= FA__DIRTY;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007632:	3306      	adds	r3, #6
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800763a:	b2da      	uxtb	r2, r3
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007642:	3306      	adds	r3, #6
 8007644:	701a      	strb	r2, [r3, #0]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8007646:	69ba      	ldr	r2, [r7, #24]
 8007648:	6a3b      	ldr	r3, [r7, #32]
 800764a:	4413      	add	r3, r2
 800764c:	61bb      	str	r3, [r7, #24]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007654:	3308      	adds	r3, #8
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	6a3b      	ldr	r3, [r7, #32]
 800765a:	441a      	add	r2, r3
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007662:	3308      	adds	r3, #8
 8007664:	601a      	str	r2, [r3, #0]
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	6a3b      	ldr	r3, [r7, #32]
 800766c:	441a      	add	r2, r3
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	601a      	str	r2, [r3, #0]
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	6a3b      	ldr	r3, [r7, #32]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2b00      	cmp	r3, #0
 800767e:	f47f adf7 	bne.w	8007270 <f_write+0x80>
 8007682:	e000      	b.n	8007686 <f_write+0x496>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007684:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800768c:	3308      	adds	r3, #8
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007696:	330c      	adds	r3, #12
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	429a      	cmp	r2, r3
 800769c:	d909      	bls.n	80076b2 <f_write+0x4c2>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076a4:	3308      	adds	r3, #8
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076ae:	330c      	adds	r3, #12
 80076b0:	601a      	str	r2, [r3, #0]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076b8:	3306      	adds	r3, #6
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	f043 0320 	orr.w	r3, r3, #32
 80076c0:	b2da      	uxtb	r2, r3
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076c8:	3306      	adds	r3, #6
 80076ca:	701a      	strb	r2, [r3, #0]

	LEAVE_FF(fp->fs, FR_OK);
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3728      	adds	r7, #40	; 0x28
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b086      	sub	sp, #24
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f7ff f9c4 	bl	8006a6c <validate>
 80076e4:	4603      	mov	r3, r0
 80076e6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80076e8:	7dfb      	ldrb	r3, [r7, #23]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	f040 80cc 	bne.w	8007888 <f_sync+0x1b2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076f6:	3306      	adds	r3, #6
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	f003 0320 	and.w	r3, r3, #32
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f000 80c2 	beq.w	8007888 <f_sync+0x1b2>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800770a:	3306      	adds	r3, #6
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007712:	2b00      	cmp	r3, #0
 8007714:	d022      	beq.n	800775c <f_sync+0x86>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007722:	3301      	adds	r3, #1
 8007724:	7818      	ldrb	r0, [r3, #0]
 8007726:	6879      	ldr	r1, [r7, #4]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800772e:	3318      	adds	r3, #24
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	2301      	movs	r3, #1
 8007734:	f7fc fd24 	bl	8004180 <disk_write>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d001      	beq.n	8007742 <f_sync+0x6c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800773e:	2301      	movs	r3, #1
 8007740:	e0a3      	b.n	800788a <f_sync+0x1b4>
				fp->flag &= ~FA__DIRTY;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007748:	3306      	adds	r3, #6
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007750:	b2da      	uxtb	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007758:	3306      	adds	r3, #6
 800775a:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800776a:	331c      	adds	r3, #28
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4619      	mov	r1, r3
 8007770:	4610      	mov	r0, r2
 8007772:	f7fc ffd5 	bl	8004720 <move_window>
 8007776:	4603      	mov	r3, r0
 8007778:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800777a:	7dfb      	ldrb	r3, [r7, #23]
 800777c:	2b00      	cmp	r3, #0
 800777e:	f040 8083 	bne.w	8007888 <f_sync+0x1b2>
				dir = fp->dir_ptr;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	330b      	adds	r3, #11
 8007790:	781a      	ldrb	r2, [r3, #0]
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	330b      	adds	r3, #11
 8007796:	f042 0220 	orr.w	r2, r2, #32
 800779a:	b2d2      	uxtb	r2, r2
 800779c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077a4:	330c      	adds	r3, #12
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	331c      	adds	r3, #28
 80077ac:	b2d2      	uxtb	r2, r2
 80077ae:	701a      	strb	r2, [r3, #0]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077b6:	330c      	adds	r3, #12
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	0a1b      	lsrs	r3, r3, #8
 80077be:	b29a      	uxth	r2, r3
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	331d      	adds	r3, #29
 80077c4:	b2d2      	uxtb	r2, r2
 80077c6:	701a      	strb	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077ce:	330c      	adds	r3, #12
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	0c1a      	lsrs	r2, r3, #16
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	331e      	adds	r3, #30
 80077d8:	b2d2      	uxtb	r2, r2
 80077da:	701a      	strb	r2, [r3, #0]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077e2:	330c      	adds	r3, #12
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	0e1a      	lsrs	r2, r3, #24
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	331f      	adds	r3, #31
 80077ec:	b2d2      	uxtb	r2, r2
 80077ee:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077f6:	3310      	adds	r3, #16
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4619      	mov	r1, r3
 80077fc:	6938      	ldr	r0, [r7, #16]
 80077fe:	f7fd ff30 	bl	8005662 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8007802:	f7fc fbfb 	bl	8003ffc <get_fattime>
 8007806:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	3316      	adds	r3, #22
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	b2d2      	uxtb	r2, r2
 8007810:	701a      	strb	r2, [r3, #0]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	b29b      	uxth	r3, r3
 8007816:	0a1b      	lsrs	r3, r3, #8
 8007818:	b29a      	uxth	r2, r3
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	3317      	adds	r3, #23
 800781e:	b2d2      	uxtb	r2, r2
 8007820:	701a      	strb	r2, [r3, #0]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	0c1a      	lsrs	r2, r3, #16
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	3318      	adds	r3, #24
 800782a:	b2d2      	uxtb	r2, r2
 800782c:	701a      	strb	r2, [r3, #0]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	0e1a      	lsrs	r2, r3, #24
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	3319      	adds	r3, #25
 8007836:	b2d2      	uxtb	r2, r2
 8007838:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	3312      	adds	r3, #18
 800783e:	2200      	movs	r2, #0
 8007840:	701a      	strb	r2, [r3, #0]
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	3313      	adds	r3, #19
 8007846:	2200      	movs	r2, #0
 8007848:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007850:	3306      	adds	r3, #6
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	f023 0320 	bic.w	r3, r3, #32
 8007858:	b2da      	uxtb	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007860:	3306      	adds	r3, #6
 8007862:	701a      	strb	r2, [r3, #0]
				fp->fs->wflag = 1;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007870:	3304      	adds	r3, #4
 8007872:	2201      	movs	r2, #1
 8007874:	701a      	strb	r2, [r3, #0]
				res = sync_fs(fp->fs);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4618      	mov	r0, r3
 8007880:	f7fc ff82 	bl	8004788 <sync_fs>
 8007884:	4603      	mov	r3, r0
 8007886:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8007888:	7dfb      	ldrb	r3, [r7, #23]
}
 800788a:	4618      	mov	r0, r3
 800788c:	3718      	adds	r7, #24
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b084      	sub	sp, #16
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f7ff ff1b 	bl	80076d6 <f_sync>
 80078a0:	4603      	mov	r3, r0
 80078a2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80078a4:	7bfb      	ldrb	r3, [r7, #15]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d119      	bne.n	80078de <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f7ff f8de 	bl	8006a6c <validate>
 80078b0:	4603      	mov	r3, r0
 80078b2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80078b4:	7bfb      	ldrb	r3, [r7, #15]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d111      	bne.n	80078de <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80078c0:	3308      	adds	r3, #8
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7fc fe65 	bl	8004594 <dec_lock>
 80078ca:	4603      	mov	r3, r0
 80078cc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80078ce:	7bfb      	ldrb	r3, [r7, #15]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d104      	bne.n	80078de <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078da:	2200      	movs	r2, #0
 80078dc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80078de:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b090      	sub	sp, #64	; 0x40
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f7ff f8ba 	bl	8006a6c <validate>
 80078f8:	4603      	mov	r3, r0
 80078fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80078fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007902:	2b00      	cmp	r3, #0
 8007904:	d002      	beq.n	800790c <f_lseek+0x24>
 8007906:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800790a:	e31d      	b.n	8007f48 <f_lseek+0x660>
	if (fp->err)						/* Check error */
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007912:	3307      	adds	r3, #7
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d005      	beq.n	8007926 <f_lseek+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007920:	3307      	adds	r3, #7
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	e310      	b.n	8007f48 <f_lseek+0x660>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800792c:	3304      	adds	r3, #4
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 813c 	beq.w	8007bae <f_lseek+0x2c6>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800793c:	d172      	bne.n	8007a24 <f_lseek+0x13c>
			tbl = fp->cltbl;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007944:	3304      	adds	r3, #4
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800794a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794c:	1d1a      	adds	r2, r3, #4
 800794e:	627a      	str	r2, [r7, #36]	; 0x24
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	617b      	str	r3, [r7, #20]
 8007954:	2302      	movs	r3, #2
 8007956:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800795e:	3310      	adds	r3, #16
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8007964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007966:	2b00      	cmp	r3, #0
 8007968:	d049      	beq.n	80079fe <f_lseek+0x116>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800796a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796c:	613b      	str	r3, [r7, #16]
 800796e:	2300      	movs	r3, #0
 8007970:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007974:	3302      	adds	r3, #2
 8007976:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8007978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797a:	60fb      	str	r3, [r7, #12]
 800797c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797e:	3301      	adds	r3, #1
 8007980:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800798c:	4618      	mov	r0, r3
 800798e:	f7fc fff1 	bl	8004974 <get_fat>
 8007992:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8007994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007996:	2b01      	cmp	r3, #1
 8007998:	d807      	bhi.n	80079aa <f_lseek+0xc2>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079a0:	3307      	adds	r3, #7
 80079a2:	2202      	movs	r2, #2
 80079a4:	701a      	strb	r2, [r3, #0]
 80079a6:	2302      	movs	r3, #2
 80079a8:	e2ce      	b.n	8007f48 <f_lseek+0x660>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80079aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b0:	d107      	bne.n	80079c2 <f_lseek+0xda>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079b8:	3307      	adds	r3, #7
 80079ba:	2201      	movs	r2, #1
 80079bc:	701a      	strb	r2, [r3, #0]
 80079be:	2301      	movs	r3, #1
 80079c0:	e2c2      	b.n	8007f48 <f_lseek+0x660>
					} while (cl == pcl + 1);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	3301      	adds	r3, #1
 80079c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d0d5      	beq.n	8007978 <f_lseek+0x90>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80079cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d809      	bhi.n	80079e8 <f_lseek+0x100>
						*tbl++ = ncl; *tbl++ = tcl;
 80079d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d6:	1d1a      	adds	r2, r3, #4
 80079d8:	627a      	str	r2, [r7, #36]	; 0x24
 80079da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079dc:	601a      	str	r2, [r3, #0]
 80079de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e0:	1d1a      	adds	r2, r3, #4
 80079e2:	627a      	str	r2, [r7, #36]	; 0x24
 80079e4:	693a      	ldr	r2, [r7, #16]
 80079e6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079f4:	3314      	adds	r3, #20
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d3b5      	bcc.n	800796a <f_lseek+0x82>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007a04:	3304      	adds	r3, #4
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a0a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8007a0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d803      	bhi.n	8007a1c <f_lseek+0x134>
				*tbl = 0;		/* Terminate table */
 8007a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a16:	2200      	movs	r2, #0
 8007a18:	601a      	str	r2, [r3, #0]
 8007a1a:	e293      	b.n	8007f44 <f_lseek+0x65c>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007a1c:	2311      	movs	r3, #17
 8007a1e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007a22:	e28f      	b.n	8007f44 <f_lseek+0x65c>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a2a:	330c      	adds	r3, #12
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	683a      	ldr	r2, [r7, #0]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d905      	bls.n	8007a40 <f_lseek+0x158>
				ofs = fp->fsize;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a3a:	330c      	adds	r3, #12
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a46:	3308      	adds	r3, #8
 8007a48:	683a      	ldr	r2, [r7, #0]
 8007a4a:	601a      	str	r2, [r3, #0]
			if (ofs) {
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f000 8278 	beq.w	8007f44 <f_lseek+0x65c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	3b01      	subs	r3, #1
 8007a58:	4619      	mov	r1, r3
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f7fd fb02 	bl	8005064 <clmt_clust>
 8007a60:	4602      	mov	r2, r0
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a68:	3314      	adds	r3, #20
 8007a6a:	601a      	str	r2, [r3, #0]
				dsc = clust2sect(fp->fs, fp->clust);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a7a:	3314      	adds	r3, #20
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4619      	mov	r1, r3
 8007a80:	4610      	mov	r0, r2
 8007a82:	f7fc ff50 	bl	8004926 <clust2sect>
 8007a86:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d107      	bne.n	8007a9e <f_lseek+0x1b6>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a94:	3307      	adds	r3, #7
 8007a96:	2202      	movs	r2, #2
 8007a98:	701a      	strb	r2, [r3, #0]
 8007a9a:	2302      	movs	r3, #2
 8007a9c:	e254      	b.n	8007f48 <f_lseek+0x660>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	1e5a      	subs	r2, r3, #1
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aae:	330a      	adds	r3, #10
 8007ab0:	881b      	ldrh	r3, [r3, #0]
 8007ab2:	fbb2 f2f3 	udiv	r2, r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ac2:	3302      	adds	r3, #2
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	4013      	ands	r3, r2
 8007aca:	69ba      	ldr	r2, [r7, #24]
 8007acc:	4413      	add	r3, r2
 8007ace:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ad6:	3308      	adds	r3, #8
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ae6:	330a      	adds	r3, #10
 8007ae8:	881b      	ldrh	r3, [r3, #0]
 8007aea:	fbb2 f1f3 	udiv	r1, r2, r3
 8007aee:	fb03 f301 	mul.w	r3, r3, r1
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	f000 8225 	beq.w	8007f44 <f_lseek+0x65c>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b00:	3318      	adds	r3, #24
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	69ba      	ldr	r2, [r7, #24]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	f000 821c 	beq.w	8007f44 <f_lseek+0x65c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b12:	3306      	adds	r3, #6
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d028      	beq.n	8007b70 <f_lseek+0x288>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	7818      	ldrb	r0, [r3, #0]
 8007b2e:	6879      	ldr	r1, [r7, #4]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b36:	3318      	adds	r3, #24
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	f7fc fb20 	bl	8004180 <disk_write>
 8007b40:	4603      	mov	r3, r0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d007      	beq.n	8007b56 <f_lseek+0x26e>
							ABORT(fp->fs, FR_DISK_ERR);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b4c:	3307      	adds	r3, #7
 8007b4e:	2201      	movs	r2, #1
 8007b50:	701a      	strb	r2, [r3, #0]
 8007b52:	2301      	movs	r3, #1
 8007b54:	e1f8      	b.n	8007f48 <f_lseek+0x660>
						fp->flag &= ~FA__DIRTY;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b5c:	3306      	adds	r3, #6
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b64:	b2da      	uxtb	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b6c:	3306      	adds	r3, #6
 8007b6e:	701a      	strb	r2, [r3, #0]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	7818      	ldrb	r0, [r3, #0]
 8007b80:	6879      	ldr	r1, [r7, #4]
 8007b82:	2301      	movs	r3, #1
 8007b84:	69ba      	ldr	r2, [r7, #24]
 8007b86:	f7fc fadb 	bl	8004140 <disk_read>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d007      	beq.n	8007ba0 <f_lseek+0x2b8>
						ABORT(fp->fs, FR_DISK_ERR);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b96:	3307      	adds	r3, #7
 8007b98:	2201      	movs	r2, #1
 8007b9a:	701a      	strb	r2, [r3, #0]
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e1d3      	b.n	8007f48 <f_lseek+0x660>
#endif
					fp->dsect = dsc;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ba6:	3318      	adds	r3, #24
 8007ba8:	69ba      	ldr	r2, [r7, #24]
 8007baa:	601a      	str	r2, [r3, #0]
 8007bac:	e1ca      	b.n	8007f44 <f_lseek+0x65c>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bb4:	330c      	adds	r3, #12
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	683a      	ldr	r2, [r7, #0]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d90e      	bls.n	8007bdc <f_lseek+0x2f4>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bc4:	3306      	adds	r3, #6
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	f003 0302 	and.w	r3, r3, #2
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d105      	bne.n	8007bdc <f_lseek+0x2f4>
#endif
			) ofs = fp->fsize;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bd6:	330c      	adds	r3, #12
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007be2:	3308      	adds	r3, #8
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8007be8:	2300      	movs	r3, #0
 8007bea:	637b      	str	r3, [r7, #52]	; 0x34
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bf2:	3308      	adds	r3, #8
 8007bf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bf6:	601a      	str	r2, [r3, #0]
		if (ofs) {
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f000 8113 	beq.w	8007e26 <f_lseek+0x53e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c0c:	3302      	adds	r3, #2
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	461a      	mov	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c1e:	330a      	adds	r3, #10
 8007c20:	881b      	ldrh	r3, [r3, #0]
 8007c22:	fb03 f302 	mul.w	r3, r3, r2
 8007c26:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8007c28:	6a3b      	ldr	r3, [r7, #32]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d024      	beq.n	8007c78 <f_lseek+0x390>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	1e5a      	subs	r2, r3, #1
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c38:	6a3b      	ldr	r3, [r7, #32]
 8007c3a:	1e59      	subs	r1, r3, #1
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d318      	bcc.n	8007c78 <f_lseek+0x390>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8007c46:	6a3b      	ldr	r3, [r7, #32]
 8007c48:	1e5a      	subs	r2, r3, #1
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	425b      	negs	r3, r3
 8007c4e:	401a      	ands	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c56:	3308      	adds	r3, #8
 8007c58:	601a      	str	r2, [r3, #0]
				ofs -= fp->fptr;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c60:	3308      	adds	r3, #8
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	683a      	ldr	r2, [r7, #0]
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c70:	3314      	adds	r3, #20
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c76:	e034      	b.n	8007ce2 <f_lseek+0x3fa>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c7e:	3310      	adds	r3, #16
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d125      	bne.n	8007cd6 <f_lseek+0x3ee>
					clst = create_chain(fp->fs, 0);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2100      	movs	r1, #0
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7fd f934 	bl	8004f02 <create_chain>
 8007c9a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8007c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d107      	bne.n	8007cb2 <f_lseek+0x3ca>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ca8:	3307      	adds	r3, #7
 8007caa:	2202      	movs	r2, #2
 8007cac:	701a      	strb	r2, [r3, #0]
 8007cae:	2302      	movs	r3, #2
 8007cb0:	e14a      	b.n	8007f48 <f_lseek+0x660>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cb8:	d107      	bne.n	8007cca <f_lseek+0x3e2>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cc0:	3307      	adds	r3, #7
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	701a      	strb	r2, [r3, #0]
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e13e      	b.n	8007f48 <f_lseek+0x660>
					fp->sclust = clst;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cd0:	3310      	adds	r3, #16
 8007cd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cd4:	601a      	str	r2, [r3, #0]
				}
#endif
				fp->clust = clst;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cdc:	3314      	adds	r3, #20
 8007cde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ce0:	601a      	str	r2, [r3, #0]
			}
			if (clst != 0) {
 8007ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f000 809e 	beq.w	8007e26 <f_lseek+0x53e>
				while (ofs > bcs) {						/* Cluster following loop */
 8007cea:	e058      	b.n	8007d9e <f_lseek+0x4b6>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cf2:	3306      	adds	r3, #6
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	f003 0302 	and.w	r3, r3, #2
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00e      	beq.n	8007d1c <f_lseek+0x434>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7fd f8fa 	bl	8004f02 <create_chain>
 8007d0e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8007d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d10b      	bne.n	8007d2e <f_lseek+0x446>
							ofs = bcs; break;
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	603b      	str	r3, [r7, #0]
 8007d1a:	e044      	b.n	8007da6 <f_lseek+0x4be>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fc fe24 	bl	8004974 <get_fat>
 8007d2c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d34:	d107      	bne.n	8007d46 <f_lseek+0x45e>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d3c:	3307      	adds	r3, #7
 8007d3e:	2201      	movs	r2, #1
 8007d40:	701a      	strb	r2, [r3, #0]
 8007d42:	2301      	movs	r3, #1
 8007d44:	e100      	b.n	8007f48 <f_lseek+0x660>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8007d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d90a      	bls.n	8007d62 <f_lseek+0x47a>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d58:	3314      	adds	r3, #20
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d307      	bcc.n	8007d72 <f_lseek+0x48a>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d68:	3307      	adds	r3, #7
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	701a      	strb	r2, [r3, #0]
 8007d6e:	2302      	movs	r3, #2
 8007d70:	e0ea      	b.n	8007f48 <f_lseek+0x660>
					fp->clust = clst;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d78:	3314      	adds	r3, #20
 8007d7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d7c:	601a      	str	r2, [r3, #0]
					fp->fptr += bcs;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d84:	3308      	adds	r3, #8
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	441a      	add	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d92:	3308      	adds	r3, #8
 8007d94:	601a      	str	r2, [r3, #0]
					ofs -= bcs;
 8007d96:	683a      	ldr	r2, [r7, #0]
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8007d9e:	683a      	ldr	r2, [r7, #0]
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d8a2      	bhi.n	8007cec <f_lseek+0x404>
				}
				fp->fptr += ofs;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dac:	3308      	adds	r3, #8
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	441a      	add	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dba:	3308      	adds	r3, #8
 8007dbc:	601a      	str	r2, [r3, #0]
				if (ofs % SS(fp->fs)) {
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dca:	330a      	adds	r3, #10
 8007dcc:	881b      	ldrh	r3, [r3, #0]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	fbb3 f1f2 	udiv	r1, r3, r2
 8007dd6:	fb02 f201 	mul.w	r2, r2, r1
 8007dda:	1a9b      	subs	r3, r3, r2
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d022      	beq.n	8007e26 <f_lseek+0x53e>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7fc fd9b 	bl	8004926 <clust2sect>
 8007df0:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8007df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d107      	bne.n	8007e08 <f_lseek+0x520>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dfe:	3307      	adds	r3, #7
 8007e00:	2202      	movs	r2, #2
 8007e02:	701a      	strb	r2, [r3, #0]
 8007e04:	2302      	movs	r3, #2
 8007e06:	e09f      	b.n	8007f48 <f_lseek+0x660>
					nsect += ofs / SS(fp->fs);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e14:	330a      	adds	r3, #10
 8007e16:	881b      	ldrh	r3, [r3, #0]
 8007e18:	461a      	mov	r2, r3
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e22:	4413      	add	r3, r2
 8007e24:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e2c:	3308      	adds	r3, #8
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e3c:	330a      	adds	r3, #10
 8007e3e:	881b      	ldrh	r3, [r3, #0]
 8007e40:	fbb2 f1f3 	udiv	r1, r2, r3
 8007e44:	fb03 f301 	mul.w	r3, r3, r1
 8007e48:	1ad3      	subs	r3, r2, r3
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d057      	beq.n	8007efe <f_lseek+0x616>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e54:	3318      	adds	r3, #24
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d04f      	beq.n	8007efe <f_lseek+0x616>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e64:	3306      	adds	r3, #6
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d028      	beq.n	8007ec2 <f_lseek+0x5da>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	7818      	ldrb	r0, [r3, #0]
 8007e80:	6879      	ldr	r1, [r7, #4]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e88:	3318      	adds	r3, #24
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	f7fc f977 	bl	8004180 <disk_write>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d007      	beq.n	8007ea8 <f_lseek+0x5c0>
					ABORT(fp->fs, FR_DISK_ERR);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e9e:	3307      	adds	r3, #7
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	701a      	strb	r2, [r3, #0]
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e04f      	b.n	8007f48 <f_lseek+0x660>
				fp->flag &= ~FA__DIRTY;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eae:	3306      	adds	r3, #6
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eb6:	b2da      	uxtb	r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ebe:	3306      	adds	r3, #6
 8007ec0:	701a      	strb	r2, [r3, #0]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ece:	3301      	adds	r3, #1
 8007ed0:	7818      	ldrb	r0, [r3, #0]
 8007ed2:	6879      	ldr	r1, [r7, #4]
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ed8:	f7fc f932 	bl	8004140 <disk_read>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d007      	beq.n	8007ef2 <f_lseek+0x60a>
				ABORT(fp->fs, FR_DISK_ERR);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ee8:	3307      	adds	r3, #7
 8007eea:	2201      	movs	r2, #1
 8007eec:	701a      	strb	r2, [r3, #0]
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e02a      	b.n	8007f48 <f_lseek+0x660>
#endif
			fp->dsect = nsect;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ef8:	3318      	adds	r3, #24
 8007efa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007efc:	601a      	str	r2, [r3, #0]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f04:	3308      	adds	r3, #8
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f0e:	330c      	adds	r3, #12
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d916      	bls.n	8007f44 <f_lseek+0x65c>
			fp->fsize = fp->fptr;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f1c:	3308      	adds	r3, #8
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f26:	330c      	adds	r3, #12
 8007f28:	601a      	str	r2, [r3, #0]
			fp->flag |= FA__WRITTEN;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f30:	3306      	adds	r3, #6
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	f043 0320 	orr.w	r3, r3, #32
 8007f38:	b2da      	uxtb	r2, r3
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f40:	3306      	adds	r3, #6
 8007f42:	701a      	strb	r2, [r3, #0]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8007f44:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3740      	adds	r7, #64	; 0x40
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b08e      	sub	sp, #56	; 0x38
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8007f5c:	f107 030c 	add.w	r3, r7, #12
 8007f60:	2200      	movs	r2, #0
 8007f62:	4619      	mov	r1, r3
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f7fe fa25 	bl	80063b4 <find_volume>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 8007f76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f040 80c4 	bne.w	8008108 <f_getfree+0x1b8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f86:	3310      	adds	r3, #16
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f90:	3314      	adds	r3, #20
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	3b02      	subs	r3, #2
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d807      	bhi.n	8007faa <f_getfree+0x5a>
			*nclst = fs->free_clust;
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fa0:	3310      	adds	r3, #16
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	601a      	str	r2, [r3, #0]
 8007fa8:	e0ae      	b.n	8008108 <f_getfree+0x1b8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	76fb      	strb	r3, [r7, #27]
			n = 0;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 8007fb8:	7efb      	ldrb	r3, [r7, #27]
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d127      	bne.n	800800e <f_getfree+0xbe>
				clst = 2;
 8007fbe:	2302      	movs	r3, #2
 8007fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 8007fc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fc4:	69f8      	ldr	r0, [r7, #28]
 8007fc6:	f7fc fcd5 	bl	8004974 <get_fat>
 8007fca:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fd2:	d103      	bne.n	8007fdc <f_getfree+0x8c>
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007fda:	e07f      	b.n	80080dc <f_getfree+0x18c>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d103      	bne.n	8007fea <f_getfree+0x9a>
 8007fe2:	2302      	movs	r3, #2
 8007fe4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007fe8:	e078      	b.n	80080dc <f_getfree+0x18c>
					if (stat == 0) n++;
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d102      	bne.n	8007ff6 <f_getfree+0xa6>
 8007ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 8007ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008002:	3314      	adds	r3, #20
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008008:	429a      	cmp	r2, r3
 800800a:	d3da      	bcc.n	8007fc2 <f_getfree+0x72>
 800800c:	e066      	b.n	80080dc <f_getfree+0x18c>
			} else {
				clst = fs->n_fatent;
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008014:	3314      	adds	r3, #20
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 8008024:	2300      	movs	r3, #0
 8008026:	627b      	str	r3, [r7, #36]	; 0x24
 8008028:	2300      	movs	r3, #0
 800802a:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800802c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802e:	2b00      	cmp	r3, #0
 8008030:	d115      	bne.n	800805e <f_getfree+0x10e>
						res = move_window(fs, sect++);
 8008032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008034:	1c5a      	adds	r2, r3, #1
 8008036:	62ba      	str	r2, [r7, #40]	; 0x28
 8008038:	4619      	mov	r1, r3
 800803a:	69f8      	ldr	r0, [r7, #28]
 800803c:	f7fc fb70 	bl	8004720 <move_window>
 8008040:	4603      	mov	r3, r0
 8008042:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 8008046:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800804a:	2b00      	cmp	r3, #0
 800804c:	d145      	bne.n	80080da <f_getfree+0x18a>
						p = fs->win.d8;
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008058:	330a      	adds	r3, #10
 800805a:	881b      	ldrh	r3, [r3, #0]
 800805c:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 800805e:	7efb      	ldrb	r3, [r7, #27]
 8008060:	2b02      	cmp	r3, #2
 8008062:	d115      	bne.n	8008090 <f_getfree+0x140>
						if (LD_WORD(p) == 0) n++;
 8008064:	6a3b      	ldr	r3, [r7, #32]
 8008066:	3301      	adds	r3, #1
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	021b      	lsls	r3, r3, #8
 800806c:	b21a      	sxth	r2, r3
 800806e:	6a3b      	ldr	r3, [r7, #32]
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	b21b      	sxth	r3, r3
 8008074:	4313      	orrs	r3, r2
 8008076:	b21b      	sxth	r3, r3
 8008078:	2b00      	cmp	r3, #0
 800807a:	d102      	bne.n	8008082 <f_getfree+0x132>
 800807c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807e:	3301      	adds	r3, #1
 8008080:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 8008082:	6a3b      	ldr	r3, [r7, #32]
 8008084:	3302      	adds	r3, #2
 8008086:	623b      	str	r3, [r7, #32]
 8008088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808a:	3b02      	subs	r3, #2
 800808c:	627b      	str	r3, [r7, #36]	; 0x24
 800808e:	e01d      	b.n	80080cc <f_getfree+0x17c>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8008090:	6a3b      	ldr	r3, [r7, #32]
 8008092:	3303      	adds	r3, #3
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	061a      	lsls	r2, r3, #24
 8008098:	6a3b      	ldr	r3, [r7, #32]
 800809a:	3302      	adds	r3, #2
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	041b      	lsls	r3, r3, #16
 80080a0:	4313      	orrs	r3, r2
 80080a2:	6a3a      	ldr	r2, [r7, #32]
 80080a4:	3201      	adds	r2, #1
 80080a6:	7812      	ldrb	r2, [r2, #0]
 80080a8:	0212      	lsls	r2, r2, #8
 80080aa:	4313      	orrs	r3, r2
 80080ac:	6a3a      	ldr	r2, [r7, #32]
 80080ae:	7812      	ldrb	r2, [r2, #0]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d102      	bne.n	80080c0 <f_getfree+0x170>
 80080ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080bc:	3301      	adds	r3, #1
 80080be:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 80080c0:	6a3b      	ldr	r3, [r7, #32]
 80080c2:	3304      	adds	r3, #4
 80080c4:	623b      	str	r3, [r7, #32]
 80080c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c8:	3b04      	subs	r3, #4
 80080ca:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 80080cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ce:	3b01      	subs	r3, #1
 80080d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1a9      	bne.n	800802c <f_getfree+0xdc>
 80080d8:	e000      	b.n	80080dc <f_getfree+0x18c>
						if (res != FR_OK) break;
 80080da:	bf00      	nop
			}
			fs->free_clust = n;
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080e2:	3310      	adds	r3, #16
 80080e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080e6:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080ee:	3305      	adds	r3, #5
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	f043 0301 	orr.w	r3, r3, #1
 80080f6:	b2da      	uxtb	r2, r3
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080fe:	3305      	adds	r3, #5
 8008100:	701a      	strb	r2, [r3, #0]
			*nclst = n;
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008106:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 8008108:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800810c:	4618      	mov	r0, r3
 800810e:	3738      	adds	r7, #56	; 0x38
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	460b      	mov	r3, r1
 800811e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8008120:	78fb      	ldrb	r3, [r7, #3]
 8008122:	2b0a      	cmp	r3, #10
 8008124:	d103      	bne.n	800812e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008126:	210d      	movs	r1, #13
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f7ff fff3 	bl	8008114 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2b00      	cmp	r3, #0
 8008138:	db25      	blt.n	8008186 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	1c5a      	adds	r2, r3, #1
 800813e:	60fa      	str	r2, [r7, #12]
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	4413      	add	r3, r2
 8008144:	78fa      	ldrb	r2, [r7, #3]
 8008146:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2b3c      	cmp	r3, #60	; 0x3c
 800814c:	dd12      	ble.n	8008174 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6818      	ldr	r0, [r3, #0]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f103 010c 	add.w	r1, r3, #12
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	f107 0308 	add.w	r3, r7, #8
 800815e:	f7ff f847 	bl	80071f0 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008162:	68ba      	ldr	r2, [r7, #8]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	429a      	cmp	r2, r3
 8008168:	d101      	bne.n	800816e <putc_bfd+0x5a>
 800816a:	2300      	movs	r3, #0
 800816c:	e001      	b.n	8008172 <putc_bfd+0x5e>
 800816e:	f04f 33ff 	mov.w	r3, #4294967295
 8008172:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	1c5a      	adds	r2, r3, #1
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	609a      	str	r2, [r3, #8]
 8008184:	e000      	b.n	8008188 <putc_bfd+0x74>
	if (i < 0) return;
 8008186:	bf00      	nop
}
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800818e:	b590      	push	{r4, r7, lr}
 8008190:	b097      	sub	sp, #92	; 0x5c
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
 8008196:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800819c:	2300      	movs	r3, #0
 800819e:	613b      	str	r3, [r7, #16]
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 80081a4:	e009      	b.n	80081ba <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	1c5a      	adds	r2, r3, #1
 80081aa:	607a      	str	r2, [r7, #4]
 80081ac:	781a      	ldrb	r2, [r3, #0]
 80081ae:	f107 030c 	add.w	r3, r7, #12
 80081b2:	4611      	mov	r1, r2
 80081b4:	4618      	mov	r0, r3
 80081b6:	f7ff ffad 	bl	8008114 <putc_bfd>
	while (*str)			/* Put the string */
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1f1      	bne.n	80081a6 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	db16      	blt.n	80081f6 <f_puts+0x68>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 80081c8:	68f8      	ldr	r0, [r7, #12]
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	461c      	mov	r4, r3
 80081ce:	f107 0208 	add.w	r2, r7, #8
 80081d2:	f107 030c 	add.w	r3, r7, #12
 80081d6:	f103 010c 	add.w	r1, r3, #12
 80081da:	4613      	mov	r3, r2
 80081dc:	4622      	mov	r2, r4
 80081de:	f7ff f807 	bl	80071f0 <f_write>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d106      	bne.n	80081f6 <f_puts+0x68>
		&& (UINT)pb.idx == nw) return pb.nchr;
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	461a      	mov	r2, r3
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d101      	bne.n	80081f6 <f_puts+0x68>
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	e001      	b.n	80081fa <f_puts+0x6c>
	return EOF;
 80081f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	375c      	adds	r7, #92	; 0x5c
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd90      	pop	{r4, r7, pc}
	...

08008204 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008204:	b480      	push	{r7}
 8008206:	b087      	sub	sp, #28
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	4613      	mov	r3, r2
 8008210:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008212:	2301      	movs	r3, #1
 8008214:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008216:	2300      	movs	r3, #0
 8008218:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800821a:	4b1e      	ldr	r3, [pc, #120]	; (8008294 <FATFS_LinkDriverEx+0x90>)
 800821c:	7a5b      	ldrb	r3, [r3, #9]
 800821e:	b2db      	uxtb	r3, r3
 8008220:	2b01      	cmp	r3, #1
 8008222:	d831      	bhi.n	8008288 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008224:	4b1b      	ldr	r3, [pc, #108]	; (8008294 <FATFS_LinkDriverEx+0x90>)
 8008226:	7a5b      	ldrb	r3, [r3, #9]
 8008228:	b2db      	uxtb	r3, r3
 800822a:	461a      	mov	r2, r3
 800822c:	4b19      	ldr	r3, [pc, #100]	; (8008294 <FATFS_LinkDriverEx+0x90>)
 800822e:	2100      	movs	r1, #0
 8008230:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8008232:	4b18      	ldr	r3, [pc, #96]	; (8008294 <FATFS_LinkDriverEx+0x90>)
 8008234:	7a5b      	ldrb	r3, [r3, #9]
 8008236:	b2db      	uxtb	r3, r3
 8008238:	4a16      	ldr	r2, [pc, #88]	; (8008294 <FATFS_LinkDriverEx+0x90>)
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	4413      	add	r3, r2
 800823e:	68fa      	ldr	r2, [r7, #12]
 8008240:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8008242:	4b14      	ldr	r3, [pc, #80]	; (8008294 <FATFS_LinkDriverEx+0x90>)
 8008244:	7a5b      	ldrb	r3, [r3, #9]
 8008246:	b2db      	uxtb	r3, r3
 8008248:	461a      	mov	r2, r3
 800824a:	4b12      	ldr	r3, [pc, #72]	; (8008294 <FATFS_LinkDriverEx+0x90>)
 800824c:	4413      	add	r3, r2
 800824e:	79fa      	ldrb	r2, [r7, #7]
 8008250:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008252:	4b10      	ldr	r3, [pc, #64]	; (8008294 <FATFS_LinkDriverEx+0x90>)
 8008254:	7a5b      	ldrb	r3, [r3, #9]
 8008256:	b2db      	uxtb	r3, r3
 8008258:	1c5a      	adds	r2, r3, #1
 800825a:	b2d1      	uxtb	r1, r2
 800825c:	4a0d      	ldr	r2, [pc, #52]	; (8008294 <FATFS_LinkDriverEx+0x90>)
 800825e:	7251      	strb	r1, [r2, #9]
 8008260:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008262:	7dbb      	ldrb	r3, [r7, #22]
 8008264:	3330      	adds	r3, #48	; 0x30
 8008266:	b2da      	uxtb	r2, r3
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	3301      	adds	r3, #1
 8008270:	223a      	movs	r2, #58	; 0x3a
 8008272:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	3302      	adds	r3, #2
 8008278:	222f      	movs	r2, #47	; 0x2f
 800827a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	3303      	adds	r3, #3
 8008280:	2200      	movs	r2, #0
 8008282:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008284:	2300      	movs	r3, #0
 8008286:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8008288:	7dfb      	ldrb	r3, [r7, #23]
}
 800828a:	4618      	mov	r0, r3
 800828c:	371c      	adds	r7, #28
 800828e:	46bd      	mov	sp, r7
 8008290:	bc80      	pop	{r7}
 8008292:	4770      	bx	lr
 8008294:	200002cc 	.word	0x200002cc

08008298 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80082a2:	2200      	movs	r2, #0
 80082a4:	6839      	ldr	r1, [r7, #0]
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f7ff ffac 	bl	8008204 <FATFS_LinkDriverEx>
 80082ac:	4603      	mov	r3, r0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3708      	adds	r7, #8
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
	...

080082b8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b085      	sub	sp, #20
 80082bc:	af00      	add	r7, sp, #0
 80082be:	4603      	mov	r3, r0
 80082c0:	6039      	str	r1, [r7, #0]
 80082c2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80082c4:	88fb      	ldrh	r3, [r7, #6]
 80082c6:	2b7f      	cmp	r3, #127	; 0x7f
 80082c8:	d802      	bhi.n	80082d0 <ff_convert+0x18>
		c = chr;
 80082ca:	88fb      	ldrh	r3, [r7, #6]
 80082cc:	81fb      	strh	r3, [r7, #14]
 80082ce:	e025      	b.n	800831c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00b      	beq.n	80082ee <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80082d6:	88fb      	ldrh	r3, [r7, #6]
 80082d8:	2bff      	cmp	r3, #255	; 0xff
 80082da:	d805      	bhi.n	80082e8 <ff_convert+0x30>
 80082dc:	88fb      	ldrh	r3, [r7, #6]
 80082de:	3b80      	subs	r3, #128	; 0x80
 80082e0:	4a11      	ldr	r2, [pc, #68]	; (8008328 <ff_convert+0x70>)
 80082e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082e6:	e000      	b.n	80082ea <ff_convert+0x32>
 80082e8:	2300      	movs	r3, #0
 80082ea:	81fb      	strh	r3, [r7, #14]
 80082ec:	e016      	b.n	800831c <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 80082ee:	2300      	movs	r3, #0
 80082f0:	81fb      	strh	r3, [r7, #14]
 80082f2:	e009      	b.n	8008308 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80082f4:	89fb      	ldrh	r3, [r7, #14]
 80082f6:	4a0c      	ldr	r2, [pc, #48]	; (8008328 <ff_convert+0x70>)
 80082f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082fc:	88fa      	ldrh	r2, [r7, #6]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d006      	beq.n	8008310 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008302:	89fb      	ldrh	r3, [r7, #14]
 8008304:	3301      	adds	r3, #1
 8008306:	81fb      	strh	r3, [r7, #14]
 8008308:	89fb      	ldrh	r3, [r7, #14]
 800830a:	2b7f      	cmp	r3, #127	; 0x7f
 800830c:	d9f2      	bls.n	80082f4 <ff_convert+0x3c>
 800830e:	e000      	b.n	8008312 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008310:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008312:	89fb      	ldrh	r3, [r7, #14]
 8008314:	3380      	adds	r3, #128	; 0x80
 8008316:	b29b      	uxth	r3, r3
 8008318:	b2db      	uxtb	r3, r3
 800831a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800831c:	89fb      	ldrh	r3, [r7, #14]
}
 800831e:	4618      	mov	r0, r3
 8008320:	3714      	adds	r7, #20
 8008322:	46bd      	mov	sp, r7
 8008324:	bc80      	pop	{r7}
 8008326:	4770      	bx	lr
 8008328:	08008da0 	.word	0x08008da0

0800832c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800832c:	b480      	push	{r7}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
 8008332:	4603      	mov	r3, r0
 8008334:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8008336:	2300      	movs	r3, #0
 8008338:	60fb      	str	r3, [r7, #12]
 800833a:	e002      	b.n	8008342 <ff_wtoupper+0x16>
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	3301      	adds	r3, #1
 8008340:	60fb      	str	r3, [r7, #12]
 8008342:	4a0f      	ldr	r2, [pc, #60]	; (8008380 <ff_wtoupper+0x54>)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d006      	beq.n	800835c <ff_wtoupper+0x30>
 800834e:	4a0c      	ldr	r2, [pc, #48]	; (8008380 <ff_wtoupper+0x54>)
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008356:	88fa      	ldrh	r2, [r7, #6]
 8008358:	429a      	cmp	r2, r3
 800835a:	d1ef      	bne.n	800833c <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800835c:	4a08      	ldr	r2, [pc, #32]	; (8008380 <ff_wtoupper+0x54>)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d004      	beq.n	8008372 <ff_wtoupper+0x46>
 8008368:	4a06      	ldr	r2, [pc, #24]	; (8008384 <ff_wtoupper+0x58>)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008370:	e000      	b.n	8008374 <ff_wtoupper+0x48>
 8008372:	88fb      	ldrh	r3, [r7, #6]
}
 8008374:	4618      	mov	r0, r3
 8008376:	3714      	adds	r7, #20
 8008378:	46bd      	mov	sp, r7
 800837a:	bc80      	pop	{r7}
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	08008ea0 	.word	0x08008ea0
 8008384:	08009080 	.word	0x08009080

08008388 <__errno>:
 8008388:	4b01      	ldr	r3, [pc, #4]	; (8008390 <__errno+0x8>)
 800838a:	6818      	ldr	r0, [r3, #0]
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop
 8008390:	20000024 	.word	0x20000024

08008394 <__libc_init_array>:
 8008394:	b570      	push	{r4, r5, r6, lr}
 8008396:	2500      	movs	r5, #0
 8008398:	4e0c      	ldr	r6, [pc, #48]	; (80083cc <__libc_init_array+0x38>)
 800839a:	4c0d      	ldr	r4, [pc, #52]	; (80083d0 <__libc_init_array+0x3c>)
 800839c:	1ba4      	subs	r4, r4, r6
 800839e:	10a4      	asrs	r4, r4, #2
 80083a0:	42a5      	cmp	r5, r4
 80083a2:	d109      	bne.n	80083b8 <__libc_init_array+0x24>
 80083a4:	f000 fc3c 	bl	8008c20 <_init>
 80083a8:	2500      	movs	r5, #0
 80083aa:	4e0a      	ldr	r6, [pc, #40]	; (80083d4 <__libc_init_array+0x40>)
 80083ac:	4c0a      	ldr	r4, [pc, #40]	; (80083d8 <__libc_init_array+0x44>)
 80083ae:	1ba4      	subs	r4, r4, r6
 80083b0:	10a4      	asrs	r4, r4, #2
 80083b2:	42a5      	cmp	r5, r4
 80083b4:	d105      	bne.n	80083c2 <__libc_init_array+0x2e>
 80083b6:	bd70      	pop	{r4, r5, r6, pc}
 80083b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80083bc:	4798      	blx	r3
 80083be:	3501      	adds	r5, #1
 80083c0:	e7ee      	b.n	80083a0 <__libc_init_array+0xc>
 80083c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80083c6:	4798      	blx	r3
 80083c8:	3501      	adds	r5, #1
 80083ca:	e7f2      	b.n	80083b2 <__libc_init_array+0x1e>
 80083cc:	08009294 	.word	0x08009294
 80083d0:	08009294 	.word	0x08009294
 80083d4:	08009294 	.word	0x08009294
 80083d8:	08009298 	.word	0x08009298

080083dc <memset>:
 80083dc:	4603      	mov	r3, r0
 80083de:	4402      	add	r2, r0
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d100      	bne.n	80083e6 <memset+0xa>
 80083e4:	4770      	bx	lr
 80083e6:	f803 1b01 	strb.w	r1, [r3], #1
 80083ea:	e7f9      	b.n	80083e0 <memset+0x4>

080083ec <siprintf>:
 80083ec:	b40e      	push	{r1, r2, r3}
 80083ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083f2:	b500      	push	{lr}
 80083f4:	b09c      	sub	sp, #112	; 0x70
 80083f6:	ab1d      	add	r3, sp, #116	; 0x74
 80083f8:	9002      	str	r0, [sp, #8]
 80083fa:	9006      	str	r0, [sp, #24]
 80083fc:	9107      	str	r1, [sp, #28]
 80083fe:	9104      	str	r1, [sp, #16]
 8008400:	4808      	ldr	r0, [pc, #32]	; (8008424 <siprintf+0x38>)
 8008402:	4909      	ldr	r1, [pc, #36]	; (8008428 <siprintf+0x3c>)
 8008404:	f853 2b04 	ldr.w	r2, [r3], #4
 8008408:	9105      	str	r1, [sp, #20]
 800840a:	6800      	ldr	r0, [r0, #0]
 800840c:	a902      	add	r1, sp, #8
 800840e:	9301      	str	r3, [sp, #4]
 8008410:	f000 f86e 	bl	80084f0 <_svfiprintf_r>
 8008414:	2200      	movs	r2, #0
 8008416:	9b02      	ldr	r3, [sp, #8]
 8008418:	701a      	strb	r2, [r3, #0]
 800841a:	b01c      	add	sp, #112	; 0x70
 800841c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008420:	b003      	add	sp, #12
 8008422:	4770      	bx	lr
 8008424:	20000024 	.word	0x20000024
 8008428:	ffff0208 	.word	0xffff0208

0800842c <strcpy>:
 800842c:	4603      	mov	r3, r0
 800842e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008432:	f803 2b01 	strb.w	r2, [r3], #1
 8008436:	2a00      	cmp	r2, #0
 8008438:	d1f9      	bne.n	800842e <strcpy+0x2>
 800843a:	4770      	bx	lr

0800843c <__ssputs_r>:
 800843c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008440:	688e      	ldr	r6, [r1, #8]
 8008442:	4682      	mov	sl, r0
 8008444:	429e      	cmp	r6, r3
 8008446:	460c      	mov	r4, r1
 8008448:	4690      	mov	r8, r2
 800844a:	4699      	mov	r9, r3
 800844c:	d837      	bhi.n	80084be <__ssputs_r+0x82>
 800844e:	898a      	ldrh	r2, [r1, #12]
 8008450:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008454:	d031      	beq.n	80084ba <__ssputs_r+0x7e>
 8008456:	2302      	movs	r3, #2
 8008458:	6825      	ldr	r5, [r4, #0]
 800845a:	6909      	ldr	r1, [r1, #16]
 800845c:	1a6f      	subs	r7, r5, r1
 800845e:	6965      	ldr	r5, [r4, #20]
 8008460:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008464:	fb95 f5f3 	sdiv	r5, r5, r3
 8008468:	f109 0301 	add.w	r3, r9, #1
 800846c:	443b      	add	r3, r7
 800846e:	429d      	cmp	r5, r3
 8008470:	bf38      	it	cc
 8008472:	461d      	movcc	r5, r3
 8008474:	0553      	lsls	r3, r2, #21
 8008476:	d530      	bpl.n	80084da <__ssputs_r+0x9e>
 8008478:	4629      	mov	r1, r5
 800847a:	f000 fb37 	bl	8008aec <_malloc_r>
 800847e:	4606      	mov	r6, r0
 8008480:	b950      	cbnz	r0, 8008498 <__ssputs_r+0x5c>
 8008482:	230c      	movs	r3, #12
 8008484:	f04f 30ff 	mov.w	r0, #4294967295
 8008488:	f8ca 3000 	str.w	r3, [sl]
 800848c:	89a3      	ldrh	r3, [r4, #12]
 800848e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008492:	81a3      	strh	r3, [r4, #12]
 8008494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008498:	463a      	mov	r2, r7
 800849a:	6921      	ldr	r1, [r4, #16]
 800849c:	f000 fab6 	bl	8008a0c <memcpy>
 80084a0:	89a3      	ldrh	r3, [r4, #12]
 80084a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80084a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084aa:	81a3      	strh	r3, [r4, #12]
 80084ac:	6126      	str	r6, [r4, #16]
 80084ae:	443e      	add	r6, r7
 80084b0:	6026      	str	r6, [r4, #0]
 80084b2:	464e      	mov	r6, r9
 80084b4:	6165      	str	r5, [r4, #20]
 80084b6:	1bed      	subs	r5, r5, r7
 80084b8:	60a5      	str	r5, [r4, #8]
 80084ba:	454e      	cmp	r6, r9
 80084bc:	d900      	bls.n	80084c0 <__ssputs_r+0x84>
 80084be:	464e      	mov	r6, r9
 80084c0:	4632      	mov	r2, r6
 80084c2:	4641      	mov	r1, r8
 80084c4:	6820      	ldr	r0, [r4, #0]
 80084c6:	f000 faac 	bl	8008a22 <memmove>
 80084ca:	68a3      	ldr	r3, [r4, #8]
 80084cc:	2000      	movs	r0, #0
 80084ce:	1b9b      	subs	r3, r3, r6
 80084d0:	60a3      	str	r3, [r4, #8]
 80084d2:	6823      	ldr	r3, [r4, #0]
 80084d4:	441e      	add	r6, r3
 80084d6:	6026      	str	r6, [r4, #0]
 80084d8:	e7dc      	b.n	8008494 <__ssputs_r+0x58>
 80084da:	462a      	mov	r2, r5
 80084dc:	f000 fb60 	bl	8008ba0 <_realloc_r>
 80084e0:	4606      	mov	r6, r0
 80084e2:	2800      	cmp	r0, #0
 80084e4:	d1e2      	bne.n	80084ac <__ssputs_r+0x70>
 80084e6:	6921      	ldr	r1, [r4, #16]
 80084e8:	4650      	mov	r0, sl
 80084ea:	f000 fab3 	bl	8008a54 <_free_r>
 80084ee:	e7c8      	b.n	8008482 <__ssputs_r+0x46>

080084f0 <_svfiprintf_r>:
 80084f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f4:	461d      	mov	r5, r3
 80084f6:	898b      	ldrh	r3, [r1, #12]
 80084f8:	b09d      	sub	sp, #116	; 0x74
 80084fa:	061f      	lsls	r7, r3, #24
 80084fc:	4680      	mov	r8, r0
 80084fe:	460c      	mov	r4, r1
 8008500:	4616      	mov	r6, r2
 8008502:	d50f      	bpl.n	8008524 <_svfiprintf_r+0x34>
 8008504:	690b      	ldr	r3, [r1, #16]
 8008506:	b96b      	cbnz	r3, 8008524 <_svfiprintf_r+0x34>
 8008508:	2140      	movs	r1, #64	; 0x40
 800850a:	f000 faef 	bl	8008aec <_malloc_r>
 800850e:	6020      	str	r0, [r4, #0]
 8008510:	6120      	str	r0, [r4, #16]
 8008512:	b928      	cbnz	r0, 8008520 <_svfiprintf_r+0x30>
 8008514:	230c      	movs	r3, #12
 8008516:	f8c8 3000 	str.w	r3, [r8]
 800851a:	f04f 30ff 	mov.w	r0, #4294967295
 800851e:	e0c8      	b.n	80086b2 <_svfiprintf_r+0x1c2>
 8008520:	2340      	movs	r3, #64	; 0x40
 8008522:	6163      	str	r3, [r4, #20]
 8008524:	2300      	movs	r3, #0
 8008526:	9309      	str	r3, [sp, #36]	; 0x24
 8008528:	2320      	movs	r3, #32
 800852a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800852e:	2330      	movs	r3, #48	; 0x30
 8008530:	f04f 0b01 	mov.w	fp, #1
 8008534:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008538:	9503      	str	r5, [sp, #12]
 800853a:	4637      	mov	r7, r6
 800853c:	463d      	mov	r5, r7
 800853e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008542:	b10b      	cbz	r3, 8008548 <_svfiprintf_r+0x58>
 8008544:	2b25      	cmp	r3, #37	; 0x25
 8008546:	d13e      	bne.n	80085c6 <_svfiprintf_r+0xd6>
 8008548:	ebb7 0a06 	subs.w	sl, r7, r6
 800854c:	d00b      	beq.n	8008566 <_svfiprintf_r+0x76>
 800854e:	4653      	mov	r3, sl
 8008550:	4632      	mov	r2, r6
 8008552:	4621      	mov	r1, r4
 8008554:	4640      	mov	r0, r8
 8008556:	f7ff ff71 	bl	800843c <__ssputs_r>
 800855a:	3001      	adds	r0, #1
 800855c:	f000 80a4 	beq.w	80086a8 <_svfiprintf_r+0x1b8>
 8008560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008562:	4453      	add	r3, sl
 8008564:	9309      	str	r3, [sp, #36]	; 0x24
 8008566:	783b      	ldrb	r3, [r7, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	f000 809d 	beq.w	80086a8 <_svfiprintf_r+0x1b8>
 800856e:	2300      	movs	r3, #0
 8008570:	f04f 32ff 	mov.w	r2, #4294967295
 8008574:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008578:	9304      	str	r3, [sp, #16]
 800857a:	9307      	str	r3, [sp, #28]
 800857c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008580:	931a      	str	r3, [sp, #104]	; 0x68
 8008582:	462f      	mov	r7, r5
 8008584:	2205      	movs	r2, #5
 8008586:	f817 1b01 	ldrb.w	r1, [r7], #1
 800858a:	4850      	ldr	r0, [pc, #320]	; (80086cc <_svfiprintf_r+0x1dc>)
 800858c:	f000 fa30 	bl	80089f0 <memchr>
 8008590:	9b04      	ldr	r3, [sp, #16]
 8008592:	b9d0      	cbnz	r0, 80085ca <_svfiprintf_r+0xda>
 8008594:	06d9      	lsls	r1, r3, #27
 8008596:	bf44      	itt	mi
 8008598:	2220      	movmi	r2, #32
 800859a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800859e:	071a      	lsls	r2, r3, #28
 80085a0:	bf44      	itt	mi
 80085a2:	222b      	movmi	r2, #43	; 0x2b
 80085a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80085a8:	782a      	ldrb	r2, [r5, #0]
 80085aa:	2a2a      	cmp	r2, #42	; 0x2a
 80085ac:	d015      	beq.n	80085da <_svfiprintf_r+0xea>
 80085ae:	462f      	mov	r7, r5
 80085b0:	2000      	movs	r0, #0
 80085b2:	250a      	movs	r5, #10
 80085b4:	9a07      	ldr	r2, [sp, #28]
 80085b6:	4639      	mov	r1, r7
 80085b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085bc:	3b30      	subs	r3, #48	; 0x30
 80085be:	2b09      	cmp	r3, #9
 80085c0:	d94d      	bls.n	800865e <_svfiprintf_r+0x16e>
 80085c2:	b1b8      	cbz	r0, 80085f4 <_svfiprintf_r+0x104>
 80085c4:	e00f      	b.n	80085e6 <_svfiprintf_r+0xf6>
 80085c6:	462f      	mov	r7, r5
 80085c8:	e7b8      	b.n	800853c <_svfiprintf_r+0x4c>
 80085ca:	4a40      	ldr	r2, [pc, #256]	; (80086cc <_svfiprintf_r+0x1dc>)
 80085cc:	463d      	mov	r5, r7
 80085ce:	1a80      	subs	r0, r0, r2
 80085d0:	fa0b f000 	lsl.w	r0, fp, r0
 80085d4:	4318      	orrs	r0, r3
 80085d6:	9004      	str	r0, [sp, #16]
 80085d8:	e7d3      	b.n	8008582 <_svfiprintf_r+0x92>
 80085da:	9a03      	ldr	r2, [sp, #12]
 80085dc:	1d11      	adds	r1, r2, #4
 80085de:	6812      	ldr	r2, [r2, #0]
 80085e0:	9103      	str	r1, [sp, #12]
 80085e2:	2a00      	cmp	r2, #0
 80085e4:	db01      	blt.n	80085ea <_svfiprintf_r+0xfa>
 80085e6:	9207      	str	r2, [sp, #28]
 80085e8:	e004      	b.n	80085f4 <_svfiprintf_r+0x104>
 80085ea:	4252      	negs	r2, r2
 80085ec:	f043 0302 	orr.w	r3, r3, #2
 80085f0:	9207      	str	r2, [sp, #28]
 80085f2:	9304      	str	r3, [sp, #16]
 80085f4:	783b      	ldrb	r3, [r7, #0]
 80085f6:	2b2e      	cmp	r3, #46	; 0x2e
 80085f8:	d10c      	bne.n	8008614 <_svfiprintf_r+0x124>
 80085fa:	787b      	ldrb	r3, [r7, #1]
 80085fc:	2b2a      	cmp	r3, #42	; 0x2a
 80085fe:	d133      	bne.n	8008668 <_svfiprintf_r+0x178>
 8008600:	9b03      	ldr	r3, [sp, #12]
 8008602:	3702      	adds	r7, #2
 8008604:	1d1a      	adds	r2, r3, #4
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	9203      	str	r2, [sp, #12]
 800860a:	2b00      	cmp	r3, #0
 800860c:	bfb8      	it	lt
 800860e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008612:	9305      	str	r3, [sp, #20]
 8008614:	4d2e      	ldr	r5, [pc, #184]	; (80086d0 <_svfiprintf_r+0x1e0>)
 8008616:	2203      	movs	r2, #3
 8008618:	7839      	ldrb	r1, [r7, #0]
 800861a:	4628      	mov	r0, r5
 800861c:	f000 f9e8 	bl	80089f0 <memchr>
 8008620:	b138      	cbz	r0, 8008632 <_svfiprintf_r+0x142>
 8008622:	2340      	movs	r3, #64	; 0x40
 8008624:	1b40      	subs	r0, r0, r5
 8008626:	fa03 f000 	lsl.w	r0, r3, r0
 800862a:	9b04      	ldr	r3, [sp, #16]
 800862c:	3701      	adds	r7, #1
 800862e:	4303      	orrs	r3, r0
 8008630:	9304      	str	r3, [sp, #16]
 8008632:	7839      	ldrb	r1, [r7, #0]
 8008634:	2206      	movs	r2, #6
 8008636:	4827      	ldr	r0, [pc, #156]	; (80086d4 <_svfiprintf_r+0x1e4>)
 8008638:	1c7e      	adds	r6, r7, #1
 800863a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800863e:	f000 f9d7 	bl	80089f0 <memchr>
 8008642:	2800      	cmp	r0, #0
 8008644:	d038      	beq.n	80086b8 <_svfiprintf_r+0x1c8>
 8008646:	4b24      	ldr	r3, [pc, #144]	; (80086d8 <_svfiprintf_r+0x1e8>)
 8008648:	bb13      	cbnz	r3, 8008690 <_svfiprintf_r+0x1a0>
 800864a:	9b03      	ldr	r3, [sp, #12]
 800864c:	3307      	adds	r3, #7
 800864e:	f023 0307 	bic.w	r3, r3, #7
 8008652:	3308      	adds	r3, #8
 8008654:	9303      	str	r3, [sp, #12]
 8008656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008658:	444b      	add	r3, r9
 800865a:	9309      	str	r3, [sp, #36]	; 0x24
 800865c:	e76d      	b.n	800853a <_svfiprintf_r+0x4a>
 800865e:	fb05 3202 	mla	r2, r5, r2, r3
 8008662:	2001      	movs	r0, #1
 8008664:	460f      	mov	r7, r1
 8008666:	e7a6      	b.n	80085b6 <_svfiprintf_r+0xc6>
 8008668:	2300      	movs	r3, #0
 800866a:	250a      	movs	r5, #10
 800866c:	4619      	mov	r1, r3
 800866e:	3701      	adds	r7, #1
 8008670:	9305      	str	r3, [sp, #20]
 8008672:	4638      	mov	r0, r7
 8008674:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008678:	3a30      	subs	r2, #48	; 0x30
 800867a:	2a09      	cmp	r2, #9
 800867c:	d903      	bls.n	8008686 <_svfiprintf_r+0x196>
 800867e:	2b00      	cmp	r3, #0
 8008680:	d0c8      	beq.n	8008614 <_svfiprintf_r+0x124>
 8008682:	9105      	str	r1, [sp, #20]
 8008684:	e7c6      	b.n	8008614 <_svfiprintf_r+0x124>
 8008686:	fb05 2101 	mla	r1, r5, r1, r2
 800868a:	2301      	movs	r3, #1
 800868c:	4607      	mov	r7, r0
 800868e:	e7f0      	b.n	8008672 <_svfiprintf_r+0x182>
 8008690:	ab03      	add	r3, sp, #12
 8008692:	9300      	str	r3, [sp, #0]
 8008694:	4622      	mov	r2, r4
 8008696:	4b11      	ldr	r3, [pc, #68]	; (80086dc <_svfiprintf_r+0x1ec>)
 8008698:	a904      	add	r1, sp, #16
 800869a:	4640      	mov	r0, r8
 800869c:	f3af 8000 	nop.w
 80086a0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80086a4:	4681      	mov	r9, r0
 80086a6:	d1d6      	bne.n	8008656 <_svfiprintf_r+0x166>
 80086a8:	89a3      	ldrh	r3, [r4, #12]
 80086aa:	065b      	lsls	r3, r3, #25
 80086ac:	f53f af35 	bmi.w	800851a <_svfiprintf_r+0x2a>
 80086b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086b2:	b01d      	add	sp, #116	; 0x74
 80086b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b8:	ab03      	add	r3, sp, #12
 80086ba:	9300      	str	r3, [sp, #0]
 80086bc:	4622      	mov	r2, r4
 80086be:	4b07      	ldr	r3, [pc, #28]	; (80086dc <_svfiprintf_r+0x1ec>)
 80086c0:	a904      	add	r1, sp, #16
 80086c2:	4640      	mov	r0, r8
 80086c4:	f000 f882 	bl	80087cc <_printf_i>
 80086c8:	e7ea      	b.n	80086a0 <_svfiprintf_r+0x1b0>
 80086ca:	bf00      	nop
 80086cc:	08009260 	.word	0x08009260
 80086d0:	08009266 	.word	0x08009266
 80086d4:	0800926a 	.word	0x0800926a
 80086d8:	00000000 	.word	0x00000000
 80086dc:	0800843d 	.word	0x0800843d

080086e0 <_printf_common>:
 80086e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086e4:	4691      	mov	r9, r2
 80086e6:	461f      	mov	r7, r3
 80086e8:	688a      	ldr	r2, [r1, #8]
 80086ea:	690b      	ldr	r3, [r1, #16]
 80086ec:	4606      	mov	r6, r0
 80086ee:	4293      	cmp	r3, r2
 80086f0:	bfb8      	it	lt
 80086f2:	4613      	movlt	r3, r2
 80086f4:	f8c9 3000 	str.w	r3, [r9]
 80086f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086fc:	460c      	mov	r4, r1
 80086fe:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008702:	b112      	cbz	r2, 800870a <_printf_common+0x2a>
 8008704:	3301      	adds	r3, #1
 8008706:	f8c9 3000 	str.w	r3, [r9]
 800870a:	6823      	ldr	r3, [r4, #0]
 800870c:	0699      	lsls	r1, r3, #26
 800870e:	bf42      	ittt	mi
 8008710:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008714:	3302      	addmi	r3, #2
 8008716:	f8c9 3000 	strmi.w	r3, [r9]
 800871a:	6825      	ldr	r5, [r4, #0]
 800871c:	f015 0506 	ands.w	r5, r5, #6
 8008720:	d107      	bne.n	8008732 <_printf_common+0x52>
 8008722:	f104 0a19 	add.w	sl, r4, #25
 8008726:	68e3      	ldr	r3, [r4, #12]
 8008728:	f8d9 2000 	ldr.w	r2, [r9]
 800872c:	1a9b      	subs	r3, r3, r2
 800872e:	42ab      	cmp	r3, r5
 8008730:	dc29      	bgt.n	8008786 <_printf_common+0xa6>
 8008732:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008736:	6822      	ldr	r2, [r4, #0]
 8008738:	3300      	adds	r3, #0
 800873a:	bf18      	it	ne
 800873c:	2301      	movne	r3, #1
 800873e:	0692      	lsls	r2, r2, #26
 8008740:	d42e      	bmi.n	80087a0 <_printf_common+0xc0>
 8008742:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008746:	4639      	mov	r1, r7
 8008748:	4630      	mov	r0, r6
 800874a:	47c0      	blx	r8
 800874c:	3001      	adds	r0, #1
 800874e:	d021      	beq.n	8008794 <_printf_common+0xb4>
 8008750:	6823      	ldr	r3, [r4, #0]
 8008752:	68e5      	ldr	r5, [r4, #12]
 8008754:	f003 0306 	and.w	r3, r3, #6
 8008758:	2b04      	cmp	r3, #4
 800875a:	bf18      	it	ne
 800875c:	2500      	movne	r5, #0
 800875e:	f8d9 2000 	ldr.w	r2, [r9]
 8008762:	f04f 0900 	mov.w	r9, #0
 8008766:	bf08      	it	eq
 8008768:	1aad      	subeq	r5, r5, r2
 800876a:	68a3      	ldr	r3, [r4, #8]
 800876c:	6922      	ldr	r2, [r4, #16]
 800876e:	bf08      	it	eq
 8008770:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008774:	4293      	cmp	r3, r2
 8008776:	bfc4      	itt	gt
 8008778:	1a9b      	subgt	r3, r3, r2
 800877a:	18ed      	addgt	r5, r5, r3
 800877c:	341a      	adds	r4, #26
 800877e:	454d      	cmp	r5, r9
 8008780:	d11a      	bne.n	80087b8 <_printf_common+0xd8>
 8008782:	2000      	movs	r0, #0
 8008784:	e008      	b.n	8008798 <_printf_common+0xb8>
 8008786:	2301      	movs	r3, #1
 8008788:	4652      	mov	r2, sl
 800878a:	4639      	mov	r1, r7
 800878c:	4630      	mov	r0, r6
 800878e:	47c0      	blx	r8
 8008790:	3001      	adds	r0, #1
 8008792:	d103      	bne.n	800879c <_printf_common+0xbc>
 8008794:	f04f 30ff 	mov.w	r0, #4294967295
 8008798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800879c:	3501      	adds	r5, #1
 800879e:	e7c2      	b.n	8008726 <_printf_common+0x46>
 80087a0:	2030      	movs	r0, #48	; 0x30
 80087a2:	18e1      	adds	r1, r4, r3
 80087a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087a8:	1c5a      	adds	r2, r3, #1
 80087aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80087ae:	4422      	add	r2, r4
 80087b0:	3302      	adds	r3, #2
 80087b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80087b6:	e7c4      	b.n	8008742 <_printf_common+0x62>
 80087b8:	2301      	movs	r3, #1
 80087ba:	4622      	mov	r2, r4
 80087bc:	4639      	mov	r1, r7
 80087be:	4630      	mov	r0, r6
 80087c0:	47c0      	blx	r8
 80087c2:	3001      	adds	r0, #1
 80087c4:	d0e6      	beq.n	8008794 <_printf_common+0xb4>
 80087c6:	f109 0901 	add.w	r9, r9, #1
 80087ca:	e7d8      	b.n	800877e <_printf_common+0x9e>

080087cc <_printf_i>:
 80087cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80087d4:	460c      	mov	r4, r1
 80087d6:	7e09      	ldrb	r1, [r1, #24]
 80087d8:	b085      	sub	sp, #20
 80087da:	296e      	cmp	r1, #110	; 0x6e
 80087dc:	4617      	mov	r7, r2
 80087de:	4606      	mov	r6, r0
 80087e0:	4698      	mov	r8, r3
 80087e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087e4:	f000 80b3 	beq.w	800894e <_printf_i+0x182>
 80087e8:	d822      	bhi.n	8008830 <_printf_i+0x64>
 80087ea:	2963      	cmp	r1, #99	; 0x63
 80087ec:	d036      	beq.n	800885c <_printf_i+0x90>
 80087ee:	d80a      	bhi.n	8008806 <_printf_i+0x3a>
 80087f0:	2900      	cmp	r1, #0
 80087f2:	f000 80b9 	beq.w	8008968 <_printf_i+0x19c>
 80087f6:	2958      	cmp	r1, #88	; 0x58
 80087f8:	f000 8083 	beq.w	8008902 <_printf_i+0x136>
 80087fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008800:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008804:	e032      	b.n	800886c <_printf_i+0xa0>
 8008806:	2964      	cmp	r1, #100	; 0x64
 8008808:	d001      	beq.n	800880e <_printf_i+0x42>
 800880a:	2969      	cmp	r1, #105	; 0x69
 800880c:	d1f6      	bne.n	80087fc <_printf_i+0x30>
 800880e:	6820      	ldr	r0, [r4, #0]
 8008810:	6813      	ldr	r3, [r2, #0]
 8008812:	0605      	lsls	r5, r0, #24
 8008814:	f103 0104 	add.w	r1, r3, #4
 8008818:	d52a      	bpl.n	8008870 <_printf_i+0xa4>
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	6011      	str	r1, [r2, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	da03      	bge.n	800882a <_printf_i+0x5e>
 8008822:	222d      	movs	r2, #45	; 0x2d
 8008824:	425b      	negs	r3, r3
 8008826:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800882a:	486f      	ldr	r0, [pc, #444]	; (80089e8 <_printf_i+0x21c>)
 800882c:	220a      	movs	r2, #10
 800882e:	e039      	b.n	80088a4 <_printf_i+0xd8>
 8008830:	2973      	cmp	r1, #115	; 0x73
 8008832:	f000 809d 	beq.w	8008970 <_printf_i+0x1a4>
 8008836:	d808      	bhi.n	800884a <_printf_i+0x7e>
 8008838:	296f      	cmp	r1, #111	; 0x6f
 800883a:	d020      	beq.n	800887e <_printf_i+0xb2>
 800883c:	2970      	cmp	r1, #112	; 0x70
 800883e:	d1dd      	bne.n	80087fc <_printf_i+0x30>
 8008840:	6823      	ldr	r3, [r4, #0]
 8008842:	f043 0320 	orr.w	r3, r3, #32
 8008846:	6023      	str	r3, [r4, #0]
 8008848:	e003      	b.n	8008852 <_printf_i+0x86>
 800884a:	2975      	cmp	r1, #117	; 0x75
 800884c:	d017      	beq.n	800887e <_printf_i+0xb2>
 800884e:	2978      	cmp	r1, #120	; 0x78
 8008850:	d1d4      	bne.n	80087fc <_printf_i+0x30>
 8008852:	2378      	movs	r3, #120	; 0x78
 8008854:	4865      	ldr	r0, [pc, #404]	; (80089ec <_printf_i+0x220>)
 8008856:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800885a:	e055      	b.n	8008908 <_printf_i+0x13c>
 800885c:	6813      	ldr	r3, [r2, #0]
 800885e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008862:	1d19      	adds	r1, r3, #4
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	6011      	str	r1, [r2, #0]
 8008868:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800886c:	2301      	movs	r3, #1
 800886e:	e08c      	b.n	800898a <_printf_i+0x1be>
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008876:	6011      	str	r1, [r2, #0]
 8008878:	bf18      	it	ne
 800887a:	b21b      	sxthne	r3, r3
 800887c:	e7cf      	b.n	800881e <_printf_i+0x52>
 800887e:	6813      	ldr	r3, [r2, #0]
 8008880:	6825      	ldr	r5, [r4, #0]
 8008882:	1d18      	adds	r0, r3, #4
 8008884:	6010      	str	r0, [r2, #0]
 8008886:	0628      	lsls	r0, r5, #24
 8008888:	d501      	bpl.n	800888e <_printf_i+0xc2>
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	e002      	b.n	8008894 <_printf_i+0xc8>
 800888e:	0668      	lsls	r0, r5, #25
 8008890:	d5fb      	bpl.n	800888a <_printf_i+0xbe>
 8008892:	881b      	ldrh	r3, [r3, #0]
 8008894:	296f      	cmp	r1, #111	; 0x6f
 8008896:	bf14      	ite	ne
 8008898:	220a      	movne	r2, #10
 800889a:	2208      	moveq	r2, #8
 800889c:	4852      	ldr	r0, [pc, #328]	; (80089e8 <_printf_i+0x21c>)
 800889e:	2100      	movs	r1, #0
 80088a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088a4:	6865      	ldr	r5, [r4, #4]
 80088a6:	2d00      	cmp	r5, #0
 80088a8:	60a5      	str	r5, [r4, #8]
 80088aa:	f2c0 8095 	blt.w	80089d8 <_printf_i+0x20c>
 80088ae:	6821      	ldr	r1, [r4, #0]
 80088b0:	f021 0104 	bic.w	r1, r1, #4
 80088b4:	6021      	str	r1, [r4, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d13d      	bne.n	8008936 <_printf_i+0x16a>
 80088ba:	2d00      	cmp	r5, #0
 80088bc:	f040 808e 	bne.w	80089dc <_printf_i+0x210>
 80088c0:	4665      	mov	r5, ip
 80088c2:	2a08      	cmp	r2, #8
 80088c4:	d10b      	bne.n	80088de <_printf_i+0x112>
 80088c6:	6823      	ldr	r3, [r4, #0]
 80088c8:	07db      	lsls	r3, r3, #31
 80088ca:	d508      	bpl.n	80088de <_printf_i+0x112>
 80088cc:	6923      	ldr	r3, [r4, #16]
 80088ce:	6862      	ldr	r2, [r4, #4]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	bfde      	ittt	le
 80088d4:	2330      	movle	r3, #48	; 0x30
 80088d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80088da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80088de:	ebac 0305 	sub.w	r3, ip, r5
 80088e2:	6123      	str	r3, [r4, #16]
 80088e4:	f8cd 8000 	str.w	r8, [sp]
 80088e8:	463b      	mov	r3, r7
 80088ea:	aa03      	add	r2, sp, #12
 80088ec:	4621      	mov	r1, r4
 80088ee:	4630      	mov	r0, r6
 80088f0:	f7ff fef6 	bl	80086e0 <_printf_common>
 80088f4:	3001      	adds	r0, #1
 80088f6:	d14d      	bne.n	8008994 <_printf_i+0x1c8>
 80088f8:	f04f 30ff 	mov.w	r0, #4294967295
 80088fc:	b005      	add	sp, #20
 80088fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008902:	4839      	ldr	r0, [pc, #228]	; (80089e8 <_printf_i+0x21c>)
 8008904:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008908:	6813      	ldr	r3, [r2, #0]
 800890a:	6821      	ldr	r1, [r4, #0]
 800890c:	1d1d      	adds	r5, r3, #4
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	6015      	str	r5, [r2, #0]
 8008912:	060a      	lsls	r2, r1, #24
 8008914:	d50b      	bpl.n	800892e <_printf_i+0x162>
 8008916:	07ca      	lsls	r2, r1, #31
 8008918:	bf44      	itt	mi
 800891a:	f041 0120 	orrmi.w	r1, r1, #32
 800891e:	6021      	strmi	r1, [r4, #0]
 8008920:	b91b      	cbnz	r3, 800892a <_printf_i+0x15e>
 8008922:	6822      	ldr	r2, [r4, #0]
 8008924:	f022 0220 	bic.w	r2, r2, #32
 8008928:	6022      	str	r2, [r4, #0]
 800892a:	2210      	movs	r2, #16
 800892c:	e7b7      	b.n	800889e <_printf_i+0xd2>
 800892e:	064d      	lsls	r5, r1, #25
 8008930:	bf48      	it	mi
 8008932:	b29b      	uxthmi	r3, r3
 8008934:	e7ef      	b.n	8008916 <_printf_i+0x14a>
 8008936:	4665      	mov	r5, ip
 8008938:	fbb3 f1f2 	udiv	r1, r3, r2
 800893c:	fb02 3311 	mls	r3, r2, r1, r3
 8008940:	5cc3      	ldrb	r3, [r0, r3]
 8008942:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008946:	460b      	mov	r3, r1
 8008948:	2900      	cmp	r1, #0
 800894a:	d1f5      	bne.n	8008938 <_printf_i+0x16c>
 800894c:	e7b9      	b.n	80088c2 <_printf_i+0xf6>
 800894e:	6813      	ldr	r3, [r2, #0]
 8008950:	6825      	ldr	r5, [r4, #0]
 8008952:	1d18      	adds	r0, r3, #4
 8008954:	6961      	ldr	r1, [r4, #20]
 8008956:	6010      	str	r0, [r2, #0]
 8008958:	0628      	lsls	r0, r5, #24
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	d501      	bpl.n	8008962 <_printf_i+0x196>
 800895e:	6019      	str	r1, [r3, #0]
 8008960:	e002      	b.n	8008968 <_printf_i+0x19c>
 8008962:	066a      	lsls	r2, r5, #25
 8008964:	d5fb      	bpl.n	800895e <_printf_i+0x192>
 8008966:	8019      	strh	r1, [r3, #0]
 8008968:	2300      	movs	r3, #0
 800896a:	4665      	mov	r5, ip
 800896c:	6123      	str	r3, [r4, #16]
 800896e:	e7b9      	b.n	80088e4 <_printf_i+0x118>
 8008970:	6813      	ldr	r3, [r2, #0]
 8008972:	1d19      	adds	r1, r3, #4
 8008974:	6011      	str	r1, [r2, #0]
 8008976:	681d      	ldr	r5, [r3, #0]
 8008978:	6862      	ldr	r2, [r4, #4]
 800897a:	2100      	movs	r1, #0
 800897c:	4628      	mov	r0, r5
 800897e:	f000 f837 	bl	80089f0 <memchr>
 8008982:	b108      	cbz	r0, 8008988 <_printf_i+0x1bc>
 8008984:	1b40      	subs	r0, r0, r5
 8008986:	6060      	str	r0, [r4, #4]
 8008988:	6863      	ldr	r3, [r4, #4]
 800898a:	6123      	str	r3, [r4, #16]
 800898c:	2300      	movs	r3, #0
 800898e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008992:	e7a7      	b.n	80088e4 <_printf_i+0x118>
 8008994:	6923      	ldr	r3, [r4, #16]
 8008996:	462a      	mov	r2, r5
 8008998:	4639      	mov	r1, r7
 800899a:	4630      	mov	r0, r6
 800899c:	47c0      	blx	r8
 800899e:	3001      	adds	r0, #1
 80089a0:	d0aa      	beq.n	80088f8 <_printf_i+0x12c>
 80089a2:	6823      	ldr	r3, [r4, #0]
 80089a4:	079b      	lsls	r3, r3, #30
 80089a6:	d413      	bmi.n	80089d0 <_printf_i+0x204>
 80089a8:	68e0      	ldr	r0, [r4, #12]
 80089aa:	9b03      	ldr	r3, [sp, #12]
 80089ac:	4298      	cmp	r0, r3
 80089ae:	bfb8      	it	lt
 80089b0:	4618      	movlt	r0, r3
 80089b2:	e7a3      	b.n	80088fc <_printf_i+0x130>
 80089b4:	2301      	movs	r3, #1
 80089b6:	464a      	mov	r2, r9
 80089b8:	4639      	mov	r1, r7
 80089ba:	4630      	mov	r0, r6
 80089bc:	47c0      	blx	r8
 80089be:	3001      	adds	r0, #1
 80089c0:	d09a      	beq.n	80088f8 <_printf_i+0x12c>
 80089c2:	3501      	adds	r5, #1
 80089c4:	68e3      	ldr	r3, [r4, #12]
 80089c6:	9a03      	ldr	r2, [sp, #12]
 80089c8:	1a9b      	subs	r3, r3, r2
 80089ca:	42ab      	cmp	r3, r5
 80089cc:	dcf2      	bgt.n	80089b4 <_printf_i+0x1e8>
 80089ce:	e7eb      	b.n	80089a8 <_printf_i+0x1dc>
 80089d0:	2500      	movs	r5, #0
 80089d2:	f104 0919 	add.w	r9, r4, #25
 80089d6:	e7f5      	b.n	80089c4 <_printf_i+0x1f8>
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d1ac      	bne.n	8008936 <_printf_i+0x16a>
 80089dc:	7803      	ldrb	r3, [r0, #0]
 80089de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089e6:	e76c      	b.n	80088c2 <_printf_i+0xf6>
 80089e8:	08009271 	.word	0x08009271
 80089ec:	08009282 	.word	0x08009282

080089f0 <memchr>:
 80089f0:	b510      	push	{r4, lr}
 80089f2:	b2c9      	uxtb	r1, r1
 80089f4:	4402      	add	r2, r0
 80089f6:	4290      	cmp	r0, r2
 80089f8:	4603      	mov	r3, r0
 80089fa:	d101      	bne.n	8008a00 <memchr+0x10>
 80089fc:	2300      	movs	r3, #0
 80089fe:	e003      	b.n	8008a08 <memchr+0x18>
 8008a00:	781c      	ldrb	r4, [r3, #0]
 8008a02:	3001      	adds	r0, #1
 8008a04:	428c      	cmp	r4, r1
 8008a06:	d1f6      	bne.n	80089f6 <memchr+0x6>
 8008a08:	4618      	mov	r0, r3
 8008a0a:	bd10      	pop	{r4, pc}

08008a0c <memcpy>:
 8008a0c:	b510      	push	{r4, lr}
 8008a0e:	1e43      	subs	r3, r0, #1
 8008a10:	440a      	add	r2, r1
 8008a12:	4291      	cmp	r1, r2
 8008a14:	d100      	bne.n	8008a18 <memcpy+0xc>
 8008a16:	bd10      	pop	{r4, pc}
 8008a18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a20:	e7f7      	b.n	8008a12 <memcpy+0x6>

08008a22 <memmove>:
 8008a22:	4288      	cmp	r0, r1
 8008a24:	b510      	push	{r4, lr}
 8008a26:	eb01 0302 	add.w	r3, r1, r2
 8008a2a:	d807      	bhi.n	8008a3c <memmove+0x1a>
 8008a2c:	1e42      	subs	r2, r0, #1
 8008a2e:	4299      	cmp	r1, r3
 8008a30:	d00a      	beq.n	8008a48 <memmove+0x26>
 8008a32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a36:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008a3a:	e7f8      	b.n	8008a2e <memmove+0xc>
 8008a3c:	4283      	cmp	r3, r0
 8008a3e:	d9f5      	bls.n	8008a2c <memmove+0xa>
 8008a40:	1881      	adds	r1, r0, r2
 8008a42:	1ad2      	subs	r2, r2, r3
 8008a44:	42d3      	cmn	r3, r2
 8008a46:	d100      	bne.n	8008a4a <memmove+0x28>
 8008a48:	bd10      	pop	{r4, pc}
 8008a4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a4e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008a52:	e7f7      	b.n	8008a44 <memmove+0x22>

08008a54 <_free_r>:
 8008a54:	b538      	push	{r3, r4, r5, lr}
 8008a56:	4605      	mov	r5, r0
 8008a58:	2900      	cmp	r1, #0
 8008a5a:	d043      	beq.n	8008ae4 <_free_r+0x90>
 8008a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a60:	1f0c      	subs	r4, r1, #4
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	bfb8      	it	lt
 8008a66:	18e4      	addlt	r4, r4, r3
 8008a68:	f000 f8d0 	bl	8008c0c <__malloc_lock>
 8008a6c:	4a1e      	ldr	r2, [pc, #120]	; (8008ae8 <_free_r+0x94>)
 8008a6e:	6813      	ldr	r3, [r2, #0]
 8008a70:	4610      	mov	r0, r2
 8008a72:	b933      	cbnz	r3, 8008a82 <_free_r+0x2e>
 8008a74:	6063      	str	r3, [r4, #4]
 8008a76:	6014      	str	r4, [r2, #0]
 8008a78:	4628      	mov	r0, r5
 8008a7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a7e:	f000 b8c6 	b.w	8008c0e <__malloc_unlock>
 8008a82:	42a3      	cmp	r3, r4
 8008a84:	d90b      	bls.n	8008a9e <_free_r+0x4a>
 8008a86:	6821      	ldr	r1, [r4, #0]
 8008a88:	1862      	adds	r2, r4, r1
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	bf01      	itttt	eq
 8008a8e:	681a      	ldreq	r2, [r3, #0]
 8008a90:	685b      	ldreq	r3, [r3, #4]
 8008a92:	1852      	addeq	r2, r2, r1
 8008a94:	6022      	streq	r2, [r4, #0]
 8008a96:	6063      	str	r3, [r4, #4]
 8008a98:	6004      	str	r4, [r0, #0]
 8008a9a:	e7ed      	b.n	8008a78 <_free_r+0x24>
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	685a      	ldr	r2, [r3, #4]
 8008aa0:	b10a      	cbz	r2, 8008aa6 <_free_r+0x52>
 8008aa2:	42a2      	cmp	r2, r4
 8008aa4:	d9fa      	bls.n	8008a9c <_free_r+0x48>
 8008aa6:	6819      	ldr	r1, [r3, #0]
 8008aa8:	1858      	adds	r0, r3, r1
 8008aaa:	42a0      	cmp	r0, r4
 8008aac:	d10b      	bne.n	8008ac6 <_free_r+0x72>
 8008aae:	6820      	ldr	r0, [r4, #0]
 8008ab0:	4401      	add	r1, r0
 8008ab2:	1858      	adds	r0, r3, r1
 8008ab4:	4282      	cmp	r2, r0
 8008ab6:	6019      	str	r1, [r3, #0]
 8008ab8:	d1de      	bne.n	8008a78 <_free_r+0x24>
 8008aba:	6810      	ldr	r0, [r2, #0]
 8008abc:	6852      	ldr	r2, [r2, #4]
 8008abe:	4401      	add	r1, r0
 8008ac0:	6019      	str	r1, [r3, #0]
 8008ac2:	605a      	str	r2, [r3, #4]
 8008ac4:	e7d8      	b.n	8008a78 <_free_r+0x24>
 8008ac6:	d902      	bls.n	8008ace <_free_r+0x7a>
 8008ac8:	230c      	movs	r3, #12
 8008aca:	602b      	str	r3, [r5, #0]
 8008acc:	e7d4      	b.n	8008a78 <_free_r+0x24>
 8008ace:	6820      	ldr	r0, [r4, #0]
 8008ad0:	1821      	adds	r1, r4, r0
 8008ad2:	428a      	cmp	r2, r1
 8008ad4:	bf01      	itttt	eq
 8008ad6:	6811      	ldreq	r1, [r2, #0]
 8008ad8:	6852      	ldreq	r2, [r2, #4]
 8008ada:	1809      	addeq	r1, r1, r0
 8008adc:	6021      	streq	r1, [r4, #0]
 8008ade:	6062      	str	r2, [r4, #4]
 8008ae0:	605c      	str	r4, [r3, #4]
 8008ae2:	e7c9      	b.n	8008a78 <_free_r+0x24>
 8008ae4:	bd38      	pop	{r3, r4, r5, pc}
 8008ae6:	bf00      	nop
 8008ae8:	200002d8 	.word	0x200002d8

08008aec <_malloc_r>:
 8008aec:	b570      	push	{r4, r5, r6, lr}
 8008aee:	1ccd      	adds	r5, r1, #3
 8008af0:	f025 0503 	bic.w	r5, r5, #3
 8008af4:	3508      	adds	r5, #8
 8008af6:	2d0c      	cmp	r5, #12
 8008af8:	bf38      	it	cc
 8008afa:	250c      	movcc	r5, #12
 8008afc:	2d00      	cmp	r5, #0
 8008afe:	4606      	mov	r6, r0
 8008b00:	db01      	blt.n	8008b06 <_malloc_r+0x1a>
 8008b02:	42a9      	cmp	r1, r5
 8008b04:	d903      	bls.n	8008b0e <_malloc_r+0x22>
 8008b06:	230c      	movs	r3, #12
 8008b08:	6033      	str	r3, [r6, #0]
 8008b0a:	2000      	movs	r0, #0
 8008b0c:	bd70      	pop	{r4, r5, r6, pc}
 8008b0e:	f000 f87d 	bl	8008c0c <__malloc_lock>
 8008b12:	4a21      	ldr	r2, [pc, #132]	; (8008b98 <_malloc_r+0xac>)
 8008b14:	6814      	ldr	r4, [r2, #0]
 8008b16:	4621      	mov	r1, r4
 8008b18:	b991      	cbnz	r1, 8008b40 <_malloc_r+0x54>
 8008b1a:	4c20      	ldr	r4, [pc, #128]	; (8008b9c <_malloc_r+0xb0>)
 8008b1c:	6823      	ldr	r3, [r4, #0]
 8008b1e:	b91b      	cbnz	r3, 8008b28 <_malloc_r+0x3c>
 8008b20:	4630      	mov	r0, r6
 8008b22:	f000 f863 	bl	8008bec <_sbrk_r>
 8008b26:	6020      	str	r0, [r4, #0]
 8008b28:	4629      	mov	r1, r5
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	f000 f85e 	bl	8008bec <_sbrk_r>
 8008b30:	1c43      	adds	r3, r0, #1
 8008b32:	d124      	bne.n	8008b7e <_malloc_r+0x92>
 8008b34:	230c      	movs	r3, #12
 8008b36:	4630      	mov	r0, r6
 8008b38:	6033      	str	r3, [r6, #0]
 8008b3a:	f000 f868 	bl	8008c0e <__malloc_unlock>
 8008b3e:	e7e4      	b.n	8008b0a <_malloc_r+0x1e>
 8008b40:	680b      	ldr	r3, [r1, #0]
 8008b42:	1b5b      	subs	r3, r3, r5
 8008b44:	d418      	bmi.n	8008b78 <_malloc_r+0x8c>
 8008b46:	2b0b      	cmp	r3, #11
 8008b48:	d90f      	bls.n	8008b6a <_malloc_r+0x7e>
 8008b4a:	600b      	str	r3, [r1, #0]
 8008b4c:	18cc      	adds	r4, r1, r3
 8008b4e:	50cd      	str	r5, [r1, r3]
 8008b50:	4630      	mov	r0, r6
 8008b52:	f000 f85c 	bl	8008c0e <__malloc_unlock>
 8008b56:	f104 000b 	add.w	r0, r4, #11
 8008b5a:	1d23      	adds	r3, r4, #4
 8008b5c:	f020 0007 	bic.w	r0, r0, #7
 8008b60:	1ac3      	subs	r3, r0, r3
 8008b62:	d0d3      	beq.n	8008b0c <_malloc_r+0x20>
 8008b64:	425a      	negs	r2, r3
 8008b66:	50e2      	str	r2, [r4, r3]
 8008b68:	e7d0      	b.n	8008b0c <_malloc_r+0x20>
 8008b6a:	684b      	ldr	r3, [r1, #4]
 8008b6c:	428c      	cmp	r4, r1
 8008b6e:	bf16      	itet	ne
 8008b70:	6063      	strne	r3, [r4, #4]
 8008b72:	6013      	streq	r3, [r2, #0]
 8008b74:	460c      	movne	r4, r1
 8008b76:	e7eb      	b.n	8008b50 <_malloc_r+0x64>
 8008b78:	460c      	mov	r4, r1
 8008b7a:	6849      	ldr	r1, [r1, #4]
 8008b7c:	e7cc      	b.n	8008b18 <_malloc_r+0x2c>
 8008b7e:	1cc4      	adds	r4, r0, #3
 8008b80:	f024 0403 	bic.w	r4, r4, #3
 8008b84:	42a0      	cmp	r0, r4
 8008b86:	d005      	beq.n	8008b94 <_malloc_r+0xa8>
 8008b88:	1a21      	subs	r1, r4, r0
 8008b8a:	4630      	mov	r0, r6
 8008b8c:	f000 f82e 	bl	8008bec <_sbrk_r>
 8008b90:	3001      	adds	r0, #1
 8008b92:	d0cf      	beq.n	8008b34 <_malloc_r+0x48>
 8008b94:	6025      	str	r5, [r4, #0]
 8008b96:	e7db      	b.n	8008b50 <_malloc_r+0x64>
 8008b98:	200002d8 	.word	0x200002d8
 8008b9c:	200002dc 	.word	0x200002dc

08008ba0 <_realloc_r>:
 8008ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba2:	4607      	mov	r7, r0
 8008ba4:	4614      	mov	r4, r2
 8008ba6:	460e      	mov	r6, r1
 8008ba8:	b921      	cbnz	r1, 8008bb4 <_realloc_r+0x14>
 8008baa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008bae:	4611      	mov	r1, r2
 8008bb0:	f7ff bf9c 	b.w	8008aec <_malloc_r>
 8008bb4:	b922      	cbnz	r2, 8008bc0 <_realloc_r+0x20>
 8008bb6:	f7ff ff4d 	bl	8008a54 <_free_r>
 8008bba:	4625      	mov	r5, r4
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bc0:	f000 f826 	bl	8008c10 <_malloc_usable_size_r>
 8008bc4:	42a0      	cmp	r0, r4
 8008bc6:	d20f      	bcs.n	8008be8 <_realloc_r+0x48>
 8008bc8:	4621      	mov	r1, r4
 8008bca:	4638      	mov	r0, r7
 8008bcc:	f7ff ff8e 	bl	8008aec <_malloc_r>
 8008bd0:	4605      	mov	r5, r0
 8008bd2:	2800      	cmp	r0, #0
 8008bd4:	d0f2      	beq.n	8008bbc <_realloc_r+0x1c>
 8008bd6:	4631      	mov	r1, r6
 8008bd8:	4622      	mov	r2, r4
 8008bda:	f7ff ff17 	bl	8008a0c <memcpy>
 8008bde:	4631      	mov	r1, r6
 8008be0:	4638      	mov	r0, r7
 8008be2:	f7ff ff37 	bl	8008a54 <_free_r>
 8008be6:	e7e9      	b.n	8008bbc <_realloc_r+0x1c>
 8008be8:	4635      	mov	r5, r6
 8008bea:	e7e7      	b.n	8008bbc <_realloc_r+0x1c>

08008bec <_sbrk_r>:
 8008bec:	b538      	push	{r3, r4, r5, lr}
 8008bee:	2300      	movs	r3, #0
 8008bf0:	4c05      	ldr	r4, [pc, #20]	; (8008c08 <_sbrk_r+0x1c>)
 8008bf2:	4605      	mov	r5, r0
 8008bf4:	4608      	mov	r0, r1
 8008bf6:	6023      	str	r3, [r4, #0]
 8008bf8:	f7f9 f882 	bl	8001d00 <_sbrk>
 8008bfc:	1c43      	adds	r3, r0, #1
 8008bfe:	d102      	bne.n	8008c06 <_sbrk_r+0x1a>
 8008c00:	6823      	ldr	r3, [r4, #0]
 8008c02:	b103      	cbz	r3, 8008c06 <_sbrk_r+0x1a>
 8008c04:	602b      	str	r3, [r5, #0]
 8008c06:	bd38      	pop	{r3, r4, r5, pc}
 8008c08:	20004908 	.word	0x20004908

08008c0c <__malloc_lock>:
 8008c0c:	4770      	bx	lr

08008c0e <__malloc_unlock>:
 8008c0e:	4770      	bx	lr

08008c10 <_malloc_usable_size_r>:
 8008c10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c14:	1f18      	subs	r0, r3, #4
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	bfbc      	itt	lt
 8008c1a:	580b      	ldrlt	r3, [r1, r0]
 8008c1c:	18c0      	addlt	r0, r0, r3
 8008c1e:	4770      	bx	lr

08008c20 <_init>:
 8008c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c22:	bf00      	nop
 8008c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c26:	bc08      	pop	{r3}
 8008c28:	469e      	mov	lr, r3
 8008c2a:	4770      	bx	lr

08008c2c <_fini>:
 8008c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c2e:	bf00      	nop
 8008c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c32:	bc08      	pop	{r3}
 8008c34:	469e      	mov	lr, r3
 8008c36:	4770      	bx	lr
