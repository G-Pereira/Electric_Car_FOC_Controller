
Fiat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004348  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08004458  08004458  00014458  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046a8  080046a8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080046a8  080046a8  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046a8  080046a8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046a8  080046a8  000146a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046ac  080046ac  000146ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080046b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  200001dc  0800488c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  0800488c  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000052b5  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000130f  00000000  00000000  000254ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000528  00000000  00000000  000267d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000470  00000000  00000000  00026cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000131b0  00000000  00000000  00027168  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005369  00000000  00000000  0003a318  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006d334  00000000  00000000  0003f681  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ac9b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c1c  00000000  00000000  000aca30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08004440 	.word	0x08004440

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08004440 	.word	0x08004440

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	float vel_pedal = 0;
 8001036:	f04f 0300 	mov.w	r3, #0
 800103a:	607b      	str	r3, [r7, #4]
	uint16_t rawValue = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	807b      	strh	r3, [r7, #2]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001040:	f000 fa46 	bl	80014d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001044:	f000 f83a 	bl	80010bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001048:	f000 f8c6 	bl	80011d8 <MX_GPIO_Init>
  MX_ADC1_Init();
 800104c:	f000 f886 	bl	800115c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8001050:	4815      	ldr	r0, [pc, #84]	; (80010a8 <main+0x78>)
 8001052:	f000 fb77 	bl	8001744 <HAL_ADC_Start>
  while (1)
  {

	  //HAL_ADC_PollForConversion(&hadc1, 500);

	  rawValue = HAL_ADC_GetValue(&hadc1);
 8001056:	4814      	ldr	r0, [pc, #80]	; (80010a8 <main+0x78>)
 8001058:	f000 fc22 	bl	80018a0 <HAL_ADC_GetValue>
 800105c:	4603      	mov	r3, r0
 800105e:	807b      	strh	r3, [r7, #2]
	  vel_pedal=((float)rawValue)/4095*100;
 8001060:	887b      	ldrh	r3, [r7, #2]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fdc6 	bl	8000bf4 <__aeabi_ui2f>
 8001068:	4603      	mov	r3, r0
 800106a:	4910      	ldr	r1, [pc, #64]	; (80010ac <main+0x7c>)
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fecd 	bl	8000e0c <__aeabi_fdiv>
 8001072:	4603      	mov	r3, r0
 8001074:	490e      	ldr	r1, [pc, #56]	; (80010b0 <main+0x80>)
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fe14 	bl	8000ca4 <__aeabi_fmul>
 800107c:	4603      	mov	r3, r0
 800107e:	607b      	str	r3, [r7, #4]

	  if(vel_pedal > 50)
 8001080:	490c      	ldr	r1, [pc, #48]	; (80010b4 <main+0x84>)
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ffca 	bl	800101c <__aeabi_fcmpgt>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d005      	beq.n	800109a <main+0x6a>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800108e:	2201      	movs	r2, #1
 8001090:	2101      	movs	r1, #1
 8001092:	4809      	ldr	r0, [pc, #36]	; (80010b8 <main+0x88>)
 8001094:	f000 ffd2 	bl	800203c <HAL_GPIO_WritePin>
 8001098:	e7dd      	b.n	8001056 <main+0x26>
	  else
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	2101      	movs	r1, #1
 800109e:	4806      	ldr	r0, [pc, #24]	; (80010b8 <main+0x88>)
 80010a0:	f000 ffcc 	bl	800203c <HAL_GPIO_WritePin>
	  rawValue = HAL_ADC_GetValue(&hadc1);
 80010a4:	e7d7      	b.n	8001056 <main+0x26>
 80010a6:	bf00      	nop
 80010a8:	20000204 	.word	0x20000204
 80010ac:	457ff000 	.word	0x457ff000
 80010b0:	42c80000 	.word	0x42c80000
 80010b4:	42480000 	.word	0x42480000
 80010b8:	40010c00 	.word	0x40010c00

080010bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b094      	sub	sp, #80	; 0x50
 80010c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010c6:	2228      	movs	r2, #40	; 0x28
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f001 fc98 	bl	8002a00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010ec:	2302      	movs	r3, #2
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f0:	2301      	movs	r3, #1
 80010f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010f4:	2310      	movs	r3, #16
 80010f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001100:	4618      	mov	r0, r3
 8001102:	f000 ffb3 	bl	800206c <HAL_RCC_OscConfig>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800110c:	f000 f8bc 	bl	8001288 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001110:	230f      	movs	r3, #15
 8001112:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001114:	2300      	movs	r3, #0
 8001116:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800111c:	2300      	movs	r3, #0
 800111e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001120:	2300      	movs	r3, #0
 8001122:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f001 fa1e 	bl	800256c <HAL_RCC_ClockConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001136:	f000 f8a7 	bl	8001288 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800113a:	2302      	movs	r3, #2
 800113c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	4618      	mov	r0, r3
 8001146:	f001 fb7b 	bl	8002840 <HAL_RCCEx_PeriphCLKConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001150:	f000 f89a 	bl	8001288 <Error_Handler>
  }
}
 8001154:	bf00      	nop
 8001156:	3750      	adds	r7, #80	; 0x50
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800116c:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <MX_ADC1_Init+0x74>)
 800116e:	4a19      	ldr	r2, [pc, #100]	; (80011d4 <MX_ADC1_Init+0x78>)
 8001170:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <MX_ADC1_Init+0x74>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001178:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <MX_ADC1_Init+0x74>)
 800117a:	2201      	movs	r2, #1
 800117c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800117e:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <MX_ADC1_Init+0x74>)
 8001180:	2200      	movs	r2, #0
 8001182:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <MX_ADC1_Init+0x74>)
 8001186:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800118a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800118c:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <MX_ADC1_Init+0x74>)
 800118e:	2200      	movs	r2, #0
 8001190:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <MX_ADC1_Init+0x74>)
 8001194:	2201      	movs	r2, #1
 8001196:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001198:	480d      	ldr	r0, [pc, #52]	; (80011d0 <MX_ADC1_Init+0x74>)
 800119a:	f000 f9fb 	bl	8001594 <HAL_ADC_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80011a4:	f000 f870 	bl	8001288 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80011a8:	2307      	movs	r3, #7
 80011aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ac:	2301      	movs	r3, #1
 80011ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	4619      	mov	r1, r3
 80011b8:	4805      	ldr	r0, [pc, #20]	; (80011d0 <MX_ADC1_Init+0x74>)
 80011ba:	f000 fb7d 	bl	80018b8 <HAL_ADC_ConfigChannel>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80011c4:	f000 f860 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011c8:	bf00      	nop
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000204 	.word	0x20000204
 80011d4:	40012400 	.word	0x40012400

080011d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011de:	f107 0310 	add.w	r3, r7, #16
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ec:	4b23      	ldr	r3, [pc, #140]	; (800127c <MX_GPIO_Init+0xa4>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	4a22      	ldr	r2, [pc, #136]	; (800127c <MX_GPIO_Init+0xa4>)
 80011f2:	f043 0320 	orr.w	r3, r3, #32
 80011f6:	6193      	str	r3, [r2, #24]
 80011f8:	4b20      	ldr	r3, [pc, #128]	; (800127c <MX_GPIO_Init+0xa4>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	f003 0320 	and.w	r3, r3, #32
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001204:	4b1d      	ldr	r3, [pc, #116]	; (800127c <MX_GPIO_Init+0xa4>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	4a1c      	ldr	r2, [pc, #112]	; (800127c <MX_GPIO_Init+0xa4>)
 800120a:	f043 0304 	orr.w	r3, r3, #4
 800120e:	6193      	str	r3, [r2, #24]
 8001210:	4b1a      	ldr	r3, [pc, #104]	; (800127c <MX_GPIO_Init+0xa4>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	f003 0304 	and.w	r3, r3, #4
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121c:	4b17      	ldr	r3, [pc, #92]	; (800127c <MX_GPIO_Init+0xa4>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	4a16      	ldr	r2, [pc, #88]	; (800127c <MX_GPIO_Init+0xa4>)
 8001222:	f043 0308 	orr.w	r3, r3, #8
 8001226:	6193      	str	r3, [r2, #24]
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <MX_GPIO_Init+0xa4>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	f003 0308 	and.w	r3, r3, #8
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001234:	2200      	movs	r2, #0
 8001236:	2101      	movs	r1, #1
 8001238:	4811      	ldr	r0, [pc, #68]	; (8001280 <MX_GPIO_Init+0xa8>)
 800123a:	f000 feff 	bl	800203c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800123e:	2304      	movs	r3, #4
 8001240:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001242:	2302      	movs	r3, #2
 8001244:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001246:	2303      	movs	r3, #3
 8001248:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124a:	f107 0310 	add.w	r3, r7, #16
 800124e:	4619      	mov	r1, r3
 8001250:	480c      	ldr	r0, [pc, #48]	; (8001284 <MX_GPIO_Init+0xac>)
 8001252:	f000 fd99 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001256:	2301      	movs	r3, #1
 8001258:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125a:	2301      	movs	r3, #1
 800125c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2302      	movs	r3, #2
 8001264:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001266:	f107 0310 	add.w	r3, r7, #16
 800126a:	4619      	mov	r1, r3
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <MX_GPIO_Init+0xa8>)
 800126e:	f000 fd8b 	bl	8001d88 <HAL_GPIO_Init>

}
 8001272:	bf00      	nop
 8001274:	3720      	adds	r7, #32
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000
 8001280:	40010c00 	.word	0x40010c00
 8001284:	40010800 	.word	0x40010800

08001288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr

08001294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <HAL_MspInit+0x5c>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	4a14      	ldr	r2, [pc, #80]	; (80012f0 <HAL_MspInit+0x5c>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6193      	str	r3, [r2, #24]
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_MspInit+0x5c>)
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <HAL_MspInit+0x5c>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	4a0e      	ldr	r2, [pc, #56]	; (80012f0 <HAL_MspInit+0x5c>)
 80012b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012bc:	61d3      	str	r3, [r2, #28]
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <HAL_MspInit+0x5c>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <HAL_MspInit+0x60>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <HAL_MspInit+0x60>)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40010000 	.word	0x40010000

080012f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a14      	ldr	r2, [pc, #80]	; (8001364 <HAL_ADC_MspInit+0x6c>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d121      	bne.n	800135c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <HAL_ADC_MspInit+0x70>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4a12      	ldr	r2, [pc, #72]	; (8001368 <HAL_ADC_MspInit+0x70>)
 800131e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001322:	6193      	str	r3, [r2, #24]
 8001324:	4b10      	ldr	r3, [pc, #64]	; (8001368 <HAL_ADC_MspInit+0x70>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001330:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <HAL_ADC_MspInit+0x70>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4a0c      	ldr	r2, [pc, #48]	; (8001368 <HAL_ADC_MspInit+0x70>)
 8001336:	f043 0304 	orr.w	r3, r3, #4
 800133a:	6193      	str	r3, [r2, #24]
 800133c:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <HAL_ADC_MspInit+0x70>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA7     ------> ADC1_IN7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800134c:	2303      	movs	r3, #3
 800134e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001350:	f107 0310 	add.w	r3, r7, #16
 8001354:	4619      	mov	r1, r3
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <HAL_ADC_MspInit+0x74>)
 8001358:	f000 fd16 	bl	8001d88 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800135c:	bf00      	nop
 800135e:	3720      	adds	r7, #32
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40012400 	.word	0x40012400
 8001368:	40021000 	.word	0x40021000
 800136c:	40010800 	.word	0x40010800

08001370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001380:	e7fe      	b.n	8001380 <HardFault_Handler+0x4>

08001382 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001386:	e7fe      	b.n	8001386 <MemManage_Handler+0x4>

08001388 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138c:	e7fe      	b.n	800138c <BusFault_Handler+0x4>

0800138e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001392:	e7fe      	b.n	8001392 <UsageFault_Handler+0x4>

08001394 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr

080013a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr

080013ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr

080013b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013bc:	f000 f8ce 	bl	800155c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <_sbrk+0x50>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d102      	bne.n	80013da <_sbrk+0x16>
		heap_end = &end;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <_sbrk+0x50>)
 80013d6:	4a10      	ldr	r2, [pc, #64]	; (8001418 <_sbrk+0x54>)
 80013d8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <_sbrk+0x50>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <_sbrk+0x50>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4413      	add	r3, r2
 80013e8:	466a      	mov	r2, sp
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d907      	bls.n	80013fe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80013ee:	f001 fadd 	bl	80029ac <__errno>
 80013f2:	4602      	mov	r2, r0
 80013f4:	230c      	movs	r3, #12
 80013f6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80013f8:	f04f 33ff 	mov.w	r3, #4294967295
 80013fc:	e006      	b.n	800140c <_sbrk+0x48>
	}

	heap_end += incr;
 80013fe:	4b05      	ldr	r3, [pc, #20]	; (8001414 <_sbrk+0x50>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	4a03      	ldr	r2, [pc, #12]	; (8001414 <_sbrk+0x50>)
 8001408:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800140a:	68fb      	ldr	r3, [r7, #12]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200001f8 	.word	0x200001f8
 8001418:	20000240 	.word	0x20000240

0800141c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001420:	4b15      	ldr	r3, [pc, #84]	; (8001478 <SystemInit+0x5c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a14      	ldr	r2, [pc, #80]	; (8001478 <SystemInit+0x5c>)
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <SystemInit+0x5c>)
 800142e:	685a      	ldr	r2, [r3, #4]
 8001430:	4911      	ldr	r1, [pc, #68]	; (8001478 <SystemInit+0x5c>)
 8001432:	4b12      	ldr	r3, [pc, #72]	; (800147c <SystemInit+0x60>)
 8001434:	4013      	ands	r3, r2
 8001436:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001438:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <SystemInit+0x5c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a0e      	ldr	r2, [pc, #56]	; (8001478 <SystemInit+0x5c>)
 800143e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001446:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <SystemInit+0x5c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <SystemInit+0x5c>)
 800144e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001452:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001454:	4b08      	ldr	r3, [pc, #32]	; (8001478 <SystemInit+0x5c>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	4a07      	ldr	r2, [pc, #28]	; (8001478 <SystemInit+0x5c>)
 800145a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800145e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <SystemInit+0x5c>)
 8001462:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001466:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <SystemInit+0x64>)
 800146a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800146e:	609a      	str	r2, [r3, #8]
#endif 
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	40021000 	.word	0x40021000
 800147c:	f8ff0000 	.word	0xf8ff0000
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001484:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001486:	e003      	b.n	8001490 <LoopCopyDataInit>

08001488 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001488:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800148a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800148c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800148e:	3104      	adds	r1, #4

08001490 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001490:	480a      	ldr	r0, [pc, #40]	; (80014bc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001494:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001496:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001498:	d3f6      	bcc.n	8001488 <CopyDataInit>
  ldr r2, =_sbss
 800149a:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800149c:	e002      	b.n	80014a4 <LoopFillZerobss>

0800149e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  str r3, [r2], #4
 80014a0:	f842 3b04 	str.w	r3, [r2], #4

080014a4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80014a6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80014a8:	d3f9      	bcc.n	800149e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014aa:	f7ff ffb7 	bl	800141c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ae:	f001 fa83 	bl	80029b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014b2:	f7ff fdbd 	bl	8001030 <main>
  bx lr
 80014b6:	4770      	bx	lr
  ldr r3, =_sidata
 80014b8:	080046b0 	.word	0x080046b0
  ldr r0, =_sdata
 80014bc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80014c0:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 80014c4:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 80014c8:	2000023c 	.word	0x2000023c

080014cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014cc:	e7fe      	b.n	80014cc <ADC1_2_IRQHandler>
	...

080014d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <HAL_Init+0x28>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a07      	ldr	r2, [pc, #28]	; (80014f8 <HAL_Init+0x28>)
 80014da:	f043 0310 	orr.w	r3, r3, #16
 80014de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e0:	2003      	movs	r0, #3
 80014e2:	f000 fc1d 	bl	8001d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014e6:	2000      	movs	r0, #0
 80014e8:	f000 f808 	bl	80014fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014ec:	f7ff fed2 	bl	8001294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40022000 	.word	0x40022000

080014fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_InitTick+0x54>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_InitTick+0x58>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4619      	mov	r1, r3
 800150e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001512:	fbb3 f3f1 	udiv	r3, r3, r1
 8001516:	fbb2 f3f3 	udiv	r3, r2, r3
 800151a:	4618      	mov	r0, r3
 800151c:	f000 fc27 	bl	8001d6e <HAL_SYSTICK_Config>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e00e      	b.n	8001548 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b0f      	cmp	r3, #15
 800152e:	d80a      	bhi.n	8001546 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001530:	2200      	movs	r2, #0
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	f04f 30ff 	mov.w	r0, #4294967295
 8001538:	f000 fbfd 	bl	8001d36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800153c:	4a06      	ldr	r2, [pc, #24]	; (8001558 <HAL_InitTick+0x5c>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	e000      	b.n	8001548 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
}
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000000 	.word	0x20000000
 8001554:	20000008 	.word	0x20000008
 8001558:	20000004 	.word	0x20000004

0800155c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <HAL_IncTick+0x1c>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	4b05      	ldr	r3, [pc, #20]	; (800157c <HAL_IncTick+0x20>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4413      	add	r3, r2
 800156c:	4a03      	ldr	r2, [pc, #12]	; (800157c <HAL_IncTick+0x20>)
 800156e:	6013      	str	r3, [r2, #0]
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	20000008 	.word	0x20000008
 800157c:	20000234 	.word	0x20000234

08001580 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return uwTick;
 8001584:	4b02      	ldr	r3, [pc, #8]	; (8001590 <HAL_GetTick+0x10>)
 8001586:	681b      	ldr	r3, [r3, #0]
}
 8001588:	4618      	mov	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr
 8001590:	20000234 	.word	0x20000234

08001594 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800159c:	2300      	movs	r3, #0
 800159e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80015a0:	2300      	movs	r3, #0
 80015a2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e0be      	b.n	8001734 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d109      	bne.n	80015d8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff fe90 	bl	80012f8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 fab7 	bl	8001b4c <ADC_ConversionStop_Disable>
 80015de:	4603      	mov	r3, r0
 80015e0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e6:	f003 0310 	and.w	r3, r3, #16
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f040 8099 	bne.w	8001722 <HAL_ADC_Init+0x18e>
 80015f0:	7dfb      	ldrb	r3, [r7, #23]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f040 8095 	bne.w	8001722 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001600:	f023 0302 	bic.w	r3, r3, #2
 8001604:	f043 0202 	orr.w	r2, r3, #2
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001614:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	7b1b      	ldrb	r3, [r3, #12]
 800161a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800161c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	4313      	orrs	r3, r2
 8001622:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800162c:	d003      	beq.n	8001636 <HAL_ADC_Init+0xa2>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d102      	bne.n	800163c <HAL_ADC_Init+0xa8>
 8001636:	f44f 7380 	mov.w	r3, #256	; 0x100
 800163a:	e000      	b.n	800163e <HAL_ADC_Init+0xaa>
 800163c:	2300      	movs	r3, #0
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	4313      	orrs	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	7d1b      	ldrb	r3, [r3, #20]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d119      	bne.n	8001680 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	7b1b      	ldrb	r3, [r3, #12]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d109      	bne.n	8001668 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	3b01      	subs	r3, #1
 800165a:	035a      	lsls	r2, r3, #13
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	4313      	orrs	r3, r2
 8001660:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	e00b      	b.n	8001680 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166c:	f043 0220 	orr.w	r2, r3, #32
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001678:	f043 0201 	orr.w	r2, r3, #1
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	430a      	orrs	r2, r1
 8001692:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	4b28      	ldr	r3, [pc, #160]	; (800173c <HAL_ADC_Init+0x1a8>)
 800169c:	4013      	ands	r3, r2
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	6812      	ldr	r2, [r2, #0]
 80016a2:	68b9      	ldr	r1, [r7, #8]
 80016a4:	430b      	orrs	r3, r1
 80016a6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016b0:	d003      	beq.n	80016ba <HAL_ADC_Init+0x126>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d104      	bne.n	80016c4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	3b01      	subs	r3, #1
 80016c0:	051b      	lsls	r3, r3, #20
 80016c2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ca:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689a      	ldr	r2, [r3, #8]
 80016de:	4b18      	ldr	r3, [pc, #96]	; (8001740 <HAL_ADC_Init+0x1ac>)
 80016e0:	4013      	ands	r3, r2
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d10b      	bne.n	8001700 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f2:	f023 0303 	bic.w	r3, r3, #3
 80016f6:	f043 0201 	orr.w	r2, r3, #1
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016fe:	e018      	b.n	8001732 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001704:	f023 0312 	bic.w	r3, r3, #18
 8001708:	f043 0210 	orr.w	r2, r3, #16
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001714:	f043 0201 	orr.w	r2, r3, #1
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001720:	e007      	b.n	8001732 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001726:	f043 0210 	orr.w	r2, r3, #16
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001732:	7dfb      	ldrb	r3, [r7, #23]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	ffe1f7fd 	.word	0xffe1f7fd
 8001740:	ff1f0efe 	.word	0xff1f0efe

08001744 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800174c:	2300      	movs	r3, #0
 800174e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001756:	2b01      	cmp	r3, #1
 8001758:	d101      	bne.n	800175e <HAL_ADC_Start+0x1a>
 800175a:	2302      	movs	r3, #2
 800175c:	e098      	b.n	8001890 <HAL_ADC_Start+0x14c>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2201      	movs	r2, #1
 8001762:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 f99e 	bl	8001aa8 <ADC_Enable>
 800176c:	4603      	mov	r3, r0
 800176e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	2b00      	cmp	r3, #0
 8001774:	f040 8087 	bne.w	8001886 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001780:	f023 0301 	bic.w	r3, r3, #1
 8001784:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a41      	ldr	r2, [pc, #260]	; (8001898 <HAL_ADC_Start+0x154>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d105      	bne.n	80017a2 <HAL_ADC_Start+0x5e>
 8001796:	4b41      	ldr	r3, [pc, #260]	; (800189c <HAL_ADC_Start+0x158>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d115      	bne.n	80017ce <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d026      	beq.n	800180a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017cc:	e01d      	b.n	800180a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a2f      	ldr	r2, [pc, #188]	; (800189c <HAL_ADC_Start+0x158>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d004      	beq.n	80017ee <HAL_ADC_Start+0xaa>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a2b      	ldr	r2, [pc, #172]	; (8001898 <HAL_ADC_Start+0x154>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d10d      	bne.n	800180a <HAL_ADC_Start+0xc6>
 80017ee:	4b2b      	ldr	r3, [pc, #172]	; (800189c <HAL_ADC_Start+0x158>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d007      	beq.n	800180a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001802:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d006      	beq.n	8001824 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181a:	f023 0206 	bic.w	r2, r3, #6
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	62da      	str	r2, [r3, #44]	; 0x2c
 8001822:	e002      	b.n	800182a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f06f 0202 	mvn.w	r2, #2
 800183a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001846:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800184a:	d113      	bne.n	8001874 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001850:	4a11      	ldr	r2, [pc, #68]	; (8001898 <HAL_ADC_Start+0x154>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d105      	bne.n	8001862 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <HAL_ADC_Start+0x158>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800185e:	2b00      	cmp	r3, #0
 8001860:	d108      	bne.n	8001874 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	e00c      	b.n	800188e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	e003      	b.n	800188e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800188e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40012800 	.word	0x40012800
 800189c:	40012400 	.word	0x40012400

080018a0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d101      	bne.n	80018d8 <HAL_ADC_ConfigChannel+0x20>
 80018d4:	2302      	movs	r3, #2
 80018d6:	e0dc      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x1da>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b06      	cmp	r3, #6
 80018e6:	d81c      	bhi.n	8001922 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	4613      	mov	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	3b05      	subs	r3, #5
 80018fa:	221f      	movs	r2, #31
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	4019      	ands	r1, r3
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	6818      	ldr	r0, [r3, #0]
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	3b05      	subs	r3, #5
 8001914:	fa00 f203 	lsl.w	r2, r0, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	430a      	orrs	r2, r1
 800191e:	635a      	str	r2, [r3, #52]	; 0x34
 8001920:	e03c      	b.n	800199c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b0c      	cmp	r3, #12
 8001928:	d81c      	bhi.n	8001964 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	4613      	mov	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	3b23      	subs	r3, #35	; 0x23
 800193c:	221f      	movs	r2, #31
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	4019      	ands	r1, r3
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	6818      	ldr	r0, [r3, #0]
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	3b23      	subs	r3, #35	; 0x23
 8001956:	fa00 f203 	lsl.w	r2, r0, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	430a      	orrs	r2, r1
 8001960:	631a      	str	r2, [r3, #48]	; 0x30
 8001962:	e01b      	b.n	800199c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	3b41      	subs	r3, #65	; 0x41
 8001976:	221f      	movs	r2, #31
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	4019      	ands	r1, r3
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	3b41      	subs	r3, #65	; 0x41
 8001990:	fa00 f203 	lsl.w	r2, r0, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b09      	cmp	r3, #9
 80019a2:	d91c      	bls.n	80019de <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68d9      	ldr	r1, [r3, #12]
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	4613      	mov	r3, r2
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	4413      	add	r3, r2
 80019b4:	3b1e      	subs	r3, #30
 80019b6:	2207      	movs	r2, #7
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	4019      	ands	r1, r3
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	6898      	ldr	r0, [r3, #8]
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4613      	mov	r3, r2
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	4413      	add	r3, r2
 80019ce:	3b1e      	subs	r3, #30
 80019d0:	fa00 f203 	lsl.w	r2, r0, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	430a      	orrs	r2, r1
 80019da:	60da      	str	r2, [r3, #12]
 80019dc:	e019      	b.n	8001a12 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6919      	ldr	r1, [r3, #16]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4613      	mov	r3, r2
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	4413      	add	r3, r2
 80019ee:	2207      	movs	r2, #7
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	4019      	ands	r1, r3
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	6898      	ldr	r0, [r3, #8]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4613      	mov	r3, r2
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	4413      	add	r3, r2
 8001a06:	fa00 f203 	lsl.w	r2, r0, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2b10      	cmp	r3, #16
 8001a18:	d003      	beq.n	8001a22 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a1e:	2b11      	cmp	r3, #17
 8001a20:	d132      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a1d      	ldr	r2, [pc, #116]	; (8001a9c <HAL_ADC_ConfigChannel+0x1e4>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d125      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d126      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001a48:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2b10      	cmp	r3, #16
 8001a50:	d11a      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a52:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a13      	ldr	r2, [pc, #76]	; (8001aa4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001a58:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5c:	0c9a      	lsrs	r2, r3, #18
 8001a5e:	4613      	mov	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a68:	e002      	b.n	8001a70 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f9      	bne.n	8001a6a <HAL_ADC_ConfigChannel+0x1b2>
 8001a76:	e007      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7c:	f043 0220 	orr.w	r2, r3, #32
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr
 8001a9c:	40012400 	.word	0x40012400
 8001aa0:	20000000 	.word	0x20000000
 8001aa4:	431bde83 	.word	0x431bde83

08001aa8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d039      	beq.n	8001b3a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f042 0201 	orr.w	r2, r2, #1
 8001ad4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ad6:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <ADC_Enable+0x9c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a1b      	ldr	r2, [pc, #108]	; (8001b48 <ADC_Enable+0xa0>)
 8001adc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae0:	0c9b      	lsrs	r3, r3, #18
 8001ae2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ae4:	e002      	b.n	8001aec <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f9      	bne.n	8001ae6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001af2:	f7ff fd45 	bl	8001580 <HAL_GetTick>
 8001af6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001af8:	e018      	b.n	8001b2c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001afa:	f7ff fd41 	bl	8001580 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d911      	bls.n	8001b2c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0c:	f043 0210 	orr.w	r2, r3, #16
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b18:	f043 0201 	orr.w	r2, r3, #1
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e007      	b.n	8001b3c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d1df      	bne.n	8001afa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000000 	.word	0x20000000
 8001b48:	431bde83 	.word	0x431bde83

08001b4c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d127      	bne.n	8001bb6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 0201 	bic.w	r2, r2, #1
 8001b74:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b76:	f7ff fd03 	bl	8001580 <HAL_GetTick>
 8001b7a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b7c:	e014      	b.n	8001ba8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b7e:	f7ff fcff 	bl	8001580 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d90d      	bls.n	8001ba8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b90:	f043 0210 	orr.w	r2, r3, #16
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9c:	f043 0201 	orr.w	r2, r3, #1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e007      	b.n	8001bb8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d0e3      	beq.n	8001b7e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bdc:	4013      	ands	r3, r2
 8001bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bf2:	4a04      	ldr	r2, [pc, #16]	; (8001c04 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	60d3      	str	r3, [r2, #12]
}
 8001bf8:	bf00      	nop
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c0c:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <__NVIC_GetPriorityGrouping+0x18>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	0a1b      	lsrs	r3, r3, #8
 8001c12:	f003 0307 	and.w	r3, r3, #7
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	6039      	str	r1, [r7, #0]
 8001c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	db0a      	blt.n	8001c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	490c      	ldr	r1, [pc, #48]	; (8001c70 <__NVIC_SetPriority+0x4c>)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	0112      	lsls	r2, r2, #4
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	440b      	add	r3, r1
 8001c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c4c:	e00a      	b.n	8001c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4908      	ldr	r1, [pc, #32]	; (8001c74 <__NVIC_SetPriority+0x50>)
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	3b04      	subs	r3, #4
 8001c5c:	0112      	lsls	r2, r2, #4
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	440b      	add	r3, r1
 8001c62:	761a      	strb	r2, [r3, #24]
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000e100 	.word	0xe000e100
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b089      	sub	sp, #36	; 0x24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f1c3 0307 	rsb	r3, r3, #7
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	bf28      	it	cs
 8001c96:	2304      	movcs	r3, #4
 8001c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	2b06      	cmp	r3, #6
 8001ca0:	d902      	bls.n	8001ca8 <NVIC_EncodePriority+0x30>
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3b03      	subs	r3, #3
 8001ca6:	e000      	b.n	8001caa <NVIC_EncodePriority+0x32>
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cac:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	401a      	ands	r2, r3
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cca:	43d9      	mvns	r1, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	4313      	orrs	r3, r2
         );
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3724      	adds	r7, #36	; 0x24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr

08001cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cec:	d301      	bcc.n	8001cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e00f      	b.n	8001d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cf2:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <SysTick_Config+0x40>)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cfa:	210f      	movs	r1, #15
 8001cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001d00:	f7ff ff90 	bl	8001c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <SysTick_Config+0x40>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d0a:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <SysTick_Config+0x40>)
 8001d0c:	2207      	movs	r2, #7
 8001d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	e000e010 	.word	0xe000e010

08001d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff ff49 	bl	8001bc0 <__NVIC_SetPriorityGrouping>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b086      	sub	sp, #24
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	607a      	str	r2, [r7, #4]
 8001d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d48:	f7ff ff5e 	bl	8001c08 <__NVIC_GetPriorityGrouping>
 8001d4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	6978      	ldr	r0, [r7, #20]
 8001d54:	f7ff ff90 	bl	8001c78 <NVIC_EncodePriority>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d5e:	4611      	mov	r1, r2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ff5f 	bl	8001c24 <__NVIC_SetPriority>
}
 8001d66:	bf00      	nop
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff ffb0 	bl	8001cdc <SysTick_Config>
 8001d7c:	4603      	mov	r3, r0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b08b      	sub	sp, #44	; 0x2c
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d92:	2300      	movs	r3, #0
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d96:	2300      	movs	r3, #0
 8001d98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d9a:	e127      	b.n	8001fec <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	69fa      	ldr	r2, [r7, #28]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	f040 8116 	bne.w	8001fe6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b12      	cmp	r3, #18
 8001dc0:	d034      	beq.n	8001e2c <HAL_GPIO_Init+0xa4>
 8001dc2:	2b12      	cmp	r3, #18
 8001dc4:	d80d      	bhi.n	8001de2 <HAL_GPIO_Init+0x5a>
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d02b      	beq.n	8001e22 <HAL_GPIO_Init+0x9a>
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d804      	bhi.n	8001dd8 <HAL_GPIO_Init+0x50>
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d031      	beq.n	8001e36 <HAL_GPIO_Init+0xae>
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d01c      	beq.n	8001e10 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dd6:	e048      	b.n	8001e6a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001dd8:	2b03      	cmp	r3, #3
 8001dda:	d043      	beq.n	8001e64 <HAL_GPIO_Init+0xdc>
 8001ddc:	2b11      	cmp	r3, #17
 8001dde:	d01b      	beq.n	8001e18 <HAL_GPIO_Init+0x90>
          break;
 8001de0:	e043      	b.n	8001e6a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001de2:	4a89      	ldr	r2, [pc, #548]	; (8002008 <HAL_GPIO_Init+0x280>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d026      	beq.n	8001e36 <HAL_GPIO_Init+0xae>
 8001de8:	4a87      	ldr	r2, [pc, #540]	; (8002008 <HAL_GPIO_Init+0x280>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d806      	bhi.n	8001dfc <HAL_GPIO_Init+0x74>
 8001dee:	4a87      	ldr	r2, [pc, #540]	; (800200c <HAL_GPIO_Init+0x284>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d020      	beq.n	8001e36 <HAL_GPIO_Init+0xae>
 8001df4:	4a86      	ldr	r2, [pc, #536]	; (8002010 <HAL_GPIO_Init+0x288>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d01d      	beq.n	8001e36 <HAL_GPIO_Init+0xae>
          break;
 8001dfa:	e036      	b.n	8001e6a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001dfc:	4a85      	ldr	r2, [pc, #532]	; (8002014 <HAL_GPIO_Init+0x28c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d019      	beq.n	8001e36 <HAL_GPIO_Init+0xae>
 8001e02:	4a85      	ldr	r2, [pc, #532]	; (8002018 <HAL_GPIO_Init+0x290>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d016      	beq.n	8001e36 <HAL_GPIO_Init+0xae>
 8001e08:	4a84      	ldr	r2, [pc, #528]	; (800201c <HAL_GPIO_Init+0x294>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d013      	beq.n	8001e36 <HAL_GPIO_Init+0xae>
          break;
 8001e0e:	e02c      	b.n	8001e6a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	623b      	str	r3, [r7, #32]
          break;
 8001e16:	e028      	b.n	8001e6a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	623b      	str	r3, [r7, #32]
          break;
 8001e20:	e023      	b.n	8001e6a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	3308      	adds	r3, #8
 8001e28:	623b      	str	r3, [r7, #32]
          break;
 8001e2a:	e01e      	b.n	8001e6a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	330c      	adds	r3, #12
 8001e32:	623b      	str	r3, [r7, #32]
          break;
 8001e34:	e019      	b.n	8001e6a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d102      	bne.n	8001e44 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e3e:	2304      	movs	r3, #4
 8001e40:	623b      	str	r3, [r7, #32]
          break;
 8001e42:	e012      	b.n	8001e6a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d105      	bne.n	8001e58 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e4c:	2308      	movs	r3, #8
 8001e4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69fa      	ldr	r2, [r7, #28]
 8001e54:	611a      	str	r2, [r3, #16]
          break;
 8001e56:	e008      	b.n	8001e6a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e58:	2308      	movs	r3, #8
 8001e5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69fa      	ldr	r2, [r7, #28]
 8001e60:	615a      	str	r2, [r3, #20]
          break;
 8001e62:	e002      	b.n	8001e6a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e64:	2300      	movs	r3, #0
 8001e66:	623b      	str	r3, [r7, #32]
          break;
 8001e68:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	2bff      	cmp	r3, #255	; 0xff
 8001e6e:	d801      	bhi.n	8001e74 <HAL_GPIO_Init+0xec>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	e001      	b.n	8001e78 <HAL_GPIO_Init+0xf0>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3304      	adds	r3, #4
 8001e78:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	2bff      	cmp	r3, #255	; 0xff
 8001e7e:	d802      	bhi.n	8001e86 <HAL_GPIO_Init+0xfe>
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	e002      	b.n	8001e8c <HAL_GPIO_Init+0x104>
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	3b08      	subs	r3, #8
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	210f      	movs	r1, #15
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	401a      	ands	r2, r3
 8001e9e:	6a39      	ldr	r1, [r7, #32]
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 8096 	beq.w	8001fe6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001eba:	4b59      	ldr	r3, [pc, #356]	; (8002020 <HAL_GPIO_Init+0x298>)
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	4a58      	ldr	r2, [pc, #352]	; (8002020 <HAL_GPIO_Init+0x298>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	6193      	str	r3, [r2, #24]
 8001ec6:	4b56      	ldr	r3, [pc, #344]	; (8002020 <HAL_GPIO_Init+0x298>)
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ed2:	4a54      	ldr	r2, [pc, #336]	; (8002024 <HAL_GPIO_Init+0x29c>)
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	089b      	lsrs	r3, r3, #2
 8001ed8:	3302      	adds	r3, #2
 8001eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ede:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	220f      	movs	r2, #15
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a4b      	ldr	r2, [pc, #300]	; (8002028 <HAL_GPIO_Init+0x2a0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d013      	beq.n	8001f26 <HAL_GPIO_Init+0x19e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a4a      	ldr	r2, [pc, #296]	; (800202c <HAL_GPIO_Init+0x2a4>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d00d      	beq.n	8001f22 <HAL_GPIO_Init+0x19a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a49      	ldr	r2, [pc, #292]	; (8002030 <HAL_GPIO_Init+0x2a8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d007      	beq.n	8001f1e <HAL_GPIO_Init+0x196>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a48      	ldr	r2, [pc, #288]	; (8002034 <HAL_GPIO_Init+0x2ac>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d101      	bne.n	8001f1a <HAL_GPIO_Init+0x192>
 8001f16:	2303      	movs	r3, #3
 8001f18:	e006      	b.n	8001f28 <HAL_GPIO_Init+0x1a0>
 8001f1a:	2304      	movs	r3, #4
 8001f1c:	e004      	b.n	8001f28 <HAL_GPIO_Init+0x1a0>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e002      	b.n	8001f28 <HAL_GPIO_Init+0x1a0>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <HAL_GPIO_Init+0x1a0>
 8001f26:	2300      	movs	r3, #0
 8001f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f2a:	f002 0203 	and.w	r2, r2, #3
 8001f2e:	0092      	lsls	r2, r2, #2
 8001f30:	4093      	lsls	r3, r2
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f38:	493a      	ldr	r1, [pc, #232]	; (8002024 <HAL_GPIO_Init+0x29c>)
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	089b      	lsrs	r3, r3, #2
 8001f3e:	3302      	adds	r3, #2
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d006      	beq.n	8001f60 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f52:	4b39      	ldr	r3, [pc, #228]	; (8002038 <HAL_GPIO_Init+0x2b0>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	4938      	ldr	r1, [pc, #224]	; (8002038 <HAL_GPIO_Init+0x2b0>)
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	600b      	str	r3, [r1, #0]
 8001f5e:	e006      	b.n	8001f6e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f60:	4b35      	ldr	r3, [pc, #212]	; (8002038 <HAL_GPIO_Init+0x2b0>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	43db      	mvns	r3, r3
 8001f68:	4933      	ldr	r1, [pc, #204]	; (8002038 <HAL_GPIO_Init+0x2b0>)
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d006      	beq.n	8001f88 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f7a:	4b2f      	ldr	r3, [pc, #188]	; (8002038 <HAL_GPIO_Init+0x2b0>)
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	492e      	ldr	r1, [pc, #184]	; (8002038 <HAL_GPIO_Init+0x2b0>)
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	604b      	str	r3, [r1, #4]
 8001f86:	e006      	b.n	8001f96 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f88:	4b2b      	ldr	r3, [pc, #172]	; (8002038 <HAL_GPIO_Init+0x2b0>)
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	4929      	ldr	r1, [pc, #164]	; (8002038 <HAL_GPIO_Init+0x2b0>)
 8001f92:	4013      	ands	r3, r2
 8001f94:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d006      	beq.n	8001fb0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fa2:	4b25      	ldr	r3, [pc, #148]	; (8002038 <HAL_GPIO_Init+0x2b0>)
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	4924      	ldr	r1, [pc, #144]	; (8002038 <HAL_GPIO_Init+0x2b0>)
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	608b      	str	r3, [r1, #8]
 8001fae:	e006      	b.n	8001fbe <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fb0:	4b21      	ldr	r3, [pc, #132]	; (8002038 <HAL_GPIO_Init+0x2b0>)
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	491f      	ldr	r1, [pc, #124]	; (8002038 <HAL_GPIO_Init+0x2b0>)
 8001fba:	4013      	ands	r3, r2
 8001fbc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d006      	beq.n	8001fd8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fca:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <HAL_GPIO_Init+0x2b0>)
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	491a      	ldr	r1, [pc, #104]	; (8002038 <HAL_GPIO_Init+0x2b0>)
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	60cb      	str	r3, [r1, #12]
 8001fd6:	e006      	b.n	8001fe6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fd8:	4b17      	ldr	r3, [pc, #92]	; (8002038 <HAL_GPIO_Init+0x2b0>)
 8001fda:	68da      	ldr	r2, [r3, #12]
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	4915      	ldr	r1, [pc, #84]	; (8002038 <HAL_GPIO_Init+0x2b0>)
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	3301      	adds	r3, #1
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f47f aed0 	bne.w	8001d9c <HAL_GPIO_Init+0x14>
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	372c      	adds	r7, #44	; 0x2c
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	10210000 	.word	0x10210000
 800200c:	10110000 	.word	0x10110000
 8002010:	10120000 	.word	0x10120000
 8002014:	10310000 	.word	0x10310000
 8002018:	10320000 	.word	0x10320000
 800201c:	10220000 	.word	0x10220000
 8002020:	40021000 	.word	0x40021000
 8002024:	40010000 	.word	0x40010000
 8002028:	40010800 	.word	0x40010800
 800202c:	40010c00 	.word	0x40010c00
 8002030:	40011000 	.word	0x40011000
 8002034:	40011400 	.word	0x40011400
 8002038:	40010400 	.word	0x40010400

0800203c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	807b      	strh	r3, [r7, #2]
 8002048:	4613      	mov	r3, r2
 800204a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800204c:	787b      	ldrb	r3, [r7, #1]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002052:	887a      	ldrh	r2, [r7, #2]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002058:	e003      	b.n	8002062 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800205a:	887b      	ldrh	r3, [r7, #2]
 800205c:	041a      	lsls	r2, r3, #16
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	611a      	str	r2, [r3, #16]
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e26c      	b.n	8002558 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 8087 	beq.w	800219a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800208c:	4b92      	ldr	r3, [pc, #584]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 030c 	and.w	r3, r3, #12
 8002094:	2b04      	cmp	r3, #4
 8002096:	d00c      	beq.n	80020b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002098:	4b8f      	ldr	r3, [pc, #572]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 030c 	and.w	r3, r3, #12
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d112      	bne.n	80020ca <HAL_RCC_OscConfig+0x5e>
 80020a4:	4b8c      	ldr	r3, [pc, #560]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b0:	d10b      	bne.n	80020ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b2:	4b89      	ldr	r3, [pc, #548]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d06c      	beq.n	8002198 <HAL_RCC_OscConfig+0x12c>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d168      	bne.n	8002198 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e246      	b.n	8002558 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d2:	d106      	bne.n	80020e2 <HAL_RCC_OscConfig+0x76>
 80020d4:	4b80      	ldr	r3, [pc, #512]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a7f      	ldr	r2, [pc, #508]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80020da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020de:	6013      	str	r3, [r2, #0]
 80020e0:	e02e      	b.n	8002140 <HAL_RCC_OscConfig+0xd4>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10c      	bne.n	8002104 <HAL_RCC_OscConfig+0x98>
 80020ea:	4b7b      	ldr	r3, [pc, #492]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a7a      	ldr	r2, [pc, #488]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	4b78      	ldr	r3, [pc, #480]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a77      	ldr	r2, [pc, #476]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002100:	6013      	str	r3, [r2, #0]
 8002102:	e01d      	b.n	8002140 <HAL_RCC_OscConfig+0xd4>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800210c:	d10c      	bne.n	8002128 <HAL_RCC_OscConfig+0xbc>
 800210e:	4b72      	ldr	r3, [pc, #456]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a71      	ldr	r2, [pc, #452]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 8002114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	4b6f      	ldr	r3, [pc, #444]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a6e      	ldr	r2, [pc, #440]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 8002120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	e00b      	b.n	8002140 <HAL_RCC_OscConfig+0xd4>
 8002128:	4b6b      	ldr	r3, [pc, #428]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a6a      	ldr	r2, [pc, #424]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 800212e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002132:	6013      	str	r3, [r2, #0]
 8002134:	4b68      	ldr	r3, [pc, #416]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a67      	ldr	r2, [pc, #412]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 800213a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800213e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d013      	beq.n	8002170 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002148:	f7ff fa1a 	bl	8001580 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002150:	f7ff fa16 	bl	8001580 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b64      	cmp	r3, #100	; 0x64
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e1fa      	b.n	8002558 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002162:	4b5d      	ldr	r3, [pc, #372]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f0      	beq.n	8002150 <HAL_RCC_OscConfig+0xe4>
 800216e:	e014      	b.n	800219a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7ff fa06 	bl	8001580 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002178:	f7ff fa02 	bl	8001580 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b64      	cmp	r3, #100	; 0x64
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e1e6      	b.n	8002558 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800218a:	4b53      	ldr	r3, [pc, #332]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x10c>
 8002196:	e000      	b.n	800219a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d063      	beq.n	800226e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021a6:	4b4c      	ldr	r3, [pc, #304]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 030c 	and.w	r3, r3, #12
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00b      	beq.n	80021ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021b2:	4b49      	ldr	r3, [pc, #292]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 030c 	and.w	r3, r3, #12
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	d11c      	bne.n	80021f8 <HAL_RCC_OscConfig+0x18c>
 80021be:	4b46      	ldr	r3, [pc, #280]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d116      	bne.n	80021f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ca:	4b43      	ldr	r3, [pc, #268]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d005      	beq.n	80021e2 <HAL_RCC_OscConfig+0x176>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d001      	beq.n	80021e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e1ba      	b.n	8002558 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e2:	4b3d      	ldr	r3, [pc, #244]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	4939      	ldr	r1, [pc, #228]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f6:	e03a      	b.n	800226e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d020      	beq.n	8002242 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002200:	4b36      	ldr	r3, [pc, #216]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 8002202:	2201      	movs	r2, #1
 8002204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002206:	f7ff f9bb 	bl	8001580 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800220e:	f7ff f9b7 	bl	8001580 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e19b      	b.n	8002558 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002220:	4b2d      	ldr	r3, [pc, #180]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0f0      	beq.n	800220e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800222c:	4b2a      	ldr	r3, [pc, #168]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	4927      	ldr	r1, [pc, #156]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 800223c:	4313      	orrs	r3, r2
 800223e:	600b      	str	r3, [r1, #0]
 8002240:	e015      	b.n	800226e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002242:	4b26      	ldr	r3, [pc, #152]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002248:	f7ff f99a 	bl	8001580 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002250:	f7ff f996 	bl	8001580 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e17a      	b.n	8002558 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002262:	4b1d      	ldr	r3, [pc, #116]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f0      	bne.n	8002250 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0308 	and.w	r3, r3, #8
 8002276:	2b00      	cmp	r3, #0
 8002278:	d03a      	beq.n	80022f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d019      	beq.n	80022b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002282:	4b17      	ldr	r3, [pc, #92]	; (80022e0 <HAL_RCC_OscConfig+0x274>)
 8002284:	2201      	movs	r2, #1
 8002286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002288:	f7ff f97a 	bl	8001580 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002290:	f7ff f976 	bl	8001580 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e15a      	b.n	8002558 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022a2:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0f0      	beq.n	8002290 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022ae:	2001      	movs	r0, #1
 80022b0:	f000 faa8 	bl	8002804 <RCC_Delay>
 80022b4:	e01c      	b.n	80022f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022b6:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <HAL_RCC_OscConfig+0x274>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022bc:	f7ff f960 	bl	8001580 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c2:	e00f      	b.n	80022e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c4:	f7ff f95c 	bl	8001580 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d908      	bls.n	80022e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e140      	b.n	8002558 <HAL_RCC_OscConfig+0x4ec>
 80022d6:	bf00      	nop
 80022d8:	40021000 	.word	0x40021000
 80022dc:	42420000 	.word	0x42420000
 80022e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e4:	4b9e      	ldr	r3, [pc, #632]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1e9      	bne.n	80022c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 80a6 	beq.w	800244a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022fe:	2300      	movs	r3, #0
 8002300:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002302:	4b97      	ldr	r3, [pc, #604]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10d      	bne.n	800232a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800230e:	4b94      	ldr	r3, [pc, #592]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	4a93      	ldr	r2, [pc, #588]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 8002314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002318:	61d3      	str	r3, [r2, #28]
 800231a:	4b91      	ldr	r3, [pc, #580]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002322:	60bb      	str	r3, [r7, #8]
 8002324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002326:	2301      	movs	r3, #1
 8002328:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232a:	4b8e      	ldr	r3, [pc, #568]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002332:	2b00      	cmp	r3, #0
 8002334:	d118      	bne.n	8002368 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002336:	4b8b      	ldr	r3, [pc, #556]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a8a      	ldr	r2, [pc, #552]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 800233c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002340:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002342:	f7ff f91d 	bl	8001580 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800234a:	f7ff f919 	bl	8001580 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b64      	cmp	r3, #100	; 0x64
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e0fd      	b.n	8002558 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235c:	4b81      	ldr	r3, [pc, #516]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0f0      	beq.n	800234a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d106      	bne.n	800237e <HAL_RCC_OscConfig+0x312>
 8002370:	4b7b      	ldr	r3, [pc, #492]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	4a7a      	ldr	r2, [pc, #488]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	6213      	str	r3, [r2, #32]
 800237c:	e02d      	b.n	80023da <HAL_RCC_OscConfig+0x36e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10c      	bne.n	80023a0 <HAL_RCC_OscConfig+0x334>
 8002386:	4b76      	ldr	r3, [pc, #472]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	4a75      	ldr	r2, [pc, #468]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 800238c:	f023 0301 	bic.w	r3, r3, #1
 8002390:	6213      	str	r3, [r2, #32]
 8002392:	4b73      	ldr	r3, [pc, #460]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	4a72      	ldr	r2, [pc, #456]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 8002398:	f023 0304 	bic.w	r3, r3, #4
 800239c:	6213      	str	r3, [r2, #32]
 800239e:	e01c      	b.n	80023da <HAL_RCC_OscConfig+0x36e>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	2b05      	cmp	r3, #5
 80023a6:	d10c      	bne.n	80023c2 <HAL_RCC_OscConfig+0x356>
 80023a8:	4b6d      	ldr	r3, [pc, #436]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	4a6c      	ldr	r2, [pc, #432]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 80023ae:	f043 0304 	orr.w	r3, r3, #4
 80023b2:	6213      	str	r3, [r2, #32]
 80023b4:	4b6a      	ldr	r3, [pc, #424]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	4a69      	ldr	r2, [pc, #420]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	6213      	str	r3, [r2, #32]
 80023c0:	e00b      	b.n	80023da <HAL_RCC_OscConfig+0x36e>
 80023c2:	4b67      	ldr	r3, [pc, #412]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	4a66      	ldr	r2, [pc, #408]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 80023c8:	f023 0301 	bic.w	r3, r3, #1
 80023cc:	6213      	str	r3, [r2, #32]
 80023ce:	4b64      	ldr	r3, [pc, #400]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	4a63      	ldr	r2, [pc, #396]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 80023d4:	f023 0304 	bic.w	r3, r3, #4
 80023d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d015      	beq.n	800240e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e2:	f7ff f8cd 	bl	8001580 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e8:	e00a      	b.n	8002400 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ea:	f7ff f8c9 	bl	8001580 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e0ab      	b.n	8002558 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002400:	4b57      	ldr	r3, [pc, #348]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0ee      	beq.n	80023ea <HAL_RCC_OscConfig+0x37e>
 800240c:	e014      	b.n	8002438 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240e:	f7ff f8b7 	bl	8001580 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002414:	e00a      	b.n	800242c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002416:	f7ff f8b3 	bl	8001580 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	f241 3288 	movw	r2, #5000	; 0x1388
 8002424:	4293      	cmp	r3, r2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e095      	b.n	8002558 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800242c:	4b4c      	ldr	r3, [pc, #304]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1ee      	bne.n	8002416 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002438:	7dfb      	ldrb	r3, [r7, #23]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d105      	bne.n	800244a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800243e:	4b48      	ldr	r3, [pc, #288]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	4a47      	ldr	r2, [pc, #284]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 8002444:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002448:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 8081 	beq.w	8002556 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002454:	4b42      	ldr	r3, [pc, #264]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 030c 	and.w	r3, r3, #12
 800245c:	2b08      	cmp	r3, #8
 800245e:	d061      	beq.n	8002524 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	2b02      	cmp	r3, #2
 8002466:	d146      	bne.n	80024f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002468:	4b3f      	ldr	r3, [pc, #252]	; (8002568 <HAL_RCC_OscConfig+0x4fc>)
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246e:	f7ff f887 	bl	8001580 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002476:	f7ff f883 	bl	8001580 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e067      	b.n	8002558 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002488:	4b35      	ldr	r3, [pc, #212]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1f0      	bne.n	8002476 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800249c:	d108      	bne.n	80024b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800249e:	4b30      	ldr	r3, [pc, #192]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	492d      	ldr	r1, [pc, #180]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024b0:	4b2b      	ldr	r3, [pc, #172]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a19      	ldr	r1, [r3, #32]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	430b      	orrs	r3, r1
 80024c2:	4927      	ldr	r1, [pc, #156]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024c8:	4b27      	ldr	r3, [pc, #156]	; (8002568 <HAL_RCC_OscConfig+0x4fc>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ce:	f7ff f857 	bl	8001580 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d6:	f7ff f853 	bl	8001580 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e037      	b.n	8002558 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024e8:	4b1d      	ldr	r3, [pc, #116]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0f0      	beq.n	80024d6 <HAL_RCC_OscConfig+0x46a>
 80024f4:	e02f      	b.n	8002556 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f6:	4b1c      	ldr	r3, [pc, #112]	; (8002568 <HAL_RCC_OscConfig+0x4fc>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fc:	f7ff f840 	bl	8001580 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002504:	f7ff f83c 	bl	8001580 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e020      	b.n	8002558 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002516:	4b12      	ldr	r3, [pc, #72]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f0      	bne.n	8002504 <HAL_RCC_OscConfig+0x498>
 8002522:	e018      	b.n	8002556 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d101      	bne.n	8002530 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e013      	b.n	8002558 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002530:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	429a      	cmp	r2, r3
 8002542:	d106      	bne.n	8002552 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800254e:	429a      	cmp	r2, r3
 8002550:	d001      	beq.n	8002556 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e000      	b.n	8002558 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40021000 	.word	0x40021000
 8002564:	40007000 	.word	0x40007000
 8002568:	42420060 	.word	0x42420060

0800256c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e0d0      	b.n	8002722 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002580:	4b6a      	ldr	r3, [pc, #424]	; (800272c <HAL_RCC_ClockConfig+0x1c0>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	d910      	bls.n	80025b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258e:	4b67      	ldr	r3, [pc, #412]	; (800272c <HAL_RCC_ClockConfig+0x1c0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f023 0207 	bic.w	r2, r3, #7
 8002596:	4965      	ldr	r1, [pc, #404]	; (800272c <HAL_RCC_ClockConfig+0x1c0>)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	4313      	orrs	r3, r2
 800259c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800259e:	4b63      	ldr	r3, [pc, #396]	; (800272c <HAL_RCC_ClockConfig+0x1c0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d001      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e0b8      	b.n	8002722 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d020      	beq.n	80025fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d005      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025c8:	4b59      	ldr	r3, [pc, #356]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	4a58      	ldr	r2, [pc, #352]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80025ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0308 	and.w	r3, r3, #8
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025e0:	4b53      	ldr	r3, [pc, #332]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	4a52      	ldr	r2, [pc, #328]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80025e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ec:	4b50      	ldr	r3, [pc, #320]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	494d      	ldr	r1, [pc, #308]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d040      	beq.n	800268c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d107      	bne.n	8002622 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002612:	4b47      	ldr	r3, [pc, #284]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d115      	bne.n	800264a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e07f      	b.n	8002722 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d107      	bne.n	800263a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800262a:	4b41      	ldr	r3, [pc, #260]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d109      	bne.n	800264a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e073      	b.n	8002722 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263a:	4b3d      	ldr	r3, [pc, #244]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e06b      	b.n	8002722 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800264a:	4b39      	ldr	r3, [pc, #228]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f023 0203 	bic.w	r2, r3, #3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	4936      	ldr	r1, [pc, #216]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 8002658:	4313      	orrs	r3, r2
 800265a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800265c:	f7fe ff90 	bl	8001580 <HAL_GetTick>
 8002660:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002662:	e00a      	b.n	800267a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002664:	f7fe ff8c 	bl	8001580 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002672:	4293      	cmp	r3, r2
 8002674:	d901      	bls.n	800267a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e053      	b.n	8002722 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267a:	4b2d      	ldr	r3, [pc, #180]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f003 020c 	and.w	r2, r3, #12
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	429a      	cmp	r2, r3
 800268a:	d1eb      	bne.n	8002664 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800268c:	4b27      	ldr	r3, [pc, #156]	; (800272c <HAL_RCC_ClockConfig+0x1c0>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	d210      	bcs.n	80026bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269a:	4b24      	ldr	r3, [pc, #144]	; (800272c <HAL_RCC_ClockConfig+0x1c0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f023 0207 	bic.w	r2, r3, #7
 80026a2:	4922      	ldr	r1, [pc, #136]	; (800272c <HAL_RCC_ClockConfig+0x1c0>)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026aa:	4b20      	ldr	r3, [pc, #128]	; (800272c <HAL_RCC_ClockConfig+0x1c0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d001      	beq.n	80026bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e032      	b.n	8002722 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d008      	beq.n	80026da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026c8:	4b19      	ldr	r3, [pc, #100]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	4916      	ldr	r1, [pc, #88]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d009      	beq.n	80026fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026e6:	4b12      	ldr	r3, [pc, #72]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	490e      	ldr	r1, [pc, #56]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026fa:	f000 f821 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 80026fe:	4601      	mov	r1, r0
 8002700:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	091b      	lsrs	r3, r3, #4
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	4a0a      	ldr	r2, [pc, #40]	; (8002734 <HAL_RCC_ClockConfig+0x1c8>)
 800270c:	5cd3      	ldrb	r3, [r2, r3]
 800270e:	fa21 f303 	lsr.w	r3, r1, r3
 8002712:	4a09      	ldr	r2, [pc, #36]	; (8002738 <HAL_RCC_ClockConfig+0x1cc>)
 8002714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002716:	4b09      	ldr	r3, [pc, #36]	; (800273c <HAL_RCC_ClockConfig+0x1d0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7fe feee 	bl	80014fc <HAL_InitTick>

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40022000 	.word	0x40022000
 8002730:	40021000 	.word	0x40021000
 8002734:	0800446c 	.word	0x0800446c
 8002738:	20000000 	.word	0x20000000
 800273c:	20000004 	.word	0x20000004

08002740 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002740:	b490      	push	{r4, r7}
 8002742:	b08a      	sub	sp, #40	; 0x28
 8002744:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002746:	4b2a      	ldr	r3, [pc, #168]	; (80027f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002748:	1d3c      	adds	r4, r7, #4
 800274a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800274c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002750:	4b28      	ldr	r3, [pc, #160]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002756:	2300      	movs	r3, #0
 8002758:	61fb      	str	r3, [r7, #28]
 800275a:	2300      	movs	r3, #0
 800275c:	61bb      	str	r3, [r7, #24]
 800275e:	2300      	movs	r3, #0
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002766:	2300      	movs	r3, #0
 8002768:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800276a:	4b23      	ldr	r3, [pc, #140]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f003 030c 	and.w	r3, r3, #12
 8002776:	2b04      	cmp	r3, #4
 8002778:	d002      	beq.n	8002780 <HAL_RCC_GetSysClockFreq+0x40>
 800277a:	2b08      	cmp	r3, #8
 800277c:	d003      	beq.n	8002786 <HAL_RCC_GetSysClockFreq+0x46>
 800277e:	e02d      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002780:	4b1e      	ldr	r3, [pc, #120]	; (80027fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002782:	623b      	str	r3, [r7, #32]
      break;
 8002784:	e02d      	b.n	80027e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	0c9b      	lsrs	r3, r3, #18
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002792:	4413      	add	r3, r2
 8002794:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002798:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d013      	beq.n	80027cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027a4:	4b14      	ldr	r3, [pc, #80]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	0c5b      	lsrs	r3, r3, #17
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027b2:	4413      	add	r3, r2
 80027b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80027b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	4a0f      	ldr	r2, [pc, #60]	; (80027fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80027be:	fb02 f203 	mul.w	r2, r2, r3
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c8:	627b      	str	r3, [r7, #36]	; 0x24
 80027ca:	e004      	b.n	80027d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	4a0c      	ldr	r2, [pc, #48]	; (8002800 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027d0:	fb02 f303 	mul.w	r3, r2, r3
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	623b      	str	r3, [r7, #32]
      break;
 80027da:	e002      	b.n	80027e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027dc:	4b07      	ldr	r3, [pc, #28]	; (80027fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80027de:	623b      	str	r3, [r7, #32]
      break;
 80027e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027e2:	6a3b      	ldr	r3, [r7, #32]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3728      	adds	r7, #40	; 0x28
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc90      	pop	{r4, r7}
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	08004458 	.word	0x08004458
 80027f4:	08004468 	.word	0x08004468
 80027f8:	40021000 	.word	0x40021000
 80027fc:	007a1200 	.word	0x007a1200
 8002800:	003d0900 	.word	0x003d0900

08002804 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800280c:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <RCC_Delay+0x34>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a0a      	ldr	r2, [pc, #40]	; (800283c <RCC_Delay+0x38>)
 8002812:	fba2 2303 	umull	r2, r3, r2, r3
 8002816:	0a5b      	lsrs	r3, r3, #9
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	fb02 f303 	mul.w	r3, r2, r3
 800281e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002820:	bf00      	nop
  }
  while (Delay --);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	1e5a      	subs	r2, r3, #1
 8002826:	60fa      	str	r2, [r7, #12]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1f9      	bne.n	8002820 <RCC_Delay+0x1c>
}
 800282c:	bf00      	nop
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	20000000 	.word	0x20000000
 800283c:	10624dd3 	.word	0x10624dd3

08002840 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	613b      	str	r3, [r7, #16]
 800284c:	2300      	movs	r3, #0
 800284e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b00      	cmp	r3, #0
 800285a:	d07d      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800285c:	2300      	movs	r3, #0
 800285e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002860:	4b4f      	ldr	r3, [pc, #316]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10d      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800286c:	4b4c      	ldr	r3, [pc, #304]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	4a4b      	ldr	r2, [pc, #300]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002876:	61d3      	str	r3, [r2, #28]
 8002878:	4b49      	ldr	r3, [pc, #292]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002884:	2301      	movs	r3, #1
 8002886:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002888:	4b46      	ldr	r3, [pc, #280]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002890:	2b00      	cmp	r3, #0
 8002892:	d118      	bne.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002894:	4b43      	ldr	r3, [pc, #268]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a42      	ldr	r2, [pc, #264]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800289a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800289e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028a0:	f7fe fe6e 	bl	8001580 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a6:	e008      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a8:	f7fe fe6a 	bl	8001580 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b64      	cmp	r3, #100	; 0x64
 80028b4:	d901      	bls.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e06d      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ba:	4b3a      	ldr	r3, [pc, #232]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0f0      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028c6:	4b36      	ldr	r3, [pc, #216]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d02e      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d027      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028e4:	4b2e      	ldr	r3, [pc, #184]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028ee:	4b2e      	ldr	r3, [pc, #184]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028f0:	2201      	movs	r2, #1
 80028f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028f4:	4b2c      	ldr	r3, [pc, #176]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80028fa:	4a29      	ldr	r2, [pc, #164]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d014      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290a:	f7fe fe39 	bl	8001580 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002910:	e00a      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002912:	f7fe fe35 	bl	8001580 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002920:	4293      	cmp	r3, r2
 8002922:	d901      	bls.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e036      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002928:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0ee      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002934:	4b1a      	ldr	r3, [pc, #104]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	4917      	ldr	r1, [pc, #92]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002942:	4313      	orrs	r3, r2
 8002944:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002946:	7dfb      	ldrb	r3, [r7, #23]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d105      	bne.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800294c:	4b14      	ldr	r3, [pc, #80]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	4a13      	ldr	r2, [pc, #76]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002952:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002956:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d008      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002964:	4b0e      	ldr	r3, [pc, #56]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	490b      	ldr	r1, [pc, #44]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002972:	4313      	orrs	r3, r2
 8002974:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0310 	and.w	r3, r3, #16
 800297e:	2b00      	cmp	r3, #0
 8002980:	d008      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002982:	4b07      	ldr	r3, [pc, #28]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	4904      	ldr	r1, [pc, #16]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002990:	4313      	orrs	r3, r2
 8002992:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000
 80029a4:	40007000 	.word	0x40007000
 80029a8:	42420440 	.word	0x42420440

080029ac <__errno>:
 80029ac:	4b01      	ldr	r3, [pc, #4]	; (80029b4 <__errno+0x8>)
 80029ae:	6818      	ldr	r0, [r3, #0]
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	2000000c 	.word	0x2000000c

080029b8 <__libc_init_array>:
 80029b8:	b570      	push	{r4, r5, r6, lr}
 80029ba:	2500      	movs	r5, #0
 80029bc:	4e0c      	ldr	r6, [pc, #48]	; (80029f0 <__libc_init_array+0x38>)
 80029be:	4c0d      	ldr	r4, [pc, #52]	; (80029f4 <__libc_init_array+0x3c>)
 80029c0:	1ba4      	subs	r4, r4, r6
 80029c2:	10a4      	asrs	r4, r4, #2
 80029c4:	42a5      	cmp	r5, r4
 80029c6:	d109      	bne.n	80029dc <__libc_init_array+0x24>
 80029c8:	f001 fd3a 	bl	8004440 <_init>
 80029cc:	2500      	movs	r5, #0
 80029ce:	4e0a      	ldr	r6, [pc, #40]	; (80029f8 <__libc_init_array+0x40>)
 80029d0:	4c0a      	ldr	r4, [pc, #40]	; (80029fc <__libc_init_array+0x44>)
 80029d2:	1ba4      	subs	r4, r4, r6
 80029d4:	10a4      	asrs	r4, r4, #2
 80029d6:	42a5      	cmp	r5, r4
 80029d8:	d105      	bne.n	80029e6 <__libc_init_array+0x2e>
 80029da:	bd70      	pop	{r4, r5, r6, pc}
 80029dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029e0:	4798      	blx	r3
 80029e2:	3501      	adds	r5, #1
 80029e4:	e7ee      	b.n	80029c4 <__libc_init_array+0xc>
 80029e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029ea:	4798      	blx	r3
 80029ec:	3501      	adds	r5, #1
 80029ee:	e7f2      	b.n	80029d6 <__libc_init_array+0x1e>
 80029f0:	080046a8 	.word	0x080046a8
 80029f4:	080046a8 	.word	0x080046a8
 80029f8:	080046a8 	.word	0x080046a8
 80029fc:	080046ac 	.word	0x080046ac

08002a00 <memset>:
 8002a00:	4603      	mov	r3, r0
 8002a02:	4402      	add	r2, r0
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d100      	bne.n	8002a0a <memset+0xa>
 8002a08:	4770      	bx	lr
 8002a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a0e:	e7f9      	b.n	8002a04 <memset+0x4>

08002a10 <__cvt>:
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a16:	461e      	mov	r6, r3
 8002a18:	bfbb      	ittet	lt
 8002a1a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002a1e:	461e      	movlt	r6, r3
 8002a20:	2300      	movge	r3, #0
 8002a22:	232d      	movlt	r3, #45	; 0x2d
 8002a24:	b088      	sub	sp, #32
 8002a26:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8002a28:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8002a2c:	f027 0720 	bic.w	r7, r7, #32
 8002a30:	2f46      	cmp	r7, #70	; 0x46
 8002a32:	4614      	mov	r4, r2
 8002a34:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002a36:	700b      	strb	r3, [r1, #0]
 8002a38:	d004      	beq.n	8002a44 <__cvt+0x34>
 8002a3a:	2f45      	cmp	r7, #69	; 0x45
 8002a3c:	d100      	bne.n	8002a40 <__cvt+0x30>
 8002a3e:	3501      	adds	r5, #1
 8002a40:	2302      	movs	r3, #2
 8002a42:	e000      	b.n	8002a46 <__cvt+0x36>
 8002a44:	2303      	movs	r3, #3
 8002a46:	aa07      	add	r2, sp, #28
 8002a48:	9204      	str	r2, [sp, #16]
 8002a4a:	aa06      	add	r2, sp, #24
 8002a4c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002a50:	e9cd 3500 	strd	r3, r5, [sp]
 8002a54:	4622      	mov	r2, r4
 8002a56:	4633      	mov	r3, r6
 8002a58:	f000 fba6 	bl	80031a8 <_dtoa_r>
 8002a5c:	2f47      	cmp	r7, #71	; 0x47
 8002a5e:	4680      	mov	r8, r0
 8002a60:	d102      	bne.n	8002a68 <__cvt+0x58>
 8002a62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002a64:	07db      	lsls	r3, r3, #31
 8002a66:	d526      	bpl.n	8002ab6 <__cvt+0xa6>
 8002a68:	2f46      	cmp	r7, #70	; 0x46
 8002a6a:	eb08 0905 	add.w	r9, r8, r5
 8002a6e:	d111      	bne.n	8002a94 <__cvt+0x84>
 8002a70:	f898 3000 	ldrb.w	r3, [r8]
 8002a74:	2b30      	cmp	r3, #48	; 0x30
 8002a76:	d10a      	bne.n	8002a8e <__cvt+0x7e>
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	4631      	mov	r1, r6
 8002a80:	f7fd ff92 	bl	80009a8 <__aeabi_dcmpeq>
 8002a84:	b918      	cbnz	r0, 8002a8e <__cvt+0x7e>
 8002a86:	f1c5 0501 	rsb	r5, r5, #1
 8002a8a:	f8ca 5000 	str.w	r5, [sl]
 8002a8e:	f8da 3000 	ldr.w	r3, [sl]
 8002a92:	4499      	add	r9, r3
 8002a94:	2200      	movs	r2, #0
 8002a96:	2300      	movs	r3, #0
 8002a98:	4620      	mov	r0, r4
 8002a9a:	4631      	mov	r1, r6
 8002a9c:	f7fd ff84 	bl	80009a8 <__aeabi_dcmpeq>
 8002aa0:	b938      	cbnz	r0, 8002ab2 <__cvt+0xa2>
 8002aa2:	2230      	movs	r2, #48	; 0x30
 8002aa4:	9b07      	ldr	r3, [sp, #28]
 8002aa6:	454b      	cmp	r3, r9
 8002aa8:	d205      	bcs.n	8002ab6 <__cvt+0xa6>
 8002aaa:	1c59      	adds	r1, r3, #1
 8002aac:	9107      	str	r1, [sp, #28]
 8002aae:	701a      	strb	r2, [r3, #0]
 8002ab0:	e7f8      	b.n	8002aa4 <__cvt+0x94>
 8002ab2:	f8cd 901c 	str.w	r9, [sp, #28]
 8002ab6:	4640      	mov	r0, r8
 8002ab8:	9b07      	ldr	r3, [sp, #28]
 8002aba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002abc:	eba3 0308 	sub.w	r3, r3, r8
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	b008      	add	sp, #32
 8002ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002ac8 <__exponent>:
 8002ac8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002aca:	2900      	cmp	r1, #0
 8002acc:	bfb4      	ite	lt
 8002ace:	232d      	movlt	r3, #45	; 0x2d
 8002ad0:	232b      	movge	r3, #43	; 0x2b
 8002ad2:	4604      	mov	r4, r0
 8002ad4:	bfb8      	it	lt
 8002ad6:	4249      	neglt	r1, r1
 8002ad8:	2909      	cmp	r1, #9
 8002ada:	f804 2b02 	strb.w	r2, [r4], #2
 8002ade:	7043      	strb	r3, [r0, #1]
 8002ae0:	dd21      	ble.n	8002b26 <__exponent+0x5e>
 8002ae2:	f10d 0307 	add.w	r3, sp, #7
 8002ae6:	461f      	mov	r7, r3
 8002ae8:	260a      	movs	r6, #10
 8002aea:	fb91 f5f6 	sdiv	r5, r1, r6
 8002aee:	fb06 1115 	mls	r1, r6, r5, r1
 8002af2:	2d09      	cmp	r5, #9
 8002af4:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8002af8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002afc:	f103 32ff 	add.w	r2, r3, #4294967295
 8002b00:	4629      	mov	r1, r5
 8002b02:	dc09      	bgt.n	8002b18 <__exponent+0x50>
 8002b04:	3130      	adds	r1, #48	; 0x30
 8002b06:	3b02      	subs	r3, #2
 8002b08:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002b0c:	42bb      	cmp	r3, r7
 8002b0e:	4622      	mov	r2, r4
 8002b10:	d304      	bcc.n	8002b1c <__exponent+0x54>
 8002b12:	1a10      	subs	r0, r2, r0
 8002b14:	b003      	add	sp, #12
 8002b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b18:	4613      	mov	r3, r2
 8002b1a:	e7e6      	b.n	8002aea <__exponent+0x22>
 8002b1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b20:	f804 2b01 	strb.w	r2, [r4], #1
 8002b24:	e7f2      	b.n	8002b0c <__exponent+0x44>
 8002b26:	2330      	movs	r3, #48	; 0x30
 8002b28:	4419      	add	r1, r3
 8002b2a:	7083      	strb	r3, [r0, #2]
 8002b2c:	1d02      	adds	r2, r0, #4
 8002b2e:	70c1      	strb	r1, [r0, #3]
 8002b30:	e7ef      	b.n	8002b12 <__exponent+0x4a>
	...

08002b34 <_printf_float>:
 8002b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b38:	b091      	sub	sp, #68	; 0x44
 8002b3a:	460c      	mov	r4, r1
 8002b3c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8002b3e:	4693      	mov	fp, r2
 8002b40:	461e      	mov	r6, r3
 8002b42:	4605      	mov	r5, r0
 8002b44:	f001 f8e4 	bl	8003d10 <_localeconv_r>
 8002b48:	6803      	ldr	r3, [r0, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	9309      	str	r3, [sp, #36]	; 0x24
 8002b4e:	f7fd faff 	bl	8000150 <strlen>
 8002b52:	2300      	movs	r3, #0
 8002b54:	930e      	str	r3, [sp, #56]	; 0x38
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	900a      	str	r0, [sp, #40]	; 0x28
 8002b5a:	3307      	adds	r3, #7
 8002b5c:	f023 0307 	bic.w	r3, r3, #7
 8002b60:	f103 0208 	add.w	r2, r3, #8
 8002b64:	f894 8018 	ldrb.w	r8, [r4, #24]
 8002b68:	f8d4 a000 	ldr.w	sl, [r4]
 8002b6c:	603a      	str	r2, [r7, #0]
 8002b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b72:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002b76:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8002b7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002b7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002b80:	f04f 32ff 	mov.w	r2, #4294967295
 8002b84:	4ba6      	ldr	r3, [pc, #664]	; (8002e20 <_printf_float+0x2ec>)
 8002b86:	4638      	mov	r0, r7
 8002b88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002b8a:	f7fd ff3f 	bl	8000a0c <__aeabi_dcmpun>
 8002b8e:	bb68      	cbnz	r0, 8002bec <_printf_float+0xb8>
 8002b90:	f04f 32ff 	mov.w	r2, #4294967295
 8002b94:	4ba2      	ldr	r3, [pc, #648]	; (8002e20 <_printf_float+0x2ec>)
 8002b96:	4638      	mov	r0, r7
 8002b98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002b9a:	f7fd ff19 	bl	80009d0 <__aeabi_dcmple>
 8002b9e:	bb28      	cbnz	r0, 8002bec <_printf_float+0xb8>
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	4638      	mov	r0, r7
 8002ba6:	4649      	mov	r1, r9
 8002ba8:	f7fd ff08 	bl	80009bc <__aeabi_dcmplt>
 8002bac:	b110      	cbz	r0, 8002bb4 <_printf_float+0x80>
 8002bae:	232d      	movs	r3, #45	; 0x2d
 8002bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bb4:	4f9b      	ldr	r7, [pc, #620]	; (8002e24 <_printf_float+0x2f0>)
 8002bb6:	4b9c      	ldr	r3, [pc, #624]	; (8002e28 <_printf_float+0x2f4>)
 8002bb8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002bbc:	bf98      	it	ls
 8002bbe:	461f      	movls	r7, r3
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	f04f 0900 	mov.w	r9, #0
 8002bc6:	6123      	str	r3, [r4, #16]
 8002bc8:	f02a 0304 	bic.w	r3, sl, #4
 8002bcc:	6023      	str	r3, [r4, #0]
 8002bce:	9600      	str	r6, [sp, #0]
 8002bd0:	465b      	mov	r3, fp
 8002bd2:	aa0f      	add	r2, sp, #60	; 0x3c
 8002bd4:	4621      	mov	r1, r4
 8002bd6:	4628      	mov	r0, r5
 8002bd8:	f000 f9e2 	bl	8002fa0 <_printf_common>
 8002bdc:	3001      	adds	r0, #1
 8002bde:	f040 8090 	bne.w	8002d02 <_printf_float+0x1ce>
 8002be2:	f04f 30ff 	mov.w	r0, #4294967295
 8002be6:	b011      	add	sp, #68	; 0x44
 8002be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bec:	463a      	mov	r2, r7
 8002bee:	464b      	mov	r3, r9
 8002bf0:	4638      	mov	r0, r7
 8002bf2:	4649      	mov	r1, r9
 8002bf4:	f7fd ff0a 	bl	8000a0c <__aeabi_dcmpun>
 8002bf8:	b110      	cbz	r0, 8002c00 <_printf_float+0xcc>
 8002bfa:	4f8c      	ldr	r7, [pc, #560]	; (8002e2c <_printf_float+0x2f8>)
 8002bfc:	4b8c      	ldr	r3, [pc, #560]	; (8002e30 <_printf_float+0x2fc>)
 8002bfe:	e7db      	b.n	8002bb8 <_printf_float+0x84>
 8002c00:	6863      	ldr	r3, [r4, #4]
 8002c02:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8002c06:	1c59      	adds	r1, r3, #1
 8002c08:	a80d      	add	r0, sp, #52	; 0x34
 8002c0a:	a90e      	add	r1, sp, #56	; 0x38
 8002c0c:	d140      	bne.n	8002c90 <_printf_float+0x15c>
 8002c0e:	2306      	movs	r3, #6
 8002c10:	6063      	str	r3, [r4, #4]
 8002c12:	f04f 0c00 	mov.w	ip, #0
 8002c16:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8002c1a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8002c1e:	6863      	ldr	r3, [r4, #4]
 8002c20:	6022      	str	r2, [r4, #0]
 8002c22:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	463a      	mov	r2, r7
 8002c2a:	464b      	mov	r3, r9
 8002c2c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8002c30:	4628      	mov	r0, r5
 8002c32:	f7ff feed 	bl	8002a10 <__cvt>
 8002c36:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8002c3a:	2b47      	cmp	r3, #71	; 0x47
 8002c3c:	4607      	mov	r7, r0
 8002c3e:	d109      	bne.n	8002c54 <_printf_float+0x120>
 8002c40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002c42:	1cd8      	adds	r0, r3, #3
 8002c44:	db02      	blt.n	8002c4c <_printf_float+0x118>
 8002c46:	6862      	ldr	r2, [r4, #4]
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	dd47      	ble.n	8002cdc <_printf_float+0x1a8>
 8002c4c:	f1a8 0802 	sub.w	r8, r8, #2
 8002c50:	fa5f f888 	uxtb.w	r8, r8
 8002c54:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002c58:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002c5a:	d824      	bhi.n	8002ca6 <_printf_float+0x172>
 8002c5c:	3901      	subs	r1, #1
 8002c5e:	4642      	mov	r2, r8
 8002c60:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002c64:	910d      	str	r1, [sp, #52]	; 0x34
 8002c66:	f7ff ff2f 	bl	8002ac8 <__exponent>
 8002c6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002c6c:	4681      	mov	r9, r0
 8002c6e:	1813      	adds	r3, r2, r0
 8002c70:	2a01      	cmp	r2, #1
 8002c72:	6123      	str	r3, [r4, #16]
 8002c74:	dc02      	bgt.n	8002c7c <_printf_float+0x148>
 8002c76:	6822      	ldr	r2, [r4, #0]
 8002c78:	07d1      	lsls	r1, r2, #31
 8002c7a:	d501      	bpl.n	8002c80 <_printf_float+0x14c>
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	6123      	str	r3, [r4, #16]
 8002c80:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0a2      	beq.n	8002bce <_printf_float+0x9a>
 8002c88:	232d      	movs	r3, #45	; 0x2d
 8002c8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c8e:	e79e      	b.n	8002bce <_printf_float+0x9a>
 8002c90:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8002c94:	f000 816e 	beq.w	8002f74 <_printf_float+0x440>
 8002c98:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002c9c:	d1b9      	bne.n	8002c12 <_printf_float+0xde>
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1b7      	bne.n	8002c12 <_printf_float+0xde>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e7b4      	b.n	8002c10 <_printf_float+0xdc>
 8002ca6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8002caa:	d119      	bne.n	8002ce0 <_printf_float+0x1ac>
 8002cac:	2900      	cmp	r1, #0
 8002cae:	6863      	ldr	r3, [r4, #4]
 8002cb0:	dd0c      	ble.n	8002ccc <_printf_float+0x198>
 8002cb2:	6121      	str	r1, [r4, #16]
 8002cb4:	b913      	cbnz	r3, 8002cbc <_printf_float+0x188>
 8002cb6:	6822      	ldr	r2, [r4, #0]
 8002cb8:	07d2      	lsls	r2, r2, #31
 8002cba:	d502      	bpl.n	8002cc2 <_printf_float+0x18e>
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	440b      	add	r3, r1
 8002cc0:	6123      	str	r3, [r4, #16]
 8002cc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002cc4:	f04f 0900 	mov.w	r9, #0
 8002cc8:	65a3      	str	r3, [r4, #88]	; 0x58
 8002cca:	e7d9      	b.n	8002c80 <_printf_float+0x14c>
 8002ccc:	b913      	cbnz	r3, 8002cd4 <_printf_float+0x1a0>
 8002cce:	6822      	ldr	r2, [r4, #0]
 8002cd0:	07d0      	lsls	r0, r2, #31
 8002cd2:	d501      	bpl.n	8002cd8 <_printf_float+0x1a4>
 8002cd4:	3302      	adds	r3, #2
 8002cd6:	e7f3      	b.n	8002cc0 <_printf_float+0x18c>
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e7f1      	b.n	8002cc0 <_printf_float+0x18c>
 8002cdc:	f04f 0867 	mov.w	r8, #103	; 0x67
 8002ce0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	db05      	blt.n	8002cf4 <_printf_float+0x1c0>
 8002ce8:	6822      	ldr	r2, [r4, #0]
 8002cea:	6123      	str	r3, [r4, #16]
 8002cec:	07d1      	lsls	r1, r2, #31
 8002cee:	d5e8      	bpl.n	8002cc2 <_printf_float+0x18e>
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	e7e5      	b.n	8002cc0 <_printf_float+0x18c>
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	bfcc      	ite	gt
 8002cf8:	2301      	movgt	r3, #1
 8002cfa:	f1c3 0302 	rsble	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	e7de      	b.n	8002cc0 <_printf_float+0x18c>
 8002d02:	6823      	ldr	r3, [r4, #0]
 8002d04:	055a      	lsls	r2, r3, #21
 8002d06:	d407      	bmi.n	8002d18 <_printf_float+0x1e4>
 8002d08:	6923      	ldr	r3, [r4, #16]
 8002d0a:	463a      	mov	r2, r7
 8002d0c:	4659      	mov	r1, fp
 8002d0e:	4628      	mov	r0, r5
 8002d10:	47b0      	blx	r6
 8002d12:	3001      	adds	r0, #1
 8002d14:	d129      	bne.n	8002d6a <_printf_float+0x236>
 8002d16:	e764      	b.n	8002be2 <_printf_float+0xae>
 8002d18:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002d1c:	f240 80d7 	bls.w	8002ece <_printf_float+0x39a>
 8002d20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002d24:	2200      	movs	r2, #0
 8002d26:	2300      	movs	r3, #0
 8002d28:	f7fd fe3e 	bl	80009a8 <__aeabi_dcmpeq>
 8002d2c:	b388      	cbz	r0, 8002d92 <_printf_float+0x25e>
 8002d2e:	2301      	movs	r3, #1
 8002d30:	4a40      	ldr	r2, [pc, #256]	; (8002e34 <_printf_float+0x300>)
 8002d32:	4659      	mov	r1, fp
 8002d34:	4628      	mov	r0, r5
 8002d36:	47b0      	blx	r6
 8002d38:	3001      	adds	r0, #1
 8002d3a:	f43f af52 	beq.w	8002be2 <_printf_float+0xae>
 8002d3e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002d42:	429a      	cmp	r2, r3
 8002d44:	db02      	blt.n	8002d4c <_printf_float+0x218>
 8002d46:	6823      	ldr	r3, [r4, #0]
 8002d48:	07d8      	lsls	r0, r3, #31
 8002d4a:	d50e      	bpl.n	8002d6a <_printf_float+0x236>
 8002d4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002d50:	4659      	mov	r1, fp
 8002d52:	4628      	mov	r0, r5
 8002d54:	47b0      	blx	r6
 8002d56:	3001      	adds	r0, #1
 8002d58:	f43f af43 	beq.w	8002be2 <_printf_float+0xae>
 8002d5c:	2700      	movs	r7, #0
 8002d5e:	f104 081a 	add.w	r8, r4, #26
 8002d62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d64:	3b01      	subs	r3, #1
 8002d66:	42bb      	cmp	r3, r7
 8002d68:	dc09      	bgt.n	8002d7e <_printf_float+0x24a>
 8002d6a:	6823      	ldr	r3, [r4, #0]
 8002d6c:	079f      	lsls	r7, r3, #30
 8002d6e:	f100 80fd 	bmi.w	8002f6c <_printf_float+0x438>
 8002d72:	68e0      	ldr	r0, [r4, #12]
 8002d74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002d76:	4298      	cmp	r0, r3
 8002d78:	bfb8      	it	lt
 8002d7a:	4618      	movlt	r0, r3
 8002d7c:	e733      	b.n	8002be6 <_printf_float+0xb2>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	4642      	mov	r2, r8
 8002d82:	4659      	mov	r1, fp
 8002d84:	4628      	mov	r0, r5
 8002d86:	47b0      	blx	r6
 8002d88:	3001      	adds	r0, #1
 8002d8a:	f43f af2a 	beq.w	8002be2 <_printf_float+0xae>
 8002d8e:	3701      	adds	r7, #1
 8002d90:	e7e7      	b.n	8002d62 <_printf_float+0x22e>
 8002d92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	dc2b      	bgt.n	8002df0 <_printf_float+0x2bc>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	4a26      	ldr	r2, [pc, #152]	; (8002e34 <_printf_float+0x300>)
 8002d9c:	4659      	mov	r1, fp
 8002d9e:	4628      	mov	r0, r5
 8002da0:	47b0      	blx	r6
 8002da2:	3001      	adds	r0, #1
 8002da4:	f43f af1d 	beq.w	8002be2 <_printf_float+0xae>
 8002da8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002daa:	b923      	cbnz	r3, 8002db6 <_printf_float+0x282>
 8002dac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002dae:	b913      	cbnz	r3, 8002db6 <_printf_float+0x282>
 8002db0:	6823      	ldr	r3, [r4, #0]
 8002db2:	07d9      	lsls	r1, r3, #31
 8002db4:	d5d9      	bpl.n	8002d6a <_printf_float+0x236>
 8002db6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002dba:	4659      	mov	r1, fp
 8002dbc:	4628      	mov	r0, r5
 8002dbe:	47b0      	blx	r6
 8002dc0:	3001      	adds	r0, #1
 8002dc2:	f43f af0e 	beq.w	8002be2 <_printf_float+0xae>
 8002dc6:	f04f 0800 	mov.w	r8, #0
 8002dca:	f104 091a 	add.w	r9, r4, #26
 8002dce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002dd0:	425b      	negs	r3, r3
 8002dd2:	4543      	cmp	r3, r8
 8002dd4:	dc01      	bgt.n	8002dda <_printf_float+0x2a6>
 8002dd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002dd8:	e797      	b.n	8002d0a <_printf_float+0x1d6>
 8002dda:	2301      	movs	r3, #1
 8002ddc:	464a      	mov	r2, r9
 8002dde:	4659      	mov	r1, fp
 8002de0:	4628      	mov	r0, r5
 8002de2:	47b0      	blx	r6
 8002de4:	3001      	adds	r0, #1
 8002de6:	f43f aefc 	beq.w	8002be2 <_printf_float+0xae>
 8002dea:	f108 0801 	add.w	r8, r8, #1
 8002dee:	e7ee      	b.n	8002dce <_printf_float+0x29a>
 8002df0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002df2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002df4:	429a      	cmp	r2, r3
 8002df6:	bfa8      	it	ge
 8002df8:	461a      	movge	r2, r3
 8002dfa:	2a00      	cmp	r2, #0
 8002dfc:	4690      	mov	r8, r2
 8002dfe:	dd07      	ble.n	8002e10 <_printf_float+0x2dc>
 8002e00:	4613      	mov	r3, r2
 8002e02:	4659      	mov	r1, fp
 8002e04:	463a      	mov	r2, r7
 8002e06:	4628      	mov	r0, r5
 8002e08:	47b0      	blx	r6
 8002e0a:	3001      	adds	r0, #1
 8002e0c:	f43f aee9 	beq.w	8002be2 <_printf_float+0xae>
 8002e10:	f104 031a 	add.w	r3, r4, #26
 8002e14:	f04f 0a00 	mov.w	sl, #0
 8002e18:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8002e1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e1e:	e015      	b.n	8002e4c <_printf_float+0x318>
 8002e20:	7fefffff 	.word	0x7fefffff
 8002e24:	08004480 	.word	0x08004480
 8002e28:	0800447c 	.word	0x0800447c
 8002e2c:	08004488 	.word	0x08004488
 8002e30:	08004484 	.word	0x08004484
 8002e34:	0800448c 	.word	0x0800448c
 8002e38:	2301      	movs	r3, #1
 8002e3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002e3c:	4659      	mov	r1, fp
 8002e3e:	4628      	mov	r0, r5
 8002e40:	47b0      	blx	r6
 8002e42:	3001      	adds	r0, #1
 8002e44:	f43f aecd 	beq.w	8002be2 <_printf_float+0xae>
 8002e48:	f10a 0a01 	add.w	sl, sl, #1
 8002e4c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8002e50:	eba9 0308 	sub.w	r3, r9, r8
 8002e54:	4553      	cmp	r3, sl
 8002e56:	dcef      	bgt.n	8002e38 <_printf_float+0x304>
 8002e58:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	444f      	add	r7, r9
 8002e60:	db14      	blt.n	8002e8c <_printf_float+0x358>
 8002e62:	6823      	ldr	r3, [r4, #0]
 8002e64:	07da      	lsls	r2, r3, #31
 8002e66:	d411      	bmi.n	8002e8c <_printf_float+0x358>
 8002e68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e6a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002e6c:	eba3 0209 	sub.w	r2, r3, r9
 8002e70:	eba3 0901 	sub.w	r9, r3, r1
 8002e74:	4591      	cmp	r9, r2
 8002e76:	bfa8      	it	ge
 8002e78:	4691      	movge	r9, r2
 8002e7a:	f1b9 0f00 	cmp.w	r9, #0
 8002e7e:	dc0d      	bgt.n	8002e9c <_printf_float+0x368>
 8002e80:	2700      	movs	r7, #0
 8002e82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002e86:	f104 081a 	add.w	r8, r4, #26
 8002e8a:	e018      	b.n	8002ebe <_printf_float+0x38a>
 8002e8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002e90:	4659      	mov	r1, fp
 8002e92:	4628      	mov	r0, r5
 8002e94:	47b0      	blx	r6
 8002e96:	3001      	adds	r0, #1
 8002e98:	d1e6      	bne.n	8002e68 <_printf_float+0x334>
 8002e9a:	e6a2      	b.n	8002be2 <_printf_float+0xae>
 8002e9c:	464b      	mov	r3, r9
 8002e9e:	463a      	mov	r2, r7
 8002ea0:	4659      	mov	r1, fp
 8002ea2:	4628      	mov	r0, r5
 8002ea4:	47b0      	blx	r6
 8002ea6:	3001      	adds	r0, #1
 8002ea8:	d1ea      	bne.n	8002e80 <_printf_float+0x34c>
 8002eaa:	e69a      	b.n	8002be2 <_printf_float+0xae>
 8002eac:	2301      	movs	r3, #1
 8002eae:	4642      	mov	r2, r8
 8002eb0:	4659      	mov	r1, fp
 8002eb2:	4628      	mov	r0, r5
 8002eb4:	47b0      	blx	r6
 8002eb6:	3001      	adds	r0, #1
 8002eb8:	f43f ae93 	beq.w	8002be2 <_printf_float+0xae>
 8002ebc:	3701      	adds	r7, #1
 8002ebe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002ec2:	1a9b      	subs	r3, r3, r2
 8002ec4:	eba3 0309 	sub.w	r3, r3, r9
 8002ec8:	42bb      	cmp	r3, r7
 8002eca:	dcef      	bgt.n	8002eac <_printf_float+0x378>
 8002ecc:	e74d      	b.n	8002d6a <_printf_float+0x236>
 8002ece:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002ed0:	2a01      	cmp	r2, #1
 8002ed2:	dc01      	bgt.n	8002ed8 <_printf_float+0x3a4>
 8002ed4:	07db      	lsls	r3, r3, #31
 8002ed6:	d538      	bpl.n	8002f4a <_printf_float+0x416>
 8002ed8:	2301      	movs	r3, #1
 8002eda:	463a      	mov	r2, r7
 8002edc:	4659      	mov	r1, fp
 8002ede:	4628      	mov	r0, r5
 8002ee0:	47b0      	blx	r6
 8002ee2:	3001      	adds	r0, #1
 8002ee4:	f43f ae7d 	beq.w	8002be2 <_printf_float+0xae>
 8002ee8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002eec:	4659      	mov	r1, fp
 8002eee:	4628      	mov	r0, r5
 8002ef0:	47b0      	blx	r6
 8002ef2:	3001      	adds	r0, #1
 8002ef4:	f107 0701 	add.w	r7, r7, #1
 8002ef8:	f43f ae73 	beq.w	8002be2 <_printf_float+0xae>
 8002efc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002f00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f02:	2200      	movs	r2, #0
 8002f04:	f103 38ff 	add.w	r8, r3, #4294967295
 8002f08:	2300      	movs	r3, #0
 8002f0a:	f7fd fd4d 	bl	80009a8 <__aeabi_dcmpeq>
 8002f0e:	b9c0      	cbnz	r0, 8002f42 <_printf_float+0x40e>
 8002f10:	4643      	mov	r3, r8
 8002f12:	463a      	mov	r2, r7
 8002f14:	4659      	mov	r1, fp
 8002f16:	4628      	mov	r0, r5
 8002f18:	47b0      	blx	r6
 8002f1a:	3001      	adds	r0, #1
 8002f1c:	d10d      	bne.n	8002f3a <_printf_float+0x406>
 8002f1e:	e660      	b.n	8002be2 <_printf_float+0xae>
 8002f20:	2301      	movs	r3, #1
 8002f22:	4642      	mov	r2, r8
 8002f24:	4659      	mov	r1, fp
 8002f26:	4628      	mov	r0, r5
 8002f28:	47b0      	blx	r6
 8002f2a:	3001      	adds	r0, #1
 8002f2c:	f43f ae59 	beq.w	8002be2 <_printf_float+0xae>
 8002f30:	3701      	adds	r7, #1
 8002f32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f34:	3b01      	subs	r3, #1
 8002f36:	42bb      	cmp	r3, r7
 8002f38:	dcf2      	bgt.n	8002f20 <_printf_float+0x3ec>
 8002f3a:	464b      	mov	r3, r9
 8002f3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002f40:	e6e4      	b.n	8002d0c <_printf_float+0x1d8>
 8002f42:	2700      	movs	r7, #0
 8002f44:	f104 081a 	add.w	r8, r4, #26
 8002f48:	e7f3      	b.n	8002f32 <_printf_float+0x3fe>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e7e1      	b.n	8002f12 <_printf_float+0x3de>
 8002f4e:	2301      	movs	r3, #1
 8002f50:	4642      	mov	r2, r8
 8002f52:	4659      	mov	r1, fp
 8002f54:	4628      	mov	r0, r5
 8002f56:	47b0      	blx	r6
 8002f58:	3001      	adds	r0, #1
 8002f5a:	f43f ae42 	beq.w	8002be2 <_printf_float+0xae>
 8002f5e:	3701      	adds	r7, #1
 8002f60:	68e3      	ldr	r3, [r4, #12]
 8002f62:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002f64:	1a9b      	subs	r3, r3, r2
 8002f66:	42bb      	cmp	r3, r7
 8002f68:	dcf1      	bgt.n	8002f4e <_printf_float+0x41a>
 8002f6a:	e702      	b.n	8002d72 <_printf_float+0x23e>
 8002f6c:	2700      	movs	r7, #0
 8002f6e:	f104 0819 	add.w	r8, r4, #25
 8002f72:	e7f5      	b.n	8002f60 <_printf_float+0x42c>
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f43f ae94 	beq.w	8002ca2 <_printf_float+0x16e>
 8002f7a:	f04f 0c00 	mov.w	ip, #0
 8002f7e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8002f82:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8002f86:	6022      	str	r2, [r4, #0]
 8002f88:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8002f8c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	463a      	mov	r2, r7
 8002f94:	464b      	mov	r3, r9
 8002f96:	4628      	mov	r0, r5
 8002f98:	f7ff fd3a 	bl	8002a10 <__cvt>
 8002f9c:	4607      	mov	r7, r0
 8002f9e:	e64f      	b.n	8002c40 <_printf_float+0x10c>

08002fa0 <_printf_common>:
 8002fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fa4:	4691      	mov	r9, r2
 8002fa6:	461f      	mov	r7, r3
 8002fa8:	688a      	ldr	r2, [r1, #8]
 8002faa:	690b      	ldr	r3, [r1, #16]
 8002fac:	4606      	mov	r6, r0
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	bfb8      	it	lt
 8002fb2:	4613      	movlt	r3, r2
 8002fb4:	f8c9 3000 	str.w	r3, [r9]
 8002fb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002fbc:	460c      	mov	r4, r1
 8002fbe:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002fc2:	b112      	cbz	r2, 8002fca <_printf_common+0x2a>
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	f8c9 3000 	str.w	r3, [r9]
 8002fca:	6823      	ldr	r3, [r4, #0]
 8002fcc:	0699      	lsls	r1, r3, #26
 8002fce:	bf42      	ittt	mi
 8002fd0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002fd4:	3302      	addmi	r3, #2
 8002fd6:	f8c9 3000 	strmi.w	r3, [r9]
 8002fda:	6825      	ldr	r5, [r4, #0]
 8002fdc:	f015 0506 	ands.w	r5, r5, #6
 8002fe0:	d107      	bne.n	8002ff2 <_printf_common+0x52>
 8002fe2:	f104 0a19 	add.w	sl, r4, #25
 8002fe6:	68e3      	ldr	r3, [r4, #12]
 8002fe8:	f8d9 2000 	ldr.w	r2, [r9]
 8002fec:	1a9b      	subs	r3, r3, r2
 8002fee:	42ab      	cmp	r3, r5
 8002ff0:	dc29      	bgt.n	8003046 <_printf_common+0xa6>
 8002ff2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002ff6:	6822      	ldr	r2, [r4, #0]
 8002ff8:	3300      	adds	r3, #0
 8002ffa:	bf18      	it	ne
 8002ffc:	2301      	movne	r3, #1
 8002ffe:	0692      	lsls	r2, r2, #26
 8003000:	d42e      	bmi.n	8003060 <_printf_common+0xc0>
 8003002:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003006:	4639      	mov	r1, r7
 8003008:	4630      	mov	r0, r6
 800300a:	47c0      	blx	r8
 800300c:	3001      	adds	r0, #1
 800300e:	d021      	beq.n	8003054 <_printf_common+0xb4>
 8003010:	6823      	ldr	r3, [r4, #0]
 8003012:	68e5      	ldr	r5, [r4, #12]
 8003014:	f003 0306 	and.w	r3, r3, #6
 8003018:	2b04      	cmp	r3, #4
 800301a:	bf18      	it	ne
 800301c:	2500      	movne	r5, #0
 800301e:	f8d9 2000 	ldr.w	r2, [r9]
 8003022:	f04f 0900 	mov.w	r9, #0
 8003026:	bf08      	it	eq
 8003028:	1aad      	subeq	r5, r5, r2
 800302a:	68a3      	ldr	r3, [r4, #8]
 800302c:	6922      	ldr	r2, [r4, #16]
 800302e:	bf08      	it	eq
 8003030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003034:	4293      	cmp	r3, r2
 8003036:	bfc4      	itt	gt
 8003038:	1a9b      	subgt	r3, r3, r2
 800303a:	18ed      	addgt	r5, r5, r3
 800303c:	341a      	adds	r4, #26
 800303e:	454d      	cmp	r5, r9
 8003040:	d11a      	bne.n	8003078 <_printf_common+0xd8>
 8003042:	2000      	movs	r0, #0
 8003044:	e008      	b.n	8003058 <_printf_common+0xb8>
 8003046:	2301      	movs	r3, #1
 8003048:	4652      	mov	r2, sl
 800304a:	4639      	mov	r1, r7
 800304c:	4630      	mov	r0, r6
 800304e:	47c0      	blx	r8
 8003050:	3001      	adds	r0, #1
 8003052:	d103      	bne.n	800305c <_printf_common+0xbc>
 8003054:	f04f 30ff 	mov.w	r0, #4294967295
 8003058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800305c:	3501      	adds	r5, #1
 800305e:	e7c2      	b.n	8002fe6 <_printf_common+0x46>
 8003060:	2030      	movs	r0, #48	; 0x30
 8003062:	18e1      	adds	r1, r4, r3
 8003064:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800306e:	4422      	add	r2, r4
 8003070:	3302      	adds	r3, #2
 8003072:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003076:	e7c4      	b.n	8003002 <_printf_common+0x62>
 8003078:	2301      	movs	r3, #1
 800307a:	4622      	mov	r2, r4
 800307c:	4639      	mov	r1, r7
 800307e:	4630      	mov	r0, r6
 8003080:	47c0      	blx	r8
 8003082:	3001      	adds	r0, #1
 8003084:	d0e6      	beq.n	8003054 <_printf_common+0xb4>
 8003086:	f109 0901 	add.w	r9, r9, #1
 800308a:	e7d8      	b.n	800303e <_printf_common+0x9e>

0800308c <quorem>:
 800308c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003090:	6903      	ldr	r3, [r0, #16]
 8003092:	690c      	ldr	r4, [r1, #16]
 8003094:	4680      	mov	r8, r0
 8003096:	42a3      	cmp	r3, r4
 8003098:	f2c0 8084 	blt.w	80031a4 <quorem+0x118>
 800309c:	3c01      	subs	r4, #1
 800309e:	f101 0714 	add.w	r7, r1, #20
 80030a2:	f100 0614 	add.w	r6, r0, #20
 80030a6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80030aa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80030ae:	3501      	adds	r5, #1
 80030b0:	fbb0 f5f5 	udiv	r5, r0, r5
 80030b4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80030b8:	eb06 030c 	add.w	r3, r6, ip
 80030bc:	eb07 090c 	add.w	r9, r7, ip
 80030c0:	9301      	str	r3, [sp, #4]
 80030c2:	b39d      	cbz	r5, 800312c <quorem+0xa0>
 80030c4:	f04f 0a00 	mov.w	sl, #0
 80030c8:	4638      	mov	r0, r7
 80030ca:	46b6      	mov	lr, r6
 80030cc:	46d3      	mov	fp, sl
 80030ce:	f850 2b04 	ldr.w	r2, [r0], #4
 80030d2:	b293      	uxth	r3, r2
 80030d4:	fb05 a303 	mla	r3, r5, r3, sl
 80030d8:	0c12      	lsrs	r2, r2, #16
 80030da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80030de:	fb05 a202 	mla	r2, r5, r2, sl
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	ebab 0303 	sub.w	r3, fp, r3
 80030e8:	f8de b000 	ldr.w	fp, [lr]
 80030ec:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80030f0:	fa1f fb8b 	uxth.w	fp, fp
 80030f4:	445b      	add	r3, fp
 80030f6:	fa1f fb82 	uxth.w	fp, r2
 80030fa:	f8de 2000 	ldr.w	r2, [lr]
 80030fe:	4581      	cmp	r9, r0
 8003100:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003104:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003108:	b29b      	uxth	r3, r3
 800310a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800310e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003112:	f84e 3b04 	str.w	r3, [lr], #4
 8003116:	d2da      	bcs.n	80030ce <quorem+0x42>
 8003118:	f856 300c 	ldr.w	r3, [r6, ip]
 800311c:	b933      	cbnz	r3, 800312c <quorem+0xa0>
 800311e:	9b01      	ldr	r3, [sp, #4]
 8003120:	3b04      	subs	r3, #4
 8003122:	429e      	cmp	r6, r3
 8003124:	461a      	mov	r2, r3
 8003126:	d331      	bcc.n	800318c <quorem+0x100>
 8003128:	f8c8 4010 	str.w	r4, [r8, #16]
 800312c:	4640      	mov	r0, r8
 800312e:	f001 f825 	bl	800417c <__mcmp>
 8003132:	2800      	cmp	r0, #0
 8003134:	db26      	blt.n	8003184 <quorem+0xf8>
 8003136:	4630      	mov	r0, r6
 8003138:	f04f 0c00 	mov.w	ip, #0
 800313c:	3501      	adds	r5, #1
 800313e:	f857 1b04 	ldr.w	r1, [r7], #4
 8003142:	f8d0 e000 	ldr.w	lr, [r0]
 8003146:	b28b      	uxth	r3, r1
 8003148:	ebac 0303 	sub.w	r3, ip, r3
 800314c:	fa1f f28e 	uxth.w	r2, lr
 8003150:	4413      	add	r3, r2
 8003152:	0c0a      	lsrs	r2, r1, #16
 8003154:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003158:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800315c:	b29b      	uxth	r3, r3
 800315e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003162:	45b9      	cmp	r9, r7
 8003164:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003168:	f840 3b04 	str.w	r3, [r0], #4
 800316c:	d2e7      	bcs.n	800313e <quorem+0xb2>
 800316e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003172:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003176:	b92a      	cbnz	r2, 8003184 <quorem+0xf8>
 8003178:	3b04      	subs	r3, #4
 800317a:	429e      	cmp	r6, r3
 800317c:	461a      	mov	r2, r3
 800317e:	d30b      	bcc.n	8003198 <quorem+0x10c>
 8003180:	f8c8 4010 	str.w	r4, [r8, #16]
 8003184:	4628      	mov	r0, r5
 8003186:	b003      	add	sp, #12
 8003188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800318c:	6812      	ldr	r2, [r2, #0]
 800318e:	3b04      	subs	r3, #4
 8003190:	2a00      	cmp	r2, #0
 8003192:	d1c9      	bne.n	8003128 <quorem+0x9c>
 8003194:	3c01      	subs	r4, #1
 8003196:	e7c4      	b.n	8003122 <quorem+0x96>
 8003198:	6812      	ldr	r2, [r2, #0]
 800319a:	3b04      	subs	r3, #4
 800319c:	2a00      	cmp	r2, #0
 800319e:	d1ef      	bne.n	8003180 <quorem+0xf4>
 80031a0:	3c01      	subs	r4, #1
 80031a2:	e7ea      	b.n	800317a <quorem+0xee>
 80031a4:	2000      	movs	r0, #0
 80031a6:	e7ee      	b.n	8003186 <quorem+0xfa>

080031a8 <_dtoa_r>:
 80031a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031ac:	4616      	mov	r6, r2
 80031ae:	461f      	mov	r7, r3
 80031b0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80031b2:	b095      	sub	sp, #84	; 0x54
 80031b4:	4604      	mov	r4, r0
 80031b6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80031ba:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80031be:	b93d      	cbnz	r5, 80031d0 <_dtoa_r+0x28>
 80031c0:	2010      	movs	r0, #16
 80031c2:	f000 fdb3 	bl	8003d2c <malloc>
 80031c6:	6260      	str	r0, [r4, #36]	; 0x24
 80031c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80031cc:	6005      	str	r5, [r0, #0]
 80031ce:	60c5      	str	r5, [r0, #12]
 80031d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031d2:	6819      	ldr	r1, [r3, #0]
 80031d4:	b151      	cbz	r1, 80031ec <_dtoa_r+0x44>
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	2301      	movs	r3, #1
 80031da:	4093      	lsls	r3, r2
 80031dc:	604a      	str	r2, [r1, #4]
 80031de:	608b      	str	r3, [r1, #8]
 80031e0:	4620      	mov	r0, r4
 80031e2:	f000 fdea 	bl	8003dba <_Bfree>
 80031e6:	2200      	movs	r2, #0
 80031e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	1e3b      	subs	r3, r7, #0
 80031ee:	bfaf      	iteee	ge
 80031f0:	2300      	movge	r3, #0
 80031f2:	2201      	movlt	r2, #1
 80031f4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80031f8:	9303      	strlt	r3, [sp, #12]
 80031fa:	bfac      	ite	ge
 80031fc:	f8c8 3000 	strge.w	r3, [r8]
 8003200:	f8c8 2000 	strlt.w	r2, [r8]
 8003204:	4bae      	ldr	r3, [pc, #696]	; (80034c0 <_dtoa_r+0x318>)
 8003206:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800320a:	ea33 0308 	bics.w	r3, r3, r8
 800320e:	d11b      	bne.n	8003248 <_dtoa_r+0xa0>
 8003210:	f242 730f 	movw	r3, #9999	; 0x270f
 8003214:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003216:	6013      	str	r3, [r2, #0]
 8003218:	9b02      	ldr	r3, [sp, #8]
 800321a:	b923      	cbnz	r3, 8003226 <_dtoa_r+0x7e>
 800321c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003220:	2800      	cmp	r0, #0
 8003222:	f000 8545 	beq.w	8003cb0 <_dtoa_r+0xb08>
 8003226:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003228:	b953      	cbnz	r3, 8003240 <_dtoa_r+0x98>
 800322a:	4ba6      	ldr	r3, [pc, #664]	; (80034c4 <_dtoa_r+0x31c>)
 800322c:	e021      	b.n	8003272 <_dtoa_r+0xca>
 800322e:	4ba6      	ldr	r3, [pc, #664]	; (80034c8 <_dtoa_r+0x320>)
 8003230:	9306      	str	r3, [sp, #24]
 8003232:	3308      	adds	r3, #8
 8003234:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003236:	6013      	str	r3, [r2, #0]
 8003238:	9806      	ldr	r0, [sp, #24]
 800323a:	b015      	add	sp, #84	; 0x54
 800323c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003240:	4ba0      	ldr	r3, [pc, #640]	; (80034c4 <_dtoa_r+0x31c>)
 8003242:	9306      	str	r3, [sp, #24]
 8003244:	3303      	adds	r3, #3
 8003246:	e7f5      	b.n	8003234 <_dtoa_r+0x8c>
 8003248:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800324c:	2200      	movs	r2, #0
 800324e:	2300      	movs	r3, #0
 8003250:	4630      	mov	r0, r6
 8003252:	4639      	mov	r1, r7
 8003254:	f7fd fba8 	bl	80009a8 <__aeabi_dcmpeq>
 8003258:	4682      	mov	sl, r0
 800325a:	b160      	cbz	r0, 8003276 <_dtoa_r+0xce>
 800325c:	2301      	movs	r3, #1
 800325e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 8520 	beq.w	8003caa <_dtoa_r+0xb02>
 800326a:	4b98      	ldr	r3, [pc, #608]	; (80034cc <_dtoa_r+0x324>)
 800326c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800326e:	6013      	str	r3, [r2, #0]
 8003270:	3b01      	subs	r3, #1
 8003272:	9306      	str	r3, [sp, #24]
 8003274:	e7e0      	b.n	8003238 <_dtoa_r+0x90>
 8003276:	ab12      	add	r3, sp, #72	; 0x48
 8003278:	9301      	str	r3, [sp, #4]
 800327a:	ab13      	add	r3, sp, #76	; 0x4c
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	4632      	mov	r2, r6
 8003280:	463b      	mov	r3, r7
 8003282:	4620      	mov	r0, r4
 8003284:	f000 fff2 	bl	800426c <__d2b>
 8003288:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800328c:	4683      	mov	fp, r0
 800328e:	2d00      	cmp	r5, #0
 8003290:	d07d      	beq.n	800338e <_dtoa_r+0x1e6>
 8003292:	46b0      	mov	r8, r6
 8003294:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003298:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800329c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80032a0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80032a4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80032a8:	2200      	movs	r2, #0
 80032aa:	4b89      	ldr	r3, [pc, #548]	; (80034d0 <_dtoa_r+0x328>)
 80032ac:	4640      	mov	r0, r8
 80032ae:	4649      	mov	r1, r9
 80032b0:	f7fc ff5a 	bl	8000168 <__aeabi_dsub>
 80032b4:	a37c      	add	r3, pc, #496	; (adr r3, 80034a8 <_dtoa_r+0x300>)
 80032b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ba:	f7fd f90d 	bl	80004d8 <__aeabi_dmul>
 80032be:	a37c      	add	r3, pc, #496	; (adr r3, 80034b0 <_dtoa_r+0x308>)
 80032c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c4:	f7fc ff52 	bl	800016c <__adddf3>
 80032c8:	4606      	mov	r6, r0
 80032ca:	4628      	mov	r0, r5
 80032cc:	460f      	mov	r7, r1
 80032ce:	f7fd f899 	bl	8000404 <__aeabi_i2d>
 80032d2:	a379      	add	r3, pc, #484	; (adr r3, 80034b8 <_dtoa_r+0x310>)
 80032d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d8:	f7fd f8fe 	bl	80004d8 <__aeabi_dmul>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	4630      	mov	r0, r6
 80032e2:	4639      	mov	r1, r7
 80032e4:	f7fc ff42 	bl	800016c <__adddf3>
 80032e8:	4606      	mov	r6, r0
 80032ea:	460f      	mov	r7, r1
 80032ec:	f7fd fba4 	bl	8000a38 <__aeabi_d2iz>
 80032f0:	2200      	movs	r2, #0
 80032f2:	4682      	mov	sl, r0
 80032f4:	2300      	movs	r3, #0
 80032f6:	4630      	mov	r0, r6
 80032f8:	4639      	mov	r1, r7
 80032fa:	f7fd fb5f 	bl	80009bc <__aeabi_dcmplt>
 80032fe:	b148      	cbz	r0, 8003314 <_dtoa_r+0x16c>
 8003300:	4650      	mov	r0, sl
 8003302:	f7fd f87f 	bl	8000404 <__aeabi_i2d>
 8003306:	4632      	mov	r2, r6
 8003308:	463b      	mov	r3, r7
 800330a:	f7fd fb4d 	bl	80009a8 <__aeabi_dcmpeq>
 800330e:	b908      	cbnz	r0, 8003314 <_dtoa_r+0x16c>
 8003310:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003314:	f1ba 0f16 	cmp.w	sl, #22
 8003318:	d85a      	bhi.n	80033d0 <_dtoa_r+0x228>
 800331a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800331e:	496d      	ldr	r1, [pc, #436]	; (80034d4 <_dtoa_r+0x32c>)
 8003320:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8003324:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003328:	f7fd fb66 	bl	80009f8 <__aeabi_dcmpgt>
 800332c:	2800      	cmp	r0, #0
 800332e:	d051      	beq.n	80033d4 <_dtoa_r+0x22c>
 8003330:	2300      	movs	r3, #0
 8003332:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003336:	930d      	str	r3, [sp, #52]	; 0x34
 8003338:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800333a:	1b5d      	subs	r5, r3, r5
 800333c:	1e6b      	subs	r3, r5, #1
 800333e:	9307      	str	r3, [sp, #28]
 8003340:	bf43      	ittte	mi
 8003342:	2300      	movmi	r3, #0
 8003344:	f1c5 0901 	rsbmi	r9, r5, #1
 8003348:	9307      	strmi	r3, [sp, #28]
 800334a:	f04f 0900 	movpl.w	r9, #0
 800334e:	f1ba 0f00 	cmp.w	sl, #0
 8003352:	db41      	blt.n	80033d8 <_dtoa_r+0x230>
 8003354:	9b07      	ldr	r3, [sp, #28]
 8003356:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800335a:	4453      	add	r3, sl
 800335c:	9307      	str	r3, [sp, #28]
 800335e:	2300      	movs	r3, #0
 8003360:	9308      	str	r3, [sp, #32]
 8003362:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003364:	2b09      	cmp	r3, #9
 8003366:	f200 808f 	bhi.w	8003488 <_dtoa_r+0x2e0>
 800336a:	2b05      	cmp	r3, #5
 800336c:	bfc4      	itt	gt
 800336e:	3b04      	subgt	r3, #4
 8003370:	931e      	strgt	r3, [sp, #120]	; 0x78
 8003372:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003374:	bfc8      	it	gt
 8003376:	2500      	movgt	r5, #0
 8003378:	f1a3 0302 	sub.w	r3, r3, #2
 800337c:	bfd8      	it	le
 800337e:	2501      	movle	r5, #1
 8003380:	2b03      	cmp	r3, #3
 8003382:	f200 808d 	bhi.w	80034a0 <_dtoa_r+0x2f8>
 8003386:	e8df f003 	tbb	[pc, r3]
 800338a:	7d7b      	.short	0x7d7b
 800338c:	6f2f      	.short	0x6f2f
 800338e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8003392:	441d      	add	r5, r3
 8003394:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8003398:	2820      	cmp	r0, #32
 800339a:	dd13      	ble.n	80033c4 <_dtoa_r+0x21c>
 800339c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80033a0:	9b02      	ldr	r3, [sp, #8]
 80033a2:	fa08 f800 	lsl.w	r8, r8, r0
 80033a6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80033aa:	fa23 f000 	lsr.w	r0, r3, r0
 80033ae:	ea48 0000 	orr.w	r0, r8, r0
 80033b2:	f7fd f817 	bl	80003e4 <__aeabi_ui2d>
 80033b6:	2301      	movs	r3, #1
 80033b8:	4680      	mov	r8, r0
 80033ba:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80033be:	3d01      	subs	r5, #1
 80033c0:	9310      	str	r3, [sp, #64]	; 0x40
 80033c2:	e771      	b.n	80032a8 <_dtoa_r+0x100>
 80033c4:	9b02      	ldr	r3, [sp, #8]
 80033c6:	f1c0 0020 	rsb	r0, r0, #32
 80033ca:	fa03 f000 	lsl.w	r0, r3, r0
 80033ce:	e7f0      	b.n	80033b2 <_dtoa_r+0x20a>
 80033d0:	2301      	movs	r3, #1
 80033d2:	e7b0      	b.n	8003336 <_dtoa_r+0x18e>
 80033d4:	900d      	str	r0, [sp, #52]	; 0x34
 80033d6:	e7af      	b.n	8003338 <_dtoa_r+0x190>
 80033d8:	f1ca 0300 	rsb	r3, sl, #0
 80033dc:	9308      	str	r3, [sp, #32]
 80033de:	2300      	movs	r3, #0
 80033e0:	eba9 090a 	sub.w	r9, r9, sl
 80033e4:	930c      	str	r3, [sp, #48]	; 0x30
 80033e6:	e7bc      	b.n	8003362 <_dtoa_r+0x1ba>
 80033e8:	2301      	movs	r3, #1
 80033ea:	9309      	str	r3, [sp, #36]	; 0x24
 80033ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	dd74      	ble.n	80034dc <_dtoa_r+0x334>
 80033f2:	4698      	mov	r8, r3
 80033f4:	9304      	str	r3, [sp, #16]
 80033f6:	2200      	movs	r2, #0
 80033f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80033fa:	6072      	str	r2, [r6, #4]
 80033fc:	2204      	movs	r2, #4
 80033fe:	f102 0014 	add.w	r0, r2, #20
 8003402:	4298      	cmp	r0, r3
 8003404:	6871      	ldr	r1, [r6, #4]
 8003406:	d96e      	bls.n	80034e6 <_dtoa_r+0x33e>
 8003408:	4620      	mov	r0, r4
 800340a:	f000 fca2 	bl	8003d52 <_Balloc>
 800340e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003410:	6030      	str	r0, [r6, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f1b8 0f0e 	cmp.w	r8, #14
 8003418:	9306      	str	r3, [sp, #24]
 800341a:	f200 80ed 	bhi.w	80035f8 <_dtoa_r+0x450>
 800341e:	2d00      	cmp	r5, #0
 8003420:	f000 80ea 	beq.w	80035f8 <_dtoa_r+0x450>
 8003424:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003428:	f1ba 0f00 	cmp.w	sl, #0
 800342c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8003430:	dd77      	ble.n	8003522 <_dtoa_r+0x37a>
 8003432:	4a28      	ldr	r2, [pc, #160]	; (80034d4 <_dtoa_r+0x32c>)
 8003434:	f00a 030f 	and.w	r3, sl, #15
 8003438:	ea4f 162a 	mov.w	r6, sl, asr #4
 800343c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003440:	06f0      	lsls	r0, r6, #27
 8003442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003446:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800344a:	d568      	bpl.n	800351e <_dtoa_r+0x376>
 800344c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003450:	4b21      	ldr	r3, [pc, #132]	; (80034d8 <_dtoa_r+0x330>)
 8003452:	2503      	movs	r5, #3
 8003454:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003458:	f7fd f968 	bl	800072c <__aeabi_ddiv>
 800345c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003460:	f006 060f 	and.w	r6, r6, #15
 8003464:	4f1c      	ldr	r7, [pc, #112]	; (80034d8 <_dtoa_r+0x330>)
 8003466:	e04f      	b.n	8003508 <_dtoa_r+0x360>
 8003468:	2301      	movs	r3, #1
 800346a:	9309      	str	r3, [sp, #36]	; 0x24
 800346c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800346e:	4453      	add	r3, sl
 8003470:	f103 0801 	add.w	r8, r3, #1
 8003474:	9304      	str	r3, [sp, #16]
 8003476:	4643      	mov	r3, r8
 8003478:	2b01      	cmp	r3, #1
 800347a:	bfb8      	it	lt
 800347c:	2301      	movlt	r3, #1
 800347e:	e7ba      	b.n	80033f6 <_dtoa_r+0x24e>
 8003480:	2300      	movs	r3, #0
 8003482:	e7b2      	b.n	80033ea <_dtoa_r+0x242>
 8003484:	2300      	movs	r3, #0
 8003486:	e7f0      	b.n	800346a <_dtoa_r+0x2c2>
 8003488:	2501      	movs	r5, #1
 800348a:	2300      	movs	r3, #0
 800348c:	9509      	str	r5, [sp, #36]	; 0x24
 800348e:	931e      	str	r3, [sp, #120]	; 0x78
 8003490:	f04f 33ff 	mov.w	r3, #4294967295
 8003494:	2200      	movs	r2, #0
 8003496:	9304      	str	r3, [sp, #16]
 8003498:	4698      	mov	r8, r3
 800349a:	2312      	movs	r3, #18
 800349c:	921f      	str	r2, [sp, #124]	; 0x7c
 800349e:	e7aa      	b.n	80033f6 <_dtoa_r+0x24e>
 80034a0:	2301      	movs	r3, #1
 80034a2:	9309      	str	r3, [sp, #36]	; 0x24
 80034a4:	e7f4      	b.n	8003490 <_dtoa_r+0x2e8>
 80034a6:	bf00      	nop
 80034a8:	636f4361 	.word	0x636f4361
 80034ac:	3fd287a7 	.word	0x3fd287a7
 80034b0:	8b60c8b3 	.word	0x8b60c8b3
 80034b4:	3fc68a28 	.word	0x3fc68a28
 80034b8:	509f79fb 	.word	0x509f79fb
 80034bc:	3fd34413 	.word	0x3fd34413
 80034c0:	7ff00000 	.word	0x7ff00000
 80034c4:	08004497 	.word	0x08004497
 80034c8:	0800448e 	.word	0x0800448e
 80034cc:	0800448d 	.word	0x0800448d
 80034d0:	3ff80000 	.word	0x3ff80000
 80034d4:	080044c8 	.word	0x080044c8
 80034d8:	080044a0 	.word	0x080044a0
 80034dc:	2301      	movs	r3, #1
 80034de:	9304      	str	r3, [sp, #16]
 80034e0:	4698      	mov	r8, r3
 80034e2:	461a      	mov	r2, r3
 80034e4:	e7da      	b.n	800349c <_dtoa_r+0x2f4>
 80034e6:	3101      	adds	r1, #1
 80034e8:	6071      	str	r1, [r6, #4]
 80034ea:	0052      	lsls	r2, r2, #1
 80034ec:	e787      	b.n	80033fe <_dtoa_r+0x256>
 80034ee:	07f1      	lsls	r1, r6, #31
 80034f0:	d508      	bpl.n	8003504 <_dtoa_r+0x35c>
 80034f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80034f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034fa:	f7fc ffed 	bl	80004d8 <__aeabi_dmul>
 80034fe:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003502:	3501      	adds	r5, #1
 8003504:	1076      	asrs	r6, r6, #1
 8003506:	3708      	adds	r7, #8
 8003508:	2e00      	cmp	r6, #0
 800350a:	d1f0      	bne.n	80034ee <_dtoa_r+0x346>
 800350c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003510:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003514:	f7fd f90a 	bl	800072c <__aeabi_ddiv>
 8003518:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800351c:	e01b      	b.n	8003556 <_dtoa_r+0x3ae>
 800351e:	2502      	movs	r5, #2
 8003520:	e7a0      	b.n	8003464 <_dtoa_r+0x2bc>
 8003522:	f000 80a4 	beq.w	800366e <_dtoa_r+0x4c6>
 8003526:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800352a:	f1ca 0600 	rsb	r6, sl, #0
 800352e:	4ba0      	ldr	r3, [pc, #640]	; (80037b0 <_dtoa_r+0x608>)
 8003530:	f006 020f 	and.w	r2, r6, #15
 8003534:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353c:	f7fc ffcc 	bl	80004d8 <__aeabi_dmul>
 8003540:	2502      	movs	r5, #2
 8003542:	2300      	movs	r3, #0
 8003544:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003548:	4f9a      	ldr	r7, [pc, #616]	; (80037b4 <_dtoa_r+0x60c>)
 800354a:	1136      	asrs	r6, r6, #4
 800354c:	2e00      	cmp	r6, #0
 800354e:	f040 8083 	bne.w	8003658 <_dtoa_r+0x4b0>
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1e0      	bne.n	8003518 <_dtoa_r+0x370>
 8003556:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 808a 	beq.w	8003672 <_dtoa_r+0x4ca>
 800355e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003562:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003566:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800356a:	2200      	movs	r2, #0
 800356c:	4b92      	ldr	r3, [pc, #584]	; (80037b8 <_dtoa_r+0x610>)
 800356e:	f7fd fa25 	bl	80009bc <__aeabi_dcmplt>
 8003572:	2800      	cmp	r0, #0
 8003574:	d07d      	beq.n	8003672 <_dtoa_r+0x4ca>
 8003576:	f1b8 0f00 	cmp.w	r8, #0
 800357a:	d07a      	beq.n	8003672 <_dtoa_r+0x4ca>
 800357c:	9b04      	ldr	r3, [sp, #16]
 800357e:	2b00      	cmp	r3, #0
 8003580:	dd36      	ble.n	80035f0 <_dtoa_r+0x448>
 8003582:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003586:	2200      	movs	r2, #0
 8003588:	4b8c      	ldr	r3, [pc, #560]	; (80037bc <_dtoa_r+0x614>)
 800358a:	f7fc ffa5 	bl	80004d8 <__aeabi_dmul>
 800358e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003592:	9e04      	ldr	r6, [sp, #16]
 8003594:	f10a 37ff 	add.w	r7, sl, #4294967295
 8003598:	3501      	adds	r5, #1
 800359a:	4628      	mov	r0, r5
 800359c:	f7fc ff32 	bl	8000404 <__aeabi_i2d>
 80035a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80035a4:	f7fc ff98 	bl	80004d8 <__aeabi_dmul>
 80035a8:	2200      	movs	r2, #0
 80035aa:	4b85      	ldr	r3, [pc, #532]	; (80037c0 <_dtoa_r+0x618>)
 80035ac:	f7fc fdde 	bl	800016c <__adddf3>
 80035b0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80035b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80035b8:	950b      	str	r5, [sp, #44]	; 0x2c
 80035ba:	2e00      	cmp	r6, #0
 80035bc:	d15c      	bne.n	8003678 <_dtoa_r+0x4d0>
 80035be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80035c2:	2200      	movs	r2, #0
 80035c4:	4b7f      	ldr	r3, [pc, #508]	; (80037c4 <_dtoa_r+0x61c>)
 80035c6:	f7fc fdcf 	bl	8000168 <__aeabi_dsub>
 80035ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80035cc:	462b      	mov	r3, r5
 80035ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80035d2:	f7fd fa11 	bl	80009f8 <__aeabi_dcmpgt>
 80035d6:	2800      	cmp	r0, #0
 80035d8:	f040 8281 	bne.w	8003ade <_dtoa_r+0x936>
 80035dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80035e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80035e2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80035e6:	f7fd f9e9 	bl	80009bc <__aeabi_dcmplt>
 80035ea:	2800      	cmp	r0, #0
 80035ec:	f040 8275 	bne.w	8003ada <_dtoa_r+0x932>
 80035f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80035f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80035f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f2c0 814b 	blt.w	8003896 <_dtoa_r+0x6ee>
 8003600:	f1ba 0f0e 	cmp.w	sl, #14
 8003604:	f300 8147 	bgt.w	8003896 <_dtoa_r+0x6ee>
 8003608:	4b69      	ldr	r3, [pc, #420]	; (80037b0 <_dtoa_r+0x608>)
 800360a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800360e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003612:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003616:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003618:	2b00      	cmp	r3, #0
 800361a:	f280 80d7 	bge.w	80037cc <_dtoa_r+0x624>
 800361e:	f1b8 0f00 	cmp.w	r8, #0
 8003622:	f300 80d3 	bgt.w	80037cc <_dtoa_r+0x624>
 8003626:	f040 8257 	bne.w	8003ad8 <_dtoa_r+0x930>
 800362a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800362e:	2200      	movs	r2, #0
 8003630:	4b64      	ldr	r3, [pc, #400]	; (80037c4 <_dtoa_r+0x61c>)
 8003632:	f7fc ff51 	bl	80004d8 <__aeabi_dmul>
 8003636:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800363a:	f7fd f9d3 	bl	80009e4 <__aeabi_dcmpge>
 800363e:	4646      	mov	r6, r8
 8003640:	4647      	mov	r7, r8
 8003642:	2800      	cmp	r0, #0
 8003644:	f040 822d 	bne.w	8003aa2 <_dtoa_r+0x8fa>
 8003648:	9b06      	ldr	r3, [sp, #24]
 800364a:	9a06      	ldr	r2, [sp, #24]
 800364c:	1c5d      	adds	r5, r3, #1
 800364e:	2331      	movs	r3, #49	; 0x31
 8003650:	f10a 0a01 	add.w	sl, sl, #1
 8003654:	7013      	strb	r3, [r2, #0]
 8003656:	e228      	b.n	8003aaa <_dtoa_r+0x902>
 8003658:	07f2      	lsls	r2, r6, #31
 800365a:	d505      	bpl.n	8003668 <_dtoa_r+0x4c0>
 800365c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003660:	f7fc ff3a 	bl	80004d8 <__aeabi_dmul>
 8003664:	2301      	movs	r3, #1
 8003666:	3501      	adds	r5, #1
 8003668:	1076      	asrs	r6, r6, #1
 800366a:	3708      	adds	r7, #8
 800366c:	e76e      	b.n	800354c <_dtoa_r+0x3a4>
 800366e:	2502      	movs	r5, #2
 8003670:	e771      	b.n	8003556 <_dtoa_r+0x3ae>
 8003672:	4657      	mov	r7, sl
 8003674:	4646      	mov	r6, r8
 8003676:	e790      	b.n	800359a <_dtoa_r+0x3f2>
 8003678:	4b4d      	ldr	r3, [pc, #308]	; (80037b0 <_dtoa_r+0x608>)
 800367a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800367e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8003682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003684:	2b00      	cmp	r3, #0
 8003686:	d048      	beq.n	800371a <_dtoa_r+0x572>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	2000      	movs	r0, #0
 800368e:	494e      	ldr	r1, [pc, #312]	; (80037c8 <_dtoa_r+0x620>)
 8003690:	f7fd f84c 	bl	800072c <__aeabi_ddiv>
 8003694:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003698:	f7fc fd66 	bl	8000168 <__aeabi_dsub>
 800369c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80036a0:	9d06      	ldr	r5, [sp, #24]
 80036a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036a6:	f7fd f9c7 	bl	8000a38 <__aeabi_d2iz>
 80036aa:	9011      	str	r0, [sp, #68]	; 0x44
 80036ac:	f7fc feaa 	bl	8000404 <__aeabi_i2d>
 80036b0:	4602      	mov	r2, r0
 80036b2:	460b      	mov	r3, r1
 80036b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036b8:	f7fc fd56 	bl	8000168 <__aeabi_dsub>
 80036bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80036be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80036c2:	3330      	adds	r3, #48	; 0x30
 80036c4:	f805 3b01 	strb.w	r3, [r5], #1
 80036c8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80036cc:	f7fd f976 	bl	80009bc <__aeabi_dcmplt>
 80036d0:	2800      	cmp	r0, #0
 80036d2:	d163      	bne.n	800379c <_dtoa_r+0x5f4>
 80036d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80036d8:	2000      	movs	r0, #0
 80036da:	4937      	ldr	r1, [pc, #220]	; (80037b8 <_dtoa_r+0x610>)
 80036dc:	f7fc fd44 	bl	8000168 <__aeabi_dsub>
 80036e0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80036e4:	f7fd f96a 	bl	80009bc <__aeabi_dcmplt>
 80036e8:	2800      	cmp	r0, #0
 80036ea:	f040 80b5 	bne.w	8003858 <_dtoa_r+0x6b0>
 80036ee:	9b06      	ldr	r3, [sp, #24]
 80036f0:	1aeb      	subs	r3, r5, r3
 80036f2:	429e      	cmp	r6, r3
 80036f4:	f77f af7c 	ble.w	80035f0 <_dtoa_r+0x448>
 80036f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80036fc:	2200      	movs	r2, #0
 80036fe:	4b2f      	ldr	r3, [pc, #188]	; (80037bc <_dtoa_r+0x614>)
 8003700:	f7fc feea 	bl	80004d8 <__aeabi_dmul>
 8003704:	2200      	movs	r2, #0
 8003706:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800370a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800370e:	4b2b      	ldr	r3, [pc, #172]	; (80037bc <_dtoa_r+0x614>)
 8003710:	f7fc fee2 	bl	80004d8 <__aeabi_dmul>
 8003714:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003718:	e7c3      	b.n	80036a2 <_dtoa_r+0x4fa>
 800371a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800371e:	f7fc fedb 	bl	80004d8 <__aeabi_dmul>
 8003722:	9b06      	ldr	r3, [sp, #24]
 8003724:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003728:	199d      	adds	r5, r3, r6
 800372a:	461e      	mov	r6, r3
 800372c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003730:	f7fd f982 	bl	8000a38 <__aeabi_d2iz>
 8003734:	9011      	str	r0, [sp, #68]	; 0x44
 8003736:	f7fc fe65 	bl	8000404 <__aeabi_i2d>
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003742:	f7fc fd11 	bl	8000168 <__aeabi_dsub>
 8003746:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003748:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800374c:	3330      	adds	r3, #48	; 0x30
 800374e:	f806 3b01 	strb.w	r3, [r6], #1
 8003752:	42ae      	cmp	r6, r5
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	d124      	bne.n	80037a4 <_dtoa_r+0x5fc>
 800375a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800375e:	4b1a      	ldr	r3, [pc, #104]	; (80037c8 <_dtoa_r+0x620>)
 8003760:	f7fc fd04 	bl	800016c <__adddf3>
 8003764:	4602      	mov	r2, r0
 8003766:	460b      	mov	r3, r1
 8003768:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800376c:	f7fd f944 	bl	80009f8 <__aeabi_dcmpgt>
 8003770:	2800      	cmp	r0, #0
 8003772:	d171      	bne.n	8003858 <_dtoa_r+0x6b0>
 8003774:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003778:	2000      	movs	r0, #0
 800377a:	4913      	ldr	r1, [pc, #76]	; (80037c8 <_dtoa_r+0x620>)
 800377c:	f7fc fcf4 	bl	8000168 <__aeabi_dsub>
 8003780:	4602      	mov	r2, r0
 8003782:	460b      	mov	r3, r1
 8003784:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003788:	f7fd f918 	bl	80009bc <__aeabi_dcmplt>
 800378c:	2800      	cmp	r0, #0
 800378e:	f43f af2f 	beq.w	80035f0 <_dtoa_r+0x448>
 8003792:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003796:	1e6a      	subs	r2, r5, #1
 8003798:	2b30      	cmp	r3, #48	; 0x30
 800379a:	d001      	beq.n	80037a0 <_dtoa_r+0x5f8>
 800379c:	46ba      	mov	sl, r7
 800379e:	e04a      	b.n	8003836 <_dtoa_r+0x68e>
 80037a0:	4615      	mov	r5, r2
 80037a2:	e7f6      	b.n	8003792 <_dtoa_r+0x5ea>
 80037a4:	4b05      	ldr	r3, [pc, #20]	; (80037bc <_dtoa_r+0x614>)
 80037a6:	f7fc fe97 	bl	80004d8 <__aeabi_dmul>
 80037aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80037ae:	e7bd      	b.n	800372c <_dtoa_r+0x584>
 80037b0:	080044c8 	.word	0x080044c8
 80037b4:	080044a0 	.word	0x080044a0
 80037b8:	3ff00000 	.word	0x3ff00000
 80037bc:	40240000 	.word	0x40240000
 80037c0:	401c0000 	.word	0x401c0000
 80037c4:	40140000 	.word	0x40140000
 80037c8:	3fe00000 	.word	0x3fe00000
 80037cc:	9d06      	ldr	r5, [sp, #24]
 80037ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80037d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80037d6:	4630      	mov	r0, r6
 80037d8:	4639      	mov	r1, r7
 80037da:	f7fc ffa7 	bl	800072c <__aeabi_ddiv>
 80037de:	f7fd f92b 	bl	8000a38 <__aeabi_d2iz>
 80037e2:	4681      	mov	r9, r0
 80037e4:	f7fc fe0e 	bl	8000404 <__aeabi_i2d>
 80037e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80037ec:	f7fc fe74 	bl	80004d8 <__aeabi_dmul>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4630      	mov	r0, r6
 80037f6:	4639      	mov	r1, r7
 80037f8:	f7fc fcb6 	bl	8000168 <__aeabi_dsub>
 80037fc:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8003800:	f805 6b01 	strb.w	r6, [r5], #1
 8003804:	9e06      	ldr	r6, [sp, #24]
 8003806:	4602      	mov	r2, r0
 8003808:	1bae      	subs	r6, r5, r6
 800380a:	45b0      	cmp	r8, r6
 800380c:	460b      	mov	r3, r1
 800380e:	d135      	bne.n	800387c <_dtoa_r+0x6d4>
 8003810:	f7fc fcac 	bl	800016c <__adddf3>
 8003814:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003818:	4606      	mov	r6, r0
 800381a:	460f      	mov	r7, r1
 800381c:	f7fd f8ec 	bl	80009f8 <__aeabi_dcmpgt>
 8003820:	b9c8      	cbnz	r0, 8003856 <_dtoa_r+0x6ae>
 8003822:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003826:	4630      	mov	r0, r6
 8003828:	4639      	mov	r1, r7
 800382a:	f7fd f8bd 	bl	80009a8 <__aeabi_dcmpeq>
 800382e:	b110      	cbz	r0, 8003836 <_dtoa_r+0x68e>
 8003830:	f019 0f01 	tst.w	r9, #1
 8003834:	d10f      	bne.n	8003856 <_dtoa_r+0x6ae>
 8003836:	4659      	mov	r1, fp
 8003838:	4620      	mov	r0, r4
 800383a:	f000 fabe 	bl	8003dba <_Bfree>
 800383e:	2300      	movs	r3, #0
 8003840:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003842:	702b      	strb	r3, [r5, #0]
 8003844:	f10a 0301 	add.w	r3, sl, #1
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800384c:	2b00      	cmp	r3, #0
 800384e:	f43f acf3 	beq.w	8003238 <_dtoa_r+0x90>
 8003852:	601d      	str	r5, [r3, #0]
 8003854:	e4f0      	b.n	8003238 <_dtoa_r+0x90>
 8003856:	4657      	mov	r7, sl
 8003858:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800385c:	1e6b      	subs	r3, r5, #1
 800385e:	2a39      	cmp	r2, #57	; 0x39
 8003860:	d106      	bne.n	8003870 <_dtoa_r+0x6c8>
 8003862:	9a06      	ldr	r2, [sp, #24]
 8003864:	429a      	cmp	r2, r3
 8003866:	d107      	bne.n	8003878 <_dtoa_r+0x6d0>
 8003868:	2330      	movs	r3, #48	; 0x30
 800386a:	7013      	strb	r3, [r2, #0]
 800386c:	4613      	mov	r3, r2
 800386e:	3701      	adds	r7, #1
 8003870:	781a      	ldrb	r2, [r3, #0]
 8003872:	3201      	adds	r2, #1
 8003874:	701a      	strb	r2, [r3, #0]
 8003876:	e791      	b.n	800379c <_dtoa_r+0x5f4>
 8003878:	461d      	mov	r5, r3
 800387a:	e7ed      	b.n	8003858 <_dtoa_r+0x6b0>
 800387c:	2200      	movs	r2, #0
 800387e:	4b99      	ldr	r3, [pc, #612]	; (8003ae4 <_dtoa_r+0x93c>)
 8003880:	f7fc fe2a 	bl	80004d8 <__aeabi_dmul>
 8003884:	2200      	movs	r2, #0
 8003886:	2300      	movs	r3, #0
 8003888:	4606      	mov	r6, r0
 800388a:	460f      	mov	r7, r1
 800388c:	f7fd f88c 	bl	80009a8 <__aeabi_dcmpeq>
 8003890:	2800      	cmp	r0, #0
 8003892:	d09e      	beq.n	80037d2 <_dtoa_r+0x62a>
 8003894:	e7cf      	b.n	8003836 <_dtoa_r+0x68e>
 8003896:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003898:	2a00      	cmp	r2, #0
 800389a:	f000 8088 	beq.w	80039ae <_dtoa_r+0x806>
 800389e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80038a0:	2a01      	cmp	r2, #1
 80038a2:	dc6d      	bgt.n	8003980 <_dtoa_r+0x7d8>
 80038a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80038a6:	2a00      	cmp	r2, #0
 80038a8:	d066      	beq.n	8003978 <_dtoa_r+0x7d0>
 80038aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80038ae:	464d      	mov	r5, r9
 80038b0:	9e08      	ldr	r6, [sp, #32]
 80038b2:	9a07      	ldr	r2, [sp, #28]
 80038b4:	2101      	movs	r1, #1
 80038b6:	441a      	add	r2, r3
 80038b8:	4620      	mov	r0, r4
 80038ba:	4499      	add	r9, r3
 80038bc:	9207      	str	r2, [sp, #28]
 80038be:	f000 fb1c 	bl	8003efa <__i2b>
 80038c2:	4607      	mov	r7, r0
 80038c4:	2d00      	cmp	r5, #0
 80038c6:	dd0b      	ble.n	80038e0 <_dtoa_r+0x738>
 80038c8:	9b07      	ldr	r3, [sp, #28]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	dd08      	ble.n	80038e0 <_dtoa_r+0x738>
 80038ce:	42ab      	cmp	r3, r5
 80038d0:	bfa8      	it	ge
 80038d2:	462b      	movge	r3, r5
 80038d4:	9a07      	ldr	r2, [sp, #28]
 80038d6:	eba9 0903 	sub.w	r9, r9, r3
 80038da:	1aed      	subs	r5, r5, r3
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	9307      	str	r3, [sp, #28]
 80038e0:	9b08      	ldr	r3, [sp, #32]
 80038e2:	b1eb      	cbz	r3, 8003920 <_dtoa_r+0x778>
 80038e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d065      	beq.n	80039b6 <_dtoa_r+0x80e>
 80038ea:	b18e      	cbz	r6, 8003910 <_dtoa_r+0x768>
 80038ec:	4639      	mov	r1, r7
 80038ee:	4632      	mov	r2, r6
 80038f0:	4620      	mov	r0, r4
 80038f2:	f000 fba1 	bl	8004038 <__pow5mult>
 80038f6:	465a      	mov	r2, fp
 80038f8:	4601      	mov	r1, r0
 80038fa:	4607      	mov	r7, r0
 80038fc:	4620      	mov	r0, r4
 80038fe:	f000 fb05 	bl	8003f0c <__multiply>
 8003902:	4659      	mov	r1, fp
 8003904:	900a      	str	r0, [sp, #40]	; 0x28
 8003906:	4620      	mov	r0, r4
 8003908:	f000 fa57 	bl	8003dba <_Bfree>
 800390c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800390e:	469b      	mov	fp, r3
 8003910:	9b08      	ldr	r3, [sp, #32]
 8003912:	1b9a      	subs	r2, r3, r6
 8003914:	d004      	beq.n	8003920 <_dtoa_r+0x778>
 8003916:	4659      	mov	r1, fp
 8003918:	4620      	mov	r0, r4
 800391a:	f000 fb8d 	bl	8004038 <__pow5mult>
 800391e:	4683      	mov	fp, r0
 8003920:	2101      	movs	r1, #1
 8003922:	4620      	mov	r0, r4
 8003924:	f000 fae9 	bl	8003efa <__i2b>
 8003928:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800392a:	4606      	mov	r6, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 81c6 	beq.w	8003cbe <_dtoa_r+0xb16>
 8003932:	461a      	mov	r2, r3
 8003934:	4601      	mov	r1, r0
 8003936:	4620      	mov	r0, r4
 8003938:	f000 fb7e 	bl	8004038 <__pow5mult>
 800393c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800393e:	4606      	mov	r6, r0
 8003940:	2b01      	cmp	r3, #1
 8003942:	dc3e      	bgt.n	80039c2 <_dtoa_r+0x81a>
 8003944:	9b02      	ldr	r3, [sp, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d137      	bne.n	80039ba <_dtoa_r+0x812>
 800394a:	9b03      	ldr	r3, [sp, #12]
 800394c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003950:	2b00      	cmp	r3, #0
 8003952:	d134      	bne.n	80039be <_dtoa_r+0x816>
 8003954:	9b03      	ldr	r3, [sp, #12]
 8003956:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800395a:	0d1b      	lsrs	r3, r3, #20
 800395c:	051b      	lsls	r3, r3, #20
 800395e:	b12b      	cbz	r3, 800396c <_dtoa_r+0x7c4>
 8003960:	9b07      	ldr	r3, [sp, #28]
 8003962:	f109 0901 	add.w	r9, r9, #1
 8003966:	3301      	adds	r3, #1
 8003968:	9307      	str	r3, [sp, #28]
 800396a:	2301      	movs	r3, #1
 800396c:	9308      	str	r3, [sp, #32]
 800396e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003970:	2b00      	cmp	r3, #0
 8003972:	d128      	bne.n	80039c6 <_dtoa_r+0x81e>
 8003974:	2001      	movs	r0, #1
 8003976:	e02e      	b.n	80039d6 <_dtoa_r+0x82e>
 8003978:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800397a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800397e:	e796      	b.n	80038ae <_dtoa_r+0x706>
 8003980:	9b08      	ldr	r3, [sp, #32]
 8003982:	f108 36ff 	add.w	r6, r8, #4294967295
 8003986:	42b3      	cmp	r3, r6
 8003988:	bfb7      	itett	lt
 800398a:	9b08      	ldrlt	r3, [sp, #32]
 800398c:	1b9e      	subge	r6, r3, r6
 800398e:	1af2      	sublt	r2, r6, r3
 8003990:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8003992:	bfbf      	itttt	lt
 8003994:	9608      	strlt	r6, [sp, #32]
 8003996:	189b      	addlt	r3, r3, r2
 8003998:	930c      	strlt	r3, [sp, #48]	; 0x30
 800399a:	2600      	movlt	r6, #0
 800399c:	f1b8 0f00 	cmp.w	r8, #0
 80039a0:	bfb9      	ittee	lt
 80039a2:	eba9 0508 	sublt.w	r5, r9, r8
 80039a6:	2300      	movlt	r3, #0
 80039a8:	464d      	movge	r5, r9
 80039aa:	4643      	movge	r3, r8
 80039ac:	e781      	b.n	80038b2 <_dtoa_r+0x70a>
 80039ae:	9e08      	ldr	r6, [sp, #32]
 80039b0:	464d      	mov	r5, r9
 80039b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80039b4:	e786      	b.n	80038c4 <_dtoa_r+0x71c>
 80039b6:	9a08      	ldr	r2, [sp, #32]
 80039b8:	e7ad      	b.n	8003916 <_dtoa_r+0x76e>
 80039ba:	2300      	movs	r3, #0
 80039bc:	e7d6      	b.n	800396c <_dtoa_r+0x7c4>
 80039be:	9b02      	ldr	r3, [sp, #8]
 80039c0:	e7d4      	b.n	800396c <_dtoa_r+0x7c4>
 80039c2:	2300      	movs	r3, #0
 80039c4:	9308      	str	r3, [sp, #32]
 80039c6:	6933      	ldr	r3, [r6, #16]
 80039c8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80039cc:	6918      	ldr	r0, [r3, #16]
 80039ce:	f000 fa46 	bl	8003e5e <__hi0bits>
 80039d2:	f1c0 0020 	rsb	r0, r0, #32
 80039d6:	9b07      	ldr	r3, [sp, #28]
 80039d8:	4418      	add	r0, r3
 80039da:	f010 001f 	ands.w	r0, r0, #31
 80039de:	d047      	beq.n	8003a70 <_dtoa_r+0x8c8>
 80039e0:	f1c0 0320 	rsb	r3, r0, #32
 80039e4:	2b04      	cmp	r3, #4
 80039e6:	dd3b      	ble.n	8003a60 <_dtoa_r+0x8b8>
 80039e8:	9b07      	ldr	r3, [sp, #28]
 80039ea:	f1c0 001c 	rsb	r0, r0, #28
 80039ee:	4481      	add	r9, r0
 80039f0:	4405      	add	r5, r0
 80039f2:	4403      	add	r3, r0
 80039f4:	9307      	str	r3, [sp, #28]
 80039f6:	f1b9 0f00 	cmp.w	r9, #0
 80039fa:	dd05      	ble.n	8003a08 <_dtoa_r+0x860>
 80039fc:	4659      	mov	r1, fp
 80039fe:	464a      	mov	r2, r9
 8003a00:	4620      	mov	r0, r4
 8003a02:	f000 fb67 	bl	80040d4 <__lshift>
 8003a06:	4683      	mov	fp, r0
 8003a08:	9b07      	ldr	r3, [sp, #28]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	dd05      	ble.n	8003a1a <_dtoa_r+0x872>
 8003a0e:	4631      	mov	r1, r6
 8003a10:	461a      	mov	r2, r3
 8003a12:	4620      	mov	r0, r4
 8003a14:	f000 fb5e 	bl	80040d4 <__lshift>
 8003a18:	4606      	mov	r6, r0
 8003a1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a1c:	b353      	cbz	r3, 8003a74 <_dtoa_r+0x8cc>
 8003a1e:	4631      	mov	r1, r6
 8003a20:	4658      	mov	r0, fp
 8003a22:	f000 fbab 	bl	800417c <__mcmp>
 8003a26:	2800      	cmp	r0, #0
 8003a28:	da24      	bge.n	8003a74 <_dtoa_r+0x8cc>
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	4659      	mov	r1, fp
 8003a2e:	220a      	movs	r2, #10
 8003a30:	4620      	mov	r0, r4
 8003a32:	f000 f9d9 	bl	8003de8 <__multadd>
 8003a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a38:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003a3c:	4683      	mov	fp, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 8144 	beq.w	8003ccc <_dtoa_r+0xb24>
 8003a44:	2300      	movs	r3, #0
 8003a46:	4639      	mov	r1, r7
 8003a48:	220a      	movs	r2, #10
 8003a4a:	4620      	mov	r0, r4
 8003a4c:	f000 f9cc 	bl	8003de8 <__multadd>
 8003a50:	9b04      	ldr	r3, [sp, #16]
 8003a52:	4607      	mov	r7, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	dc4d      	bgt.n	8003af4 <_dtoa_r+0x94c>
 8003a58:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	dd4a      	ble.n	8003af4 <_dtoa_r+0x94c>
 8003a5e:	e011      	b.n	8003a84 <_dtoa_r+0x8dc>
 8003a60:	d0c9      	beq.n	80039f6 <_dtoa_r+0x84e>
 8003a62:	9a07      	ldr	r2, [sp, #28]
 8003a64:	331c      	adds	r3, #28
 8003a66:	441a      	add	r2, r3
 8003a68:	4499      	add	r9, r3
 8003a6a:	441d      	add	r5, r3
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	e7c1      	b.n	80039f4 <_dtoa_r+0x84c>
 8003a70:	4603      	mov	r3, r0
 8003a72:	e7f6      	b.n	8003a62 <_dtoa_r+0x8ba>
 8003a74:	f1b8 0f00 	cmp.w	r8, #0
 8003a78:	dc36      	bgt.n	8003ae8 <_dtoa_r+0x940>
 8003a7a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	dd33      	ble.n	8003ae8 <_dtoa_r+0x940>
 8003a80:	f8cd 8010 	str.w	r8, [sp, #16]
 8003a84:	9b04      	ldr	r3, [sp, #16]
 8003a86:	b963      	cbnz	r3, 8003aa2 <_dtoa_r+0x8fa>
 8003a88:	4631      	mov	r1, r6
 8003a8a:	2205      	movs	r2, #5
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	f000 f9ab 	bl	8003de8 <__multadd>
 8003a92:	4601      	mov	r1, r0
 8003a94:	4606      	mov	r6, r0
 8003a96:	4658      	mov	r0, fp
 8003a98:	f000 fb70 	bl	800417c <__mcmp>
 8003a9c:	2800      	cmp	r0, #0
 8003a9e:	f73f add3 	bgt.w	8003648 <_dtoa_r+0x4a0>
 8003aa2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003aa4:	9d06      	ldr	r5, [sp, #24]
 8003aa6:	ea6f 0a03 	mvn.w	sl, r3
 8003aaa:	f04f 0900 	mov.w	r9, #0
 8003aae:	4631      	mov	r1, r6
 8003ab0:	4620      	mov	r0, r4
 8003ab2:	f000 f982 	bl	8003dba <_Bfree>
 8003ab6:	2f00      	cmp	r7, #0
 8003ab8:	f43f aebd 	beq.w	8003836 <_dtoa_r+0x68e>
 8003abc:	f1b9 0f00 	cmp.w	r9, #0
 8003ac0:	d005      	beq.n	8003ace <_dtoa_r+0x926>
 8003ac2:	45b9      	cmp	r9, r7
 8003ac4:	d003      	beq.n	8003ace <_dtoa_r+0x926>
 8003ac6:	4649      	mov	r1, r9
 8003ac8:	4620      	mov	r0, r4
 8003aca:	f000 f976 	bl	8003dba <_Bfree>
 8003ace:	4639      	mov	r1, r7
 8003ad0:	4620      	mov	r0, r4
 8003ad2:	f000 f972 	bl	8003dba <_Bfree>
 8003ad6:	e6ae      	b.n	8003836 <_dtoa_r+0x68e>
 8003ad8:	2600      	movs	r6, #0
 8003ada:	4637      	mov	r7, r6
 8003adc:	e7e1      	b.n	8003aa2 <_dtoa_r+0x8fa>
 8003ade:	46ba      	mov	sl, r7
 8003ae0:	4637      	mov	r7, r6
 8003ae2:	e5b1      	b.n	8003648 <_dtoa_r+0x4a0>
 8003ae4:	40240000 	.word	0x40240000
 8003ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aea:	f8cd 8010 	str.w	r8, [sp, #16]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 80f3 	beq.w	8003cda <_dtoa_r+0xb32>
 8003af4:	2d00      	cmp	r5, #0
 8003af6:	dd05      	ble.n	8003b04 <_dtoa_r+0x95c>
 8003af8:	4639      	mov	r1, r7
 8003afa:	462a      	mov	r2, r5
 8003afc:	4620      	mov	r0, r4
 8003afe:	f000 fae9 	bl	80040d4 <__lshift>
 8003b02:	4607      	mov	r7, r0
 8003b04:	9b08      	ldr	r3, [sp, #32]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d04c      	beq.n	8003ba4 <_dtoa_r+0x9fc>
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	4620      	mov	r0, r4
 8003b0e:	f000 f920 	bl	8003d52 <_Balloc>
 8003b12:	4605      	mov	r5, r0
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	f107 010c 	add.w	r1, r7, #12
 8003b1a:	3202      	adds	r2, #2
 8003b1c:	0092      	lsls	r2, r2, #2
 8003b1e:	300c      	adds	r0, #12
 8003b20:	f000 f90c 	bl	8003d3c <memcpy>
 8003b24:	2201      	movs	r2, #1
 8003b26:	4629      	mov	r1, r5
 8003b28:	4620      	mov	r0, r4
 8003b2a:	f000 fad3 	bl	80040d4 <__lshift>
 8003b2e:	46b9      	mov	r9, r7
 8003b30:	4607      	mov	r7, r0
 8003b32:	9b06      	ldr	r3, [sp, #24]
 8003b34:	9307      	str	r3, [sp, #28]
 8003b36:	9b02      	ldr	r3, [sp, #8]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	9308      	str	r3, [sp, #32]
 8003b3e:	4631      	mov	r1, r6
 8003b40:	4658      	mov	r0, fp
 8003b42:	f7ff faa3 	bl	800308c <quorem>
 8003b46:	4649      	mov	r1, r9
 8003b48:	4605      	mov	r5, r0
 8003b4a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003b4e:	4658      	mov	r0, fp
 8003b50:	f000 fb14 	bl	800417c <__mcmp>
 8003b54:	463a      	mov	r2, r7
 8003b56:	9002      	str	r0, [sp, #8]
 8003b58:	4631      	mov	r1, r6
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	f000 fb28 	bl	80041b0 <__mdiff>
 8003b60:	68c3      	ldr	r3, [r0, #12]
 8003b62:	4602      	mov	r2, r0
 8003b64:	bb03      	cbnz	r3, 8003ba8 <_dtoa_r+0xa00>
 8003b66:	4601      	mov	r1, r0
 8003b68:	9009      	str	r0, [sp, #36]	; 0x24
 8003b6a:	4658      	mov	r0, fp
 8003b6c:	f000 fb06 	bl	800417c <__mcmp>
 8003b70:	4603      	mov	r3, r0
 8003b72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b74:	4611      	mov	r1, r2
 8003b76:	4620      	mov	r0, r4
 8003b78:	9309      	str	r3, [sp, #36]	; 0x24
 8003b7a:	f000 f91e 	bl	8003dba <_Bfree>
 8003b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b80:	b9a3      	cbnz	r3, 8003bac <_dtoa_r+0xa04>
 8003b82:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003b84:	b992      	cbnz	r2, 8003bac <_dtoa_r+0xa04>
 8003b86:	9a08      	ldr	r2, [sp, #32]
 8003b88:	b982      	cbnz	r2, 8003bac <_dtoa_r+0xa04>
 8003b8a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003b8e:	d029      	beq.n	8003be4 <_dtoa_r+0xa3c>
 8003b90:	9b02      	ldr	r3, [sp, #8]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	dd01      	ble.n	8003b9a <_dtoa_r+0x9f2>
 8003b96:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8003b9a:	9b07      	ldr	r3, [sp, #28]
 8003b9c:	1c5d      	adds	r5, r3, #1
 8003b9e:	f883 8000 	strb.w	r8, [r3]
 8003ba2:	e784      	b.n	8003aae <_dtoa_r+0x906>
 8003ba4:	4638      	mov	r0, r7
 8003ba6:	e7c2      	b.n	8003b2e <_dtoa_r+0x986>
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e7e3      	b.n	8003b74 <_dtoa_r+0x9cc>
 8003bac:	9a02      	ldr	r2, [sp, #8]
 8003bae:	2a00      	cmp	r2, #0
 8003bb0:	db04      	blt.n	8003bbc <_dtoa_r+0xa14>
 8003bb2:	d123      	bne.n	8003bfc <_dtoa_r+0xa54>
 8003bb4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003bb6:	bb0a      	cbnz	r2, 8003bfc <_dtoa_r+0xa54>
 8003bb8:	9a08      	ldr	r2, [sp, #32]
 8003bba:	b9fa      	cbnz	r2, 8003bfc <_dtoa_r+0xa54>
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	ddec      	ble.n	8003b9a <_dtoa_r+0x9f2>
 8003bc0:	4659      	mov	r1, fp
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	4620      	mov	r0, r4
 8003bc6:	f000 fa85 	bl	80040d4 <__lshift>
 8003bca:	4631      	mov	r1, r6
 8003bcc:	4683      	mov	fp, r0
 8003bce:	f000 fad5 	bl	800417c <__mcmp>
 8003bd2:	2800      	cmp	r0, #0
 8003bd4:	dc03      	bgt.n	8003bde <_dtoa_r+0xa36>
 8003bd6:	d1e0      	bne.n	8003b9a <_dtoa_r+0x9f2>
 8003bd8:	f018 0f01 	tst.w	r8, #1
 8003bdc:	d0dd      	beq.n	8003b9a <_dtoa_r+0x9f2>
 8003bde:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003be2:	d1d8      	bne.n	8003b96 <_dtoa_r+0x9ee>
 8003be4:	9b07      	ldr	r3, [sp, #28]
 8003be6:	9a07      	ldr	r2, [sp, #28]
 8003be8:	1c5d      	adds	r5, r3, #1
 8003bea:	2339      	movs	r3, #57	; 0x39
 8003bec:	7013      	strb	r3, [r2, #0]
 8003bee:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003bf2:	1e6a      	subs	r2, r5, #1
 8003bf4:	2b39      	cmp	r3, #57	; 0x39
 8003bf6:	d04d      	beq.n	8003c94 <_dtoa_r+0xaec>
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	e052      	b.n	8003ca2 <_dtoa_r+0xafa>
 8003bfc:	9a07      	ldr	r2, [sp, #28]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f102 0501 	add.w	r5, r2, #1
 8003c04:	dd06      	ble.n	8003c14 <_dtoa_r+0xa6c>
 8003c06:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003c0a:	d0eb      	beq.n	8003be4 <_dtoa_r+0xa3c>
 8003c0c:	f108 0801 	add.w	r8, r8, #1
 8003c10:	9b07      	ldr	r3, [sp, #28]
 8003c12:	e7c4      	b.n	8003b9e <_dtoa_r+0x9f6>
 8003c14:	9b06      	ldr	r3, [sp, #24]
 8003c16:	9a04      	ldr	r2, [sp, #16]
 8003c18:	1aeb      	subs	r3, r5, r3
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8003c20:	d021      	beq.n	8003c66 <_dtoa_r+0xabe>
 8003c22:	4659      	mov	r1, fp
 8003c24:	2300      	movs	r3, #0
 8003c26:	220a      	movs	r2, #10
 8003c28:	4620      	mov	r0, r4
 8003c2a:	f000 f8dd 	bl	8003de8 <__multadd>
 8003c2e:	45b9      	cmp	r9, r7
 8003c30:	4683      	mov	fp, r0
 8003c32:	f04f 0300 	mov.w	r3, #0
 8003c36:	f04f 020a 	mov.w	r2, #10
 8003c3a:	4649      	mov	r1, r9
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	d105      	bne.n	8003c4c <_dtoa_r+0xaa4>
 8003c40:	f000 f8d2 	bl	8003de8 <__multadd>
 8003c44:	4681      	mov	r9, r0
 8003c46:	4607      	mov	r7, r0
 8003c48:	9507      	str	r5, [sp, #28]
 8003c4a:	e778      	b.n	8003b3e <_dtoa_r+0x996>
 8003c4c:	f000 f8cc 	bl	8003de8 <__multadd>
 8003c50:	4639      	mov	r1, r7
 8003c52:	4681      	mov	r9, r0
 8003c54:	2300      	movs	r3, #0
 8003c56:	220a      	movs	r2, #10
 8003c58:	4620      	mov	r0, r4
 8003c5a:	f000 f8c5 	bl	8003de8 <__multadd>
 8003c5e:	4607      	mov	r7, r0
 8003c60:	e7f2      	b.n	8003c48 <_dtoa_r+0xaa0>
 8003c62:	f04f 0900 	mov.w	r9, #0
 8003c66:	4659      	mov	r1, fp
 8003c68:	2201      	movs	r2, #1
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	f000 fa32 	bl	80040d4 <__lshift>
 8003c70:	4631      	mov	r1, r6
 8003c72:	4683      	mov	fp, r0
 8003c74:	f000 fa82 	bl	800417c <__mcmp>
 8003c78:	2800      	cmp	r0, #0
 8003c7a:	dcb8      	bgt.n	8003bee <_dtoa_r+0xa46>
 8003c7c:	d102      	bne.n	8003c84 <_dtoa_r+0xadc>
 8003c7e:	f018 0f01 	tst.w	r8, #1
 8003c82:	d1b4      	bne.n	8003bee <_dtoa_r+0xa46>
 8003c84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003c88:	1e6a      	subs	r2, r5, #1
 8003c8a:	2b30      	cmp	r3, #48	; 0x30
 8003c8c:	f47f af0f 	bne.w	8003aae <_dtoa_r+0x906>
 8003c90:	4615      	mov	r5, r2
 8003c92:	e7f7      	b.n	8003c84 <_dtoa_r+0xadc>
 8003c94:	9b06      	ldr	r3, [sp, #24]
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d105      	bne.n	8003ca6 <_dtoa_r+0xafe>
 8003c9a:	2331      	movs	r3, #49	; 0x31
 8003c9c:	9a06      	ldr	r2, [sp, #24]
 8003c9e:	f10a 0a01 	add.w	sl, sl, #1
 8003ca2:	7013      	strb	r3, [r2, #0]
 8003ca4:	e703      	b.n	8003aae <_dtoa_r+0x906>
 8003ca6:	4615      	mov	r5, r2
 8003ca8:	e7a1      	b.n	8003bee <_dtoa_r+0xa46>
 8003caa:	4b17      	ldr	r3, [pc, #92]	; (8003d08 <_dtoa_r+0xb60>)
 8003cac:	f7ff bae1 	b.w	8003272 <_dtoa_r+0xca>
 8003cb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f47f aabb 	bne.w	800322e <_dtoa_r+0x86>
 8003cb8:	4b14      	ldr	r3, [pc, #80]	; (8003d0c <_dtoa_r+0xb64>)
 8003cba:	f7ff bada 	b.w	8003272 <_dtoa_r+0xca>
 8003cbe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	f77f ae3f 	ble.w	8003944 <_dtoa_r+0x79c>
 8003cc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003cc8:	9308      	str	r3, [sp, #32]
 8003cca:	e653      	b.n	8003974 <_dtoa_r+0x7cc>
 8003ccc:	9b04      	ldr	r3, [sp, #16]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	dc03      	bgt.n	8003cda <_dtoa_r+0xb32>
 8003cd2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	f73f aed5 	bgt.w	8003a84 <_dtoa_r+0x8dc>
 8003cda:	9d06      	ldr	r5, [sp, #24]
 8003cdc:	4631      	mov	r1, r6
 8003cde:	4658      	mov	r0, fp
 8003ce0:	f7ff f9d4 	bl	800308c <quorem>
 8003ce4:	9b06      	ldr	r3, [sp, #24]
 8003ce6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003cea:	f805 8b01 	strb.w	r8, [r5], #1
 8003cee:	9a04      	ldr	r2, [sp, #16]
 8003cf0:	1aeb      	subs	r3, r5, r3
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	ddb5      	ble.n	8003c62 <_dtoa_r+0xaba>
 8003cf6:	4659      	mov	r1, fp
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	220a      	movs	r2, #10
 8003cfc:	4620      	mov	r0, r4
 8003cfe:	f000 f873 	bl	8003de8 <__multadd>
 8003d02:	4683      	mov	fp, r0
 8003d04:	e7ea      	b.n	8003cdc <_dtoa_r+0xb34>
 8003d06:	bf00      	nop
 8003d08:	0800448c 	.word	0x0800448c
 8003d0c:	0800448e 	.word	0x0800448e

08003d10 <_localeconv_r>:
 8003d10:	4b04      	ldr	r3, [pc, #16]	; (8003d24 <_localeconv_r+0x14>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6a18      	ldr	r0, [r3, #32]
 8003d16:	4b04      	ldr	r3, [pc, #16]	; (8003d28 <_localeconv_r+0x18>)
 8003d18:	2800      	cmp	r0, #0
 8003d1a:	bf08      	it	eq
 8003d1c:	4618      	moveq	r0, r3
 8003d1e:	30f0      	adds	r0, #240	; 0xf0
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	2000000c 	.word	0x2000000c
 8003d28:	20000070 	.word	0x20000070

08003d2c <malloc>:
 8003d2c:	4b02      	ldr	r3, [pc, #8]	; (8003d38 <malloc+0xc>)
 8003d2e:	4601      	mov	r1, r0
 8003d30:	6818      	ldr	r0, [r3, #0]
 8003d32:	f000 baf9 	b.w	8004328 <_malloc_r>
 8003d36:	bf00      	nop
 8003d38:	2000000c 	.word	0x2000000c

08003d3c <memcpy>:
 8003d3c:	b510      	push	{r4, lr}
 8003d3e:	1e43      	subs	r3, r0, #1
 8003d40:	440a      	add	r2, r1
 8003d42:	4291      	cmp	r1, r2
 8003d44:	d100      	bne.n	8003d48 <memcpy+0xc>
 8003d46:	bd10      	pop	{r4, pc}
 8003d48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d50:	e7f7      	b.n	8003d42 <memcpy+0x6>

08003d52 <_Balloc>:
 8003d52:	b570      	push	{r4, r5, r6, lr}
 8003d54:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003d56:	4604      	mov	r4, r0
 8003d58:	460e      	mov	r6, r1
 8003d5a:	b93d      	cbnz	r5, 8003d6c <_Balloc+0x1a>
 8003d5c:	2010      	movs	r0, #16
 8003d5e:	f7ff ffe5 	bl	8003d2c <malloc>
 8003d62:	6260      	str	r0, [r4, #36]	; 0x24
 8003d64:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003d68:	6005      	str	r5, [r0, #0]
 8003d6a:	60c5      	str	r5, [r0, #12]
 8003d6c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003d6e:	68eb      	ldr	r3, [r5, #12]
 8003d70:	b183      	cbz	r3, 8003d94 <_Balloc+0x42>
 8003d72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003d7a:	b9b8      	cbnz	r0, 8003dac <_Balloc+0x5a>
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	fa01 f506 	lsl.w	r5, r1, r6
 8003d82:	1d6a      	adds	r2, r5, #5
 8003d84:	0092      	lsls	r2, r2, #2
 8003d86:	4620      	mov	r0, r4
 8003d88:	f000 fabf 	bl	800430a <_calloc_r>
 8003d8c:	b160      	cbz	r0, 8003da8 <_Balloc+0x56>
 8003d8e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8003d92:	e00e      	b.n	8003db2 <_Balloc+0x60>
 8003d94:	2221      	movs	r2, #33	; 0x21
 8003d96:	2104      	movs	r1, #4
 8003d98:	4620      	mov	r0, r4
 8003d9a:	f000 fab6 	bl	800430a <_calloc_r>
 8003d9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003da0:	60e8      	str	r0, [r5, #12]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1e4      	bne.n	8003d72 <_Balloc+0x20>
 8003da8:	2000      	movs	r0, #0
 8003daa:	bd70      	pop	{r4, r5, r6, pc}
 8003dac:	6802      	ldr	r2, [r0, #0]
 8003dae:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8003db2:	2300      	movs	r3, #0
 8003db4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003db8:	e7f7      	b.n	8003daa <_Balloc+0x58>

08003dba <_Bfree>:
 8003dba:	b570      	push	{r4, r5, r6, lr}
 8003dbc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003dbe:	4606      	mov	r6, r0
 8003dc0:	460d      	mov	r5, r1
 8003dc2:	b93c      	cbnz	r4, 8003dd4 <_Bfree+0x1a>
 8003dc4:	2010      	movs	r0, #16
 8003dc6:	f7ff ffb1 	bl	8003d2c <malloc>
 8003dca:	6270      	str	r0, [r6, #36]	; 0x24
 8003dcc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003dd0:	6004      	str	r4, [r0, #0]
 8003dd2:	60c4      	str	r4, [r0, #12]
 8003dd4:	b13d      	cbz	r5, 8003de6 <_Bfree+0x2c>
 8003dd6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003dd8:	686a      	ldr	r2, [r5, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003de0:	6029      	str	r1, [r5, #0]
 8003de2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8003de6:	bd70      	pop	{r4, r5, r6, pc}

08003de8 <__multadd>:
 8003de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dec:	461f      	mov	r7, r3
 8003dee:	4606      	mov	r6, r0
 8003df0:	460c      	mov	r4, r1
 8003df2:	2300      	movs	r3, #0
 8003df4:	690d      	ldr	r5, [r1, #16]
 8003df6:	f101 0c14 	add.w	ip, r1, #20
 8003dfa:	f8dc 0000 	ldr.w	r0, [ip]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	b281      	uxth	r1, r0
 8003e02:	fb02 7101 	mla	r1, r2, r1, r7
 8003e06:	0c00      	lsrs	r0, r0, #16
 8003e08:	0c0f      	lsrs	r7, r1, #16
 8003e0a:	fb02 7000 	mla	r0, r2, r0, r7
 8003e0e:	b289      	uxth	r1, r1
 8003e10:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8003e14:	429d      	cmp	r5, r3
 8003e16:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8003e1a:	f84c 1b04 	str.w	r1, [ip], #4
 8003e1e:	dcec      	bgt.n	8003dfa <__multadd+0x12>
 8003e20:	b1d7      	cbz	r7, 8003e58 <__multadd+0x70>
 8003e22:	68a3      	ldr	r3, [r4, #8]
 8003e24:	42ab      	cmp	r3, r5
 8003e26:	dc12      	bgt.n	8003e4e <__multadd+0x66>
 8003e28:	6861      	ldr	r1, [r4, #4]
 8003e2a:	4630      	mov	r0, r6
 8003e2c:	3101      	adds	r1, #1
 8003e2e:	f7ff ff90 	bl	8003d52 <_Balloc>
 8003e32:	4680      	mov	r8, r0
 8003e34:	6922      	ldr	r2, [r4, #16]
 8003e36:	f104 010c 	add.w	r1, r4, #12
 8003e3a:	3202      	adds	r2, #2
 8003e3c:	0092      	lsls	r2, r2, #2
 8003e3e:	300c      	adds	r0, #12
 8003e40:	f7ff ff7c 	bl	8003d3c <memcpy>
 8003e44:	4621      	mov	r1, r4
 8003e46:	4630      	mov	r0, r6
 8003e48:	f7ff ffb7 	bl	8003dba <_Bfree>
 8003e4c:	4644      	mov	r4, r8
 8003e4e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003e52:	3501      	adds	r5, #1
 8003e54:	615f      	str	r7, [r3, #20]
 8003e56:	6125      	str	r5, [r4, #16]
 8003e58:	4620      	mov	r0, r4
 8003e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003e5e <__hi0bits>:
 8003e5e:	0c02      	lsrs	r2, r0, #16
 8003e60:	0412      	lsls	r2, r2, #16
 8003e62:	4603      	mov	r3, r0
 8003e64:	b9b2      	cbnz	r2, 8003e94 <__hi0bits+0x36>
 8003e66:	0403      	lsls	r3, r0, #16
 8003e68:	2010      	movs	r0, #16
 8003e6a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8003e6e:	bf04      	itt	eq
 8003e70:	021b      	lsleq	r3, r3, #8
 8003e72:	3008      	addeq	r0, #8
 8003e74:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003e78:	bf04      	itt	eq
 8003e7a:	011b      	lsleq	r3, r3, #4
 8003e7c:	3004      	addeq	r0, #4
 8003e7e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003e82:	bf04      	itt	eq
 8003e84:	009b      	lsleq	r3, r3, #2
 8003e86:	3002      	addeq	r0, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	db06      	blt.n	8003e9a <__hi0bits+0x3c>
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	d503      	bpl.n	8003e98 <__hi0bits+0x3a>
 8003e90:	3001      	adds	r0, #1
 8003e92:	4770      	bx	lr
 8003e94:	2000      	movs	r0, #0
 8003e96:	e7e8      	b.n	8003e6a <__hi0bits+0xc>
 8003e98:	2020      	movs	r0, #32
 8003e9a:	4770      	bx	lr

08003e9c <__lo0bits>:
 8003e9c:	6803      	ldr	r3, [r0, #0]
 8003e9e:	4601      	mov	r1, r0
 8003ea0:	f013 0207 	ands.w	r2, r3, #7
 8003ea4:	d00b      	beq.n	8003ebe <__lo0bits+0x22>
 8003ea6:	07da      	lsls	r2, r3, #31
 8003ea8:	d423      	bmi.n	8003ef2 <__lo0bits+0x56>
 8003eaa:	0798      	lsls	r0, r3, #30
 8003eac:	bf49      	itett	mi
 8003eae:	085b      	lsrmi	r3, r3, #1
 8003eb0:	089b      	lsrpl	r3, r3, #2
 8003eb2:	2001      	movmi	r0, #1
 8003eb4:	600b      	strmi	r3, [r1, #0]
 8003eb6:	bf5c      	itt	pl
 8003eb8:	600b      	strpl	r3, [r1, #0]
 8003eba:	2002      	movpl	r0, #2
 8003ebc:	4770      	bx	lr
 8003ebe:	b298      	uxth	r0, r3
 8003ec0:	b9a8      	cbnz	r0, 8003eee <__lo0bits+0x52>
 8003ec2:	2010      	movs	r0, #16
 8003ec4:	0c1b      	lsrs	r3, r3, #16
 8003ec6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003eca:	bf04      	itt	eq
 8003ecc:	0a1b      	lsreq	r3, r3, #8
 8003ece:	3008      	addeq	r0, #8
 8003ed0:	071a      	lsls	r2, r3, #28
 8003ed2:	bf04      	itt	eq
 8003ed4:	091b      	lsreq	r3, r3, #4
 8003ed6:	3004      	addeq	r0, #4
 8003ed8:	079a      	lsls	r2, r3, #30
 8003eda:	bf04      	itt	eq
 8003edc:	089b      	lsreq	r3, r3, #2
 8003ede:	3002      	addeq	r0, #2
 8003ee0:	07da      	lsls	r2, r3, #31
 8003ee2:	d402      	bmi.n	8003eea <__lo0bits+0x4e>
 8003ee4:	085b      	lsrs	r3, r3, #1
 8003ee6:	d006      	beq.n	8003ef6 <__lo0bits+0x5a>
 8003ee8:	3001      	adds	r0, #1
 8003eea:	600b      	str	r3, [r1, #0]
 8003eec:	4770      	bx	lr
 8003eee:	4610      	mov	r0, r2
 8003ef0:	e7e9      	b.n	8003ec6 <__lo0bits+0x2a>
 8003ef2:	2000      	movs	r0, #0
 8003ef4:	4770      	bx	lr
 8003ef6:	2020      	movs	r0, #32
 8003ef8:	4770      	bx	lr

08003efa <__i2b>:
 8003efa:	b510      	push	{r4, lr}
 8003efc:	460c      	mov	r4, r1
 8003efe:	2101      	movs	r1, #1
 8003f00:	f7ff ff27 	bl	8003d52 <_Balloc>
 8003f04:	2201      	movs	r2, #1
 8003f06:	6144      	str	r4, [r0, #20]
 8003f08:	6102      	str	r2, [r0, #16]
 8003f0a:	bd10      	pop	{r4, pc}

08003f0c <__multiply>:
 8003f0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f10:	4614      	mov	r4, r2
 8003f12:	690a      	ldr	r2, [r1, #16]
 8003f14:	6923      	ldr	r3, [r4, #16]
 8003f16:	4688      	mov	r8, r1
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	bfbe      	ittt	lt
 8003f1c:	460b      	movlt	r3, r1
 8003f1e:	46a0      	movlt	r8, r4
 8003f20:	461c      	movlt	r4, r3
 8003f22:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8003f26:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8003f2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003f2e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003f32:	eb07 0609 	add.w	r6, r7, r9
 8003f36:	42b3      	cmp	r3, r6
 8003f38:	bfb8      	it	lt
 8003f3a:	3101      	addlt	r1, #1
 8003f3c:	f7ff ff09 	bl	8003d52 <_Balloc>
 8003f40:	f100 0514 	add.w	r5, r0, #20
 8003f44:	462b      	mov	r3, r5
 8003f46:	2200      	movs	r2, #0
 8003f48:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8003f4c:	4573      	cmp	r3, lr
 8003f4e:	d316      	bcc.n	8003f7e <__multiply+0x72>
 8003f50:	f104 0214 	add.w	r2, r4, #20
 8003f54:	f108 0114 	add.w	r1, r8, #20
 8003f58:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8003f5c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	9b00      	ldr	r3, [sp, #0]
 8003f64:	9201      	str	r2, [sp, #4]
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d80c      	bhi.n	8003f84 <__multiply+0x78>
 8003f6a:	2e00      	cmp	r6, #0
 8003f6c:	dd03      	ble.n	8003f76 <__multiply+0x6a>
 8003f6e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d05d      	beq.n	8004032 <__multiply+0x126>
 8003f76:	6106      	str	r6, [r0, #16]
 8003f78:	b003      	add	sp, #12
 8003f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f7e:	f843 2b04 	str.w	r2, [r3], #4
 8003f82:	e7e3      	b.n	8003f4c <__multiply+0x40>
 8003f84:	f8b2 b000 	ldrh.w	fp, [r2]
 8003f88:	f1bb 0f00 	cmp.w	fp, #0
 8003f8c:	d023      	beq.n	8003fd6 <__multiply+0xca>
 8003f8e:	4689      	mov	r9, r1
 8003f90:	46ac      	mov	ip, r5
 8003f92:	f04f 0800 	mov.w	r8, #0
 8003f96:	f859 4b04 	ldr.w	r4, [r9], #4
 8003f9a:	f8dc a000 	ldr.w	sl, [ip]
 8003f9e:	b2a3      	uxth	r3, r4
 8003fa0:	fa1f fa8a 	uxth.w	sl, sl
 8003fa4:	fb0b a303 	mla	r3, fp, r3, sl
 8003fa8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8003fac:	f8dc 4000 	ldr.w	r4, [ip]
 8003fb0:	4443      	add	r3, r8
 8003fb2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8003fb6:	fb0b 840a 	mla	r4, fp, sl, r8
 8003fba:	46e2      	mov	sl, ip
 8003fbc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003fc6:	454f      	cmp	r7, r9
 8003fc8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8003fcc:	f84a 3b04 	str.w	r3, [sl], #4
 8003fd0:	d82b      	bhi.n	800402a <__multiply+0x11e>
 8003fd2:	f8cc 8004 	str.w	r8, [ip, #4]
 8003fd6:	9b01      	ldr	r3, [sp, #4]
 8003fd8:	3204      	adds	r2, #4
 8003fda:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8003fde:	f1ba 0f00 	cmp.w	sl, #0
 8003fe2:	d020      	beq.n	8004026 <__multiply+0x11a>
 8003fe4:	4689      	mov	r9, r1
 8003fe6:	46a8      	mov	r8, r5
 8003fe8:	f04f 0b00 	mov.w	fp, #0
 8003fec:	682b      	ldr	r3, [r5, #0]
 8003fee:	f8b9 c000 	ldrh.w	ip, [r9]
 8003ff2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	fb0a 440c 	mla	r4, sl, ip, r4
 8003ffc:	46c4      	mov	ip, r8
 8003ffe:	445c      	add	r4, fp
 8004000:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004004:	f84c 3b04 	str.w	r3, [ip], #4
 8004008:	f859 3b04 	ldr.w	r3, [r9], #4
 800400c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8004010:	0c1b      	lsrs	r3, r3, #16
 8004012:	fb0a b303 	mla	r3, sl, r3, fp
 8004016:	454f      	cmp	r7, r9
 8004018:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800401c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8004020:	d805      	bhi.n	800402e <__multiply+0x122>
 8004022:	f8c8 3004 	str.w	r3, [r8, #4]
 8004026:	3504      	adds	r5, #4
 8004028:	e79b      	b.n	8003f62 <__multiply+0x56>
 800402a:	46d4      	mov	ip, sl
 800402c:	e7b3      	b.n	8003f96 <__multiply+0x8a>
 800402e:	46e0      	mov	r8, ip
 8004030:	e7dd      	b.n	8003fee <__multiply+0xe2>
 8004032:	3e01      	subs	r6, #1
 8004034:	e799      	b.n	8003f6a <__multiply+0x5e>
	...

08004038 <__pow5mult>:
 8004038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800403c:	4615      	mov	r5, r2
 800403e:	f012 0203 	ands.w	r2, r2, #3
 8004042:	4606      	mov	r6, r0
 8004044:	460f      	mov	r7, r1
 8004046:	d007      	beq.n	8004058 <__pow5mult+0x20>
 8004048:	4c21      	ldr	r4, [pc, #132]	; (80040d0 <__pow5mult+0x98>)
 800404a:	3a01      	subs	r2, #1
 800404c:	2300      	movs	r3, #0
 800404e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004052:	f7ff fec9 	bl	8003de8 <__multadd>
 8004056:	4607      	mov	r7, r0
 8004058:	10ad      	asrs	r5, r5, #2
 800405a:	d035      	beq.n	80040c8 <__pow5mult+0x90>
 800405c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800405e:	b93c      	cbnz	r4, 8004070 <__pow5mult+0x38>
 8004060:	2010      	movs	r0, #16
 8004062:	f7ff fe63 	bl	8003d2c <malloc>
 8004066:	6270      	str	r0, [r6, #36]	; 0x24
 8004068:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800406c:	6004      	str	r4, [r0, #0]
 800406e:	60c4      	str	r4, [r0, #12]
 8004070:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004074:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004078:	b94c      	cbnz	r4, 800408e <__pow5mult+0x56>
 800407a:	f240 2171 	movw	r1, #625	; 0x271
 800407e:	4630      	mov	r0, r6
 8004080:	f7ff ff3b 	bl	8003efa <__i2b>
 8004084:	2300      	movs	r3, #0
 8004086:	4604      	mov	r4, r0
 8004088:	f8c8 0008 	str.w	r0, [r8, #8]
 800408c:	6003      	str	r3, [r0, #0]
 800408e:	f04f 0800 	mov.w	r8, #0
 8004092:	07eb      	lsls	r3, r5, #31
 8004094:	d50a      	bpl.n	80040ac <__pow5mult+0x74>
 8004096:	4639      	mov	r1, r7
 8004098:	4622      	mov	r2, r4
 800409a:	4630      	mov	r0, r6
 800409c:	f7ff ff36 	bl	8003f0c <__multiply>
 80040a0:	4681      	mov	r9, r0
 80040a2:	4639      	mov	r1, r7
 80040a4:	4630      	mov	r0, r6
 80040a6:	f7ff fe88 	bl	8003dba <_Bfree>
 80040aa:	464f      	mov	r7, r9
 80040ac:	106d      	asrs	r5, r5, #1
 80040ae:	d00b      	beq.n	80040c8 <__pow5mult+0x90>
 80040b0:	6820      	ldr	r0, [r4, #0]
 80040b2:	b938      	cbnz	r0, 80040c4 <__pow5mult+0x8c>
 80040b4:	4622      	mov	r2, r4
 80040b6:	4621      	mov	r1, r4
 80040b8:	4630      	mov	r0, r6
 80040ba:	f7ff ff27 	bl	8003f0c <__multiply>
 80040be:	6020      	str	r0, [r4, #0]
 80040c0:	f8c0 8000 	str.w	r8, [r0]
 80040c4:	4604      	mov	r4, r0
 80040c6:	e7e4      	b.n	8004092 <__pow5mult+0x5a>
 80040c8:	4638      	mov	r0, r7
 80040ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040ce:	bf00      	nop
 80040d0:	08004590 	.word	0x08004590

080040d4 <__lshift>:
 80040d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040d8:	460c      	mov	r4, r1
 80040da:	4607      	mov	r7, r0
 80040dc:	4616      	mov	r6, r2
 80040de:	6923      	ldr	r3, [r4, #16]
 80040e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80040e4:	eb0a 0903 	add.w	r9, sl, r3
 80040e8:	6849      	ldr	r1, [r1, #4]
 80040ea:	68a3      	ldr	r3, [r4, #8]
 80040ec:	f109 0501 	add.w	r5, r9, #1
 80040f0:	42ab      	cmp	r3, r5
 80040f2:	db32      	blt.n	800415a <__lshift+0x86>
 80040f4:	4638      	mov	r0, r7
 80040f6:	f7ff fe2c 	bl	8003d52 <_Balloc>
 80040fa:	2300      	movs	r3, #0
 80040fc:	4680      	mov	r8, r0
 80040fe:	461a      	mov	r2, r3
 8004100:	f100 0114 	add.w	r1, r0, #20
 8004104:	4553      	cmp	r3, sl
 8004106:	db2b      	blt.n	8004160 <__lshift+0x8c>
 8004108:	6920      	ldr	r0, [r4, #16]
 800410a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800410e:	f104 0314 	add.w	r3, r4, #20
 8004112:	f016 021f 	ands.w	r2, r6, #31
 8004116:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800411a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800411e:	d025      	beq.n	800416c <__lshift+0x98>
 8004120:	2000      	movs	r0, #0
 8004122:	f1c2 0e20 	rsb	lr, r2, #32
 8004126:	468a      	mov	sl, r1
 8004128:	681e      	ldr	r6, [r3, #0]
 800412a:	4096      	lsls	r6, r2
 800412c:	4330      	orrs	r0, r6
 800412e:	f84a 0b04 	str.w	r0, [sl], #4
 8004132:	f853 0b04 	ldr.w	r0, [r3], #4
 8004136:	459c      	cmp	ip, r3
 8004138:	fa20 f00e 	lsr.w	r0, r0, lr
 800413c:	d814      	bhi.n	8004168 <__lshift+0x94>
 800413e:	6048      	str	r0, [r1, #4]
 8004140:	b108      	cbz	r0, 8004146 <__lshift+0x72>
 8004142:	f109 0502 	add.w	r5, r9, #2
 8004146:	3d01      	subs	r5, #1
 8004148:	4638      	mov	r0, r7
 800414a:	f8c8 5010 	str.w	r5, [r8, #16]
 800414e:	4621      	mov	r1, r4
 8004150:	f7ff fe33 	bl	8003dba <_Bfree>
 8004154:	4640      	mov	r0, r8
 8004156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800415a:	3101      	adds	r1, #1
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	e7c7      	b.n	80040f0 <__lshift+0x1c>
 8004160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004164:	3301      	adds	r3, #1
 8004166:	e7cd      	b.n	8004104 <__lshift+0x30>
 8004168:	4651      	mov	r1, sl
 800416a:	e7dc      	b.n	8004126 <__lshift+0x52>
 800416c:	3904      	subs	r1, #4
 800416e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004172:	459c      	cmp	ip, r3
 8004174:	f841 2f04 	str.w	r2, [r1, #4]!
 8004178:	d8f9      	bhi.n	800416e <__lshift+0x9a>
 800417a:	e7e4      	b.n	8004146 <__lshift+0x72>

0800417c <__mcmp>:
 800417c:	6903      	ldr	r3, [r0, #16]
 800417e:	690a      	ldr	r2, [r1, #16]
 8004180:	b530      	push	{r4, r5, lr}
 8004182:	1a9b      	subs	r3, r3, r2
 8004184:	d10c      	bne.n	80041a0 <__mcmp+0x24>
 8004186:	0092      	lsls	r2, r2, #2
 8004188:	3014      	adds	r0, #20
 800418a:	3114      	adds	r1, #20
 800418c:	1884      	adds	r4, r0, r2
 800418e:	4411      	add	r1, r2
 8004190:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004194:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004198:	4295      	cmp	r5, r2
 800419a:	d003      	beq.n	80041a4 <__mcmp+0x28>
 800419c:	d305      	bcc.n	80041aa <__mcmp+0x2e>
 800419e:	2301      	movs	r3, #1
 80041a0:	4618      	mov	r0, r3
 80041a2:	bd30      	pop	{r4, r5, pc}
 80041a4:	42a0      	cmp	r0, r4
 80041a6:	d3f3      	bcc.n	8004190 <__mcmp+0x14>
 80041a8:	e7fa      	b.n	80041a0 <__mcmp+0x24>
 80041aa:	f04f 33ff 	mov.w	r3, #4294967295
 80041ae:	e7f7      	b.n	80041a0 <__mcmp+0x24>

080041b0 <__mdiff>:
 80041b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041b4:	460d      	mov	r5, r1
 80041b6:	4607      	mov	r7, r0
 80041b8:	4611      	mov	r1, r2
 80041ba:	4628      	mov	r0, r5
 80041bc:	4614      	mov	r4, r2
 80041be:	f7ff ffdd 	bl	800417c <__mcmp>
 80041c2:	1e06      	subs	r6, r0, #0
 80041c4:	d108      	bne.n	80041d8 <__mdiff+0x28>
 80041c6:	4631      	mov	r1, r6
 80041c8:	4638      	mov	r0, r7
 80041ca:	f7ff fdc2 	bl	8003d52 <_Balloc>
 80041ce:	2301      	movs	r3, #1
 80041d0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80041d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041d8:	bfa4      	itt	ge
 80041da:	4623      	movge	r3, r4
 80041dc:	462c      	movge	r4, r5
 80041de:	4638      	mov	r0, r7
 80041e0:	6861      	ldr	r1, [r4, #4]
 80041e2:	bfa6      	itte	ge
 80041e4:	461d      	movge	r5, r3
 80041e6:	2600      	movge	r6, #0
 80041e8:	2601      	movlt	r6, #1
 80041ea:	f7ff fdb2 	bl	8003d52 <_Balloc>
 80041ee:	f04f 0e00 	mov.w	lr, #0
 80041f2:	60c6      	str	r6, [r0, #12]
 80041f4:	692b      	ldr	r3, [r5, #16]
 80041f6:	6926      	ldr	r6, [r4, #16]
 80041f8:	f104 0214 	add.w	r2, r4, #20
 80041fc:	f105 0914 	add.w	r9, r5, #20
 8004200:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004204:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004208:	f100 0114 	add.w	r1, r0, #20
 800420c:	f852 ab04 	ldr.w	sl, [r2], #4
 8004210:	f859 5b04 	ldr.w	r5, [r9], #4
 8004214:	fa1f f38a 	uxth.w	r3, sl
 8004218:	4473      	add	r3, lr
 800421a:	b2ac      	uxth	r4, r5
 800421c:	1b1b      	subs	r3, r3, r4
 800421e:	0c2c      	lsrs	r4, r5, #16
 8004220:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8004224:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8004228:	b29b      	uxth	r3, r3
 800422a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800422e:	45c8      	cmp	r8, r9
 8004230:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8004234:	4694      	mov	ip, r2
 8004236:	f841 4b04 	str.w	r4, [r1], #4
 800423a:	d8e7      	bhi.n	800420c <__mdiff+0x5c>
 800423c:	45bc      	cmp	ip, r7
 800423e:	d304      	bcc.n	800424a <__mdiff+0x9a>
 8004240:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004244:	b183      	cbz	r3, 8004268 <__mdiff+0xb8>
 8004246:	6106      	str	r6, [r0, #16]
 8004248:	e7c4      	b.n	80041d4 <__mdiff+0x24>
 800424a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800424e:	b2a2      	uxth	r2, r4
 8004250:	4472      	add	r2, lr
 8004252:	1413      	asrs	r3, r2, #16
 8004254:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004258:	b292      	uxth	r2, r2
 800425a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800425e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8004262:	f841 2b04 	str.w	r2, [r1], #4
 8004266:	e7e9      	b.n	800423c <__mdiff+0x8c>
 8004268:	3e01      	subs	r6, #1
 800426a:	e7e9      	b.n	8004240 <__mdiff+0x90>

0800426c <__d2b>:
 800426c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004270:	461c      	mov	r4, r3
 8004272:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8004276:	2101      	movs	r1, #1
 8004278:	4690      	mov	r8, r2
 800427a:	f7ff fd6a 	bl	8003d52 <_Balloc>
 800427e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8004282:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8004286:	4607      	mov	r7, r0
 8004288:	bb34      	cbnz	r4, 80042d8 <__d2b+0x6c>
 800428a:	9201      	str	r2, [sp, #4]
 800428c:	f1b8 0200 	subs.w	r2, r8, #0
 8004290:	d027      	beq.n	80042e2 <__d2b+0x76>
 8004292:	a802      	add	r0, sp, #8
 8004294:	f840 2d08 	str.w	r2, [r0, #-8]!
 8004298:	f7ff fe00 	bl	8003e9c <__lo0bits>
 800429c:	9900      	ldr	r1, [sp, #0]
 800429e:	b1f0      	cbz	r0, 80042de <__d2b+0x72>
 80042a0:	9a01      	ldr	r2, [sp, #4]
 80042a2:	f1c0 0320 	rsb	r3, r0, #32
 80042a6:	fa02 f303 	lsl.w	r3, r2, r3
 80042aa:	430b      	orrs	r3, r1
 80042ac:	40c2      	lsrs	r2, r0
 80042ae:	617b      	str	r3, [r7, #20]
 80042b0:	9201      	str	r2, [sp, #4]
 80042b2:	9b01      	ldr	r3, [sp, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	bf14      	ite	ne
 80042b8:	2102      	movne	r1, #2
 80042ba:	2101      	moveq	r1, #1
 80042bc:	61bb      	str	r3, [r7, #24]
 80042be:	6139      	str	r1, [r7, #16]
 80042c0:	b1c4      	cbz	r4, 80042f4 <__d2b+0x88>
 80042c2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80042c6:	4404      	add	r4, r0
 80042c8:	6034      	str	r4, [r6, #0]
 80042ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80042ce:	6028      	str	r0, [r5, #0]
 80042d0:	4638      	mov	r0, r7
 80042d2:	b002      	add	sp, #8
 80042d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042d8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80042dc:	e7d5      	b.n	800428a <__d2b+0x1e>
 80042de:	6179      	str	r1, [r7, #20]
 80042e0:	e7e7      	b.n	80042b2 <__d2b+0x46>
 80042e2:	a801      	add	r0, sp, #4
 80042e4:	f7ff fdda 	bl	8003e9c <__lo0bits>
 80042e8:	2101      	movs	r1, #1
 80042ea:	9b01      	ldr	r3, [sp, #4]
 80042ec:	6139      	str	r1, [r7, #16]
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	3020      	adds	r0, #32
 80042f2:	e7e5      	b.n	80042c0 <__d2b+0x54>
 80042f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80042f8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80042fc:	6030      	str	r0, [r6, #0]
 80042fe:	6918      	ldr	r0, [r3, #16]
 8004300:	f7ff fdad 	bl	8003e5e <__hi0bits>
 8004304:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004308:	e7e1      	b.n	80042ce <__d2b+0x62>

0800430a <_calloc_r>:
 800430a:	b538      	push	{r3, r4, r5, lr}
 800430c:	fb02 f401 	mul.w	r4, r2, r1
 8004310:	4621      	mov	r1, r4
 8004312:	f000 f809 	bl	8004328 <_malloc_r>
 8004316:	4605      	mov	r5, r0
 8004318:	b118      	cbz	r0, 8004322 <_calloc_r+0x18>
 800431a:	4622      	mov	r2, r4
 800431c:	2100      	movs	r1, #0
 800431e:	f7fe fb6f 	bl	8002a00 <memset>
 8004322:	4628      	mov	r0, r5
 8004324:	bd38      	pop	{r3, r4, r5, pc}
	...

08004328 <_malloc_r>:
 8004328:	b570      	push	{r4, r5, r6, lr}
 800432a:	1ccd      	adds	r5, r1, #3
 800432c:	f025 0503 	bic.w	r5, r5, #3
 8004330:	3508      	adds	r5, #8
 8004332:	2d0c      	cmp	r5, #12
 8004334:	bf38      	it	cc
 8004336:	250c      	movcc	r5, #12
 8004338:	2d00      	cmp	r5, #0
 800433a:	4606      	mov	r6, r0
 800433c:	db01      	blt.n	8004342 <_malloc_r+0x1a>
 800433e:	42a9      	cmp	r1, r5
 8004340:	d903      	bls.n	800434a <_malloc_r+0x22>
 8004342:	230c      	movs	r3, #12
 8004344:	6033      	str	r3, [r6, #0]
 8004346:	2000      	movs	r0, #0
 8004348:	bd70      	pop	{r4, r5, r6, pc}
 800434a:	f000 f869 	bl	8004420 <__malloc_lock>
 800434e:	4a21      	ldr	r2, [pc, #132]	; (80043d4 <_malloc_r+0xac>)
 8004350:	6814      	ldr	r4, [r2, #0]
 8004352:	4621      	mov	r1, r4
 8004354:	b991      	cbnz	r1, 800437c <_malloc_r+0x54>
 8004356:	4c20      	ldr	r4, [pc, #128]	; (80043d8 <_malloc_r+0xb0>)
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	b91b      	cbnz	r3, 8004364 <_malloc_r+0x3c>
 800435c:	4630      	mov	r0, r6
 800435e:	f000 f83d 	bl	80043dc <_sbrk_r>
 8004362:	6020      	str	r0, [r4, #0]
 8004364:	4629      	mov	r1, r5
 8004366:	4630      	mov	r0, r6
 8004368:	f000 f838 	bl	80043dc <_sbrk_r>
 800436c:	1c43      	adds	r3, r0, #1
 800436e:	d124      	bne.n	80043ba <_malloc_r+0x92>
 8004370:	230c      	movs	r3, #12
 8004372:	4630      	mov	r0, r6
 8004374:	6033      	str	r3, [r6, #0]
 8004376:	f000 f854 	bl	8004422 <__malloc_unlock>
 800437a:	e7e4      	b.n	8004346 <_malloc_r+0x1e>
 800437c:	680b      	ldr	r3, [r1, #0]
 800437e:	1b5b      	subs	r3, r3, r5
 8004380:	d418      	bmi.n	80043b4 <_malloc_r+0x8c>
 8004382:	2b0b      	cmp	r3, #11
 8004384:	d90f      	bls.n	80043a6 <_malloc_r+0x7e>
 8004386:	600b      	str	r3, [r1, #0]
 8004388:	18cc      	adds	r4, r1, r3
 800438a:	50cd      	str	r5, [r1, r3]
 800438c:	4630      	mov	r0, r6
 800438e:	f000 f848 	bl	8004422 <__malloc_unlock>
 8004392:	f104 000b 	add.w	r0, r4, #11
 8004396:	1d23      	adds	r3, r4, #4
 8004398:	f020 0007 	bic.w	r0, r0, #7
 800439c:	1ac3      	subs	r3, r0, r3
 800439e:	d0d3      	beq.n	8004348 <_malloc_r+0x20>
 80043a0:	425a      	negs	r2, r3
 80043a2:	50e2      	str	r2, [r4, r3]
 80043a4:	e7d0      	b.n	8004348 <_malloc_r+0x20>
 80043a6:	684b      	ldr	r3, [r1, #4]
 80043a8:	428c      	cmp	r4, r1
 80043aa:	bf16      	itet	ne
 80043ac:	6063      	strne	r3, [r4, #4]
 80043ae:	6013      	streq	r3, [r2, #0]
 80043b0:	460c      	movne	r4, r1
 80043b2:	e7eb      	b.n	800438c <_malloc_r+0x64>
 80043b4:	460c      	mov	r4, r1
 80043b6:	6849      	ldr	r1, [r1, #4]
 80043b8:	e7cc      	b.n	8004354 <_malloc_r+0x2c>
 80043ba:	1cc4      	adds	r4, r0, #3
 80043bc:	f024 0403 	bic.w	r4, r4, #3
 80043c0:	42a0      	cmp	r0, r4
 80043c2:	d005      	beq.n	80043d0 <_malloc_r+0xa8>
 80043c4:	1a21      	subs	r1, r4, r0
 80043c6:	4630      	mov	r0, r6
 80043c8:	f000 f808 	bl	80043dc <_sbrk_r>
 80043cc:	3001      	adds	r0, #1
 80043ce:	d0cf      	beq.n	8004370 <_malloc_r+0x48>
 80043d0:	6025      	str	r5, [r4, #0]
 80043d2:	e7db      	b.n	800438c <_malloc_r+0x64>
 80043d4:	200001fc 	.word	0x200001fc
 80043d8:	20000200 	.word	0x20000200

080043dc <_sbrk_r>:
 80043dc:	b538      	push	{r3, r4, r5, lr}
 80043de:	2300      	movs	r3, #0
 80043e0:	4c05      	ldr	r4, [pc, #20]	; (80043f8 <_sbrk_r+0x1c>)
 80043e2:	4605      	mov	r5, r0
 80043e4:	4608      	mov	r0, r1
 80043e6:	6023      	str	r3, [r4, #0]
 80043e8:	f7fc ffec 	bl	80013c4 <_sbrk>
 80043ec:	1c43      	adds	r3, r0, #1
 80043ee:	d102      	bne.n	80043f6 <_sbrk_r+0x1a>
 80043f0:	6823      	ldr	r3, [r4, #0]
 80043f2:	b103      	cbz	r3, 80043f6 <_sbrk_r+0x1a>
 80043f4:	602b      	str	r3, [r5, #0]
 80043f6:	bd38      	pop	{r3, r4, r5, pc}
 80043f8:	20000238 	.word	0x20000238

080043fc <__ascii_mbtowc>:
 80043fc:	b082      	sub	sp, #8
 80043fe:	b901      	cbnz	r1, 8004402 <__ascii_mbtowc+0x6>
 8004400:	a901      	add	r1, sp, #4
 8004402:	b142      	cbz	r2, 8004416 <__ascii_mbtowc+0x1a>
 8004404:	b14b      	cbz	r3, 800441a <__ascii_mbtowc+0x1e>
 8004406:	7813      	ldrb	r3, [r2, #0]
 8004408:	600b      	str	r3, [r1, #0]
 800440a:	7812      	ldrb	r2, [r2, #0]
 800440c:	1c10      	adds	r0, r2, #0
 800440e:	bf18      	it	ne
 8004410:	2001      	movne	r0, #1
 8004412:	b002      	add	sp, #8
 8004414:	4770      	bx	lr
 8004416:	4610      	mov	r0, r2
 8004418:	e7fb      	b.n	8004412 <__ascii_mbtowc+0x16>
 800441a:	f06f 0001 	mvn.w	r0, #1
 800441e:	e7f8      	b.n	8004412 <__ascii_mbtowc+0x16>

08004420 <__malloc_lock>:
 8004420:	4770      	bx	lr

08004422 <__malloc_unlock>:
 8004422:	4770      	bx	lr

08004424 <__ascii_wctomb>:
 8004424:	b149      	cbz	r1, 800443a <__ascii_wctomb+0x16>
 8004426:	2aff      	cmp	r2, #255	; 0xff
 8004428:	bf8b      	itete	hi
 800442a:	238a      	movhi	r3, #138	; 0x8a
 800442c:	700a      	strbls	r2, [r1, #0]
 800442e:	6003      	strhi	r3, [r0, #0]
 8004430:	2001      	movls	r0, #1
 8004432:	bf88      	it	hi
 8004434:	f04f 30ff 	movhi.w	r0, #4294967295
 8004438:	4770      	bx	lr
 800443a:	4608      	mov	r0, r1
 800443c:	4770      	bx	lr
	...

08004440 <_init>:
 8004440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004442:	bf00      	nop
 8004444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004446:	bc08      	pop	{r3}
 8004448:	469e      	mov	lr, r3
 800444a:	4770      	bx	lr

0800444c <_fini>:
 800444c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800444e:	bf00      	nop
 8004450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004452:	bc08      	pop	{r3}
 8004454:	469e      	mov	lr, r3
 8004456:	4770      	bx	lr
