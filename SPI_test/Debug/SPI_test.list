
SPI_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dd8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08002ee4  08002ee4  00012ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fc8  08002fc8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002fc8  08002fc8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fc8  08002fc8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fc8  08002fc8  00012fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fcc  08002fcc  00012fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000070  08003040  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08003040  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000071a2  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015b4  00000000  00000000  0002723b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000698  00000000  00000000  000287f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005e0  00000000  00000000  00028e88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014496  00000000  00000000  00029468  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005a04  00000000  00000000  0003d8fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006ac75  00000000  00000000  00043302  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000adf77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002068  00000000  00000000  000adff4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ecc 	.word	0x08002ecc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002ecc 	.word	0x08002ecc

0800014c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000154:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000158:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800015c:	f003 0301 	and.w	r3, r3, #1
 8000160:	2b00      	cmp	r3, #0
 8000162:	d013      	beq.n	800018c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800016c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000170:	2b00      	cmp	r3, #0
 8000172:	d00b      	beq.n	800018c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000174:	e000      	b.n	8000178 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000176:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d0f9      	beq.n	8000176 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000182:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000186:	687a      	ldr	r2, [r7, #4]
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800018c:	687b      	ldr	r3, [r7, #4]
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b08a      	sub	sp, #40	; 0x28
 800019c:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800019e:	f000 fb1b 	bl	80007d8 <HAL_Init>

  /* USER CODE BEGIN Init */

  HAL_GPIO_WritePin(FOC_CS_GPIO_Port, FOC_CS_Pin, SET);
 80001a2:	2201      	movs	r2, #1
 80001a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001a8:	483a      	ldr	r0, [pc, #232]	; (8000294 <main+0xfc>)
 80001aa:	f000 fdd7 	bl	8000d5c <HAL_GPIO_WritePin>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ae:	f000 f87d 	bl	80002ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001b2:	f000 f8f7 	bl	80003a4 <MX_GPIO_Init>
  MX_SPI2_Init();
 80001b6:	f000 f8bf 	bl	8000338 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  uint8_t aux[5], aux2[1], str[5];
     aux[0]=0b10000001;
 80001ba:	2381      	movs	r3, #129	; 0x81
 80001bc:	743b      	strb	r3, [r7, #16]
     for(int i=1; i<=4; i++){
 80001be:	2301      	movs	r3, #1
 80001c0:	61fb      	str	r3, [r7, #28]
 80001c2:	e008      	b.n	80001d6 <main+0x3e>
   	  aux[i]=0b00000000;
 80001c4:	f107 0210 	add.w	r2, r7, #16
 80001c8:	69fb      	ldr	r3, [r7, #28]
 80001ca:	4413      	add	r3, r2
 80001cc:	2200      	movs	r2, #0
 80001ce:	701a      	strb	r2, [r3, #0]
     for(int i=1; i<=4; i++){
 80001d0:	69fb      	ldr	r3, [r7, #28]
 80001d2:	3301      	adds	r3, #1
 80001d4:	61fb      	str	r3, [r7, #28]
 80001d6:	69fb      	ldr	r3, [r7, #28]
 80001d8:	2b04      	cmp	r3, #4
 80001da:	ddf3      	ble.n	80001c4 <main+0x2c>
     }
     aux2[0]=0b00000000;
 80001dc:	2300      	movs	r3, #0
 80001de:	733b      	strb	r3, [r7, #12]


  for(int i=0; i<4; i++){
 80001e0:	2300      	movs	r3, #0
 80001e2:	61bb      	str	r3, [r7, #24]
 80001e4:	e00c      	b.n	8000200 <main+0x68>
  	  printf("aux %d - %d\n", i, aux[i]);
 80001e6:	f107 0210 	add.w	r2, r7, #16
 80001ea:	69bb      	ldr	r3, [r7, #24]
 80001ec:	4413      	add	r3, r2
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	461a      	mov	r2, r3
 80001f2:	69b9      	ldr	r1, [r7, #24]
 80001f4:	4828      	ldr	r0, [pc, #160]	; (8000298 <main+0x100>)
 80001f6:	f001 ff17 	bl	8002028 <iprintf>
  for(int i=0; i<4; i++){
 80001fa:	69bb      	ldr	r3, [r7, #24]
 80001fc:	3301      	adds	r3, #1
 80001fe:	61bb      	str	r3, [r7, #24]
 8000200:	69bb      	ldr	r3, [r7, #24]
 8000202:	2b03      	cmp	r3, #3
 8000204:	ddef      	ble.n	80001e6 <main+0x4e>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin(Led1_GPIO_Port, Led1_Pin);
 8000206:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800020a:	4824      	ldr	r0, [pc, #144]	; (800029c <main+0x104>)
 800020c:	f000 fdbe 	bl	8000d8c <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 8000210:	2032      	movs	r0, #50	; 0x32
 8000212:	f000 fb43 	bl	800089c <HAL_Delay>

	  HAL_GPIO_WritePin(FOC_CS_GPIO_Port, FOC_CS_Pin, RESET);
 8000216:	2200      	movs	r2, #0
 8000218:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800021c:	481d      	ldr	r0, [pc, #116]	; (8000294 <main+0xfc>)
 800021e:	f000 fd9d 	bl	8000d5c <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, aux, 5, 1000);
 8000222:	f107 0110 	add.w	r1, r7, #16
 8000226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800022a:	2205      	movs	r2, #5
 800022c:	481c      	ldr	r0, [pc, #112]	; (80002a0 <main+0x108>)
 800022e:	f001 fa10 	bl	8001652 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(FOC_CS_GPIO_Port, FOC_CS_Pin, SET);
 8000232:	2201      	movs	r2, #1
 8000234:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000238:	4816      	ldr	r0, [pc, #88]	; (8000294 <main+0xfc>)
 800023a:	f000 fd8f 	bl	8000d5c <HAL_GPIO_WritePin>
	  //HAL_Delay(1);


	  HAL_GPIO_WritePin(FOC_CS_GPIO_Port, FOC_CS_Pin, RESET);
 800023e:	2200      	movs	r2, #0
 8000240:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000244:	4813      	ldr	r0, [pc, #76]	; (8000294 <main+0xfc>)
 8000246:	f000 fd89 	bl	8000d5c <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, aux2, 1, 1000);
 800024a:	f107 010c 	add.w	r1, r7, #12
 800024e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000252:	2201      	movs	r2, #1
 8000254:	4812      	ldr	r0, [pc, #72]	; (80002a0 <main+0x108>)
 8000256:	f001 f9fc 	bl	8001652 <HAL_SPI_Transmit>
	  //HAL_Delay(1);
	  HAL_SPI_Receive(&hspi2, str, 4, 1000);
 800025a:	1d39      	adds	r1, r7, #4
 800025c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000260:	2204      	movs	r2, #4
 8000262:	480f      	ldr	r0, [pc, #60]	; (80002a0 <main+0x108>)
 8000264:	f001 fb29 	bl	80018ba <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(FOC_CS_GPIO_Port, FOC_CS_Pin, SET);
 8000268:	2201      	movs	r2, #1
 800026a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800026e:	4809      	ldr	r0, [pc, #36]	; (8000294 <main+0xfc>)
 8000270:	f000 fd74 	bl	8000d5c <HAL_GPIO_WritePin>
	  //HAL_SPI_Receive(&hspi2, str, 4, 200);
	  printf("Aquiii\n");
 8000274:	480b      	ldr	r0, [pc, #44]	; (80002a4 <main+0x10c>)
 8000276:	f001 ff4b 	bl	8002110 <puts>
	  printf("%d %d %d %d\n", str[0], str[1], str[2], str[3]);
 800027a:	793b      	ldrb	r3, [r7, #4]
 800027c:	4619      	mov	r1, r3
 800027e:	797b      	ldrb	r3, [r7, #5]
 8000280:	461a      	mov	r2, r3
 8000282:	79bb      	ldrb	r3, [r7, #6]
 8000284:	4618      	mov	r0, r3
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	9300      	str	r3, [sp, #0]
 800028a:	4603      	mov	r3, r0
 800028c:	4806      	ldr	r0, [pc, #24]	; (80002a8 <main+0x110>)
 800028e:	f001 fecb 	bl	8002028 <iprintf>
	  HAL_GPIO_TogglePin(Led1_GPIO_Port, Led1_Pin);
 8000292:	e7b8      	b.n	8000206 <main+0x6e>
 8000294:	40010800 	.word	0x40010800
 8000298:	08002ee4 	.word	0x08002ee4
 800029c:	40011000 	.word	0x40011000
 80002a0:	20000098 	.word	0x20000098
 80002a4:	08002ef4 	.word	0x08002ef4
 80002a8:	08002efc 	.word	0x08002efc

080002ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b090      	sub	sp, #64	; 0x40
 80002b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b2:	f107 0318 	add.w	r3, r7, #24
 80002b6:	2228      	movs	r2, #40	; 0x28
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f001 feac 	bl	8002018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]
 80002cc:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002ce:	2301      	movs	r3, #1
 80002d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002d8:	2300      	movs	r3, #0
 80002da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002dc:	2301      	movs	r3, #1
 80002de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e0:	2302      	movs	r3, #2
 80002e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002ea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f0:	f107 0318 	add.w	r3, r7, #24
 80002f4:	4618      	mov	r0, r3
 80002f6:	f000 fd61 	bl	8000dbc <HAL_RCC_OscConfig>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000300:	f000 f8e7 	bl	80004d2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000304:	230f      	movs	r3, #15
 8000306:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000308:	2302      	movs	r3, #2
 800030a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030c:	2300      	movs	r3, #0
 800030e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000310:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000314:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2102      	movs	r1, #2
 800031e:	4618      	mov	r0, r3
 8000320:	f000 ffcc 	bl	80012bc <HAL_RCC_ClockConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800032a:	f000 f8d2 	bl	80004d2 <Error_Handler>
  }
}
 800032e:	bf00      	nop
 8000330:	3740      	adds	r7, #64	; 0x40
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
	...

08000338 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800033c:	4b17      	ldr	r3, [pc, #92]	; (800039c <MX_SPI2_Init+0x64>)
 800033e:	4a18      	ldr	r2, [pc, #96]	; (80003a0 <MX_SPI2_Init+0x68>)
 8000340:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000342:	4b16      	ldr	r3, [pc, #88]	; (800039c <MX_SPI2_Init+0x64>)
 8000344:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000348:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800034a:	4b14      	ldr	r3, [pc, #80]	; (800039c <MX_SPI2_Init+0x64>)
 800034c:	2200      	movs	r2, #0
 800034e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000350:	4b12      	ldr	r3, [pc, #72]	; (800039c <MX_SPI2_Init+0x64>)
 8000352:	2200      	movs	r2, #0
 8000354:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000356:	4b11      	ldr	r3, [pc, #68]	; (800039c <MX_SPI2_Init+0x64>)
 8000358:	2202      	movs	r2, #2
 800035a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800035c:	4b0f      	ldr	r3, [pc, #60]	; (800039c <MX_SPI2_Init+0x64>)
 800035e:	2201      	movs	r2, #1
 8000360:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000362:	4b0e      	ldr	r3, [pc, #56]	; (800039c <MX_SPI2_Init+0x64>)
 8000364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000368:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800036a:	4b0c      	ldr	r3, [pc, #48]	; (800039c <MX_SPI2_Init+0x64>)
 800036c:	2230      	movs	r2, #48	; 0x30
 800036e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000370:	4b0a      	ldr	r3, [pc, #40]	; (800039c <MX_SPI2_Init+0x64>)
 8000372:	2200      	movs	r2, #0
 8000374:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000376:	4b09      	ldr	r3, [pc, #36]	; (800039c <MX_SPI2_Init+0x64>)
 8000378:	2200      	movs	r2, #0
 800037a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800037c:	4b07      	ldr	r3, [pc, #28]	; (800039c <MX_SPI2_Init+0x64>)
 800037e:	2200      	movs	r2, #0
 8000380:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000382:	4b06      	ldr	r3, [pc, #24]	; (800039c <MX_SPI2_Init+0x64>)
 8000384:	220a      	movs	r2, #10
 8000386:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000388:	4804      	ldr	r0, [pc, #16]	; (800039c <MX_SPI2_Init+0x64>)
 800038a:	f001 f901 	bl	8001590 <HAL_SPI_Init>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000394:	f000 f89d 	bl	80004d2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000398:	bf00      	nop
 800039a:	bd80      	pop	{r7, pc}
 800039c:	20000098 	.word	0x20000098
 80003a0:	40003800 	.word	0x40003800

080003a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b088      	sub	sp, #32
 80003a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003aa:	f107 0310 	add.w	r3, r7, #16
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b8:	4b2e      	ldr	r3, [pc, #184]	; (8000474 <MX_GPIO_Init+0xd0>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	4a2d      	ldr	r2, [pc, #180]	; (8000474 <MX_GPIO_Init+0xd0>)
 80003be:	f043 0310 	orr.w	r3, r3, #16
 80003c2:	6193      	str	r3, [r2, #24]
 80003c4:	4b2b      	ldr	r3, [pc, #172]	; (8000474 <MX_GPIO_Init+0xd0>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	f003 0310 	and.w	r3, r3, #16
 80003cc:	60fb      	str	r3, [r7, #12]
 80003ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003d0:	4b28      	ldr	r3, [pc, #160]	; (8000474 <MX_GPIO_Init+0xd0>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a27      	ldr	r2, [pc, #156]	; (8000474 <MX_GPIO_Init+0xd0>)
 80003d6:	f043 0320 	orr.w	r3, r3, #32
 80003da:	6193      	str	r3, [r2, #24]
 80003dc:	4b25      	ldr	r3, [pc, #148]	; (8000474 <MX_GPIO_Init+0xd0>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	f003 0320 	and.w	r3, r3, #32
 80003e4:	60bb      	str	r3, [r7, #8]
 80003e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e8:	4b22      	ldr	r3, [pc, #136]	; (8000474 <MX_GPIO_Init+0xd0>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a21      	ldr	r2, [pc, #132]	; (8000474 <MX_GPIO_Init+0xd0>)
 80003ee:	f043 0308 	orr.w	r3, r3, #8
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	4b1f      	ldr	r3, [pc, #124]	; (8000474 <MX_GPIO_Init+0xd0>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	f003 0308 	and.w	r3, r3, #8
 80003fc:	607b      	str	r3, [r7, #4]
 80003fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000400:	4b1c      	ldr	r3, [pc, #112]	; (8000474 <MX_GPIO_Init+0xd0>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a1b      	ldr	r2, [pc, #108]	; (8000474 <MX_GPIO_Init+0xd0>)
 8000406:	f043 0304 	orr.w	r3, r3, #4
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b19      	ldr	r3, [pc, #100]	; (8000474 <MX_GPIO_Init+0xd0>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0304 	and.w	r3, r3, #4
 8000414:	603b      	str	r3, [r7, #0]
 8000416:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, GPIO_PIN_RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800041e:	4816      	ldr	r0, [pc, #88]	; (8000478 <MX_GPIO_Init+0xd4>)
 8000420:	f000 fc9c 	bl	8000d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FOC_CS_GPIO_Port, FOC_CS_Pin, GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800042a:	4814      	ldr	r0, [pc, #80]	; (800047c <MX_GPIO_Init+0xd8>)
 800042c:	f000 fc96 	bl	8000d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led1_Pin */
  GPIO_InitStruct.Pin = Led1_Pin;
 8000430:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000434:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000436:	2301      	movs	r3, #1
 8000438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043a:	2300      	movs	r3, #0
 800043c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043e:	2302      	movs	r3, #2
 8000440:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led1_GPIO_Port, &GPIO_InitStruct);
 8000442:	f107 0310 	add.w	r3, r7, #16
 8000446:	4619      	mov	r1, r3
 8000448:	480b      	ldr	r0, [pc, #44]	; (8000478 <MX_GPIO_Init+0xd4>)
 800044a:	f000 fb2d 	bl	8000aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FOC_CS_Pin */
  GPIO_InitStruct.Pin = FOC_CS_Pin;
 800044e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000452:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000454:	2301      	movs	r3, #1
 8000456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000458:	2300      	movs	r3, #0
 800045a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045c:	2302      	movs	r3, #2
 800045e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FOC_CS_GPIO_Port, &GPIO_InitStruct);
 8000460:	f107 0310 	add.w	r3, r7, #16
 8000464:	4619      	mov	r1, r3
 8000466:	4805      	ldr	r0, [pc, #20]	; (800047c <MX_GPIO_Init+0xd8>)
 8000468:	f000 fb1e 	bl	8000aa8 <HAL_GPIO_Init>

}
 800046c:	bf00      	nop
 800046e:	3720      	adds	r7, #32
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	40021000 	.word	0x40021000
 8000478:	40011000 	.word	0x40011000
 800047c:	40010800 	.word	0x40010800

08000480 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch){
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff fe5e 	bl	800014c <ITM_SendChar>
	return ch;
 8000490:	687b      	ldr	r3, [r7, #4]
}
 8000492:	4618      	mov	r0, r3
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}

0800049a <_write>:

int _write(int file, char *ptr, int len){
 800049a:	b580      	push	{r7, lr}
 800049c:	b086      	sub	sp, #24
 800049e:	af00      	add	r7, sp, #0
 80004a0:	60f8      	str	r0, [r7, #12]
 80004a2:	60b9      	str	r1, [r7, #8]
 80004a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for(DataIdx = 0; DataIdx < len; DataIdx++){
 80004a6:	2300      	movs	r3, #0
 80004a8:	617b      	str	r3, [r7, #20]
 80004aa:	e009      	b.n	80004c0 <_write+0x26>
		__io_putchar(*ptr++);
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	1c5a      	adds	r2, r3, #1
 80004b0:	60ba      	str	r2, [r7, #8]
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	4618      	mov	r0, r3
 80004b6:	f7ff ffe3 	bl	8000480 <__io_putchar>
	for(DataIdx = 0; DataIdx < len; DataIdx++){
 80004ba:	697b      	ldr	r3, [r7, #20]
 80004bc:	3301      	adds	r3, #1
 80004be:	617b      	str	r3, [r7, #20]
 80004c0:	697a      	ldr	r2, [r7, #20]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	429a      	cmp	r2, r3
 80004c6:	dbf1      	blt.n	80004ac <_write+0x12>
	}
	return len;
 80004c8:	687b      	ldr	r3, [r7, #4]
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	3718      	adds	r7, #24
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}

080004d2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004d6:	bf00      	nop
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr
	...

080004e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004e6:	4b15      	ldr	r3, [pc, #84]	; (800053c <HAL_MspInit+0x5c>)
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	4a14      	ldr	r2, [pc, #80]	; (800053c <HAL_MspInit+0x5c>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	6193      	str	r3, [r2, #24]
 80004f2:	4b12      	ldr	r3, [pc, #72]	; (800053c <HAL_MspInit+0x5c>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	60bb      	str	r3, [r7, #8]
 80004fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fe:	4b0f      	ldr	r3, [pc, #60]	; (800053c <HAL_MspInit+0x5c>)
 8000500:	69db      	ldr	r3, [r3, #28]
 8000502:	4a0e      	ldr	r2, [pc, #56]	; (800053c <HAL_MspInit+0x5c>)
 8000504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000508:	61d3      	str	r3, [r2, #28]
 800050a:	4b0c      	ldr	r3, [pc, #48]	; (800053c <HAL_MspInit+0x5c>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000516:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <HAL_MspInit+0x60>)
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	4a04      	ldr	r2, [pc, #16]	; (8000540 <HAL_MspInit+0x60>)
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000532:	bf00      	nop
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr
 800053c:	40021000 	.word	0x40021000
 8000540:	40010000 	.word	0x40010000

08000544 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054c:	f107 0310 	add.w	r3, r7, #16
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a1c      	ldr	r2, [pc, #112]	; (80005d0 <HAL_SPI_MspInit+0x8c>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d131      	bne.n	80005c8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000564:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <HAL_SPI_MspInit+0x90>)
 8000566:	69db      	ldr	r3, [r3, #28]
 8000568:	4a1a      	ldr	r2, [pc, #104]	; (80005d4 <HAL_SPI_MspInit+0x90>)
 800056a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056e:	61d3      	str	r3, [r2, #28]
 8000570:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <HAL_SPI_MspInit+0x90>)
 8000572:	69db      	ldr	r3, [r3, #28]
 8000574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800057c:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <HAL_SPI_MspInit+0x90>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a14      	ldr	r2, [pc, #80]	; (80005d4 <HAL_SPI_MspInit+0x90>)
 8000582:	f043 0308 	orr.w	r3, r3, #8
 8000586:	6193      	str	r3, [r2, #24]
 8000588:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <HAL_SPI_MspInit+0x90>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	f003 0308 	and.w	r3, r3, #8
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000594:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000598:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800059a:	2302      	movs	r3, #2
 800059c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800059e:	2303      	movs	r3, #3
 80005a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a2:	f107 0310 	add.w	r3, r7, #16
 80005a6:	4619      	mov	r1, r3
 80005a8:	480b      	ldr	r0, [pc, #44]	; (80005d8 <HAL_SPI_MspInit+0x94>)
 80005aa:	f000 fa7d 	bl	8000aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80005ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005bc:	f107 0310 	add.w	r3, r7, #16
 80005c0:	4619      	mov	r1, r3
 80005c2:	4805      	ldr	r0, [pc, #20]	; (80005d8 <HAL_SPI_MspInit+0x94>)
 80005c4:	f000 fa70 	bl	8000aa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80005c8:	bf00      	nop
 80005ca:	3720      	adds	r7, #32
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40003800 	.word	0x40003800
 80005d4:	40021000 	.word	0x40021000
 80005d8:	40010c00 	.word	0x40010c00

080005dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr

080005e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <HardFault_Handler+0x4>

080005ee <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005ee:	b480      	push	{r7}
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f2:	e7fe      	b.n	80005f2 <MemManage_Handler+0x4>

080005f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <BusFault_Handler+0x4>

080005fa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005fe:	e7fe      	b.n	80005fe <UsageFault_Handler+0x4>

08000600 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr

0800060c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr

08000624 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000628:	f000 f91c 	bl	8000864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}

08000630 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	60b9      	str	r1, [r7, #8]
 800063a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]
 8000640:	e00a      	b.n	8000658 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000642:	f3af 8000 	nop.w
 8000646:	4601      	mov	r1, r0
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	1c5a      	adds	r2, r3, #1
 800064c:	60ba      	str	r2, [r7, #8]
 800064e:	b2ca      	uxtb	r2, r1
 8000650:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	3301      	adds	r3, #1
 8000656:	617b      	str	r3, [r7, #20]
 8000658:	697a      	ldr	r2, [r7, #20]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	429a      	cmp	r2, r3
 800065e:	dbf0      	blt.n	8000642 <_read+0x12>
	}

return len;
 8000660:	687b      	ldr	r3, [r7, #4]
}
 8000662:	4618      	mov	r0, r3
 8000664:	3718      	adds	r7, #24
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <_close>:
	}
	return len;
}

int _close(int file)
{
 800066a:	b480      	push	{r7}
 800066c:	b083      	sub	sp, #12
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
	return -1;
 8000672:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000676:	4618      	mov	r0, r3
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr

08000680 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000690:	605a      	str	r2, [r3, #4]
	return 0;
 8000692:	2300      	movs	r3, #0
}
 8000694:	4618      	mov	r0, r3
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr

0800069e <_isatty>:

int _isatty(int file)
{
 800069e:	b480      	push	{r7}
 80006a0:	b083      	sub	sp, #12
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
	return 1;
 80006a6:	2301      	movs	r3, #1
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr

080006b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006b2:	b480      	push	{r7}
 80006b4:	b085      	sub	sp, #20
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	60f8      	str	r0, [r7, #12]
 80006ba:	60b9      	str	r1, [r7, #8]
 80006bc:	607a      	str	r2, [r7, #4]
	return 0;
 80006be:	2300      	movs	r3, #0
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3714      	adds	r7, #20
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr
	...

080006cc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <_sbrk+0x50>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d102      	bne.n	80006e2 <_sbrk+0x16>
		heap_end = &end;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <_sbrk+0x50>)
 80006de:	4a10      	ldr	r2, [pc, #64]	; (8000720 <_sbrk+0x54>)
 80006e0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <_sbrk+0x50>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <_sbrk+0x50>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4413      	add	r3, r2
 80006f0:	466a      	mov	r2, sp
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d907      	bls.n	8000706 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80006f6:	f001 fc65 	bl	8001fc4 <__errno>
 80006fa:	4602      	mov	r2, r0
 80006fc:	230c      	movs	r3, #12
 80006fe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000700:	f04f 33ff 	mov.w	r3, #4294967295
 8000704:	e006      	b.n	8000714 <_sbrk+0x48>
	}

	heap_end += incr;
 8000706:	4b05      	ldr	r3, [pc, #20]	; (800071c <_sbrk+0x50>)
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4413      	add	r3, r2
 800070e:	4a03      	ldr	r2, [pc, #12]	; (800071c <_sbrk+0x50>)
 8000710:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000712:	68fb      	ldr	r3, [r7, #12]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	2000008c 	.word	0x2000008c
 8000720:	200000f8 	.word	0x200000f8

08000724 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000728:	4b15      	ldr	r3, [pc, #84]	; (8000780 <SystemInit+0x5c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a14      	ldr	r2, [pc, #80]	; (8000780 <SystemInit+0x5c>)
 800072e:	f043 0301 	orr.w	r3, r3, #1
 8000732:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <SystemInit+0x5c>)
 8000736:	685a      	ldr	r2, [r3, #4]
 8000738:	4911      	ldr	r1, [pc, #68]	; (8000780 <SystemInit+0x5c>)
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <SystemInit+0x60>)
 800073c:	4013      	ands	r3, r2
 800073e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <SystemInit+0x5c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a0e      	ldr	r2, [pc, #56]	; (8000780 <SystemInit+0x5c>)
 8000746:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800074a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800074e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000750:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <SystemInit+0x5c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <SystemInit+0x5c>)
 8000756:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800075a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800075c:	4b08      	ldr	r3, [pc, #32]	; (8000780 <SystemInit+0x5c>)
 800075e:	685b      	ldr	r3, [r3, #4]
 8000760:	4a07      	ldr	r2, [pc, #28]	; (8000780 <SystemInit+0x5c>)
 8000762:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000766:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <SystemInit+0x5c>)
 800076a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800076e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <SystemInit+0x64>)
 8000772:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000776:	609a      	str	r2, [r3, #8]
#endif 
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr
 8000780:	40021000 	.word	0x40021000
 8000784:	f8ff0000 	.word	0xf8ff0000
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800078c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800078e:	e003      	b.n	8000798 <LoopCopyDataInit>

08000790 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000790:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000792:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000794:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000796:	3104      	adds	r1, #4

08000798 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000798:	480a      	ldr	r0, [pc, #40]	; (80007c4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800079c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800079e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80007a0:	d3f6      	bcc.n	8000790 <CopyDataInit>
  ldr r2, =_sbss
 80007a2:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80007a4:	e002      	b.n	80007ac <LoopFillZerobss>

080007a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80007a8:	f842 3b04 	str.w	r3, [r2], #4

080007ac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80007ac:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80007ae:	429a      	cmp	r2, r3
  bcc FillZerobss
 80007b0:	d3f9      	bcc.n	80007a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007b2:	f7ff ffb7 	bl	8000724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007b6:	f001 fc0b 	bl	8001fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ba:	f7ff fced 	bl	8000198 <main>
  bx lr
 80007be:	4770      	bx	lr
  ldr r3, =_sidata
 80007c0:	08002fd0 	.word	0x08002fd0
  ldr r0, =_sdata
 80007c4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80007c8:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80007cc:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80007d0:	200000f8 	.word	0x200000f8

080007d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007d4:	e7fe      	b.n	80007d4 <ADC1_2_IRQHandler>
	...

080007d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <HAL_Init+0x28>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a07      	ldr	r2, [pc, #28]	; (8000800 <HAL_Init+0x28>)
 80007e2:	f043 0310 	orr.w	r3, r3, #16
 80007e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e8:	2003      	movs	r0, #3
 80007ea:	f000 f929 	bl	8000a40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ee:	2000      	movs	r0, #0
 80007f0:	f000 f808 	bl	8000804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007f4:	f7ff fe74 	bl	80004e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40022000 	.word	0x40022000

08000804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <HAL_InitTick+0x54>)
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <HAL_InitTick+0x58>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	4619      	mov	r1, r3
 8000816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800081a:	fbb3 f3f1 	udiv	r3, r3, r1
 800081e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000822:	4618      	mov	r0, r3
 8000824:	f000 f933 	bl	8000a8e <HAL_SYSTICK_Config>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800082e:	2301      	movs	r3, #1
 8000830:	e00e      	b.n	8000850 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b0f      	cmp	r3, #15
 8000836:	d80a      	bhi.n	800084e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000838:	2200      	movs	r2, #0
 800083a:	6879      	ldr	r1, [r7, #4]
 800083c:	f04f 30ff 	mov.w	r0, #4294967295
 8000840:	f000 f909 	bl	8000a56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000844:	4a06      	ldr	r2, [pc, #24]	; (8000860 <HAL_InitTick+0x5c>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800084a:	2300      	movs	r3, #0
 800084c:	e000      	b.n	8000850 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
}
 8000850:	4618      	mov	r0, r3
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000000 	.word	0x20000000
 800085c:	20000008 	.word	0x20000008
 8000860:	20000004 	.word	0x20000004

08000864 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <HAL_IncTick+0x1c>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	461a      	mov	r2, r3
 800086e:	4b05      	ldr	r3, [pc, #20]	; (8000884 <HAL_IncTick+0x20>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4413      	add	r3, r2
 8000874:	4a03      	ldr	r2, [pc, #12]	; (8000884 <HAL_IncTick+0x20>)
 8000876:	6013      	str	r3, [r2, #0]
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr
 8000880:	20000008 	.word	0x20000008
 8000884:	200000f0 	.word	0x200000f0

08000888 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  return uwTick;
 800088c:	4b02      	ldr	r3, [pc, #8]	; (8000898 <HAL_GetTick+0x10>)
 800088e:	681b      	ldr	r3, [r3, #0]
}
 8000890:	4618      	mov	r0, r3
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr
 8000898:	200000f0 	.word	0x200000f0

0800089c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008a4:	f7ff fff0 	bl	8000888 <HAL_GetTick>
 80008a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008b4:	d005      	beq.n	80008c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <HAL_Delay+0x40>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	461a      	mov	r2, r3
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	4413      	add	r3, r2
 80008c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008c2:	bf00      	nop
 80008c4:	f7ff ffe0 	bl	8000888 <HAL_GetTick>
 80008c8:	4602      	mov	r2, r0
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	68fa      	ldr	r2, [r7, #12]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d8f7      	bhi.n	80008c4 <HAL_Delay+0x28>
  {
  }
}
 80008d4:	bf00      	nop
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000008 	.word	0x20000008

080008e0 <__NVIC_SetPriorityGrouping>:
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	f003 0307 	and.w	r3, r3, #7
 80008ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <__NVIC_SetPriorityGrouping+0x44>)
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008f6:	68ba      	ldr	r2, [r7, #8]
 80008f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008fc:	4013      	ands	r3, r2
 80008fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000908:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800090c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000912:	4a04      	ldr	r2, [pc, #16]	; (8000924 <__NVIC_SetPriorityGrouping+0x44>)
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	60d3      	str	r3, [r2, #12]
}
 8000918:	bf00      	nop
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <__NVIC_GetPriorityGrouping>:
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800092c:	4b04      	ldr	r3, [pc, #16]	; (8000940 <__NVIC_GetPriorityGrouping+0x18>)
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	0a1b      	lsrs	r3, r3, #8
 8000932:	f003 0307 	and.w	r3, r3, #7
}
 8000936:	4618      	mov	r0, r3
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <__NVIC_SetPriority>:
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	6039      	str	r1, [r7, #0]
 800094e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000954:	2b00      	cmp	r3, #0
 8000956:	db0a      	blt.n	800096e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	b2da      	uxtb	r2, r3
 800095c:	490c      	ldr	r1, [pc, #48]	; (8000990 <__NVIC_SetPriority+0x4c>)
 800095e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000962:	0112      	lsls	r2, r2, #4
 8000964:	b2d2      	uxtb	r2, r2
 8000966:	440b      	add	r3, r1
 8000968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800096c:	e00a      	b.n	8000984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	b2da      	uxtb	r2, r3
 8000972:	4908      	ldr	r1, [pc, #32]	; (8000994 <__NVIC_SetPriority+0x50>)
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	f003 030f 	and.w	r3, r3, #15
 800097a:	3b04      	subs	r3, #4
 800097c:	0112      	lsls	r2, r2, #4
 800097e:	b2d2      	uxtb	r2, r2
 8000980:	440b      	add	r3, r1
 8000982:	761a      	strb	r2, [r3, #24]
}
 8000984:	bf00      	nop
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000e100 	.word	0xe000e100
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <NVIC_EncodePriority>:
{
 8000998:	b480      	push	{r7}
 800099a:	b089      	sub	sp, #36	; 0x24
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	f003 0307 	and.w	r3, r3, #7
 80009aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	f1c3 0307 	rsb	r3, r3, #7
 80009b2:	2b04      	cmp	r3, #4
 80009b4:	bf28      	it	cs
 80009b6:	2304      	movcs	r3, #4
 80009b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	3304      	adds	r3, #4
 80009be:	2b06      	cmp	r3, #6
 80009c0:	d902      	bls.n	80009c8 <NVIC_EncodePriority+0x30>
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	3b03      	subs	r3, #3
 80009c6:	e000      	b.n	80009ca <NVIC_EncodePriority+0x32>
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009cc:	f04f 32ff 	mov.w	r2, #4294967295
 80009d0:	69bb      	ldr	r3, [r7, #24]
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	43da      	mvns	r2, r3
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	401a      	ands	r2, r3
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009e0:	f04f 31ff 	mov.w	r1, #4294967295
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ea:	43d9      	mvns	r1, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f0:	4313      	orrs	r3, r2
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3724      	adds	r7, #36	; 0x24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr

080009fc <SysTick_Config>:
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a0c:	d301      	bcc.n	8000a12 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e00f      	b.n	8000a32 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a12:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <SysTick_Config+0x40>)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a1a:	210f      	movs	r1, #15
 8000a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a20:	f7ff ff90 	bl	8000944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <SysTick_Config+0x40>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a2a:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <SysTick_Config+0x40>)
 8000a2c:	2207      	movs	r2, #7
 8000a2e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	e000e010 	.word	0xe000e010

08000a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f7ff ff49 	bl	80008e0 <__NVIC_SetPriorityGrouping>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b086      	sub	sp, #24
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	60b9      	str	r1, [r7, #8]
 8000a60:	607a      	str	r2, [r7, #4]
 8000a62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a68:	f7ff ff5e 	bl	8000928 <__NVIC_GetPriorityGrouping>
 8000a6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	68b9      	ldr	r1, [r7, #8]
 8000a72:	6978      	ldr	r0, [r7, #20]
 8000a74:	f7ff ff90 	bl	8000998 <NVIC_EncodePriority>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a7e:	4611      	mov	r1, r2
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff ff5f 	bl	8000944 <__NVIC_SetPriority>
}
 8000a86:	bf00      	nop
 8000a88:	3718      	adds	r7, #24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f7ff ffb0 	bl	80009fc <SysTick_Config>
 8000a9c:	4603      	mov	r3, r0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b08b      	sub	sp, #44	; 0x2c
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aba:	e127      	b.n	8000d0c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000abc:	2201      	movs	r2, #1
 8000abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	69fa      	ldr	r2, [r7, #28]
 8000acc:	4013      	ands	r3, r2
 8000ace:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ad0:	69ba      	ldr	r2, [r7, #24]
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	f040 8116 	bne.w	8000d06 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	2b12      	cmp	r3, #18
 8000ae0:	d034      	beq.n	8000b4c <HAL_GPIO_Init+0xa4>
 8000ae2:	2b12      	cmp	r3, #18
 8000ae4:	d80d      	bhi.n	8000b02 <HAL_GPIO_Init+0x5a>
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d02b      	beq.n	8000b42 <HAL_GPIO_Init+0x9a>
 8000aea:	2b02      	cmp	r3, #2
 8000aec:	d804      	bhi.n	8000af8 <HAL_GPIO_Init+0x50>
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d031      	beq.n	8000b56 <HAL_GPIO_Init+0xae>
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d01c      	beq.n	8000b30 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000af6:	e048      	b.n	8000b8a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000af8:	2b03      	cmp	r3, #3
 8000afa:	d043      	beq.n	8000b84 <HAL_GPIO_Init+0xdc>
 8000afc:	2b11      	cmp	r3, #17
 8000afe:	d01b      	beq.n	8000b38 <HAL_GPIO_Init+0x90>
          break;
 8000b00:	e043      	b.n	8000b8a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b02:	4a89      	ldr	r2, [pc, #548]	; (8000d28 <HAL_GPIO_Init+0x280>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d026      	beq.n	8000b56 <HAL_GPIO_Init+0xae>
 8000b08:	4a87      	ldr	r2, [pc, #540]	; (8000d28 <HAL_GPIO_Init+0x280>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d806      	bhi.n	8000b1c <HAL_GPIO_Init+0x74>
 8000b0e:	4a87      	ldr	r2, [pc, #540]	; (8000d2c <HAL_GPIO_Init+0x284>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d020      	beq.n	8000b56 <HAL_GPIO_Init+0xae>
 8000b14:	4a86      	ldr	r2, [pc, #536]	; (8000d30 <HAL_GPIO_Init+0x288>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d01d      	beq.n	8000b56 <HAL_GPIO_Init+0xae>
          break;
 8000b1a:	e036      	b.n	8000b8a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b1c:	4a85      	ldr	r2, [pc, #532]	; (8000d34 <HAL_GPIO_Init+0x28c>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d019      	beq.n	8000b56 <HAL_GPIO_Init+0xae>
 8000b22:	4a85      	ldr	r2, [pc, #532]	; (8000d38 <HAL_GPIO_Init+0x290>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d016      	beq.n	8000b56 <HAL_GPIO_Init+0xae>
 8000b28:	4a84      	ldr	r2, [pc, #528]	; (8000d3c <HAL_GPIO_Init+0x294>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d013      	beq.n	8000b56 <HAL_GPIO_Init+0xae>
          break;
 8000b2e:	e02c      	b.n	8000b8a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	623b      	str	r3, [r7, #32]
          break;
 8000b36:	e028      	b.n	8000b8a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	3304      	adds	r3, #4
 8000b3e:	623b      	str	r3, [r7, #32]
          break;
 8000b40:	e023      	b.n	8000b8a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	68db      	ldr	r3, [r3, #12]
 8000b46:	3308      	adds	r3, #8
 8000b48:	623b      	str	r3, [r7, #32]
          break;
 8000b4a:	e01e      	b.n	8000b8a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	330c      	adds	r3, #12
 8000b52:	623b      	str	r3, [r7, #32]
          break;
 8000b54:	e019      	b.n	8000b8a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d102      	bne.n	8000b64 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b5e:	2304      	movs	r3, #4
 8000b60:	623b      	str	r3, [r7, #32]
          break;
 8000b62:	e012      	b.n	8000b8a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d105      	bne.n	8000b78 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b6c:	2308      	movs	r3, #8
 8000b6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	69fa      	ldr	r2, [r7, #28]
 8000b74:	611a      	str	r2, [r3, #16]
          break;
 8000b76:	e008      	b.n	8000b8a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b78:	2308      	movs	r3, #8
 8000b7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	69fa      	ldr	r2, [r7, #28]
 8000b80:	615a      	str	r2, [r3, #20]
          break;
 8000b82:	e002      	b.n	8000b8a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]
          break;
 8000b88:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	2bff      	cmp	r3, #255	; 0xff
 8000b8e:	d801      	bhi.n	8000b94 <HAL_GPIO_Init+0xec>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	e001      	b.n	8000b98 <HAL_GPIO_Init+0xf0>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3304      	adds	r3, #4
 8000b98:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b9a:	69bb      	ldr	r3, [r7, #24]
 8000b9c:	2bff      	cmp	r3, #255	; 0xff
 8000b9e:	d802      	bhi.n	8000ba6 <HAL_GPIO_Init+0xfe>
 8000ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	e002      	b.n	8000bac <HAL_GPIO_Init+0x104>
 8000ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba8:	3b08      	subs	r3, #8
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	210f      	movs	r1, #15
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	401a      	ands	r2, r3
 8000bbe:	6a39      	ldr	r1, [r7, #32]
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc6:	431a      	orrs	r2, r3
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	f000 8096 	beq.w	8000d06 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bda:	4b59      	ldr	r3, [pc, #356]	; (8000d40 <HAL_GPIO_Init+0x298>)
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	4a58      	ldr	r2, [pc, #352]	; (8000d40 <HAL_GPIO_Init+0x298>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6193      	str	r3, [r2, #24]
 8000be6:	4b56      	ldr	r3, [pc, #344]	; (8000d40 <HAL_GPIO_Init+0x298>)
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bf2:	4a54      	ldr	r2, [pc, #336]	; (8000d44 <HAL_GPIO_Init+0x29c>)
 8000bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf6:	089b      	lsrs	r3, r3, #2
 8000bf8:	3302      	adds	r3, #2
 8000bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bfe:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c02:	f003 0303 	and.w	r3, r3, #3
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	220f      	movs	r2, #15
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	68fa      	ldr	r2, [r7, #12]
 8000c12:	4013      	ands	r3, r2
 8000c14:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a4b      	ldr	r2, [pc, #300]	; (8000d48 <HAL_GPIO_Init+0x2a0>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d013      	beq.n	8000c46 <HAL_GPIO_Init+0x19e>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a4a      	ldr	r2, [pc, #296]	; (8000d4c <HAL_GPIO_Init+0x2a4>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d00d      	beq.n	8000c42 <HAL_GPIO_Init+0x19a>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a49      	ldr	r2, [pc, #292]	; (8000d50 <HAL_GPIO_Init+0x2a8>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d007      	beq.n	8000c3e <HAL_GPIO_Init+0x196>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a48      	ldr	r2, [pc, #288]	; (8000d54 <HAL_GPIO_Init+0x2ac>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d101      	bne.n	8000c3a <HAL_GPIO_Init+0x192>
 8000c36:	2303      	movs	r3, #3
 8000c38:	e006      	b.n	8000c48 <HAL_GPIO_Init+0x1a0>
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	e004      	b.n	8000c48 <HAL_GPIO_Init+0x1a0>
 8000c3e:	2302      	movs	r3, #2
 8000c40:	e002      	b.n	8000c48 <HAL_GPIO_Init+0x1a0>
 8000c42:	2301      	movs	r3, #1
 8000c44:	e000      	b.n	8000c48 <HAL_GPIO_Init+0x1a0>
 8000c46:	2300      	movs	r3, #0
 8000c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c4a:	f002 0203 	and.w	r2, r2, #3
 8000c4e:	0092      	lsls	r2, r2, #2
 8000c50:	4093      	lsls	r3, r2
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c58:	493a      	ldr	r1, [pc, #232]	; (8000d44 <HAL_GPIO_Init+0x29c>)
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5c:	089b      	lsrs	r3, r3, #2
 8000c5e:	3302      	adds	r3, #2
 8000c60:	68fa      	ldr	r2, [r7, #12]
 8000c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d006      	beq.n	8000c80 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c72:	4b39      	ldr	r3, [pc, #228]	; (8000d58 <HAL_GPIO_Init+0x2b0>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	4938      	ldr	r1, [pc, #224]	; (8000d58 <HAL_GPIO_Init+0x2b0>)
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	600b      	str	r3, [r1, #0]
 8000c7e:	e006      	b.n	8000c8e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c80:	4b35      	ldr	r3, [pc, #212]	; (8000d58 <HAL_GPIO_Init+0x2b0>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	43db      	mvns	r3, r3
 8000c88:	4933      	ldr	r1, [pc, #204]	; (8000d58 <HAL_GPIO_Init+0x2b0>)
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d006      	beq.n	8000ca8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c9a:	4b2f      	ldr	r3, [pc, #188]	; (8000d58 <HAL_GPIO_Init+0x2b0>)
 8000c9c:	685a      	ldr	r2, [r3, #4]
 8000c9e:	492e      	ldr	r1, [pc, #184]	; (8000d58 <HAL_GPIO_Init+0x2b0>)
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	604b      	str	r3, [r1, #4]
 8000ca6:	e006      	b.n	8000cb6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ca8:	4b2b      	ldr	r3, [pc, #172]	; (8000d58 <HAL_GPIO_Init+0x2b0>)
 8000caa:	685a      	ldr	r2, [r3, #4]
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	4929      	ldr	r1, [pc, #164]	; (8000d58 <HAL_GPIO_Init+0x2b0>)
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d006      	beq.n	8000cd0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cc2:	4b25      	ldr	r3, [pc, #148]	; (8000d58 <HAL_GPIO_Init+0x2b0>)
 8000cc4:	689a      	ldr	r2, [r3, #8]
 8000cc6:	4924      	ldr	r1, [pc, #144]	; (8000d58 <HAL_GPIO_Init+0x2b0>)
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	608b      	str	r3, [r1, #8]
 8000cce:	e006      	b.n	8000cde <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cd0:	4b21      	ldr	r3, [pc, #132]	; (8000d58 <HAL_GPIO_Init+0x2b0>)
 8000cd2:	689a      	ldr	r2, [r3, #8]
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	491f      	ldr	r1, [pc, #124]	; (8000d58 <HAL_GPIO_Init+0x2b0>)
 8000cda:	4013      	ands	r3, r2
 8000cdc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d006      	beq.n	8000cf8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cea:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <HAL_GPIO_Init+0x2b0>)
 8000cec:	68da      	ldr	r2, [r3, #12]
 8000cee:	491a      	ldr	r1, [pc, #104]	; (8000d58 <HAL_GPIO_Init+0x2b0>)
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	60cb      	str	r3, [r1, #12]
 8000cf6:	e006      	b.n	8000d06 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cf8:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <HAL_GPIO_Init+0x2b0>)
 8000cfa:	68da      	ldr	r2, [r3, #12]
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	4915      	ldr	r1, [pc, #84]	; (8000d58 <HAL_GPIO_Init+0x2b0>)
 8000d02:	4013      	ands	r3, r2
 8000d04:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d08:	3301      	adds	r3, #1
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d12:	fa22 f303 	lsr.w	r3, r2, r3
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f47f aed0 	bne.w	8000abc <HAL_GPIO_Init+0x14>
  }
}
 8000d1c:	bf00      	nop
 8000d1e:	372c      	adds	r7, #44	; 0x2c
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	10210000 	.word	0x10210000
 8000d2c:	10110000 	.word	0x10110000
 8000d30:	10120000 	.word	0x10120000
 8000d34:	10310000 	.word	0x10310000
 8000d38:	10320000 	.word	0x10320000
 8000d3c:	10220000 	.word	0x10220000
 8000d40:	40021000 	.word	0x40021000
 8000d44:	40010000 	.word	0x40010000
 8000d48:	40010800 	.word	0x40010800
 8000d4c:	40010c00 	.word	0x40010c00
 8000d50:	40011000 	.word	0x40011000
 8000d54:	40011400 	.word	0x40011400
 8000d58:	40010400 	.word	0x40010400

08000d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	460b      	mov	r3, r1
 8000d66:	807b      	strh	r3, [r7, #2]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d6c:	787b      	ldrb	r3, [r7, #1]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d003      	beq.n	8000d7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d72:	887a      	ldrh	r2, [r7, #2]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d78:	e003      	b.n	8000d82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d7a:	887b      	ldrh	r3, [r7, #2]
 8000d7c:	041a      	lsls	r2, r3, #16
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	611a      	str	r2, [r3, #16]
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr

08000d8c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	68da      	ldr	r2, [r3, #12]
 8000d9c:	887b      	ldrh	r3, [r7, #2]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d003      	beq.n	8000dac <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000da4:	887a      	ldrh	r2, [r7, #2]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000daa:	e002      	b.n	8000db2 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dac:	887a      	ldrh	r2, [r7, #2]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	611a      	str	r2, [r3, #16]
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr

08000dbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d101      	bne.n	8000dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e26c      	b.n	80012a8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f000 8087 	beq.w	8000eea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ddc:	4b92      	ldr	r3, [pc, #584]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 030c 	and.w	r3, r3, #12
 8000de4:	2b04      	cmp	r3, #4
 8000de6:	d00c      	beq.n	8000e02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000de8:	4b8f      	ldr	r3, [pc, #572]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 030c 	and.w	r3, r3, #12
 8000df0:	2b08      	cmp	r3, #8
 8000df2:	d112      	bne.n	8000e1a <HAL_RCC_OscConfig+0x5e>
 8000df4:	4b8c      	ldr	r3, [pc, #560]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e00:	d10b      	bne.n	8000e1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e02:	4b89      	ldr	r3, [pc, #548]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d06c      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x12c>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d168      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e246      	b.n	80012a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e22:	d106      	bne.n	8000e32 <HAL_RCC_OscConfig+0x76>
 8000e24:	4b80      	ldr	r3, [pc, #512]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a7f      	ldr	r2, [pc, #508]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	e02e      	b.n	8000e90 <HAL_RCC_OscConfig+0xd4>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d10c      	bne.n	8000e54 <HAL_RCC_OscConfig+0x98>
 8000e3a:	4b7b      	ldr	r3, [pc, #492]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a7a      	ldr	r2, [pc, #488]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	4b78      	ldr	r3, [pc, #480]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a77      	ldr	r2, [pc, #476]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e50:	6013      	str	r3, [r2, #0]
 8000e52:	e01d      	b.n	8000e90 <HAL_RCC_OscConfig+0xd4>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e5c:	d10c      	bne.n	8000e78 <HAL_RCC_OscConfig+0xbc>
 8000e5e:	4b72      	ldr	r3, [pc, #456]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a71      	ldr	r2, [pc, #452]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e68:	6013      	str	r3, [r2, #0]
 8000e6a:	4b6f      	ldr	r3, [pc, #444]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a6e      	ldr	r2, [pc, #440]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e74:	6013      	str	r3, [r2, #0]
 8000e76:	e00b      	b.n	8000e90 <HAL_RCC_OscConfig+0xd4>
 8000e78:	4b6b      	ldr	r3, [pc, #428]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a6a      	ldr	r2, [pc, #424]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e82:	6013      	str	r3, [r2, #0]
 8000e84:	4b68      	ldr	r3, [pc, #416]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a67      	ldr	r2, [pc, #412]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d013      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e98:	f7ff fcf6 	bl	8000888 <HAL_GetTick>
 8000e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e9e:	e008      	b.n	8000eb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ea0:	f7ff fcf2 	bl	8000888 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	2b64      	cmp	r3, #100	; 0x64
 8000eac:	d901      	bls.n	8000eb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e1fa      	b.n	80012a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eb2:	4b5d      	ldr	r3, [pc, #372]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d0f0      	beq.n	8000ea0 <HAL_RCC_OscConfig+0xe4>
 8000ebe:	e014      	b.n	8000eea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec0:	f7ff fce2 	bl	8000888 <HAL_GetTick>
 8000ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ec6:	e008      	b.n	8000eda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ec8:	f7ff fcde 	bl	8000888 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b64      	cmp	r3, #100	; 0x64
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e1e6      	b.n	80012a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eda:	4b53      	ldr	r3, [pc, #332]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d1f0      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x10c>
 8000ee6:	e000      	b.n	8000eea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d063      	beq.n	8000fbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ef6:	4b4c      	ldr	r3, [pc, #304]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f003 030c 	and.w	r3, r3, #12
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d00b      	beq.n	8000f1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f02:	4b49      	ldr	r3, [pc, #292]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 030c 	and.w	r3, r3, #12
 8000f0a:	2b08      	cmp	r3, #8
 8000f0c:	d11c      	bne.n	8000f48 <HAL_RCC_OscConfig+0x18c>
 8000f0e:	4b46      	ldr	r3, [pc, #280]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d116      	bne.n	8000f48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f1a:	4b43      	ldr	r3, [pc, #268]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d005      	beq.n	8000f32 <HAL_RCC_OscConfig+0x176>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	691b      	ldr	r3, [r3, #16]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d001      	beq.n	8000f32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e1ba      	b.n	80012a8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f32:	4b3d      	ldr	r3, [pc, #244]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	4939      	ldr	r1, [pc, #228]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f42:	4313      	orrs	r3, r2
 8000f44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f46:	e03a      	b.n	8000fbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d020      	beq.n	8000f92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f50:	4b36      	ldr	r3, [pc, #216]	; (800102c <HAL_RCC_OscConfig+0x270>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f56:	f7ff fc97 	bl	8000888 <HAL_GetTick>
 8000f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f5c:	e008      	b.n	8000f70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f5e:	f7ff fc93 	bl	8000888 <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d901      	bls.n	8000f70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e19b      	b.n	80012a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f70:	4b2d      	ldr	r3, [pc, #180]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 0302 	and.w	r3, r3, #2
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d0f0      	beq.n	8000f5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f7c:	4b2a      	ldr	r3, [pc, #168]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	4927      	ldr	r1, [pc, #156]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	600b      	str	r3, [r1, #0]
 8000f90:	e015      	b.n	8000fbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f92:	4b26      	ldr	r3, [pc, #152]	; (800102c <HAL_RCC_OscConfig+0x270>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f98:	f7ff fc76 	bl	8000888 <HAL_GetTick>
 8000f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f9e:	e008      	b.n	8000fb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fa0:	f7ff fc72 	bl	8000888 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d901      	bls.n	8000fb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e17a      	b.n	80012a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fb2:	4b1d      	ldr	r3, [pc, #116]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d1f0      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0308 	and.w	r3, r3, #8
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d03a      	beq.n	8001040 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d019      	beq.n	8001006 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fd2:	4b17      	ldr	r3, [pc, #92]	; (8001030 <HAL_RCC_OscConfig+0x274>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fd8:	f7ff fc56 	bl	8000888 <HAL_GetTick>
 8000fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fde:	e008      	b.n	8000ff2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fe0:	f7ff fc52 	bl	8000888 <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d901      	bls.n	8000ff2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	e15a      	b.n	80012a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d0f0      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ffe:	2001      	movs	r0, #1
 8001000:	f000 faa8 	bl	8001554 <RCC_Delay>
 8001004:	e01c      	b.n	8001040 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <HAL_RCC_OscConfig+0x274>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800100c:	f7ff fc3c 	bl	8000888 <HAL_GetTick>
 8001010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001012:	e00f      	b.n	8001034 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001014:	f7ff fc38 	bl	8000888 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b02      	cmp	r3, #2
 8001020:	d908      	bls.n	8001034 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e140      	b.n	80012a8 <HAL_RCC_OscConfig+0x4ec>
 8001026:	bf00      	nop
 8001028:	40021000 	.word	0x40021000
 800102c:	42420000 	.word	0x42420000
 8001030:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001034:	4b9e      	ldr	r3, [pc, #632]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 8001036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d1e9      	bne.n	8001014 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0304 	and.w	r3, r3, #4
 8001048:	2b00      	cmp	r3, #0
 800104a:	f000 80a6 	beq.w	800119a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800104e:	2300      	movs	r3, #0
 8001050:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001052:	4b97      	ldr	r3, [pc, #604]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d10d      	bne.n	800107a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800105e:	4b94      	ldr	r3, [pc, #592]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	4a93      	ldr	r2, [pc, #588]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 8001064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001068:	61d3      	str	r3, [r2, #28]
 800106a:	4b91      	ldr	r3, [pc, #580]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001076:	2301      	movs	r3, #1
 8001078:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800107a:	4b8e      	ldr	r3, [pc, #568]	; (80012b4 <HAL_RCC_OscConfig+0x4f8>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001082:	2b00      	cmp	r3, #0
 8001084:	d118      	bne.n	80010b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001086:	4b8b      	ldr	r3, [pc, #556]	; (80012b4 <HAL_RCC_OscConfig+0x4f8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a8a      	ldr	r2, [pc, #552]	; (80012b4 <HAL_RCC_OscConfig+0x4f8>)
 800108c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001090:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001092:	f7ff fbf9 	bl	8000888 <HAL_GetTick>
 8001096:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001098:	e008      	b.n	80010ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800109a:	f7ff fbf5 	bl	8000888 <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b64      	cmp	r3, #100	; 0x64
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e0fd      	b.n	80012a8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ac:	4b81      	ldr	r3, [pc, #516]	; (80012b4 <HAL_RCC_OscConfig+0x4f8>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0f0      	beq.n	800109a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d106      	bne.n	80010ce <HAL_RCC_OscConfig+0x312>
 80010c0:	4b7b      	ldr	r3, [pc, #492]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 80010c2:	6a1b      	ldr	r3, [r3, #32]
 80010c4:	4a7a      	ldr	r2, [pc, #488]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	6213      	str	r3, [r2, #32]
 80010cc:	e02d      	b.n	800112a <HAL_RCC_OscConfig+0x36e>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10c      	bne.n	80010f0 <HAL_RCC_OscConfig+0x334>
 80010d6:	4b76      	ldr	r3, [pc, #472]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 80010d8:	6a1b      	ldr	r3, [r3, #32]
 80010da:	4a75      	ldr	r2, [pc, #468]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 80010dc:	f023 0301 	bic.w	r3, r3, #1
 80010e0:	6213      	str	r3, [r2, #32]
 80010e2:	4b73      	ldr	r3, [pc, #460]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 80010e4:	6a1b      	ldr	r3, [r3, #32]
 80010e6:	4a72      	ldr	r2, [pc, #456]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 80010e8:	f023 0304 	bic.w	r3, r3, #4
 80010ec:	6213      	str	r3, [r2, #32]
 80010ee:	e01c      	b.n	800112a <HAL_RCC_OscConfig+0x36e>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	2b05      	cmp	r3, #5
 80010f6:	d10c      	bne.n	8001112 <HAL_RCC_OscConfig+0x356>
 80010f8:	4b6d      	ldr	r3, [pc, #436]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 80010fa:	6a1b      	ldr	r3, [r3, #32]
 80010fc:	4a6c      	ldr	r2, [pc, #432]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	6213      	str	r3, [r2, #32]
 8001104:	4b6a      	ldr	r3, [pc, #424]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 8001106:	6a1b      	ldr	r3, [r3, #32]
 8001108:	4a69      	ldr	r2, [pc, #420]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	6213      	str	r3, [r2, #32]
 8001110:	e00b      	b.n	800112a <HAL_RCC_OscConfig+0x36e>
 8001112:	4b67      	ldr	r3, [pc, #412]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 8001114:	6a1b      	ldr	r3, [r3, #32]
 8001116:	4a66      	ldr	r2, [pc, #408]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 8001118:	f023 0301 	bic.w	r3, r3, #1
 800111c:	6213      	str	r3, [r2, #32]
 800111e:	4b64      	ldr	r3, [pc, #400]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 8001120:	6a1b      	ldr	r3, [r3, #32]
 8001122:	4a63      	ldr	r2, [pc, #396]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 8001124:	f023 0304 	bic.w	r3, r3, #4
 8001128:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d015      	beq.n	800115e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001132:	f7ff fba9 	bl	8000888 <HAL_GetTick>
 8001136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001138:	e00a      	b.n	8001150 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800113a:	f7ff fba5 	bl	8000888 <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	f241 3288 	movw	r2, #5000	; 0x1388
 8001148:	4293      	cmp	r3, r2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e0ab      	b.n	80012a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001150:	4b57      	ldr	r3, [pc, #348]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d0ee      	beq.n	800113a <HAL_RCC_OscConfig+0x37e>
 800115c:	e014      	b.n	8001188 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800115e:	f7ff fb93 	bl	8000888 <HAL_GetTick>
 8001162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001164:	e00a      	b.n	800117c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001166:	f7ff fb8f 	bl	8000888 <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	f241 3288 	movw	r2, #5000	; 0x1388
 8001174:	4293      	cmp	r3, r2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e095      	b.n	80012a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800117c:	4b4c      	ldr	r3, [pc, #304]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1ee      	bne.n	8001166 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001188:	7dfb      	ldrb	r3, [r7, #23]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d105      	bne.n	800119a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800118e:	4b48      	ldr	r3, [pc, #288]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	4a47      	ldr	r2, [pc, #284]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 8001194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001198:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f000 8081 	beq.w	80012a6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011a4:	4b42      	ldr	r3, [pc, #264]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 030c 	and.w	r3, r3, #12
 80011ac:	2b08      	cmp	r3, #8
 80011ae:	d061      	beq.n	8001274 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	69db      	ldr	r3, [r3, #28]
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d146      	bne.n	8001246 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011b8:	4b3f      	ldr	r3, [pc, #252]	; (80012b8 <HAL_RCC_OscConfig+0x4fc>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011be:	f7ff fb63 	bl	8000888 <HAL_GetTick>
 80011c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011c4:	e008      	b.n	80011d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011c6:	f7ff fb5f 	bl	8000888 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d901      	bls.n	80011d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e067      	b.n	80012a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011d8:	4b35      	ldr	r3, [pc, #212]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1f0      	bne.n	80011c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ec:	d108      	bne.n	8001200 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011ee:	4b30      	ldr	r3, [pc, #192]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	492d      	ldr	r1, [pc, #180]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 80011fc:	4313      	orrs	r3, r2
 80011fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001200:	4b2b      	ldr	r3, [pc, #172]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a19      	ldr	r1, [r3, #32]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001210:	430b      	orrs	r3, r1
 8001212:	4927      	ldr	r1, [pc, #156]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 8001214:	4313      	orrs	r3, r2
 8001216:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001218:	4b27      	ldr	r3, [pc, #156]	; (80012b8 <HAL_RCC_OscConfig+0x4fc>)
 800121a:	2201      	movs	r2, #1
 800121c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121e:	f7ff fb33 	bl	8000888 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001226:	f7ff fb2f 	bl	8000888 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e037      	b.n	80012a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001238:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0f0      	beq.n	8001226 <HAL_RCC_OscConfig+0x46a>
 8001244:	e02f      	b.n	80012a6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001246:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <HAL_RCC_OscConfig+0x4fc>)
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124c:	f7ff fb1c 	bl	8000888 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001254:	f7ff fb18 	bl	8000888 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e020      	b.n	80012a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f0      	bne.n	8001254 <HAL_RCC_OscConfig+0x498>
 8001272:	e018      	b.n	80012a6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69db      	ldr	r3, [r3, #28]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d101      	bne.n	8001280 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e013      	b.n	80012a8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001280:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a1b      	ldr	r3, [r3, #32]
 8001290:	429a      	cmp	r2, r3
 8001292:	d106      	bne.n	80012a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800129e:	429a      	cmp	r2, r3
 80012a0:	d001      	beq.n	80012a6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e000      	b.n	80012a8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40007000 	.word	0x40007000
 80012b8:	42420060 	.word	0x42420060

080012bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d101      	bne.n	80012d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e0d0      	b.n	8001472 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012d0:	4b6a      	ldr	r3, [pc, #424]	; (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0307 	and.w	r3, r3, #7
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d910      	bls.n	8001300 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012de:	4b67      	ldr	r3, [pc, #412]	; (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f023 0207 	bic.w	r2, r3, #7
 80012e6:	4965      	ldr	r1, [pc, #404]	; (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ee:	4b63      	ldr	r3, [pc, #396]	; (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d001      	beq.n	8001300 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e0b8      	b.n	8001472 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d020      	beq.n	800134e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	2b00      	cmp	r3, #0
 8001316:	d005      	beq.n	8001324 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001318:	4b59      	ldr	r3, [pc, #356]	; (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	4a58      	ldr	r2, [pc, #352]	; (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800131e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001322:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0308 	and.w	r3, r3, #8
 800132c:	2b00      	cmp	r3, #0
 800132e:	d005      	beq.n	800133c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001330:	4b53      	ldr	r3, [pc, #332]	; (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	4a52      	ldr	r2, [pc, #328]	; (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 8001336:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800133a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800133c:	4b50      	ldr	r3, [pc, #320]	; (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	494d      	ldr	r1, [pc, #308]	; (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800134a:	4313      	orrs	r3, r2
 800134c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b00      	cmp	r3, #0
 8001358:	d040      	beq.n	80013dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d107      	bne.n	8001372 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001362:	4b47      	ldr	r3, [pc, #284]	; (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d115      	bne.n	800139a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e07f      	b.n	8001472 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b02      	cmp	r3, #2
 8001378:	d107      	bne.n	800138a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800137a:	4b41      	ldr	r3, [pc, #260]	; (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d109      	bne.n	800139a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e073      	b.n	8001472 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138a:	4b3d      	ldr	r3, [pc, #244]	; (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e06b      	b.n	8001472 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800139a:	4b39      	ldr	r3, [pc, #228]	; (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f023 0203 	bic.w	r2, r3, #3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	4936      	ldr	r1, [pc, #216]	; (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 80013a8:	4313      	orrs	r3, r2
 80013aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013ac:	f7ff fa6c 	bl	8000888 <HAL_GetTick>
 80013b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013b2:	e00a      	b.n	80013ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013b4:	f7ff fa68 	bl	8000888 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e053      	b.n	8001472 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ca:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 020c 	and.w	r2, r3, #12
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	429a      	cmp	r2, r3
 80013da:	d1eb      	bne.n	80013b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013dc:	4b27      	ldr	r3, [pc, #156]	; (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d210      	bcs.n	800140c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ea:	4b24      	ldr	r3, [pc, #144]	; (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 0207 	bic.w	r2, r3, #7
 80013f2:	4922      	ldr	r1, [pc, #136]	; (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fa:	4b20      	ldr	r3, [pc, #128]	; (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	d001      	beq.n	800140c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e032      	b.n	8001472 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	2b00      	cmp	r3, #0
 8001416:	d008      	beq.n	800142a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	4916      	ldr	r1, [pc, #88]	; (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 8001426:	4313      	orrs	r3, r2
 8001428:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d009      	beq.n	800144a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001436:	4b12      	ldr	r3, [pc, #72]	; (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	490e      	ldr	r1, [pc, #56]	; (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 8001446:	4313      	orrs	r3, r2
 8001448:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800144a:	f000 f821 	bl	8001490 <HAL_RCC_GetSysClockFreq>
 800144e:	4601      	mov	r1, r0
 8001450:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	091b      	lsrs	r3, r3, #4
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <HAL_RCC_ClockConfig+0x1c8>)
 800145c:	5cd3      	ldrb	r3, [r2, r3]
 800145e:	fa21 f303 	lsr.w	r3, r1, r3
 8001462:	4a09      	ldr	r2, [pc, #36]	; (8001488 <HAL_RCC_ClockConfig+0x1cc>)
 8001464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <HAL_RCC_ClockConfig+0x1d0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff f9ca 	bl	8000804 <HAL_InitTick>

  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40022000 	.word	0x40022000
 8001480:	40021000 	.word	0x40021000
 8001484:	08002f20 	.word	0x08002f20
 8001488:	20000000 	.word	0x20000000
 800148c:	20000004 	.word	0x20000004

08001490 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001490:	b490      	push	{r4, r7}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001496:	4b2a      	ldr	r3, [pc, #168]	; (8001540 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001498:	1d3c      	adds	r4, r7, #4
 800149a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800149c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80014a0:	4b28      	ldr	r3, [pc, #160]	; (8001544 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
 80014aa:	2300      	movs	r3, #0
 80014ac:	61bb      	str	r3, [r7, #24]
 80014ae:	2300      	movs	r3, #0
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014ba:	4b23      	ldr	r3, [pc, #140]	; (8001548 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f003 030c 	and.w	r3, r3, #12
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	d002      	beq.n	80014d0 <HAL_RCC_GetSysClockFreq+0x40>
 80014ca:	2b08      	cmp	r3, #8
 80014cc:	d003      	beq.n	80014d6 <HAL_RCC_GetSysClockFreq+0x46>
 80014ce:	e02d      	b.n	800152c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014d0:	4b1e      	ldr	r3, [pc, #120]	; (800154c <HAL_RCC_GetSysClockFreq+0xbc>)
 80014d2:	623b      	str	r3, [r7, #32]
      break;
 80014d4:	e02d      	b.n	8001532 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	0c9b      	lsrs	r3, r3, #18
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014e2:	4413      	add	r3, r2
 80014e4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80014e8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d013      	beq.n	800151c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014f4:	4b14      	ldr	r3, [pc, #80]	; (8001548 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	0c5b      	lsrs	r3, r3, #17
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001502:	4413      	add	r3, r2
 8001504:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001508:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	4a0f      	ldr	r2, [pc, #60]	; (800154c <HAL_RCC_GetSysClockFreq+0xbc>)
 800150e:	fb02 f203 	mul.w	r2, r2, r3
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	fbb2 f3f3 	udiv	r3, r2, r3
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
 800151a:	e004      	b.n	8001526 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	4a0c      	ldr	r2, [pc, #48]	; (8001550 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001520:	fb02 f303 	mul.w	r3, r2, r3
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	623b      	str	r3, [r7, #32]
      break;
 800152a:	e002      	b.n	8001532 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <HAL_RCC_GetSysClockFreq+0xbc>)
 800152e:	623b      	str	r3, [r7, #32]
      break;
 8001530:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001532:	6a3b      	ldr	r3, [r7, #32]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3728      	adds	r7, #40	; 0x28
 8001538:	46bd      	mov	sp, r7
 800153a:	bc90      	pop	{r4, r7}
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	08002f0c 	.word	0x08002f0c
 8001544:	08002f1c 	.word	0x08002f1c
 8001548:	40021000 	.word	0x40021000
 800154c:	007a1200 	.word	0x007a1200
 8001550:	003d0900 	.word	0x003d0900

08001554 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800155c:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <RCC_Delay+0x34>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0a      	ldr	r2, [pc, #40]	; (800158c <RCC_Delay+0x38>)
 8001562:	fba2 2303 	umull	r2, r3, r2, r3
 8001566:	0a5b      	lsrs	r3, r3, #9
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	fb02 f303 	mul.w	r3, r2, r3
 800156e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001570:	bf00      	nop
  }
  while (Delay --);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	1e5a      	subs	r2, r3, #1
 8001576:	60fa      	str	r2, [r7, #12]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1f9      	bne.n	8001570 <RCC_Delay+0x1c>
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	20000000 	.word	0x20000000
 800158c:	10624dd3 	.word	0x10624dd3

08001590 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e053      	b.n	800164a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d106      	bne.n	80015c2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7fe ffc1 	bl	8000544 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2202      	movs	r2, #2
 80015c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015d8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685a      	ldr	r2, [r3, #4]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	431a      	orrs	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	431a      	orrs	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	431a      	orrs	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015fe:	431a      	orrs	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	69db      	ldr	r3, [r3, #28]
 8001604:	431a      	orrs	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	ea42 0103 	orr.w	r1, r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	430a      	orrs	r2, r1
 8001618:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	0c1a      	lsrs	r2, r3, #16
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f002 0204 	and.w	r2, r2, #4
 8001628:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	69da      	ldr	r2, [r3, #28]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001638:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b088      	sub	sp, #32
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	603b      	str	r3, [r7, #0]
 800165e:	4613      	mov	r3, r2
 8001660:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800166c:	2b01      	cmp	r3, #1
 800166e:	d101      	bne.n	8001674 <HAL_SPI_Transmit+0x22>
 8001670:	2302      	movs	r3, #2
 8001672:	e11e      	b.n	80018b2 <HAL_SPI_Transmit+0x260>
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800167c:	f7ff f904 	bl	8000888 <HAL_GetTick>
 8001680:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b01      	cmp	r3, #1
 8001690:	d002      	beq.n	8001698 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001692:	2302      	movs	r3, #2
 8001694:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001696:	e103      	b.n	80018a0 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d002      	beq.n	80016a4 <HAL_SPI_Transmit+0x52>
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d102      	bne.n	80016aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80016a8:	e0fa      	b.n	80018a0 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2203      	movs	r2, #3
 80016ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2200      	movs	r2, #0
 80016b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	88fa      	ldrh	r2, [r7, #6]
 80016c2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	88fa      	ldrh	r2, [r7, #6]
 80016c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2200      	movs	r2, #0
 80016ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2200      	movs	r2, #0
 80016d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2200      	movs	r2, #0
 80016da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2200      	movs	r2, #0
 80016e0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2200      	movs	r2, #0
 80016e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016f0:	d107      	bne.n	8001702 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001700:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800170c:	2b40      	cmp	r3, #64	; 0x40
 800170e:	d007      	beq.n	8001720 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800171e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001728:	d14b      	bne.n	80017c2 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d002      	beq.n	8001738 <HAL_SPI_Transmit+0xe6>
 8001732:	8afb      	ldrh	r3, [r7, #22]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d13e      	bne.n	80017b6 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173c:	881a      	ldrh	r2, [r3, #0]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001748:	1c9a      	adds	r2, r3, #2
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001752:	b29b      	uxth	r3, r3
 8001754:	3b01      	subs	r3, #1
 8001756:	b29a      	uxth	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800175c:	e02b      	b.n	80017b6 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b02      	cmp	r3, #2
 800176a:	d112      	bne.n	8001792 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001770:	881a      	ldrh	r2, [r3, #0]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177c:	1c9a      	adds	r2, r3, #2
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001786:	b29b      	uxth	r3, r3
 8001788:	3b01      	subs	r3, #1
 800178a:	b29a      	uxth	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	86da      	strh	r2, [r3, #54]	; 0x36
 8001790:	e011      	b.n	80017b6 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001792:	f7ff f879 	bl	8000888 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d803      	bhi.n	80017aa <HAL_SPI_Transmit+0x158>
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a8:	d102      	bne.n	80017b0 <HAL_SPI_Transmit+0x15e>
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d102      	bne.n	80017b6 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80017b4:	e074      	b.n	80018a0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1ce      	bne.n	800175e <HAL_SPI_Transmit+0x10c>
 80017c0:	e04c      	b.n	800185c <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d002      	beq.n	80017d0 <HAL_SPI_Transmit+0x17e>
 80017ca:	8afb      	ldrh	r3, [r7, #22]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d140      	bne.n	8001852 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	330c      	adds	r3, #12
 80017da:	7812      	ldrb	r2, [r2, #0]
 80017dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	3b01      	subs	r3, #1
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80017f6:	e02c      	b.n	8001852 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b02      	cmp	r3, #2
 8001804:	d113      	bne.n	800182e <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	330c      	adds	r3, #12
 8001810:	7812      	ldrb	r2, [r2, #0]
 8001812:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001818:	1c5a      	adds	r2, r3, #1
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001822:	b29b      	uxth	r3, r3
 8001824:	3b01      	subs	r3, #1
 8001826:	b29a      	uxth	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	86da      	strh	r2, [r3, #54]	; 0x36
 800182c:	e011      	b.n	8001852 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800182e:	f7ff f82b 	bl	8000888 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d803      	bhi.n	8001846 <HAL_SPI_Transmit+0x1f4>
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001844:	d102      	bne.n	800184c <HAL_SPI_Transmit+0x1fa>
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d102      	bne.n	8001852 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001850:	e026      	b.n	80018a0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001856:	b29b      	uxth	r3, r3
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1cd      	bne.n	80017f8 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	6839      	ldr	r1, [r7, #0]
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f000 fb91 	bl	8001f88 <SPI_EndRxTxTransaction>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d002      	beq.n	8001872 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2220      	movs	r2, #32
 8001870:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10a      	bne.n	8001890 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001894:	2b00      	cmp	r3, #0
 8001896:	d002      	beq.n	800189e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	77fb      	strb	r3, [r7, #31]
 800189c:	e000      	b.n	80018a0 <HAL_SPI_Transmit+0x24e>
  }

error:
 800189e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80018b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3720      	adds	r7, #32
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b088      	sub	sp, #32
 80018be:	af02      	add	r7, sp, #8
 80018c0:	60f8      	str	r0, [r7, #12]
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	603b      	str	r3, [r7, #0]
 80018c6:	4613      	mov	r3, r2
 80018c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80018ca:	2300      	movs	r3, #0
 80018cc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80018d6:	d112      	bne.n	80018fe <HAL_SPI_Receive+0x44>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d10e      	bne.n	80018fe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2204      	movs	r2, #4
 80018e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80018e8:	88fa      	ldrh	r2, [r7, #6]
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	4613      	mov	r3, r2
 80018f0:	68ba      	ldr	r2, [r7, #8]
 80018f2:	68b9      	ldr	r1, [r7, #8]
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f000 f8e9 	bl	8001acc <HAL_SPI_TransmitReceive>
 80018fa:	4603      	mov	r3, r0
 80018fc:	e0e2      	b.n	8001ac4 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001904:	2b01      	cmp	r3, #1
 8001906:	d101      	bne.n	800190c <HAL_SPI_Receive+0x52>
 8001908:	2302      	movs	r3, #2
 800190a:	e0db      	b.n	8001ac4 <HAL_SPI_Receive+0x20a>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001914:	f7fe ffb8 	bl	8000888 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b01      	cmp	r3, #1
 8001924:	d002      	beq.n	800192c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001926:	2302      	movs	r3, #2
 8001928:	75fb      	strb	r3, [r7, #23]
    goto error;
 800192a:	e0c2      	b.n	8001ab2 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d002      	beq.n	8001938 <HAL_SPI_Receive+0x7e>
 8001932:	88fb      	ldrh	r3, [r7, #6]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d102      	bne.n	800193e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800193c:	e0b9      	b.n	8001ab2 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2204      	movs	r2, #4
 8001942:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2200      	movs	r2, #0
 800194a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	88fa      	ldrh	r2, [r7, #6]
 8001956:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	88fa      	ldrh	r2, [r7, #6]
 800195c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2200      	movs	r2, #0
 8001962:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2200      	movs	r2, #0
 8001968:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2200      	movs	r2, #0
 800196e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2200      	movs	r2, #0
 8001974:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2200      	movs	r2, #0
 800197a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001984:	d107      	bne.n	8001996 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001994:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019a0:	2b40      	cmp	r3, #64	; 0x40
 80019a2:	d007      	beq.n	80019b4 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019b2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d162      	bne.n	8001a82 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80019bc:	e02e      	b.n	8001a1c <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d115      	bne.n	80019f8 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f103 020c 	add.w	r2, r3, #12
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d8:	7812      	ldrb	r2, [r2, #0]
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	3b01      	subs	r3, #1
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80019f6:	e011      	b.n	8001a1c <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80019f8:	f7fe ff46 	bl	8000888 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d803      	bhi.n	8001a10 <HAL_SPI_Receive+0x156>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a0e:	d102      	bne.n	8001a16 <HAL_SPI_Receive+0x15c>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d102      	bne.n	8001a1c <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001a1a:	e04a      	b.n	8001ab2 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1cb      	bne.n	80019be <HAL_SPI_Receive+0x104>
 8001a26:	e031      	b.n	8001a8c <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d113      	bne.n	8001a5e <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68da      	ldr	r2, [r3, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a40:	b292      	uxth	r2, r2
 8001a42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a48:	1c9a      	adds	r2, r3, #2
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	3b01      	subs	r3, #1
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001a5c:	e011      	b.n	8001a82 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a5e:	f7fe ff13 	bl	8000888 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d803      	bhi.n	8001a76 <HAL_SPI_Receive+0x1bc>
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a74:	d102      	bne.n	8001a7c <HAL_SPI_Receive+0x1c2>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d102      	bne.n	8001a82 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001a80:	e017      	b.n	8001ab2 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1cd      	bne.n	8001a28 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	6839      	ldr	r1, [r7, #0]
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	f000 fa27 	bl	8001ee4 <SPI_EndRxTransaction>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d002      	beq.n	8001aa2 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d002      	beq.n	8001ab0 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	75fb      	strb	r3, [r7, #23]
 8001aae:	e000      	b.n	8001ab2 <HAL_SPI_Receive+0x1f8>
  }

error :
 8001ab0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08c      	sub	sp, #48	; 0x30
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
 8001ad8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001ada:	2301      	movs	r3, #1
 8001adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d101      	bne.n	8001af2 <HAL_SPI_TransmitReceive+0x26>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e18a      	b.n	8001e08 <HAL_SPI_TransmitReceive+0x33c>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001afa:	f7fe fec5 	bl	8000888 <HAL_GetTick>
 8001afe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001b10:	887b      	ldrh	r3, [r7, #2]
 8001b12:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001b14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d00f      	beq.n	8001b3c <HAL_SPI_TransmitReceive+0x70>
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b22:	d107      	bne.n	8001b34 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d103      	bne.n	8001b34 <HAL_SPI_TransmitReceive+0x68>
 8001b2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d003      	beq.n	8001b3c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001b34:	2302      	movs	r3, #2
 8001b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001b3a:	e15b      	b.n	8001df4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d005      	beq.n	8001b4e <HAL_SPI_TransmitReceive+0x82>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d002      	beq.n	8001b4e <HAL_SPI_TransmitReceive+0x82>
 8001b48:	887b      	ldrh	r3, [r7, #2]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d103      	bne.n	8001b56 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001b54:	e14e      	b.n	8001df4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d003      	beq.n	8001b6a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2205      	movs	r2, #5
 8001b66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	887a      	ldrh	r2, [r7, #2]
 8001b7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	887a      	ldrh	r2, [r7, #2]
 8001b80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	68ba      	ldr	r2, [r7, #8]
 8001b86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	887a      	ldrh	r2, [r7, #2]
 8001b8c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	887a      	ldrh	r2, [r7, #2]
 8001b92:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2200      	movs	r2, #0
 8001b98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001baa:	2b40      	cmp	r3, #64	; 0x40
 8001bac:	d007      	beq.n	8001bbe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bbc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bc6:	d178      	bne.n	8001cba <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d002      	beq.n	8001bd6 <HAL_SPI_TransmitReceive+0x10a>
 8001bd0:	8b7b      	ldrh	r3, [r7, #26]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d166      	bne.n	8001ca4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	881a      	ldrh	r2, [r3, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	1c9a      	adds	r2, r3, #2
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001bfa:	e053      	b.n	8001ca4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d11b      	bne.n	8001c42 <HAL_SPI_TransmitReceive+0x176>
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d016      	beq.n	8001c42 <HAL_SPI_TransmitReceive+0x176>
 8001c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d113      	bne.n	8001c42 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	881a      	ldrh	r2, [r3, #0]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	1c9a      	adds	r2, r3, #2
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	3b01      	subs	r3, #1
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d119      	bne.n	8001c84 <HAL_SPI_TransmitReceive+0x1b8>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d014      	beq.n	8001c84 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c64:	b292      	uxth	r2, r2
 8001c66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c6c:	1c9a      	adds	r2, r3, #2
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001c80:	2301      	movs	r3, #1
 8001c82:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001c84:	f7fe fe00 	bl	8000888 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d807      	bhi.n	8001ca4 <HAL_SPI_TransmitReceive+0x1d8>
 8001c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c9a:	d003      	beq.n	8001ca4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001ca2:	e0a7      	b.n	8001df4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1a6      	bne.n	8001bfc <HAL_SPI_TransmitReceive+0x130>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1a1      	bne.n	8001bfc <HAL_SPI_TransmitReceive+0x130>
 8001cb8:	e07c      	b.n	8001db4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d002      	beq.n	8001cc8 <HAL_SPI_TransmitReceive+0x1fc>
 8001cc2:	8b7b      	ldrh	r3, [r7, #26]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d16b      	bne.n	8001da0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	330c      	adds	r3, #12
 8001cd2:	7812      	ldrb	r2, [r2, #0]
 8001cd4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	1c5a      	adds	r2, r3, #1
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001cee:	e057      	b.n	8001da0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d11c      	bne.n	8001d38 <HAL_SPI_TransmitReceive+0x26c>
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d017      	beq.n	8001d38 <HAL_SPI_TransmitReceive+0x26c>
 8001d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d114      	bne.n	8001d38 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	330c      	adds	r3, #12
 8001d18:	7812      	ldrb	r2, [r2, #0]
 8001d1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d20:	1c5a      	adds	r2, r3, #1
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d119      	bne.n	8001d7a <HAL_SPI_TransmitReceive+0x2ae>
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d014      	beq.n	8001d7a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d62:	1c5a      	adds	r2, r3, #1
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001d76:	2301      	movs	r3, #1
 8001d78:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001d7a:	f7fe fd85 	bl	8000888 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d803      	bhi.n	8001d92 <HAL_SPI_TransmitReceive+0x2c6>
 8001d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d90:	d102      	bne.n	8001d98 <HAL_SPI_TransmitReceive+0x2cc>
 8001d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d103      	bne.n	8001da0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001d9e:	e029      	b.n	8001df4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1a2      	bne.n	8001cf0 <HAL_SPI_TransmitReceive+0x224>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d19d      	bne.n	8001cf0 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f000 f8e5 	bl	8001f88 <SPI_EndRxTxTransaction>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d006      	beq.n	8001dd2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2220      	movs	r2, #32
 8001dce:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001dd0:	e010      	b.n	8001df4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10b      	bne.n	8001df2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	e000      	b.n	8001df4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001df2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001e04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3730      	adds	r7, #48	; 0x30
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	603b      	str	r3, [r7, #0]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e20:	e04c      	b.n	8001ebc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e28:	d048      	beq.n	8001ebc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001e2a:	f7fe fd2d 	bl	8000888 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d902      	bls.n	8001e40 <SPI_WaitFlagStateUntilTimeout+0x30>
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d13d      	bne.n	8001ebc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001e4e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e58:	d111      	bne.n	8001e7e <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e62:	d004      	beq.n	8001e6e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e6c:	d107      	bne.n	8001e7e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e7c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e86:	d10f      	bne.n	8001ea8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ea6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e00f      	b.n	8001edc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	bf0c      	ite	eq
 8001ecc:	2301      	moveq	r3, #1
 8001ece:	2300      	movne	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d1a3      	bne.n	8001e22 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af02      	add	r7, sp, #8
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ef8:	d111      	bne.n	8001f1e <SPI_EndRxTransaction+0x3a>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f02:	d004      	beq.n	8001f0e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f0c:	d107      	bne.n	8001f1e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f1c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f26:	d117      	bne.n	8001f58 <SPI_EndRxTransaction+0x74>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f30:	d112      	bne.n	8001f58 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f7ff ff67 	bl	8001e10 <SPI_WaitFlagStateUntilTimeout>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d01a      	beq.n	8001f7e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4c:	f043 0220 	orr.w	r2, r3, #32
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e013      	b.n	8001f80 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2180      	movs	r1, #128	; 0x80
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f7ff ff54 	bl	8001e10 <SPI_WaitFlagStateUntilTimeout>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d007      	beq.n	8001f7e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f72:	f043 0220 	orr.w	r2, r3, #32
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e000      	b.n	8001f80 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af02      	add	r7, sp, #8
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2180      	movs	r1, #128	; 0x80
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f7ff ff36 	bl	8001e10 <SPI_WaitFlagStateUntilTimeout>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d007      	beq.n	8001fba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fae:	f043 0220 	orr.w	r2, r3, #32
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e000      	b.n	8001fbc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <__errno>:
 8001fc4:	4b01      	ldr	r3, [pc, #4]	; (8001fcc <__errno+0x8>)
 8001fc6:	6818      	ldr	r0, [r3, #0]
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	2000000c 	.word	0x2000000c

08001fd0 <__libc_init_array>:
 8001fd0:	b570      	push	{r4, r5, r6, lr}
 8001fd2:	2500      	movs	r5, #0
 8001fd4:	4e0c      	ldr	r6, [pc, #48]	; (8002008 <__libc_init_array+0x38>)
 8001fd6:	4c0d      	ldr	r4, [pc, #52]	; (800200c <__libc_init_array+0x3c>)
 8001fd8:	1ba4      	subs	r4, r4, r6
 8001fda:	10a4      	asrs	r4, r4, #2
 8001fdc:	42a5      	cmp	r5, r4
 8001fde:	d109      	bne.n	8001ff4 <__libc_init_array+0x24>
 8001fe0:	f000 ff74 	bl	8002ecc <_init>
 8001fe4:	2500      	movs	r5, #0
 8001fe6:	4e0a      	ldr	r6, [pc, #40]	; (8002010 <__libc_init_array+0x40>)
 8001fe8:	4c0a      	ldr	r4, [pc, #40]	; (8002014 <__libc_init_array+0x44>)
 8001fea:	1ba4      	subs	r4, r4, r6
 8001fec:	10a4      	asrs	r4, r4, #2
 8001fee:	42a5      	cmp	r5, r4
 8001ff0:	d105      	bne.n	8001ffe <__libc_init_array+0x2e>
 8001ff2:	bd70      	pop	{r4, r5, r6, pc}
 8001ff4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ff8:	4798      	blx	r3
 8001ffa:	3501      	adds	r5, #1
 8001ffc:	e7ee      	b.n	8001fdc <__libc_init_array+0xc>
 8001ffe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002002:	4798      	blx	r3
 8002004:	3501      	adds	r5, #1
 8002006:	e7f2      	b.n	8001fee <__libc_init_array+0x1e>
 8002008:	08002fc8 	.word	0x08002fc8
 800200c:	08002fc8 	.word	0x08002fc8
 8002010:	08002fc8 	.word	0x08002fc8
 8002014:	08002fcc 	.word	0x08002fcc

08002018 <memset>:
 8002018:	4603      	mov	r3, r0
 800201a:	4402      	add	r2, r0
 800201c:	4293      	cmp	r3, r2
 800201e:	d100      	bne.n	8002022 <memset+0xa>
 8002020:	4770      	bx	lr
 8002022:	f803 1b01 	strb.w	r1, [r3], #1
 8002026:	e7f9      	b.n	800201c <memset+0x4>

08002028 <iprintf>:
 8002028:	b40f      	push	{r0, r1, r2, r3}
 800202a:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <iprintf+0x2c>)
 800202c:	b513      	push	{r0, r1, r4, lr}
 800202e:	681c      	ldr	r4, [r3, #0]
 8002030:	b124      	cbz	r4, 800203c <iprintf+0x14>
 8002032:	69a3      	ldr	r3, [r4, #24]
 8002034:	b913      	cbnz	r3, 800203c <iprintf+0x14>
 8002036:	4620      	mov	r0, r4
 8002038:	f000 fa22 	bl	8002480 <__sinit>
 800203c:	ab05      	add	r3, sp, #20
 800203e:	9a04      	ldr	r2, [sp, #16]
 8002040:	68a1      	ldr	r1, [r4, #8]
 8002042:	4620      	mov	r0, r4
 8002044:	9301      	str	r3, [sp, #4]
 8002046:	f000 fbd7 	bl	80027f8 <_vfiprintf_r>
 800204a:	b002      	add	sp, #8
 800204c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002050:	b004      	add	sp, #16
 8002052:	4770      	bx	lr
 8002054:	2000000c 	.word	0x2000000c

08002058 <_puts_r>:
 8002058:	b570      	push	{r4, r5, r6, lr}
 800205a:	460e      	mov	r6, r1
 800205c:	4605      	mov	r5, r0
 800205e:	b118      	cbz	r0, 8002068 <_puts_r+0x10>
 8002060:	6983      	ldr	r3, [r0, #24]
 8002062:	b90b      	cbnz	r3, 8002068 <_puts_r+0x10>
 8002064:	f000 fa0c 	bl	8002480 <__sinit>
 8002068:	69ab      	ldr	r3, [r5, #24]
 800206a:	68ac      	ldr	r4, [r5, #8]
 800206c:	b913      	cbnz	r3, 8002074 <_puts_r+0x1c>
 800206e:	4628      	mov	r0, r5
 8002070:	f000 fa06 	bl	8002480 <__sinit>
 8002074:	4b23      	ldr	r3, [pc, #140]	; (8002104 <_puts_r+0xac>)
 8002076:	429c      	cmp	r4, r3
 8002078:	d117      	bne.n	80020aa <_puts_r+0x52>
 800207a:	686c      	ldr	r4, [r5, #4]
 800207c:	89a3      	ldrh	r3, [r4, #12]
 800207e:	071b      	lsls	r3, r3, #28
 8002080:	d51d      	bpl.n	80020be <_puts_r+0x66>
 8002082:	6923      	ldr	r3, [r4, #16]
 8002084:	b1db      	cbz	r3, 80020be <_puts_r+0x66>
 8002086:	3e01      	subs	r6, #1
 8002088:	68a3      	ldr	r3, [r4, #8]
 800208a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800208e:	3b01      	subs	r3, #1
 8002090:	60a3      	str	r3, [r4, #8]
 8002092:	b9e9      	cbnz	r1, 80020d0 <_puts_r+0x78>
 8002094:	2b00      	cmp	r3, #0
 8002096:	da2e      	bge.n	80020f6 <_puts_r+0x9e>
 8002098:	4622      	mov	r2, r4
 800209a:	210a      	movs	r1, #10
 800209c:	4628      	mov	r0, r5
 800209e:	f000 f83f 	bl	8002120 <__swbuf_r>
 80020a2:	3001      	adds	r0, #1
 80020a4:	d011      	beq.n	80020ca <_puts_r+0x72>
 80020a6:	200a      	movs	r0, #10
 80020a8:	e011      	b.n	80020ce <_puts_r+0x76>
 80020aa:	4b17      	ldr	r3, [pc, #92]	; (8002108 <_puts_r+0xb0>)
 80020ac:	429c      	cmp	r4, r3
 80020ae:	d101      	bne.n	80020b4 <_puts_r+0x5c>
 80020b0:	68ac      	ldr	r4, [r5, #8]
 80020b2:	e7e3      	b.n	800207c <_puts_r+0x24>
 80020b4:	4b15      	ldr	r3, [pc, #84]	; (800210c <_puts_r+0xb4>)
 80020b6:	429c      	cmp	r4, r3
 80020b8:	bf08      	it	eq
 80020ba:	68ec      	ldreq	r4, [r5, #12]
 80020bc:	e7de      	b.n	800207c <_puts_r+0x24>
 80020be:	4621      	mov	r1, r4
 80020c0:	4628      	mov	r0, r5
 80020c2:	f000 f87f 	bl	80021c4 <__swsetup_r>
 80020c6:	2800      	cmp	r0, #0
 80020c8:	d0dd      	beq.n	8002086 <_puts_r+0x2e>
 80020ca:	f04f 30ff 	mov.w	r0, #4294967295
 80020ce:	bd70      	pop	{r4, r5, r6, pc}
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	da04      	bge.n	80020de <_puts_r+0x86>
 80020d4:	69a2      	ldr	r2, [r4, #24]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	dc06      	bgt.n	80020e8 <_puts_r+0x90>
 80020da:	290a      	cmp	r1, #10
 80020dc:	d004      	beq.n	80020e8 <_puts_r+0x90>
 80020de:	6823      	ldr	r3, [r4, #0]
 80020e0:	1c5a      	adds	r2, r3, #1
 80020e2:	6022      	str	r2, [r4, #0]
 80020e4:	7019      	strb	r1, [r3, #0]
 80020e6:	e7cf      	b.n	8002088 <_puts_r+0x30>
 80020e8:	4622      	mov	r2, r4
 80020ea:	4628      	mov	r0, r5
 80020ec:	f000 f818 	bl	8002120 <__swbuf_r>
 80020f0:	3001      	adds	r0, #1
 80020f2:	d1c9      	bne.n	8002088 <_puts_r+0x30>
 80020f4:	e7e9      	b.n	80020ca <_puts_r+0x72>
 80020f6:	200a      	movs	r0, #10
 80020f8:	6823      	ldr	r3, [r4, #0]
 80020fa:	1c5a      	adds	r2, r3, #1
 80020fc:	6022      	str	r2, [r4, #0]
 80020fe:	7018      	strb	r0, [r3, #0]
 8002100:	e7e5      	b.n	80020ce <_puts_r+0x76>
 8002102:	bf00      	nop
 8002104:	08002f54 	.word	0x08002f54
 8002108:	08002f74 	.word	0x08002f74
 800210c:	08002f34 	.word	0x08002f34

08002110 <puts>:
 8002110:	4b02      	ldr	r3, [pc, #8]	; (800211c <puts+0xc>)
 8002112:	4601      	mov	r1, r0
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	f7ff bf9f 	b.w	8002058 <_puts_r>
 800211a:	bf00      	nop
 800211c:	2000000c 	.word	0x2000000c

08002120 <__swbuf_r>:
 8002120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002122:	460e      	mov	r6, r1
 8002124:	4614      	mov	r4, r2
 8002126:	4605      	mov	r5, r0
 8002128:	b118      	cbz	r0, 8002132 <__swbuf_r+0x12>
 800212a:	6983      	ldr	r3, [r0, #24]
 800212c:	b90b      	cbnz	r3, 8002132 <__swbuf_r+0x12>
 800212e:	f000 f9a7 	bl	8002480 <__sinit>
 8002132:	4b21      	ldr	r3, [pc, #132]	; (80021b8 <__swbuf_r+0x98>)
 8002134:	429c      	cmp	r4, r3
 8002136:	d12a      	bne.n	800218e <__swbuf_r+0x6e>
 8002138:	686c      	ldr	r4, [r5, #4]
 800213a:	69a3      	ldr	r3, [r4, #24]
 800213c:	60a3      	str	r3, [r4, #8]
 800213e:	89a3      	ldrh	r3, [r4, #12]
 8002140:	071a      	lsls	r2, r3, #28
 8002142:	d52e      	bpl.n	80021a2 <__swbuf_r+0x82>
 8002144:	6923      	ldr	r3, [r4, #16]
 8002146:	b363      	cbz	r3, 80021a2 <__swbuf_r+0x82>
 8002148:	6923      	ldr	r3, [r4, #16]
 800214a:	6820      	ldr	r0, [r4, #0]
 800214c:	b2f6      	uxtb	r6, r6
 800214e:	1ac0      	subs	r0, r0, r3
 8002150:	6963      	ldr	r3, [r4, #20]
 8002152:	4637      	mov	r7, r6
 8002154:	4283      	cmp	r3, r0
 8002156:	dc04      	bgt.n	8002162 <__swbuf_r+0x42>
 8002158:	4621      	mov	r1, r4
 800215a:	4628      	mov	r0, r5
 800215c:	f000 f926 	bl	80023ac <_fflush_r>
 8002160:	bb28      	cbnz	r0, 80021ae <__swbuf_r+0x8e>
 8002162:	68a3      	ldr	r3, [r4, #8]
 8002164:	3001      	adds	r0, #1
 8002166:	3b01      	subs	r3, #1
 8002168:	60a3      	str	r3, [r4, #8]
 800216a:	6823      	ldr	r3, [r4, #0]
 800216c:	1c5a      	adds	r2, r3, #1
 800216e:	6022      	str	r2, [r4, #0]
 8002170:	701e      	strb	r6, [r3, #0]
 8002172:	6963      	ldr	r3, [r4, #20]
 8002174:	4283      	cmp	r3, r0
 8002176:	d004      	beq.n	8002182 <__swbuf_r+0x62>
 8002178:	89a3      	ldrh	r3, [r4, #12]
 800217a:	07db      	lsls	r3, r3, #31
 800217c:	d519      	bpl.n	80021b2 <__swbuf_r+0x92>
 800217e:	2e0a      	cmp	r6, #10
 8002180:	d117      	bne.n	80021b2 <__swbuf_r+0x92>
 8002182:	4621      	mov	r1, r4
 8002184:	4628      	mov	r0, r5
 8002186:	f000 f911 	bl	80023ac <_fflush_r>
 800218a:	b190      	cbz	r0, 80021b2 <__swbuf_r+0x92>
 800218c:	e00f      	b.n	80021ae <__swbuf_r+0x8e>
 800218e:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <__swbuf_r+0x9c>)
 8002190:	429c      	cmp	r4, r3
 8002192:	d101      	bne.n	8002198 <__swbuf_r+0x78>
 8002194:	68ac      	ldr	r4, [r5, #8]
 8002196:	e7d0      	b.n	800213a <__swbuf_r+0x1a>
 8002198:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <__swbuf_r+0xa0>)
 800219a:	429c      	cmp	r4, r3
 800219c:	bf08      	it	eq
 800219e:	68ec      	ldreq	r4, [r5, #12]
 80021a0:	e7cb      	b.n	800213a <__swbuf_r+0x1a>
 80021a2:	4621      	mov	r1, r4
 80021a4:	4628      	mov	r0, r5
 80021a6:	f000 f80d 	bl	80021c4 <__swsetup_r>
 80021aa:	2800      	cmp	r0, #0
 80021ac:	d0cc      	beq.n	8002148 <__swbuf_r+0x28>
 80021ae:	f04f 37ff 	mov.w	r7, #4294967295
 80021b2:	4638      	mov	r0, r7
 80021b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021b6:	bf00      	nop
 80021b8:	08002f54 	.word	0x08002f54
 80021bc:	08002f74 	.word	0x08002f74
 80021c0:	08002f34 	.word	0x08002f34

080021c4 <__swsetup_r>:
 80021c4:	4b32      	ldr	r3, [pc, #200]	; (8002290 <__swsetup_r+0xcc>)
 80021c6:	b570      	push	{r4, r5, r6, lr}
 80021c8:	681d      	ldr	r5, [r3, #0]
 80021ca:	4606      	mov	r6, r0
 80021cc:	460c      	mov	r4, r1
 80021ce:	b125      	cbz	r5, 80021da <__swsetup_r+0x16>
 80021d0:	69ab      	ldr	r3, [r5, #24]
 80021d2:	b913      	cbnz	r3, 80021da <__swsetup_r+0x16>
 80021d4:	4628      	mov	r0, r5
 80021d6:	f000 f953 	bl	8002480 <__sinit>
 80021da:	4b2e      	ldr	r3, [pc, #184]	; (8002294 <__swsetup_r+0xd0>)
 80021dc:	429c      	cmp	r4, r3
 80021de:	d10f      	bne.n	8002200 <__swsetup_r+0x3c>
 80021e0:	686c      	ldr	r4, [r5, #4]
 80021e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	0715      	lsls	r5, r2, #28
 80021ea:	d42c      	bmi.n	8002246 <__swsetup_r+0x82>
 80021ec:	06d0      	lsls	r0, r2, #27
 80021ee:	d411      	bmi.n	8002214 <__swsetup_r+0x50>
 80021f0:	2209      	movs	r2, #9
 80021f2:	6032      	str	r2, [r6, #0]
 80021f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021f8:	81a3      	strh	r3, [r4, #12]
 80021fa:	f04f 30ff 	mov.w	r0, #4294967295
 80021fe:	e03e      	b.n	800227e <__swsetup_r+0xba>
 8002200:	4b25      	ldr	r3, [pc, #148]	; (8002298 <__swsetup_r+0xd4>)
 8002202:	429c      	cmp	r4, r3
 8002204:	d101      	bne.n	800220a <__swsetup_r+0x46>
 8002206:	68ac      	ldr	r4, [r5, #8]
 8002208:	e7eb      	b.n	80021e2 <__swsetup_r+0x1e>
 800220a:	4b24      	ldr	r3, [pc, #144]	; (800229c <__swsetup_r+0xd8>)
 800220c:	429c      	cmp	r4, r3
 800220e:	bf08      	it	eq
 8002210:	68ec      	ldreq	r4, [r5, #12]
 8002212:	e7e6      	b.n	80021e2 <__swsetup_r+0x1e>
 8002214:	0751      	lsls	r1, r2, #29
 8002216:	d512      	bpl.n	800223e <__swsetup_r+0x7a>
 8002218:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800221a:	b141      	cbz	r1, 800222e <__swsetup_r+0x6a>
 800221c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002220:	4299      	cmp	r1, r3
 8002222:	d002      	beq.n	800222a <__swsetup_r+0x66>
 8002224:	4630      	mov	r0, r6
 8002226:	f000 fa19 	bl	800265c <_free_r>
 800222a:	2300      	movs	r3, #0
 800222c:	6363      	str	r3, [r4, #52]	; 0x34
 800222e:	89a3      	ldrh	r3, [r4, #12]
 8002230:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002234:	81a3      	strh	r3, [r4, #12]
 8002236:	2300      	movs	r3, #0
 8002238:	6063      	str	r3, [r4, #4]
 800223a:	6923      	ldr	r3, [r4, #16]
 800223c:	6023      	str	r3, [r4, #0]
 800223e:	89a3      	ldrh	r3, [r4, #12]
 8002240:	f043 0308 	orr.w	r3, r3, #8
 8002244:	81a3      	strh	r3, [r4, #12]
 8002246:	6923      	ldr	r3, [r4, #16]
 8002248:	b94b      	cbnz	r3, 800225e <__swsetup_r+0x9a>
 800224a:	89a3      	ldrh	r3, [r4, #12]
 800224c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002254:	d003      	beq.n	800225e <__swsetup_r+0x9a>
 8002256:	4621      	mov	r1, r4
 8002258:	4630      	mov	r0, r6
 800225a:	f000 f9bf 	bl	80025dc <__smakebuf_r>
 800225e:	89a2      	ldrh	r2, [r4, #12]
 8002260:	f012 0301 	ands.w	r3, r2, #1
 8002264:	d00c      	beq.n	8002280 <__swsetup_r+0xbc>
 8002266:	2300      	movs	r3, #0
 8002268:	60a3      	str	r3, [r4, #8]
 800226a:	6963      	ldr	r3, [r4, #20]
 800226c:	425b      	negs	r3, r3
 800226e:	61a3      	str	r3, [r4, #24]
 8002270:	6923      	ldr	r3, [r4, #16]
 8002272:	b953      	cbnz	r3, 800228a <__swsetup_r+0xc6>
 8002274:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002278:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800227c:	d1ba      	bne.n	80021f4 <__swsetup_r+0x30>
 800227e:	bd70      	pop	{r4, r5, r6, pc}
 8002280:	0792      	lsls	r2, r2, #30
 8002282:	bf58      	it	pl
 8002284:	6963      	ldrpl	r3, [r4, #20]
 8002286:	60a3      	str	r3, [r4, #8]
 8002288:	e7f2      	b.n	8002270 <__swsetup_r+0xac>
 800228a:	2000      	movs	r0, #0
 800228c:	e7f7      	b.n	800227e <__swsetup_r+0xba>
 800228e:	bf00      	nop
 8002290:	2000000c 	.word	0x2000000c
 8002294:	08002f54 	.word	0x08002f54
 8002298:	08002f74 	.word	0x08002f74
 800229c:	08002f34 	.word	0x08002f34

080022a0 <__sflush_r>:
 80022a0:	898a      	ldrh	r2, [r1, #12]
 80022a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022a6:	4605      	mov	r5, r0
 80022a8:	0710      	lsls	r0, r2, #28
 80022aa:	460c      	mov	r4, r1
 80022ac:	d458      	bmi.n	8002360 <__sflush_r+0xc0>
 80022ae:	684b      	ldr	r3, [r1, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	dc05      	bgt.n	80022c0 <__sflush_r+0x20>
 80022b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	dc02      	bgt.n	80022c0 <__sflush_r+0x20>
 80022ba:	2000      	movs	r0, #0
 80022bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80022c2:	2e00      	cmp	r6, #0
 80022c4:	d0f9      	beq.n	80022ba <__sflush_r+0x1a>
 80022c6:	2300      	movs	r3, #0
 80022c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80022cc:	682f      	ldr	r7, [r5, #0]
 80022ce:	6a21      	ldr	r1, [r4, #32]
 80022d0:	602b      	str	r3, [r5, #0]
 80022d2:	d032      	beq.n	800233a <__sflush_r+0x9a>
 80022d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80022d6:	89a3      	ldrh	r3, [r4, #12]
 80022d8:	075a      	lsls	r2, r3, #29
 80022da:	d505      	bpl.n	80022e8 <__sflush_r+0x48>
 80022dc:	6863      	ldr	r3, [r4, #4]
 80022de:	1ac0      	subs	r0, r0, r3
 80022e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80022e2:	b10b      	cbz	r3, 80022e8 <__sflush_r+0x48>
 80022e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022e6:	1ac0      	subs	r0, r0, r3
 80022e8:	2300      	movs	r3, #0
 80022ea:	4602      	mov	r2, r0
 80022ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80022ee:	6a21      	ldr	r1, [r4, #32]
 80022f0:	4628      	mov	r0, r5
 80022f2:	47b0      	blx	r6
 80022f4:	1c43      	adds	r3, r0, #1
 80022f6:	89a3      	ldrh	r3, [r4, #12]
 80022f8:	d106      	bne.n	8002308 <__sflush_r+0x68>
 80022fa:	6829      	ldr	r1, [r5, #0]
 80022fc:	291d      	cmp	r1, #29
 80022fe:	d848      	bhi.n	8002392 <__sflush_r+0xf2>
 8002300:	4a29      	ldr	r2, [pc, #164]	; (80023a8 <__sflush_r+0x108>)
 8002302:	40ca      	lsrs	r2, r1
 8002304:	07d6      	lsls	r6, r2, #31
 8002306:	d544      	bpl.n	8002392 <__sflush_r+0xf2>
 8002308:	2200      	movs	r2, #0
 800230a:	6062      	str	r2, [r4, #4]
 800230c:	6922      	ldr	r2, [r4, #16]
 800230e:	04d9      	lsls	r1, r3, #19
 8002310:	6022      	str	r2, [r4, #0]
 8002312:	d504      	bpl.n	800231e <__sflush_r+0x7e>
 8002314:	1c42      	adds	r2, r0, #1
 8002316:	d101      	bne.n	800231c <__sflush_r+0x7c>
 8002318:	682b      	ldr	r3, [r5, #0]
 800231a:	b903      	cbnz	r3, 800231e <__sflush_r+0x7e>
 800231c:	6560      	str	r0, [r4, #84]	; 0x54
 800231e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002320:	602f      	str	r7, [r5, #0]
 8002322:	2900      	cmp	r1, #0
 8002324:	d0c9      	beq.n	80022ba <__sflush_r+0x1a>
 8002326:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800232a:	4299      	cmp	r1, r3
 800232c:	d002      	beq.n	8002334 <__sflush_r+0x94>
 800232e:	4628      	mov	r0, r5
 8002330:	f000 f994 	bl	800265c <_free_r>
 8002334:	2000      	movs	r0, #0
 8002336:	6360      	str	r0, [r4, #52]	; 0x34
 8002338:	e7c0      	b.n	80022bc <__sflush_r+0x1c>
 800233a:	2301      	movs	r3, #1
 800233c:	4628      	mov	r0, r5
 800233e:	47b0      	blx	r6
 8002340:	1c41      	adds	r1, r0, #1
 8002342:	d1c8      	bne.n	80022d6 <__sflush_r+0x36>
 8002344:	682b      	ldr	r3, [r5, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0c5      	beq.n	80022d6 <__sflush_r+0x36>
 800234a:	2b1d      	cmp	r3, #29
 800234c:	d001      	beq.n	8002352 <__sflush_r+0xb2>
 800234e:	2b16      	cmp	r3, #22
 8002350:	d101      	bne.n	8002356 <__sflush_r+0xb6>
 8002352:	602f      	str	r7, [r5, #0]
 8002354:	e7b1      	b.n	80022ba <__sflush_r+0x1a>
 8002356:	89a3      	ldrh	r3, [r4, #12]
 8002358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800235c:	81a3      	strh	r3, [r4, #12]
 800235e:	e7ad      	b.n	80022bc <__sflush_r+0x1c>
 8002360:	690f      	ldr	r7, [r1, #16]
 8002362:	2f00      	cmp	r7, #0
 8002364:	d0a9      	beq.n	80022ba <__sflush_r+0x1a>
 8002366:	0793      	lsls	r3, r2, #30
 8002368:	bf18      	it	ne
 800236a:	2300      	movne	r3, #0
 800236c:	680e      	ldr	r6, [r1, #0]
 800236e:	bf08      	it	eq
 8002370:	694b      	ldreq	r3, [r1, #20]
 8002372:	eba6 0807 	sub.w	r8, r6, r7
 8002376:	600f      	str	r7, [r1, #0]
 8002378:	608b      	str	r3, [r1, #8]
 800237a:	f1b8 0f00 	cmp.w	r8, #0
 800237e:	dd9c      	ble.n	80022ba <__sflush_r+0x1a>
 8002380:	4643      	mov	r3, r8
 8002382:	463a      	mov	r2, r7
 8002384:	6a21      	ldr	r1, [r4, #32]
 8002386:	4628      	mov	r0, r5
 8002388:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800238a:	47b0      	blx	r6
 800238c:	2800      	cmp	r0, #0
 800238e:	dc06      	bgt.n	800239e <__sflush_r+0xfe>
 8002390:	89a3      	ldrh	r3, [r4, #12]
 8002392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002396:	81a3      	strh	r3, [r4, #12]
 8002398:	f04f 30ff 	mov.w	r0, #4294967295
 800239c:	e78e      	b.n	80022bc <__sflush_r+0x1c>
 800239e:	4407      	add	r7, r0
 80023a0:	eba8 0800 	sub.w	r8, r8, r0
 80023a4:	e7e9      	b.n	800237a <__sflush_r+0xda>
 80023a6:	bf00      	nop
 80023a8:	20400001 	.word	0x20400001

080023ac <_fflush_r>:
 80023ac:	b538      	push	{r3, r4, r5, lr}
 80023ae:	690b      	ldr	r3, [r1, #16]
 80023b0:	4605      	mov	r5, r0
 80023b2:	460c      	mov	r4, r1
 80023b4:	b1db      	cbz	r3, 80023ee <_fflush_r+0x42>
 80023b6:	b118      	cbz	r0, 80023c0 <_fflush_r+0x14>
 80023b8:	6983      	ldr	r3, [r0, #24]
 80023ba:	b90b      	cbnz	r3, 80023c0 <_fflush_r+0x14>
 80023bc:	f000 f860 	bl	8002480 <__sinit>
 80023c0:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <_fflush_r+0x48>)
 80023c2:	429c      	cmp	r4, r3
 80023c4:	d109      	bne.n	80023da <_fflush_r+0x2e>
 80023c6:	686c      	ldr	r4, [r5, #4]
 80023c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023cc:	b17b      	cbz	r3, 80023ee <_fflush_r+0x42>
 80023ce:	4621      	mov	r1, r4
 80023d0:	4628      	mov	r0, r5
 80023d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80023d6:	f7ff bf63 	b.w	80022a0 <__sflush_r>
 80023da:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <_fflush_r+0x4c>)
 80023dc:	429c      	cmp	r4, r3
 80023de:	d101      	bne.n	80023e4 <_fflush_r+0x38>
 80023e0:	68ac      	ldr	r4, [r5, #8]
 80023e2:	e7f1      	b.n	80023c8 <_fflush_r+0x1c>
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <_fflush_r+0x50>)
 80023e6:	429c      	cmp	r4, r3
 80023e8:	bf08      	it	eq
 80023ea:	68ec      	ldreq	r4, [r5, #12]
 80023ec:	e7ec      	b.n	80023c8 <_fflush_r+0x1c>
 80023ee:	2000      	movs	r0, #0
 80023f0:	bd38      	pop	{r3, r4, r5, pc}
 80023f2:	bf00      	nop
 80023f4:	08002f54 	.word	0x08002f54
 80023f8:	08002f74 	.word	0x08002f74
 80023fc:	08002f34 	.word	0x08002f34

08002400 <std>:
 8002400:	2300      	movs	r3, #0
 8002402:	b510      	push	{r4, lr}
 8002404:	4604      	mov	r4, r0
 8002406:	e9c0 3300 	strd	r3, r3, [r0]
 800240a:	6083      	str	r3, [r0, #8]
 800240c:	8181      	strh	r1, [r0, #12]
 800240e:	6643      	str	r3, [r0, #100]	; 0x64
 8002410:	81c2      	strh	r2, [r0, #14]
 8002412:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002416:	6183      	str	r3, [r0, #24]
 8002418:	4619      	mov	r1, r3
 800241a:	2208      	movs	r2, #8
 800241c:	305c      	adds	r0, #92	; 0x5c
 800241e:	f7ff fdfb 	bl	8002018 <memset>
 8002422:	4b05      	ldr	r3, [pc, #20]	; (8002438 <std+0x38>)
 8002424:	6224      	str	r4, [r4, #32]
 8002426:	6263      	str	r3, [r4, #36]	; 0x24
 8002428:	4b04      	ldr	r3, [pc, #16]	; (800243c <std+0x3c>)
 800242a:	62a3      	str	r3, [r4, #40]	; 0x28
 800242c:	4b04      	ldr	r3, [pc, #16]	; (8002440 <std+0x40>)
 800242e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002430:	4b04      	ldr	r3, [pc, #16]	; (8002444 <std+0x44>)
 8002432:	6323      	str	r3, [r4, #48]	; 0x30
 8002434:	bd10      	pop	{r4, pc}
 8002436:	bf00      	nop
 8002438:	08002d55 	.word	0x08002d55
 800243c:	08002d77 	.word	0x08002d77
 8002440:	08002daf 	.word	0x08002daf
 8002444:	08002dd3 	.word	0x08002dd3

08002448 <_cleanup_r>:
 8002448:	4901      	ldr	r1, [pc, #4]	; (8002450 <_cleanup_r+0x8>)
 800244a:	f000 b885 	b.w	8002558 <_fwalk_reent>
 800244e:	bf00      	nop
 8002450:	080023ad 	.word	0x080023ad

08002454 <__sfmoreglue>:
 8002454:	b570      	push	{r4, r5, r6, lr}
 8002456:	2568      	movs	r5, #104	; 0x68
 8002458:	1e4a      	subs	r2, r1, #1
 800245a:	4355      	muls	r5, r2
 800245c:	460e      	mov	r6, r1
 800245e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002462:	f000 f947 	bl	80026f4 <_malloc_r>
 8002466:	4604      	mov	r4, r0
 8002468:	b140      	cbz	r0, 800247c <__sfmoreglue+0x28>
 800246a:	2100      	movs	r1, #0
 800246c:	e9c0 1600 	strd	r1, r6, [r0]
 8002470:	300c      	adds	r0, #12
 8002472:	60a0      	str	r0, [r4, #8]
 8002474:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002478:	f7ff fdce 	bl	8002018 <memset>
 800247c:	4620      	mov	r0, r4
 800247e:	bd70      	pop	{r4, r5, r6, pc}

08002480 <__sinit>:
 8002480:	6983      	ldr	r3, [r0, #24]
 8002482:	b510      	push	{r4, lr}
 8002484:	4604      	mov	r4, r0
 8002486:	bb33      	cbnz	r3, 80024d6 <__sinit+0x56>
 8002488:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800248c:	6503      	str	r3, [r0, #80]	; 0x50
 800248e:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <__sinit+0x58>)
 8002490:	4a12      	ldr	r2, [pc, #72]	; (80024dc <__sinit+0x5c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6282      	str	r2, [r0, #40]	; 0x28
 8002496:	4298      	cmp	r0, r3
 8002498:	bf04      	itt	eq
 800249a:	2301      	moveq	r3, #1
 800249c:	6183      	streq	r3, [r0, #24]
 800249e:	f000 f81f 	bl	80024e0 <__sfp>
 80024a2:	6060      	str	r0, [r4, #4]
 80024a4:	4620      	mov	r0, r4
 80024a6:	f000 f81b 	bl	80024e0 <__sfp>
 80024aa:	60a0      	str	r0, [r4, #8]
 80024ac:	4620      	mov	r0, r4
 80024ae:	f000 f817 	bl	80024e0 <__sfp>
 80024b2:	2200      	movs	r2, #0
 80024b4:	60e0      	str	r0, [r4, #12]
 80024b6:	2104      	movs	r1, #4
 80024b8:	6860      	ldr	r0, [r4, #4]
 80024ba:	f7ff ffa1 	bl	8002400 <std>
 80024be:	2201      	movs	r2, #1
 80024c0:	2109      	movs	r1, #9
 80024c2:	68a0      	ldr	r0, [r4, #8]
 80024c4:	f7ff ff9c 	bl	8002400 <std>
 80024c8:	2202      	movs	r2, #2
 80024ca:	2112      	movs	r1, #18
 80024cc:	68e0      	ldr	r0, [r4, #12]
 80024ce:	f7ff ff97 	bl	8002400 <std>
 80024d2:	2301      	movs	r3, #1
 80024d4:	61a3      	str	r3, [r4, #24]
 80024d6:	bd10      	pop	{r4, pc}
 80024d8:	08002f30 	.word	0x08002f30
 80024dc:	08002449 	.word	0x08002449

080024e0 <__sfp>:
 80024e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024e2:	4b1b      	ldr	r3, [pc, #108]	; (8002550 <__sfp+0x70>)
 80024e4:	4607      	mov	r7, r0
 80024e6:	681e      	ldr	r6, [r3, #0]
 80024e8:	69b3      	ldr	r3, [r6, #24]
 80024ea:	b913      	cbnz	r3, 80024f2 <__sfp+0x12>
 80024ec:	4630      	mov	r0, r6
 80024ee:	f7ff ffc7 	bl	8002480 <__sinit>
 80024f2:	3648      	adds	r6, #72	; 0x48
 80024f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80024f8:	3b01      	subs	r3, #1
 80024fa:	d503      	bpl.n	8002504 <__sfp+0x24>
 80024fc:	6833      	ldr	r3, [r6, #0]
 80024fe:	b133      	cbz	r3, 800250e <__sfp+0x2e>
 8002500:	6836      	ldr	r6, [r6, #0]
 8002502:	e7f7      	b.n	80024f4 <__sfp+0x14>
 8002504:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002508:	b16d      	cbz	r5, 8002526 <__sfp+0x46>
 800250a:	3468      	adds	r4, #104	; 0x68
 800250c:	e7f4      	b.n	80024f8 <__sfp+0x18>
 800250e:	2104      	movs	r1, #4
 8002510:	4638      	mov	r0, r7
 8002512:	f7ff ff9f 	bl	8002454 <__sfmoreglue>
 8002516:	6030      	str	r0, [r6, #0]
 8002518:	2800      	cmp	r0, #0
 800251a:	d1f1      	bne.n	8002500 <__sfp+0x20>
 800251c:	230c      	movs	r3, #12
 800251e:	4604      	mov	r4, r0
 8002520:	603b      	str	r3, [r7, #0]
 8002522:	4620      	mov	r0, r4
 8002524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002526:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <__sfp+0x74>)
 8002528:	6665      	str	r5, [r4, #100]	; 0x64
 800252a:	e9c4 5500 	strd	r5, r5, [r4]
 800252e:	60a5      	str	r5, [r4, #8]
 8002530:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002534:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002538:	2208      	movs	r2, #8
 800253a:	4629      	mov	r1, r5
 800253c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002540:	f7ff fd6a 	bl	8002018 <memset>
 8002544:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002548:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800254c:	e7e9      	b.n	8002522 <__sfp+0x42>
 800254e:	bf00      	nop
 8002550:	08002f30 	.word	0x08002f30
 8002554:	ffff0001 	.word	0xffff0001

08002558 <_fwalk_reent>:
 8002558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800255c:	4680      	mov	r8, r0
 800255e:	4689      	mov	r9, r1
 8002560:	2600      	movs	r6, #0
 8002562:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002566:	b914      	cbnz	r4, 800256e <_fwalk_reent+0x16>
 8002568:	4630      	mov	r0, r6
 800256a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800256e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002572:	3f01      	subs	r7, #1
 8002574:	d501      	bpl.n	800257a <_fwalk_reent+0x22>
 8002576:	6824      	ldr	r4, [r4, #0]
 8002578:	e7f5      	b.n	8002566 <_fwalk_reent+0xe>
 800257a:	89ab      	ldrh	r3, [r5, #12]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d907      	bls.n	8002590 <_fwalk_reent+0x38>
 8002580:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002584:	3301      	adds	r3, #1
 8002586:	d003      	beq.n	8002590 <_fwalk_reent+0x38>
 8002588:	4629      	mov	r1, r5
 800258a:	4640      	mov	r0, r8
 800258c:	47c8      	blx	r9
 800258e:	4306      	orrs	r6, r0
 8002590:	3568      	adds	r5, #104	; 0x68
 8002592:	e7ee      	b.n	8002572 <_fwalk_reent+0x1a>

08002594 <__swhatbuf_r>:
 8002594:	b570      	push	{r4, r5, r6, lr}
 8002596:	460e      	mov	r6, r1
 8002598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800259c:	b096      	sub	sp, #88	; 0x58
 800259e:	2900      	cmp	r1, #0
 80025a0:	4614      	mov	r4, r2
 80025a2:	461d      	mov	r5, r3
 80025a4:	da07      	bge.n	80025b6 <__swhatbuf_r+0x22>
 80025a6:	2300      	movs	r3, #0
 80025a8:	602b      	str	r3, [r5, #0]
 80025aa:	89b3      	ldrh	r3, [r6, #12]
 80025ac:	061a      	lsls	r2, r3, #24
 80025ae:	d410      	bmi.n	80025d2 <__swhatbuf_r+0x3e>
 80025b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025b4:	e00e      	b.n	80025d4 <__swhatbuf_r+0x40>
 80025b6:	466a      	mov	r2, sp
 80025b8:	f000 fc32 	bl	8002e20 <_fstat_r>
 80025bc:	2800      	cmp	r0, #0
 80025be:	dbf2      	blt.n	80025a6 <__swhatbuf_r+0x12>
 80025c0:	9a01      	ldr	r2, [sp, #4]
 80025c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80025c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80025ca:	425a      	negs	r2, r3
 80025cc:	415a      	adcs	r2, r3
 80025ce:	602a      	str	r2, [r5, #0]
 80025d0:	e7ee      	b.n	80025b0 <__swhatbuf_r+0x1c>
 80025d2:	2340      	movs	r3, #64	; 0x40
 80025d4:	2000      	movs	r0, #0
 80025d6:	6023      	str	r3, [r4, #0]
 80025d8:	b016      	add	sp, #88	; 0x58
 80025da:	bd70      	pop	{r4, r5, r6, pc}

080025dc <__smakebuf_r>:
 80025dc:	898b      	ldrh	r3, [r1, #12]
 80025de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80025e0:	079d      	lsls	r5, r3, #30
 80025e2:	4606      	mov	r6, r0
 80025e4:	460c      	mov	r4, r1
 80025e6:	d507      	bpl.n	80025f8 <__smakebuf_r+0x1c>
 80025e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80025ec:	6023      	str	r3, [r4, #0]
 80025ee:	6123      	str	r3, [r4, #16]
 80025f0:	2301      	movs	r3, #1
 80025f2:	6163      	str	r3, [r4, #20]
 80025f4:	b002      	add	sp, #8
 80025f6:	bd70      	pop	{r4, r5, r6, pc}
 80025f8:	ab01      	add	r3, sp, #4
 80025fa:	466a      	mov	r2, sp
 80025fc:	f7ff ffca 	bl	8002594 <__swhatbuf_r>
 8002600:	9900      	ldr	r1, [sp, #0]
 8002602:	4605      	mov	r5, r0
 8002604:	4630      	mov	r0, r6
 8002606:	f000 f875 	bl	80026f4 <_malloc_r>
 800260a:	b948      	cbnz	r0, 8002620 <__smakebuf_r+0x44>
 800260c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002610:	059a      	lsls	r2, r3, #22
 8002612:	d4ef      	bmi.n	80025f4 <__smakebuf_r+0x18>
 8002614:	f023 0303 	bic.w	r3, r3, #3
 8002618:	f043 0302 	orr.w	r3, r3, #2
 800261c:	81a3      	strh	r3, [r4, #12]
 800261e:	e7e3      	b.n	80025e8 <__smakebuf_r+0xc>
 8002620:	4b0d      	ldr	r3, [pc, #52]	; (8002658 <__smakebuf_r+0x7c>)
 8002622:	62b3      	str	r3, [r6, #40]	; 0x28
 8002624:	89a3      	ldrh	r3, [r4, #12]
 8002626:	6020      	str	r0, [r4, #0]
 8002628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800262c:	81a3      	strh	r3, [r4, #12]
 800262e:	9b00      	ldr	r3, [sp, #0]
 8002630:	6120      	str	r0, [r4, #16]
 8002632:	6163      	str	r3, [r4, #20]
 8002634:	9b01      	ldr	r3, [sp, #4]
 8002636:	b15b      	cbz	r3, 8002650 <__smakebuf_r+0x74>
 8002638:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800263c:	4630      	mov	r0, r6
 800263e:	f000 fc01 	bl	8002e44 <_isatty_r>
 8002642:	b128      	cbz	r0, 8002650 <__smakebuf_r+0x74>
 8002644:	89a3      	ldrh	r3, [r4, #12]
 8002646:	f023 0303 	bic.w	r3, r3, #3
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	81a3      	strh	r3, [r4, #12]
 8002650:	89a3      	ldrh	r3, [r4, #12]
 8002652:	431d      	orrs	r5, r3
 8002654:	81a5      	strh	r5, [r4, #12]
 8002656:	e7cd      	b.n	80025f4 <__smakebuf_r+0x18>
 8002658:	08002449 	.word	0x08002449

0800265c <_free_r>:
 800265c:	b538      	push	{r3, r4, r5, lr}
 800265e:	4605      	mov	r5, r0
 8002660:	2900      	cmp	r1, #0
 8002662:	d043      	beq.n	80026ec <_free_r+0x90>
 8002664:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002668:	1f0c      	subs	r4, r1, #4
 800266a:	2b00      	cmp	r3, #0
 800266c:	bfb8      	it	lt
 800266e:	18e4      	addlt	r4, r4, r3
 8002670:	f000 fc18 	bl	8002ea4 <__malloc_lock>
 8002674:	4a1e      	ldr	r2, [pc, #120]	; (80026f0 <_free_r+0x94>)
 8002676:	6813      	ldr	r3, [r2, #0]
 8002678:	4610      	mov	r0, r2
 800267a:	b933      	cbnz	r3, 800268a <_free_r+0x2e>
 800267c:	6063      	str	r3, [r4, #4]
 800267e:	6014      	str	r4, [r2, #0]
 8002680:	4628      	mov	r0, r5
 8002682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002686:	f000 bc0e 	b.w	8002ea6 <__malloc_unlock>
 800268a:	42a3      	cmp	r3, r4
 800268c:	d90b      	bls.n	80026a6 <_free_r+0x4a>
 800268e:	6821      	ldr	r1, [r4, #0]
 8002690:	1862      	adds	r2, r4, r1
 8002692:	4293      	cmp	r3, r2
 8002694:	bf01      	itttt	eq
 8002696:	681a      	ldreq	r2, [r3, #0]
 8002698:	685b      	ldreq	r3, [r3, #4]
 800269a:	1852      	addeq	r2, r2, r1
 800269c:	6022      	streq	r2, [r4, #0]
 800269e:	6063      	str	r3, [r4, #4]
 80026a0:	6004      	str	r4, [r0, #0]
 80026a2:	e7ed      	b.n	8002680 <_free_r+0x24>
 80026a4:	4613      	mov	r3, r2
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	b10a      	cbz	r2, 80026ae <_free_r+0x52>
 80026aa:	42a2      	cmp	r2, r4
 80026ac:	d9fa      	bls.n	80026a4 <_free_r+0x48>
 80026ae:	6819      	ldr	r1, [r3, #0]
 80026b0:	1858      	adds	r0, r3, r1
 80026b2:	42a0      	cmp	r0, r4
 80026b4:	d10b      	bne.n	80026ce <_free_r+0x72>
 80026b6:	6820      	ldr	r0, [r4, #0]
 80026b8:	4401      	add	r1, r0
 80026ba:	1858      	adds	r0, r3, r1
 80026bc:	4282      	cmp	r2, r0
 80026be:	6019      	str	r1, [r3, #0]
 80026c0:	d1de      	bne.n	8002680 <_free_r+0x24>
 80026c2:	6810      	ldr	r0, [r2, #0]
 80026c4:	6852      	ldr	r2, [r2, #4]
 80026c6:	4401      	add	r1, r0
 80026c8:	6019      	str	r1, [r3, #0]
 80026ca:	605a      	str	r2, [r3, #4]
 80026cc:	e7d8      	b.n	8002680 <_free_r+0x24>
 80026ce:	d902      	bls.n	80026d6 <_free_r+0x7a>
 80026d0:	230c      	movs	r3, #12
 80026d2:	602b      	str	r3, [r5, #0]
 80026d4:	e7d4      	b.n	8002680 <_free_r+0x24>
 80026d6:	6820      	ldr	r0, [r4, #0]
 80026d8:	1821      	adds	r1, r4, r0
 80026da:	428a      	cmp	r2, r1
 80026dc:	bf01      	itttt	eq
 80026de:	6811      	ldreq	r1, [r2, #0]
 80026e0:	6852      	ldreq	r2, [r2, #4]
 80026e2:	1809      	addeq	r1, r1, r0
 80026e4:	6021      	streq	r1, [r4, #0]
 80026e6:	6062      	str	r2, [r4, #4]
 80026e8:	605c      	str	r4, [r3, #4]
 80026ea:	e7c9      	b.n	8002680 <_free_r+0x24>
 80026ec:	bd38      	pop	{r3, r4, r5, pc}
 80026ee:	bf00      	nop
 80026f0:	20000090 	.word	0x20000090

080026f4 <_malloc_r>:
 80026f4:	b570      	push	{r4, r5, r6, lr}
 80026f6:	1ccd      	adds	r5, r1, #3
 80026f8:	f025 0503 	bic.w	r5, r5, #3
 80026fc:	3508      	adds	r5, #8
 80026fe:	2d0c      	cmp	r5, #12
 8002700:	bf38      	it	cc
 8002702:	250c      	movcc	r5, #12
 8002704:	2d00      	cmp	r5, #0
 8002706:	4606      	mov	r6, r0
 8002708:	db01      	blt.n	800270e <_malloc_r+0x1a>
 800270a:	42a9      	cmp	r1, r5
 800270c:	d903      	bls.n	8002716 <_malloc_r+0x22>
 800270e:	230c      	movs	r3, #12
 8002710:	6033      	str	r3, [r6, #0]
 8002712:	2000      	movs	r0, #0
 8002714:	bd70      	pop	{r4, r5, r6, pc}
 8002716:	f000 fbc5 	bl	8002ea4 <__malloc_lock>
 800271a:	4a21      	ldr	r2, [pc, #132]	; (80027a0 <_malloc_r+0xac>)
 800271c:	6814      	ldr	r4, [r2, #0]
 800271e:	4621      	mov	r1, r4
 8002720:	b991      	cbnz	r1, 8002748 <_malloc_r+0x54>
 8002722:	4c20      	ldr	r4, [pc, #128]	; (80027a4 <_malloc_r+0xb0>)
 8002724:	6823      	ldr	r3, [r4, #0]
 8002726:	b91b      	cbnz	r3, 8002730 <_malloc_r+0x3c>
 8002728:	4630      	mov	r0, r6
 800272a:	f000 fb03 	bl	8002d34 <_sbrk_r>
 800272e:	6020      	str	r0, [r4, #0]
 8002730:	4629      	mov	r1, r5
 8002732:	4630      	mov	r0, r6
 8002734:	f000 fafe 	bl	8002d34 <_sbrk_r>
 8002738:	1c43      	adds	r3, r0, #1
 800273a:	d124      	bne.n	8002786 <_malloc_r+0x92>
 800273c:	230c      	movs	r3, #12
 800273e:	4630      	mov	r0, r6
 8002740:	6033      	str	r3, [r6, #0]
 8002742:	f000 fbb0 	bl	8002ea6 <__malloc_unlock>
 8002746:	e7e4      	b.n	8002712 <_malloc_r+0x1e>
 8002748:	680b      	ldr	r3, [r1, #0]
 800274a:	1b5b      	subs	r3, r3, r5
 800274c:	d418      	bmi.n	8002780 <_malloc_r+0x8c>
 800274e:	2b0b      	cmp	r3, #11
 8002750:	d90f      	bls.n	8002772 <_malloc_r+0x7e>
 8002752:	600b      	str	r3, [r1, #0]
 8002754:	18cc      	adds	r4, r1, r3
 8002756:	50cd      	str	r5, [r1, r3]
 8002758:	4630      	mov	r0, r6
 800275a:	f000 fba4 	bl	8002ea6 <__malloc_unlock>
 800275e:	f104 000b 	add.w	r0, r4, #11
 8002762:	1d23      	adds	r3, r4, #4
 8002764:	f020 0007 	bic.w	r0, r0, #7
 8002768:	1ac3      	subs	r3, r0, r3
 800276a:	d0d3      	beq.n	8002714 <_malloc_r+0x20>
 800276c:	425a      	negs	r2, r3
 800276e:	50e2      	str	r2, [r4, r3]
 8002770:	e7d0      	b.n	8002714 <_malloc_r+0x20>
 8002772:	684b      	ldr	r3, [r1, #4]
 8002774:	428c      	cmp	r4, r1
 8002776:	bf16      	itet	ne
 8002778:	6063      	strne	r3, [r4, #4]
 800277a:	6013      	streq	r3, [r2, #0]
 800277c:	460c      	movne	r4, r1
 800277e:	e7eb      	b.n	8002758 <_malloc_r+0x64>
 8002780:	460c      	mov	r4, r1
 8002782:	6849      	ldr	r1, [r1, #4]
 8002784:	e7cc      	b.n	8002720 <_malloc_r+0x2c>
 8002786:	1cc4      	adds	r4, r0, #3
 8002788:	f024 0403 	bic.w	r4, r4, #3
 800278c:	42a0      	cmp	r0, r4
 800278e:	d005      	beq.n	800279c <_malloc_r+0xa8>
 8002790:	1a21      	subs	r1, r4, r0
 8002792:	4630      	mov	r0, r6
 8002794:	f000 face 	bl	8002d34 <_sbrk_r>
 8002798:	3001      	adds	r0, #1
 800279a:	d0cf      	beq.n	800273c <_malloc_r+0x48>
 800279c:	6025      	str	r5, [r4, #0]
 800279e:	e7db      	b.n	8002758 <_malloc_r+0x64>
 80027a0:	20000090 	.word	0x20000090
 80027a4:	20000094 	.word	0x20000094

080027a8 <__sfputc_r>:
 80027a8:	6893      	ldr	r3, [r2, #8]
 80027aa:	b410      	push	{r4}
 80027ac:	3b01      	subs	r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	6093      	str	r3, [r2, #8]
 80027b2:	da07      	bge.n	80027c4 <__sfputc_r+0x1c>
 80027b4:	6994      	ldr	r4, [r2, #24]
 80027b6:	42a3      	cmp	r3, r4
 80027b8:	db01      	blt.n	80027be <__sfputc_r+0x16>
 80027ba:	290a      	cmp	r1, #10
 80027bc:	d102      	bne.n	80027c4 <__sfputc_r+0x1c>
 80027be:	bc10      	pop	{r4}
 80027c0:	f7ff bcae 	b.w	8002120 <__swbuf_r>
 80027c4:	6813      	ldr	r3, [r2, #0]
 80027c6:	1c58      	adds	r0, r3, #1
 80027c8:	6010      	str	r0, [r2, #0]
 80027ca:	7019      	strb	r1, [r3, #0]
 80027cc:	4608      	mov	r0, r1
 80027ce:	bc10      	pop	{r4}
 80027d0:	4770      	bx	lr

080027d2 <__sfputs_r>:
 80027d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027d4:	4606      	mov	r6, r0
 80027d6:	460f      	mov	r7, r1
 80027d8:	4614      	mov	r4, r2
 80027da:	18d5      	adds	r5, r2, r3
 80027dc:	42ac      	cmp	r4, r5
 80027de:	d101      	bne.n	80027e4 <__sfputs_r+0x12>
 80027e0:	2000      	movs	r0, #0
 80027e2:	e007      	b.n	80027f4 <__sfputs_r+0x22>
 80027e4:	463a      	mov	r2, r7
 80027e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027ea:	4630      	mov	r0, r6
 80027ec:	f7ff ffdc 	bl	80027a8 <__sfputc_r>
 80027f0:	1c43      	adds	r3, r0, #1
 80027f2:	d1f3      	bne.n	80027dc <__sfputs_r+0xa>
 80027f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080027f8 <_vfiprintf_r>:
 80027f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027fc:	460c      	mov	r4, r1
 80027fe:	b09d      	sub	sp, #116	; 0x74
 8002800:	4617      	mov	r7, r2
 8002802:	461d      	mov	r5, r3
 8002804:	4606      	mov	r6, r0
 8002806:	b118      	cbz	r0, 8002810 <_vfiprintf_r+0x18>
 8002808:	6983      	ldr	r3, [r0, #24]
 800280a:	b90b      	cbnz	r3, 8002810 <_vfiprintf_r+0x18>
 800280c:	f7ff fe38 	bl	8002480 <__sinit>
 8002810:	4b7c      	ldr	r3, [pc, #496]	; (8002a04 <_vfiprintf_r+0x20c>)
 8002812:	429c      	cmp	r4, r3
 8002814:	d158      	bne.n	80028c8 <_vfiprintf_r+0xd0>
 8002816:	6874      	ldr	r4, [r6, #4]
 8002818:	89a3      	ldrh	r3, [r4, #12]
 800281a:	0718      	lsls	r0, r3, #28
 800281c:	d55e      	bpl.n	80028dc <_vfiprintf_r+0xe4>
 800281e:	6923      	ldr	r3, [r4, #16]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d05b      	beq.n	80028dc <_vfiprintf_r+0xe4>
 8002824:	2300      	movs	r3, #0
 8002826:	9309      	str	r3, [sp, #36]	; 0x24
 8002828:	2320      	movs	r3, #32
 800282a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800282e:	2330      	movs	r3, #48	; 0x30
 8002830:	f04f 0b01 	mov.w	fp, #1
 8002834:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002838:	9503      	str	r5, [sp, #12]
 800283a:	46b8      	mov	r8, r7
 800283c:	4645      	mov	r5, r8
 800283e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002842:	b10b      	cbz	r3, 8002848 <_vfiprintf_r+0x50>
 8002844:	2b25      	cmp	r3, #37	; 0x25
 8002846:	d154      	bne.n	80028f2 <_vfiprintf_r+0xfa>
 8002848:	ebb8 0a07 	subs.w	sl, r8, r7
 800284c:	d00b      	beq.n	8002866 <_vfiprintf_r+0x6e>
 800284e:	4653      	mov	r3, sl
 8002850:	463a      	mov	r2, r7
 8002852:	4621      	mov	r1, r4
 8002854:	4630      	mov	r0, r6
 8002856:	f7ff ffbc 	bl	80027d2 <__sfputs_r>
 800285a:	3001      	adds	r0, #1
 800285c:	f000 80c2 	beq.w	80029e4 <_vfiprintf_r+0x1ec>
 8002860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002862:	4453      	add	r3, sl
 8002864:	9309      	str	r3, [sp, #36]	; 0x24
 8002866:	f898 3000 	ldrb.w	r3, [r8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 80ba 	beq.w	80029e4 <_vfiprintf_r+0x1ec>
 8002870:	2300      	movs	r3, #0
 8002872:	f04f 32ff 	mov.w	r2, #4294967295
 8002876:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800287a:	9304      	str	r3, [sp, #16]
 800287c:	9307      	str	r3, [sp, #28]
 800287e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002882:	931a      	str	r3, [sp, #104]	; 0x68
 8002884:	46a8      	mov	r8, r5
 8002886:	2205      	movs	r2, #5
 8002888:	f818 1b01 	ldrb.w	r1, [r8], #1
 800288c:	485e      	ldr	r0, [pc, #376]	; (8002a08 <_vfiprintf_r+0x210>)
 800288e:	f000 fafb 	bl	8002e88 <memchr>
 8002892:	9b04      	ldr	r3, [sp, #16]
 8002894:	bb78      	cbnz	r0, 80028f6 <_vfiprintf_r+0xfe>
 8002896:	06d9      	lsls	r1, r3, #27
 8002898:	bf44      	itt	mi
 800289a:	2220      	movmi	r2, #32
 800289c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80028a0:	071a      	lsls	r2, r3, #28
 80028a2:	bf44      	itt	mi
 80028a4:	222b      	movmi	r2, #43	; 0x2b
 80028a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80028aa:	782a      	ldrb	r2, [r5, #0]
 80028ac:	2a2a      	cmp	r2, #42	; 0x2a
 80028ae:	d02a      	beq.n	8002906 <_vfiprintf_r+0x10e>
 80028b0:	46a8      	mov	r8, r5
 80028b2:	2000      	movs	r0, #0
 80028b4:	250a      	movs	r5, #10
 80028b6:	9a07      	ldr	r2, [sp, #28]
 80028b8:	4641      	mov	r1, r8
 80028ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028be:	3b30      	subs	r3, #48	; 0x30
 80028c0:	2b09      	cmp	r3, #9
 80028c2:	d969      	bls.n	8002998 <_vfiprintf_r+0x1a0>
 80028c4:	b360      	cbz	r0, 8002920 <_vfiprintf_r+0x128>
 80028c6:	e024      	b.n	8002912 <_vfiprintf_r+0x11a>
 80028c8:	4b50      	ldr	r3, [pc, #320]	; (8002a0c <_vfiprintf_r+0x214>)
 80028ca:	429c      	cmp	r4, r3
 80028cc:	d101      	bne.n	80028d2 <_vfiprintf_r+0xda>
 80028ce:	68b4      	ldr	r4, [r6, #8]
 80028d0:	e7a2      	b.n	8002818 <_vfiprintf_r+0x20>
 80028d2:	4b4f      	ldr	r3, [pc, #316]	; (8002a10 <_vfiprintf_r+0x218>)
 80028d4:	429c      	cmp	r4, r3
 80028d6:	bf08      	it	eq
 80028d8:	68f4      	ldreq	r4, [r6, #12]
 80028da:	e79d      	b.n	8002818 <_vfiprintf_r+0x20>
 80028dc:	4621      	mov	r1, r4
 80028de:	4630      	mov	r0, r6
 80028e0:	f7ff fc70 	bl	80021c4 <__swsetup_r>
 80028e4:	2800      	cmp	r0, #0
 80028e6:	d09d      	beq.n	8002824 <_vfiprintf_r+0x2c>
 80028e8:	f04f 30ff 	mov.w	r0, #4294967295
 80028ec:	b01d      	add	sp, #116	; 0x74
 80028ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028f2:	46a8      	mov	r8, r5
 80028f4:	e7a2      	b.n	800283c <_vfiprintf_r+0x44>
 80028f6:	4a44      	ldr	r2, [pc, #272]	; (8002a08 <_vfiprintf_r+0x210>)
 80028f8:	4645      	mov	r5, r8
 80028fa:	1a80      	subs	r0, r0, r2
 80028fc:	fa0b f000 	lsl.w	r0, fp, r0
 8002900:	4318      	orrs	r0, r3
 8002902:	9004      	str	r0, [sp, #16]
 8002904:	e7be      	b.n	8002884 <_vfiprintf_r+0x8c>
 8002906:	9a03      	ldr	r2, [sp, #12]
 8002908:	1d11      	adds	r1, r2, #4
 800290a:	6812      	ldr	r2, [r2, #0]
 800290c:	9103      	str	r1, [sp, #12]
 800290e:	2a00      	cmp	r2, #0
 8002910:	db01      	blt.n	8002916 <_vfiprintf_r+0x11e>
 8002912:	9207      	str	r2, [sp, #28]
 8002914:	e004      	b.n	8002920 <_vfiprintf_r+0x128>
 8002916:	4252      	negs	r2, r2
 8002918:	f043 0302 	orr.w	r3, r3, #2
 800291c:	9207      	str	r2, [sp, #28]
 800291e:	9304      	str	r3, [sp, #16]
 8002920:	f898 3000 	ldrb.w	r3, [r8]
 8002924:	2b2e      	cmp	r3, #46	; 0x2e
 8002926:	d10e      	bne.n	8002946 <_vfiprintf_r+0x14e>
 8002928:	f898 3001 	ldrb.w	r3, [r8, #1]
 800292c:	2b2a      	cmp	r3, #42	; 0x2a
 800292e:	d138      	bne.n	80029a2 <_vfiprintf_r+0x1aa>
 8002930:	9b03      	ldr	r3, [sp, #12]
 8002932:	f108 0802 	add.w	r8, r8, #2
 8002936:	1d1a      	adds	r2, r3, #4
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	9203      	str	r2, [sp, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	bfb8      	it	lt
 8002940:	f04f 33ff 	movlt.w	r3, #4294967295
 8002944:	9305      	str	r3, [sp, #20]
 8002946:	4d33      	ldr	r5, [pc, #204]	; (8002a14 <_vfiprintf_r+0x21c>)
 8002948:	2203      	movs	r2, #3
 800294a:	f898 1000 	ldrb.w	r1, [r8]
 800294e:	4628      	mov	r0, r5
 8002950:	f000 fa9a 	bl	8002e88 <memchr>
 8002954:	b140      	cbz	r0, 8002968 <_vfiprintf_r+0x170>
 8002956:	2340      	movs	r3, #64	; 0x40
 8002958:	1b40      	subs	r0, r0, r5
 800295a:	fa03 f000 	lsl.w	r0, r3, r0
 800295e:	9b04      	ldr	r3, [sp, #16]
 8002960:	f108 0801 	add.w	r8, r8, #1
 8002964:	4303      	orrs	r3, r0
 8002966:	9304      	str	r3, [sp, #16]
 8002968:	f898 1000 	ldrb.w	r1, [r8]
 800296c:	2206      	movs	r2, #6
 800296e:	482a      	ldr	r0, [pc, #168]	; (8002a18 <_vfiprintf_r+0x220>)
 8002970:	f108 0701 	add.w	r7, r8, #1
 8002974:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002978:	f000 fa86 	bl	8002e88 <memchr>
 800297c:	2800      	cmp	r0, #0
 800297e:	d037      	beq.n	80029f0 <_vfiprintf_r+0x1f8>
 8002980:	4b26      	ldr	r3, [pc, #152]	; (8002a1c <_vfiprintf_r+0x224>)
 8002982:	bb1b      	cbnz	r3, 80029cc <_vfiprintf_r+0x1d4>
 8002984:	9b03      	ldr	r3, [sp, #12]
 8002986:	3307      	adds	r3, #7
 8002988:	f023 0307 	bic.w	r3, r3, #7
 800298c:	3308      	adds	r3, #8
 800298e:	9303      	str	r3, [sp, #12]
 8002990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002992:	444b      	add	r3, r9
 8002994:	9309      	str	r3, [sp, #36]	; 0x24
 8002996:	e750      	b.n	800283a <_vfiprintf_r+0x42>
 8002998:	fb05 3202 	mla	r2, r5, r2, r3
 800299c:	2001      	movs	r0, #1
 800299e:	4688      	mov	r8, r1
 80029a0:	e78a      	b.n	80028b8 <_vfiprintf_r+0xc0>
 80029a2:	2300      	movs	r3, #0
 80029a4:	250a      	movs	r5, #10
 80029a6:	4619      	mov	r1, r3
 80029a8:	f108 0801 	add.w	r8, r8, #1
 80029ac:	9305      	str	r3, [sp, #20]
 80029ae:	4640      	mov	r0, r8
 80029b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029b4:	3a30      	subs	r2, #48	; 0x30
 80029b6:	2a09      	cmp	r2, #9
 80029b8:	d903      	bls.n	80029c2 <_vfiprintf_r+0x1ca>
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0c3      	beq.n	8002946 <_vfiprintf_r+0x14e>
 80029be:	9105      	str	r1, [sp, #20]
 80029c0:	e7c1      	b.n	8002946 <_vfiprintf_r+0x14e>
 80029c2:	fb05 2101 	mla	r1, r5, r1, r2
 80029c6:	2301      	movs	r3, #1
 80029c8:	4680      	mov	r8, r0
 80029ca:	e7f0      	b.n	80029ae <_vfiprintf_r+0x1b6>
 80029cc:	ab03      	add	r3, sp, #12
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	4622      	mov	r2, r4
 80029d2:	4b13      	ldr	r3, [pc, #76]	; (8002a20 <_vfiprintf_r+0x228>)
 80029d4:	a904      	add	r1, sp, #16
 80029d6:	4630      	mov	r0, r6
 80029d8:	f3af 8000 	nop.w
 80029dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80029e0:	4681      	mov	r9, r0
 80029e2:	d1d5      	bne.n	8002990 <_vfiprintf_r+0x198>
 80029e4:	89a3      	ldrh	r3, [r4, #12]
 80029e6:	065b      	lsls	r3, r3, #25
 80029e8:	f53f af7e 	bmi.w	80028e8 <_vfiprintf_r+0xf0>
 80029ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80029ee:	e77d      	b.n	80028ec <_vfiprintf_r+0xf4>
 80029f0:	ab03      	add	r3, sp, #12
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	4622      	mov	r2, r4
 80029f6:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <_vfiprintf_r+0x228>)
 80029f8:	a904      	add	r1, sp, #16
 80029fa:	4630      	mov	r0, r6
 80029fc:	f000 f888 	bl	8002b10 <_printf_i>
 8002a00:	e7ec      	b.n	80029dc <_vfiprintf_r+0x1e4>
 8002a02:	bf00      	nop
 8002a04:	08002f54 	.word	0x08002f54
 8002a08:	08002f94 	.word	0x08002f94
 8002a0c:	08002f74 	.word	0x08002f74
 8002a10:	08002f34 	.word	0x08002f34
 8002a14:	08002f9a 	.word	0x08002f9a
 8002a18:	08002f9e 	.word	0x08002f9e
 8002a1c:	00000000 	.word	0x00000000
 8002a20:	080027d3 	.word	0x080027d3

08002a24 <_printf_common>:
 8002a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a28:	4691      	mov	r9, r2
 8002a2a:	461f      	mov	r7, r3
 8002a2c:	688a      	ldr	r2, [r1, #8]
 8002a2e:	690b      	ldr	r3, [r1, #16]
 8002a30:	4606      	mov	r6, r0
 8002a32:	4293      	cmp	r3, r2
 8002a34:	bfb8      	it	lt
 8002a36:	4613      	movlt	r3, r2
 8002a38:	f8c9 3000 	str.w	r3, [r9]
 8002a3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a40:	460c      	mov	r4, r1
 8002a42:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a46:	b112      	cbz	r2, 8002a4e <_printf_common+0x2a>
 8002a48:	3301      	adds	r3, #1
 8002a4a:	f8c9 3000 	str.w	r3, [r9]
 8002a4e:	6823      	ldr	r3, [r4, #0]
 8002a50:	0699      	lsls	r1, r3, #26
 8002a52:	bf42      	ittt	mi
 8002a54:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002a58:	3302      	addmi	r3, #2
 8002a5a:	f8c9 3000 	strmi.w	r3, [r9]
 8002a5e:	6825      	ldr	r5, [r4, #0]
 8002a60:	f015 0506 	ands.w	r5, r5, #6
 8002a64:	d107      	bne.n	8002a76 <_printf_common+0x52>
 8002a66:	f104 0a19 	add.w	sl, r4, #25
 8002a6a:	68e3      	ldr	r3, [r4, #12]
 8002a6c:	f8d9 2000 	ldr.w	r2, [r9]
 8002a70:	1a9b      	subs	r3, r3, r2
 8002a72:	42ab      	cmp	r3, r5
 8002a74:	dc29      	bgt.n	8002aca <_printf_common+0xa6>
 8002a76:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002a7a:	6822      	ldr	r2, [r4, #0]
 8002a7c:	3300      	adds	r3, #0
 8002a7e:	bf18      	it	ne
 8002a80:	2301      	movne	r3, #1
 8002a82:	0692      	lsls	r2, r2, #26
 8002a84:	d42e      	bmi.n	8002ae4 <_printf_common+0xc0>
 8002a86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a8a:	4639      	mov	r1, r7
 8002a8c:	4630      	mov	r0, r6
 8002a8e:	47c0      	blx	r8
 8002a90:	3001      	adds	r0, #1
 8002a92:	d021      	beq.n	8002ad8 <_printf_common+0xb4>
 8002a94:	6823      	ldr	r3, [r4, #0]
 8002a96:	68e5      	ldr	r5, [r4, #12]
 8002a98:	f003 0306 	and.w	r3, r3, #6
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	bf18      	it	ne
 8002aa0:	2500      	movne	r5, #0
 8002aa2:	f8d9 2000 	ldr.w	r2, [r9]
 8002aa6:	f04f 0900 	mov.w	r9, #0
 8002aaa:	bf08      	it	eq
 8002aac:	1aad      	subeq	r5, r5, r2
 8002aae:	68a3      	ldr	r3, [r4, #8]
 8002ab0:	6922      	ldr	r2, [r4, #16]
 8002ab2:	bf08      	it	eq
 8002ab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	bfc4      	itt	gt
 8002abc:	1a9b      	subgt	r3, r3, r2
 8002abe:	18ed      	addgt	r5, r5, r3
 8002ac0:	341a      	adds	r4, #26
 8002ac2:	454d      	cmp	r5, r9
 8002ac4:	d11a      	bne.n	8002afc <_printf_common+0xd8>
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	e008      	b.n	8002adc <_printf_common+0xb8>
 8002aca:	2301      	movs	r3, #1
 8002acc:	4652      	mov	r2, sl
 8002ace:	4639      	mov	r1, r7
 8002ad0:	4630      	mov	r0, r6
 8002ad2:	47c0      	blx	r8
 8002ad4:	3001      	adds	r0, #1
 8002ad6:	d103      	bne.n	8002ae0 <_printf_common+0xbc>
 8002ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8002adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ae0:	3501      	adds	r5, #1
 8002ae2:	e7c2      	b.n	8002a6a <_printf_common+0x46>
 8002ae4:	2030      	movs	r0, #48	; 0x30
 8002ae6:	18e1      	adds	r1, r4, r3
 8002ae8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002aec:	1c5a      	adds	r2, r3, #1
 8002aee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002af2:	4422      	add	r2, r4
 8002af4:	3302      	adds	r3, #2
 8002af6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002afa:	e7c4      	b.n	8002a86 <_printf_common+0x62>
 8002afc:	2301      	movs	r3, #1
 8002afe:	4622      	mov	r2, r4
 8002b00:	4639      	mov	r1, r7
 8002b02:	4630      	mov	r0, r6
 8002b04:	47c0      	blx	r8
 8002b06:	3001      	adds	r0, #1
 8002b08:	d0e6      	beq.n	8002ad8 <_printf_common+0xb4>
 8002b0a:	f109 0901 	add.w	r9, r9, #1
 8002b0e:	e7d8      	b.n	8002ac2 <_printf_common+0x9e>

08002b10 <_printf_i>:
 8002b10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b14:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002b18:	460c      	mov	r4, r1
 8002b1a:	7e09      	ldrb	r1, [r1, #24]
 8002b1c:	b085      	sub	sp, #20
 8002b1e:	296e      	cmp	r1, #110	; 0x6e
 8002b20:	4617      	mov	r7, r2
 8002b22:	4606      	mov	r6, r0
 8002b24:	4698      	mov	r8, r3
 8002b26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002b28:	f000 80b3 	beq.w	8002c92 <_printf_i+0x182>
 8002b2c:	d822      	bhi.n	8002b74 <_printf_i+0x64>
 8002b2e:	2963      	cmp	r1, #99	; 0x63
 8002b30:	d036      	beq.n	8002ba0 <_printf_i+0x90>
 8002b32:	d80a      	bhi.n	8002b4a <_printf_i+0x3a>
 8002b34:	2900      	cmp	r1, #0
 8002b36:	f000 80b9 	beq.w	8002cac <_printf_i+0x19c>
 8002b3a:	2958      	cmp	r1, #88	; 0x58
 8002b3c:	f000 8083 	beq.w	8002c46 <_printf_i+0x136>
 8002b40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b44:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002b48:	e032      	b.n	8002bb0 <_printf_i+0xa0>
 8002b4a:	2964      	cmp	r1, #100	; 0x64
 8002b4c:	d001      	beq.n	8002b52 <_printf_i+0x42>
 8002b4e:	2969      	cmp	r1, #105	; 0x69
 8002b50:	d1f6      	bne.n	8002b40 <_printf_i+0x30>
 8002b52:	6820      	ldr	r0, [r4, #0]
 8002b54:	6813      	ldr	r3, [r2, #0]
 8002b56:	0605      	lsls	r5, r0, #24
 8002b58:	f103 0104 	add.w	r1, r3, #4
 8002b5c:	d52a      	bpl.n	8002bb4 <_printf_i+0xa4>
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6011      	str	r1, [r2, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	da03      	bge.n	8002b6e <_printf_i+0x5e>
 8002b66:	222d      	movs	r2, #45	; 0x2d
 8002b68:	425b      	negs	r3, r3
 8002b6a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002b6e:	486f      	ldr	r0, [pc, #444]	; (8002d2c <_printf_i+0x21c>)
 8002b70:	220a      	movs	r2, #10
 8002b72:	e039      	b.n	8002be8 <_printf_i+0xd8>
 8002b74:	2973      	cmp	r1, #115	; 0x73
 8002b76:	f000 809d 	beq.w	8002cb4 <_printf_i+0x1a4>
 8002b7a:	d808      	bhi.n	8002b8e <_printf_i+0x7e>
 8002b7c:	296f      	cmp	r1, #111	; 0x6f
 8002b7e:	d020      	beq.n	8002bc2 <_printf_i+0xb2>
 8002b80:	2970      	cmp	r1, #112	; 0x70
 8002b82:	d1dd      	bne.n	8002b40 <_printf_i+0x30>
 8002b84:	6823      	ldr	r3, [r4, #0]
 8002b86:	f043 0320 	orr.w	r3, r3, #32
 8002b8a:	6023      	str	r3, [r4, #0]
 8002b8c:	e003      	b.n	8002b96 <_printf_i+0x86>
 8002b8e:	2975      	cmp	r1, #117	; 0x75
 8002b90:	d017      	beq.n	8002bc2 <_printf_i+0xb2>
 8002b92:	2978      	cmp	r1, #120	; 0x78
 8002b94:	d1d4      	bne.n	8002b40 <_printf_i+0x30>
 8002b96:	2378      	movs	r3, #120	; 0x78
 8002b98:	4865      	ldr	r0, [pc, #404]	; (8002d30 <_printf_i+0x220>)
 8002b9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b9e:	e055      	b.n	8002c4c <_printf_i+0x13c>
 8002ba0:	6813      	ldr	r3, [r2, #0]
 8002ba2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ba6:	1d19      	adds	r1, r3, #4
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6011      	str	r1, [r2, #0]
 8002bac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e08c      	b.n	8002cce <_printf_i+0x1be>
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002bba:	6011      	str	r1, [r2, #0]
 8002bbc:	bf18      	it	ne
 8002bbe:	b21b      	sxthne	r3, r3
 8002bc0:	e7cf      	b.n	8002b62 <_printf_i+0x52>
 8002bc2:	6813      	ldr	r3, [r2, #0]
 8002bc4:	6825      	ldr	r5, [r4, #0]
 8002bc6:	1d18      	adds	r0, r3, #4
 8002bc8:	6010      	str	r0, [r2, #0]
 8002bca:	0628      	lsls	r0, r5, #24
 8002bcc:	d501      	bpl.n	8002bd2 <_printf_i+0xc2>
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	e002      	b.n	8002bd8 <_printf_i+0xc8>
 8002bd2:	0668      	lsls	r0, r5, #25
 8002bd4:	d5fb      	bpl.n	8002bce <_printf_i+0xbe>
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	296f      	cmp	r1, #111	; 0x6f
 8002bda:	bf14      	ite	ne
 8002bdc:	220a      	movne	r2, #10
 8002bde:	2208      	moveq	r2, #8
 8002be0:	4852      	ldr	r0, [pc, #328]	; (8002d2c <_printf_i+0x21c>)
 8002be2:	2100      	movs	r1, #0
 8002be4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002be8:	6865      	ldr	r5, [r4, #4]
 8002bea:	2d00      	cmp	r5, #0
 8002bec:	60a5      	str	r5, [r4, #8]
 8002bee:	f2c0 8095 	blt.w	8002d1c <_printf_i+0x20c>
 8002bf2:	6821      	ldr	r1, [r4, #0]
 8002bf4:	f021 0104 	bic.w	r1, r1, #4
 8002bf8:	6021      	str	r1, [r4, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d13d      	bne.n	8002c7a <_printf_i+0x16a>
 8002bfe:	2d00      	cmp	r5, #0
 8002c00:	f040 808e 	bne.w	8002d20 <_printf_i+0x210>
 8002c04:	4665      	mov	r5, ip
 8002c06:	2a08      	cmp	r2, #8
 8002c08:	d10b      	bne.n	8002c22 <_printf_i+0x112>
 8002c0a:	6823      	ldr	r3, [r4, #0]
 8002c0c:	07db      	lsls	r3, r3, #31
 8002c0e:	d508      	bpl.n	8002c22 <_printf_i+0x112>
 8002c10:	6923      	ldr	r3, [r4, #16]
 8002c12:	6862      	ldr	r2, [r4, #4]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	bfde      	ittt	le
 8002c18:	2330      	movle	r3, #48	; 0x30
 8002c1a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c1e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c22:	ebac 0305 	sub.w	r3, ip, r5
 8002c26:	6123      	str	r3, [r4, #16]
 8002c28:	f8cd 8000 	str.w	r8, [sp]
 8002c2c:	463b      	mov	r3, r7
 8002c2e:	aa03      	add	r2, sp, #12
 8002c30:	4621      	mov	r1, r4
 8002c32:	4630      	mov	r0, r6
 8002c34:	f7ff fef6 	bl	8002a24 <_printf_common>
 8002c38:	3001      	adds	r0, #1
 8002c3a:	d14d      	bne.n	8002cd8 <_printf_i+0x1c8>
 8002c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c40:	b005      	add	sp, #20
 8002c42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c46:	4839      	ldr	r0, [pc, #228]	; (8002d2c <_printf_i+0x21c>)
 8002c48:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002c4c:	6813      	ldr	r3, [r2, #0]
 8002c4e:	6821      	ldr	r1, [r4, #0]
 8002c50:	1d1d      	adds	r5, r3, #4
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6015      	str	r5, [r2, #0]
 8002c56:	060a      	lsls	r2, r1, #24
 8002c58:	d50b      	bpl.n	8002c72 <_printf_i+0x162>
 8002c5a:	07ca      	lsls	r2, r1, #31
 8002c5c:	bf44      	itt	mi
 8002c5e:	f041 0120 	orrmi.w	r1, r1, #32
 8002c62:	6021      	strmi	r1, [r4, #0]
 8002c64:	b91b      	cbnz	r3, 8002c6e <_printf_i+0x15e>
 8002c66:	6822      	ldr	r2, [r4, #0]
 8002c68:	f022 0220 	bic.w	r2, r2, #32
 8002c6c:	6022      	str	r2, [r4, #0]
 8002c6e:	2210      	movs	r2, #16
 8002c70:	e7b7      	b.n	8002be2 <_printf_i+0xd2>
 8002c72:	064d      	lsls	r5, r1, #25
 8002c74:	bf48      	it	mi
 8002c76:	b29b      	uxthmi	r3, r3
 8002c78:	e7ef      	b.n	8002c5a <_printf_i+0x14a>
 8002c7a:	4665      	mov	r5, ip
 8002c7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c80:	fb02 3311 	mls	r3, r2, r1, r3
 8002c84:	5cc3      	ldrb	r3, [r0, r3]
 8002c86:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	2900      	cmp	r1, #0
 8002c8e:	d1f5      	bne.n	8002c7c <_printf_i+0x16c>
 8002c90:	e7b9      	b.n	8002c06 <_printf_i+0xf6>
 8002c92:	6813      	ldr	r3, [r2, #0]
 8002c94:	6825      	ldr	r5, [r4, #0]
 8002c96:	1d18      	adds	r0, r3, #4
 8002c98:	6961      	ldr	r1, [r4, #20]
 8002c9a:	6010      	str	r0, [r2, #0]
 8002c9c:	0628      	lsls	r0, r5, #24
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	d501      	bpl.n	8002ca6 <_printf_i+0x196>
 8002ca2:	6019      	str	r1, [r3, #0]
 8002ca4:	e002      	b.n	8002cac <_printf_i+0x19c>
 8002ca6:	066a      	lsls	r2, r5, #25
 8002ca8:	d5fb      	bpl.n	8002ca2 <_printf_i+0x192>
 8002caa:	8019      	strh	r1, [r3, #0]
 8002cac:	2300      	movs	r3, #0
 8002cae:	4665      	mov	r5, ip
 8002cb0:	6123      	str	r3, [r4, #16]
 8002cb2:	e7b9      	b.n	8002c28 <_printf_i+0x118>
 8002cb4:	6813      	ldr	r3, [r2, #0]
 8002cb6:	1d19      	adds	r1, r3, #4
 8002cb8:	6011      	str	r1, [r2, #0]
 8002cba:	681d      	ldr	r5, [r3, #0]
 8002cbc:	6862      	ldr	r2, [r4, #4]
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	4628      	mov	r0, r5
 8002cc2:	f000 f8e1 	bl	8002e88 <memchr>
 8002cc6:	b108      	cbz	r0, 8002ccc <_printf_i+0x1bc>
 8002cc8:	1b40      	subs	r0, r0, r5
 8002cca:	6060      	str	r0, [r4, #4]
 8002ccc:	6863      	ldr	r3, [r4, #4]
 8002cce:	6123      	str	r3, [r4, #16]
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cd6:	e7a7      	b.n	8002c28 <_printf_i+0x118>
 8002cd8:	6923      	ldr	r3, [r4, #16]
 8002cda:	462a      	mov	r2, r5
 8002cdc:	4639      	mov	r1, r7
 8002cde:	4630      	mov	r0, r6
 8002ce0:	47c0      	blx	r8
 8002ce2:	3001      	adds	r0, #1
 8002ce4:	d0aa      	beq.n	8002c3c <_printf_i+0x12c>
 8002ce6:	6823      	ldr	r3, [r4, #0]
 8002ce8:	079b      	lsls	r3, r3, #30
 8002cea:	d413      	bmi.n	8002d14 <_printf_i+0x204>
 8002cec:	68e0      	ldr	r0, [r4, #12]
 8002cee:	9b03      	ldr	r3, [sp, #12]
 8002cf0:	4298      	cmp	r0, r3
 8002cf2:	bfb8      	it	lt
 8002cf4:	4618      	movlt	r0, r3
 8002cf6:	e7a3      	b.n	8002c40 <_printf_i+0x130>
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	464a      	mov	r2, r9
 8002cfc:	4639      	mov	r1, r7
 8002cfe:	4630      	mov	r0, r6
 8002d00:	47c0      	blx	r8
 8002d02:	3001      	adds	r0, #1
 8002d04:	d09a      	beq.n	8002c3c <_printf_i+0x12c>
 8002d06:	3501      	adds	r5, #1
 8002d08:	68e3      	ldr	r3, [r4, #12]
 8002d0a:	9a03      	ldr	r2, [sp, #12]
 8002d0c:	1a9b      	subs	r3, r3, r2
 8002d0e:	42ab      	cmp	r3, r5
 8002d10:	dcf2      	bgt.n	8002cf8 <_printf_i+0x1e8>
 8002d12:	e7eb      	b.n	8002cec <_printf_i+0x1dc>
 8002d14:	2500      	movs	r5, #0
 8002d16:	f104 0919 	add.w	r9, r4, #25
 8002d1a:	e7f5      	b.n	8002d08 <_printf_i+0x1f8>
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1ac      	bne.n	8002c7a <_printf_i+0x16a>
 8002d20:	7803      	ldrb	r3, [r0, #0]
 8002d22:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d2a:	e76c      	b.n	8002c06 <_printf_i+0xf6>
 8002d2c:	08002fa5 	.word	0x08002fa5
 8002d30:	08002fb6 	.word	0x08002fb6

08002d34 <_sbrk_r>:
 8002d34:	b538      	push	{r3, r4, r5, lr}
 8002d36:	2300      	movs	r3, #0
 8002d38:	4c05      	ldr	r4, [pc, #20]	; (8002d50 <_sbrk_r+0x1c>)
 8002d3a:	4605      	mov	r5, r0
 8002d3c:	4608      	mov	r0, r1
 8002d3e:	6023      	str	r3, [r4, #0]
 8002d40:	f7fd fcc4 	bl	80006cc <_sbrk>
 8002d44:	1c43      	adds	r3, r0, #1
 8002d46:	d102      	bne.n	8002d4e <_sbrk_r+0x1a>
 8002d48:	6823      	ldr	r3, [r4, #0]
 8002d4a:	b103      	cbz	r3, 8002d4e <_sbrk_r+0x1a>
 8002d4c:	602b      	str	r3, [r5, #0]
 8002d4e:	bd38      	pop	{r3, r4, r5, pc}
 8002d50:	200000f4 	.word	0x200000f4

08002d54 <__sread>:
 8002d54:	b510      	push	{r4, lr}
 8002d56:	460c      	mov	r4, r1
 8002d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d5c:	f000 f8a4 	bl	8002ea8 <_read_r>
 8002d60:	2800      	cmp	r0, #0
 8002d62:	bfab      	itete	ge
 8002d64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002d66:	89a3      	ldrhlt	r3, [r4, #12]
 8002d68:	181b      	addge	r3, r3, r0
 8002d6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002d6e:	bfac      	ite	ge
 8002d70:	6563      	strge	r3, [r4, #84]	; 0x54
 8002d72:	81a3      	strhlt	r3, [r4, #12]
 8002d74:	bd10      	pop	{r4, pc}

08002d76 <__swrite>:
 8002d76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d7a:	461f      	mov	r7, r3
 8002d7c:	898b      	ldrh	r3, [r1, #12]
 8002d7e:	4605      	mov	r5, r0
 8002d80:	05db      	lsls	r3, r3, #23
 8002d82:	460c      	mov	r4, r1
 8002d84:	4616      	mov	r6, r2
 8002d86:	d505      	bpl.n	8002d94 <__swrite+0x1e>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d90:	f000 f868 	bl	8002e64 <_lseek_r>
 8002d94:	89a3      	ldrh	r3, [r4, #12]
 8002d96:	4632      	mov	r2, r6
 8002d98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d9c:	81a3      	strh	r3, [r4, #12]
 8002d9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002da2:	463b      	mov	r3, r7
 8002da4:	4628      	mov	r0, r5
 8002da6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002daa:	f000 b817 	b.w	8002ddc <_write_r>

08002dae <__sseek>:
 8002dae:	b510      	push	{r4, lr}
 8002db0:	460c      	mov	r4, r1
 8002db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002db6:	f000 f855 	bl	8002e64 <_lseek_r>
 8002dba:	1c43      	adds	r3, r0, #1
 8002dbc:	89a3      	ldrh	r3, [r4, #12]
 8002dbe:	bf15      	itete	ne
 8002dc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8002dc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002dc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002dca:	81a3      	strheq	r3, [r4, #12]
 8002dcc:	bf18      	it	ne
 8002dce:	81a3      	strhne	r3, [r4, #12]
 8002dd0:	bd10      	pop	{r4, pc}

08002dd2 <__sclose>:
 8002dd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dd6:	f000 b813 	b.w	8002e00 <_close_r>
	...

08002ddc <_write_r>:
 8002ddc:	b538      	push	{r3, r4, r5, lr}
 8002dde:	4605      	mov	r5, r0
 8002de0:	4608      	mov	r0, r1
 8002de2:	4611      	mov	r1, r2
 8002de4:	2200      	movs	r2, #0
 8002de6:	4c05      	ldr	r4, [pc, #20]	; (8002dfc <_write_r+0x20>)
 8002de8:	6022      	str	r2, [r4, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	f7fd fb55 	bl	800049a <_write>
 8002df0:	1c43      	adds	r3, r0, #1
 8002df2:	d102      	bne.n	8002dfa <_write_r+0x1e>
 8002df4:	6823      	ldr	r3, [r4, #0]
 8002df6:	b103      	cbz	r3, 8002dfa <_write_r+0x1e>
 8002df8:	602b      	str	r3, [r5, #0]
 8002dfa:	bd38      	pop	{r3, r4, r5, pc}
 8002dfc:	200000f4 	.word	0x200000f4

08002e00 <_close_r>:
 8002e00:	b538      	push	{r3, r4, r5, lr}
 8002e02:	2300      	movs	r3, #0
 8002e04:	4c05      	ldr	r4, [pc, #20]	; (8002e1c <_close_r+0x1c>)
 8002e06:	4605      	mov	r5, r0
 8002e08:	4608      	mov	r0, r1
 8002e0a:	6023      	str	r3, [r4, #0]
 8002e0c:	f7fd fc2d 	bl	800066a <_close>
 8002e10:	1c43      	adds	r3, r0, #1
 8002e12:	d102      	bne.n	8002e1a <_close_r+0x1a>
 8002e14:	6823      	ldr	r3, [r4, #0]
 8002e16:	b103      	cbz	r3, 8002e1a <_close_r+0x1a>
 8002e18:	602b      	str	r3, [r5, #0]
 8002e1a:	bd38      	pop	{r3, r4, r5, pc}
 8002e1c:	200000f4 	.word	0x200000f4

08002e20 <_fstat_r>:
 8002e20:	b538      	push	{r3, r4, r5, lr}
 8002e22:	2300      	movs	r3, #0
 8002e24:	4c06      	ldr	r4, [pc, #24]	; (8002e40 <_fstat_r+0x20>)
 8002e26:	4605      	mov	r5, r0
 8002e28:	4608      	mov	r0, r1
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	6023      	str	r3, [r4, #0]
 8002e2e:	f7fd fc27 	bl	8000680 <_fstat>
 8002e32:	1c43      	adds	r3, r0, #1
 8002e34:	d102      	bne.n	8002e3c <_fstat_r+0x1c>
 8002e36:	6823      	ldr	r3, [r4, #0]
 8002e38:	b103      	cbz	r3, 8002e3c <_fstat_r+0x1c>
 8002e3a:	602b      	str	r3, [r5, #0]
 8002e3c:	bd38      	pop	{r3, r4, r5, pc}
 8002e3e:	bf00      	nop
 8002e40:	200000f4 	.word	0x200000f4

08002e44 <_isatty_r>:
 8002e44:	b538      	push	{r3, r4, r5, lr}
 8002e46:	2300      	movs	r3, #0
 8002e48:	4c05      	ldr	r4, [pc, #20]	; (8002e60 <_isatty_r+0x1c>)
 8002e4a:	4605      	mov	r5, r0
 8002e4c:	4608      	mov	r0, r1
 8002e4e:	6023      	str	r3, [r4, #0]
 8002e50:	f7fd fc25 	bl	800069e <_isatty>
 8002e54:	1c43      	adds	r3, r0, #1
 8002e56:	d102      	bne.n	8002e5e <_isatty_r+0x1a>
 8002e58:	6823      	ldr	r3, [r4, #0]
 8002e5a:	b103      	cbz	r3, 8002e5e <_isatty_r+0x1a>
 8002e5c:	602b      	str	r3, [r5, #0]
 8002e5e:	bd38      	pop	{r3, r4, r5, pc}
 8002e60:	200000f4 	.word	0x200000f4

08002e64 <_lseek_r>:
 8002e64:	b538      	push	{r3, r4, r5, lr}
 8002e66:	4605      	mov	r5, r0
 8002e68:	4608      	mov	r0, r1
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	4c05      	ldr	r4, [pc, #20]	; (8002e84 <_lseek_r+0x20>)
 8002e70:	6022      	str	r2, [r4, #0]
 8002e72:	461a      	mov	r2, r3
 8002e74:	f7fd fc1d 	bl	80006b2 <_lseek>
 8002e78:	1c43      	adds	r3, r0, #1
 8002e7a:	d102      	bne.n	8002e82 <_lseek_r+0x1e>
 8002e7c:	6823      	ldr	r3, [r4, #0]
 8002e7e:	b103      	cbz	r3, 8002e82 <_lseek_r+0x1e>
 8002e80:	602b      	str	r3, [r5, #0]
 8002e82:	bd38      	pop	{r3, r4, r5, pc}
 8002e84:	200000f4 	.word	0x200000f4

08002e88 <memchr>:
 8002e88:	b510      	push	{r4, lr}
 8002e8a:	b2c9      	uxtb	r1, r1
 8002e8c:	4402      	add	r2, r0
 8002e8e:	4290      	cmp	r0, r2
 8002e90:	4603      	mov	r3, r0
 8002e92:	d101      	bne.n	8002e98 <memchr+0x10>
 8002e94:	2300      	movs	r3, #0
 8002e96:	e003      	b.n	8002ea0 <memchr+0x18>
 8002e98:	781c      	ldrb	r4, [r3, #0]
 8002e9a:	3001      	adds	r0, #1
 8002e9c:	428c      	cmp	r4, r1
 8002e9e:	d1f6      	bne.n	8002e8e <memchr+0x6>
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	bd10      	pop	{r4, pc}

08002ea4 <__malloc_lock>:
 8002ea4:	4770      	bx	lr

08002ea6 <__malloc_unlock>:
 8002ea6:	4770      	bx	lr

08002ea8 <_read_r>:
 8002ea8:	b538      	push	{r3, r4, r5, lr}
 8002eaa:	4605      	mov	r5, r0
 8002eac:	4608      	mov	r0, r1
 8002eae:	4611      	mov	r1, r2
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	4c05      	ldr	r4, [pc, #20]	; (8002ec8 <_read_r+0x20>)
 8002eb4:	6022      	str	r2, [r4, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	f7fd fbba 	bl	8000630 <_read>
 8002ebc:	1c43      	adds	r3, r0, #1
 8002ebe:	d102      	bne.n	8002ec6 <_read_r+0x1e>
 8002ec0:	6823      	ldr	r3, [r4, #0]
 8002ec2:	b103      	cbz	r3, 8002ec6 <_read_r+0x1e>
 8002ec4:	602b      	str	r3, [r5, #0]
 8002ec6:	bd38      	pop	{r3, r4, r5, pc}
 8002ec8:	200000f4 	.word	0x200000f4

08002ecc <_init>:
 8002ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ece:	bf00      	nop
 8002ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ed2:	bc08      	pop	{r3}
 8002ed4:	469e      	mov	lr, r3
 8002ed6:	4770      	bx	lr

08002ed8 <_fini>:
 8002ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eda:	bf00      	nop
 8002edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ede:	bc08      	pop	{r3}
 8002ee0:	469e      	mov	lr, r3
 8002ee2:	4770      	bx	lr
